
Option Strict On

Imports SyncSoft.Common.Methods
Imports SyncSoft.Common.Classes
Imports SyncSoft.Common.Interfaces
Imports SyncSoft.Common.SQL.Classes
Imports SyncSoft.Common.SQL.Methods
Imports SyncSoft.Security.Methods
Imports System.Collections.Generic

Namespace SQLDb

#Region " Cancer Institute "

    Public Class CancerDiseases : Inherits DBConnect

#Region " Fields "

        Private m_DiseaseNo As String
        Private m_DiseaseCode As String
        Private m_DiseaseName As String
        Private m_CancerDiseaseCategoriesID As String
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property DiseaseNo() As String
            Get
                Return m_DiseaseNo
            End Get
            Set(Value As String)
                m_DiseaseNo = Value
            End Set
        End Property

        Public Property DiseaseCode() As String
            Get
                Return m_DiseaseCode
            End Get
            Set(Value As String)
                m_DiseaseCode = Value
            End Set
        End Property

        Public Property DiseaseName() As String
            Get
                Return m_DiseaseName
            End Get
            Set(Value As String)
                m_DiseaseName = Value
            End Set
        End Property

        Public Property CancerDiseaseCategoriesID() As String
            Get
                Return m_CancerDiseaseCategoriesID
            End Get
            Set(Value As String)
                m_CancerDiseaseCategoriesID = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertCancerDiseases")

            With Parameters
                .Add(New ParameterSQL("DiseaseNo", Me.DiseaseNo))
                .Add(New ParameterSQL("DiseaseCode", Me.DiseaseCode))
                .Add(New ParameterSQL("DiseaseName", Me.DiseaseName))
                .Add(New ParameterSQL("CancerDiseaseCategoriesID", Me.CancerDiseaseCategoriesID))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateCancerDiseases")

            With Parameters
                .Add(New ParameterSQL("DiseaseNo", Me.DiseaseNo))
                .Add(New ParameterSQL("DiseaseCode", Me.DiseaseCode))
                .Add(New ParameterSQL("DiseaseName", Me.DiseaseName))
                .Add(New ParameterSQL("CancerDiseaseCategoriesID", Me.CancerDiseaseCategoriesID))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("CancerDiseases")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "DiseaseNo = '" + Me.DiseaseNo + "'"
            Dim errorPart As String = "Disease No: " + Me.DiseaseNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "CancerDiseases"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("CancerDiseases")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets a disease for the supplied disease no
        ''' </summary>
        ''' <param name="diseaseNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 

        Public Function GetCancerDiseases(diseaseNo As String) As DataSet

            If (diseaseNo = "" OrElse diseaseNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("DiseaseNo", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("DiseaseNo", diseaseNo))
                End With
            End If

            Return Me.Load("uspGetCancerDiseases", "CancerDiseases", Parameters)

        End Function

        Public Function GetCancerDiseasesByDiseaseNo(diseaseNo As String) As DataSet

            ''If (diseaseNo = "" OrElse DiseaseCode = String.Empty) Then
            'With Parameters
            '    .Add(New ParameterSQL("DiseaseNo", Nothing))
            'End With
            'Else
            With Parameters
                .Add(New ParameterSQL("DiseaseNo", diseaseNo))
            End With
            'End If

            Return Me.Load("uspGetCancerDiseasesByDiseaseNo", "CancerDiseases", Parameters)

        End Function

        ''' <summary>
        ''' Returns all diseases that are not hidden
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 

        Public Function GetCancerDiseases() As DataSet
            Return GetCancerDiseases(String.Empty)
        End Function

        Public Function GetNextCancerDiseaseID(diseaseCode As String) As Integer

            With Parameters
                .Add(New ParameterSQL("DiseaseCode", diseaseCode))
                .Add(New ParameterSQL("DiseaseID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextCancerDiseaseID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("DiseaseID")) Then
                    Return CInt(Me.ReadData("DiseaseID"))

                Else : Return 1
                End If

            End If

        End Function

#End Region

    End Class

    Public Class TopologySites : Inherits DBConnect

#Region " Fields "

        Private m_TopographicalNo As String
        Private m_TopologySiteCodeID As String
        Private m_TopologySiteName As String
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property TopographicalNo() As String
            Get
                Return m_TopographicalNo
            End Get
            Set(Value As String)
                m_TopographicalNo = Value
            End Set
        End Property

        Public Property TopologySiteCodeID() As String
            Get
                Return m_TopologySiteCodeID
            End Get
            Set(Value As String)
                m_TopologySiteCodeID = Value
            End Set
        End Property

        Public Property TopologySiteName() As String
            Get
                Return m_TopologySiteName
            End Get
            Set(Value As String)
                m_TopologySiteName = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertTopologySites")

            With Parameters
                .Add(New ParameterSQL("TopographicalNo", Me.TopographicalNo))
                .Add(New ParameterSQL("TopologySiteCodeID", Me.TopologySiteCodeID))
                .Add(New ParameterSQL("TopologySiteName", Me.TopologySiteName))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateTopologySites")

            With Parameters
                .Add(New ParameterSQL("TopographicalNo", Me.TopographicalNo))
                .Add(New ParameterSQL("TopologySiteCodeID", Me.TopologySiteCodeID))
                .Add(New ParameterSQL("TopologySiteName", Me.TopologySiteName))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("TopologySites")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "TopographicalNo = '" + Me.TopographicalNo + "'"
            Dim errorPart As String = "Topographical No: " + Me.TopographicalNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "TopologySites"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("TopologySites")

            Return Parameters

        End Function


        ''' <summary>
        ''' Gets a Topology Sites for the supplied Topographica lNo
        ''' </summary>
        ''' <param name="topographicalNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetTopologySites(topographicalNo As String) As DataSet

            If (topographicalNo = "" OrElse TopologySiteCodeID = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("TopographicalNo", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("TopographicalNo", topographicalNo))
                End With
            End If

            Return Me.Load("uspGetTopologySites", "TopologySites", Parameters)

        End Function

        Public Function GetTopologySites() As DataSet
            Return GetTopologySites(String.Empty)
        End Function


#End Region



    End Class

    Public Class CancerDiagnosis : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_DiseaseNo As String
        Private m_TopographicalNo As String
        Private m_BasisOfDiagnosisID As String
        Private m_CancerStageID As String
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property DiseaseNo() As String
            Get
                Return m_DiseaseNo
            End Get
            Set(Value As String)
                m_DiseaseNo = Value
            End Set
        End Property

        Public Property TopographicalNo() As String
            Get
                Return m_TopographicalNo
            End Get
            Set(Value As String)
                m_TopographicalNo = Value
            End Set
        End Property

        Public Property BasisOfDiagnosisID() As String
            Get
                Return m_BasisOfDiagnosisID
            End Get
            Set(Value As String)
                m_BasisOfDiagnosisID = Value
            End Set
        End Property

        Public Property CancerStageID() As String
            Get
                Return m_CancerStageID
            End Get
            Set(Value As String)
                m_CancerStageID = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditCancerDiagnosis")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("DiseaseNo", Me.DiseaseNo))
                .Add(New ParameterSQL("TopographicalNo", Me.TopographicalNo))
                .Add(New ParameterSQL("BasisOfDiagnosisID", Me.BasisOfDiagnosisID))
                .Add(New ParameterSQL("CancerStageID", Me.CancerStageID))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and DiseaseNo = '" + Me.DiseaseNo + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo + " and DiseaseNo: " + Me.DiseaseNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "CancerDiagnosis"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("CancerDiagnosis")

            Return Parameters

        End Function

        Public Function GetCancerDiagnosis(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetCancerDiagnosis", "CancerDiagnosis", Parameters)

        End Function

        ''' <summary>
        ''' Gets periodic diagnosis of a patient using patients number, start and end dates
        ''' </summary>
        ''' <param name="PatientNo"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDeathCancerDiagnosis(PatientNo As String, startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet

            If (startDate Is Nothing) OrElse (endDate Is Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("PatientNo", PatientNo))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            Else

                With (Parameters)
                    .Add(New ParameterSQL("PatientNo", PatientNo))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            End If

            Return Me.Load("uspGetDeathCancerDiagnosis", "CancerDiagnosis", Parameters)
        End Function

        ''' <summary>
        ''' Gets all cancer diagnosis of a patient using patients number only
        ''' </summary>
        ''' <param name="PatientNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDeathCancerDiagnosis(PatientNo As String) As DataSet
            Return GetDeathCancerDiagnosis(PatientNo, Nothing, Nothing)
        End Function

#End Region

    End Class

    Public Class CancerAwareness : Inherits DBConnect

#Region " Fields "

        Private m_CccpNo As String
        Private m_RegistrationDate As Date
        Private m_Lastname As String
        Private m_FirstName As String
        Private m_MiddleName As String
        Private m_ParticipantInitials As String
        Private m_BirthDate As Date
        Private m_GenderID As String
        Private m_PhoneNo As String
        Private m_Occupation As String
        Private m_AddressOfResidenceLC1 As String
        Private m_AddressOfResidenceLC3 As String
        Private m_ResidenceDistrictID As String
        Private m_AddressOfOriginLC1 As String
        Private m_OriginDistrictID As String
        Private m_PresentingComplaints As String
        Private m_LumpBreastAffected As String
        Private m_LumpComments As String
        Private m_NipplesDischargeBreastAffected As String
        Private m_NippleDischargeComments As String
        Private m_PainBreastAffected As String
        Private m_PainComments As String
        Private m_OthersBreastAffected As String
        Private m_OthersBreastComments As String
        Private m_PVDischargeChecked As Boolean
        Private m_PVDischargeComments As String
        Private m_DyspeniaChecked As Boolean
        Private m_DyspeniaComments As String
        Private m_ContactBleedingChecked As Boolean
        Private m_ContactBleedingComments As String
        Private m_OthersChecked As Boolean
        Private m_OthersComments As String
        Private m_PoorUrineStreamChecked As Boolean
        Private m_PoorUrineStreamComments As String
        Private m_DifficultInUrinationChecked As Boolean
        Private m_DifficultInUrinationComments As String
        Private m_OthersSpecifyChecked As Boolean
        Private m_OthersSpecifyComment As String
        Private m_RelativesDiagnosedwithCancer As Boolean
        Private m_FatherChecked As Boolean
        Private m_FatherTypeOfCancer As String
        Private m_FatherAgeDiagnosed As String
        Private m_MotherChecked As Boolean
        Private m_MotherTypeOfCancer As String
        Private m_MotherAgeDiagnosed As String
        Private m_BrotherChecked As Boolean
        Private m_BrotherTypeOfCancer As String
        Private m_BrotherAgeDiagnosed As String
        Private m_SisterChecked As Boolean
        Private m_SisterTypeOfCancer As String
        Private m_SisterAgeDiagnosed As String
        Private m_UncleChecked As Boolean
        Private m_UncleTypeOfCancer As String
        Private m_UncleAgeDiagnosed As String
        Private m_AuntChecked As Boolean
        Private m_AuntTypeOfCancer As String
        Private m_AuntAgeDiagnosed As String
        Private m_GrandFatherChecked As Boolean
        Private m_GrandFatherTypeOfCancer As String
        Private m_GrandFatherAgeDiagnosed As String
        Private m_GrandMotherChecked As Boolean
        Private m_GrandMotherTypeOfCancer As String
        Private m_GrandMotherAgeDiagnosed As String
        Private m_OthersPersonChecked As Boolean
        Private m_OthersTypeOfCancer As String
        Private m_OthersAgeDiagnosed As String
        Private m_Weight As Single
        Private m_Height As Single
        Private m_BloodPressure As String
        Private m_Pulse As Single
        Private m_CNS As String
        Private m_RS As String
        Private m_CVS As String
        Private m_PA As String
        Private m_MuscloSkeletal As String
        Private m_HeadAndNeck As String
        Private m_Breast As String
        Private m_SpeculumExam As String
        Private m_VIA As String
        Private m_Prostate As String
        Private m_ExamFindingsOthers As String

#End Region

#Region " Properties "

        Public Property CccpNo() As String
            Get
                Return m_CccpNo
            End Get
            Set(Value As String)
                m_CccpNo = Value
            End Set
        End Property

        Public Property RegistrationDate() As Date
            Get
                Return m_RegistrationDate
            End Get
            Set(Value As Date)
                m_RegistrationDate = Value
            End Set
        End Property

        Public Property Lastname() As String
            Get
                Return m_Lastname
            End Get
            Set(Value As String)
                m_Lastname = Value
            End Set
        End Property

        Public Property FirstName() As String
            Get
                Return m_FirstName
            End Get
            Set(Value As String)
                m_FirstName = Value
            End Set
        End Property

        Public Property MiddleName() As String
            Get
                Return m_MiddleName
            End Get
            Set(Value As String)
                m_MiddleName = Value
            End Set
        End Property

        Public Property ParticipantInitials() As String
            Get
                Return m_ParticipantInitials
            End Get
            Set(Value As String)
                m_ParticipantInitials = Value
            End Set
        End Property

        Public Property BirthDate() As Date
            Get
                Return m_BirthDate
            End Get
            Set(Value As Date)
                m_BirthDate = Value
            End Set
        End Property

        Public Property GenderID() As String
            Get
                Return m_GenderID
            End Get
            Set(Value As String)
                m_GenderID = Value
            End Set
        End Property

        Public Property PhoneNo() As String
            Get
                Return m_PhoneNo
            End Get
            Set(Value As String)
                m_PhoneNo = Value
            End Set
        End Property

        Public Property Occupation() As String
            Get
                Return m_Occupation
            End Get
            Set(Value As String)
                m_Occupation = Value
            End Set
        End Property

        Public Property AddressOfResidenceLC1() As String
            Get
                Return m_AddressOfResidenceLC1
            End Get
            Set(Value As String)
                m_AddressOfResidenceLC1 = Value
            End Set
        End Property

        Public Property AddressOfResidenceLC3() As String
            Get
                Return m_AddressOfResidenceLC3
            End Get
            Set(Value As String)
                m_AddressOfResidenceLC3 = Value
            End Set
        End Property

        Public Property ResidenceDistrictID() As String
            Get
                Return m_ResidenceDistrictID
            End Get
            Set(Value As String)
                m_ResidenceDistrictID = Value
            End Set
        End Property

        Public Property AddressOfOriginLC1() As String
            Get
                Return m_AddressOfOriginLC1
            End Get
            Set(Value As String)
                m_AddressOfOriginLC1 = Value
            End Set
        End Property

        Public Property OriginDistrictID() As String
            Get
                Return m_OriginDistrictID
            End Get
            Set(Value As String)
                m_OriginDistrictID = Value
            End Set
        End Property

        Public Property PresentingComplaints() As String
            Get
                Return m_PresentingComplaints
            End Get
            Set(Value As String)
                m_PresentingComplaints = Value
            End Set
        End Property

        Public Property LumpBreastAffected() As String
            Get
                Return m_LumpBreastAffected
            End Get
            Set(Value As String)
                m_LumpBreastAffected = Value
            End Set
        End Property

        Public Property LumpComments() As String
            Get
                Return m_LumpComments
            End Get
            Set(Value As String)
                m_LumpComments = Value
            End Set
        End Property

        Public Property NipplesDischargeBreastAffected() As String
            Get
                Return m_NipplesDischargeBreastAffected
            End Get
            Set(Value As String)
                m_NipplesDischargeBreastAffected = Value
            End Set
        End Property

        Public Property NippleDischargeComments() As String
            Get
                Return m_NippleDischargeComments
            End Get
            Set(Value As String)
                m_NippleDischargeComments = Value
            End Set
        End Property

        Public Property PainBreastAffected() As String
            Get
                Return m_PainBreastAffected
            End Get
            Set(Value As String)
                m_PainBreastAffected = Value
            End Set
        End Property

        Public Property PainComments() As String
            Get
                Return m_PainComments
            End Get
            Set(Value As String)
                m_PainComments = Value
            End Set
        End Property

        Public Property OthersBreastAffected() As String
            Get
                Return m_OthersBreastAffected
            End Get
            Set(Value As String)
                m_OthersBreastAffected = Value
            End Set
        End Property

        Public Property OthersBreastComments() As String
            Get
                Return m_OthersBreastComments
            End Get
            Set(Value As String)
                m_OthersBreastComments = Value
            End Set
        End Property

        Public Property PVDischargeChecked() As Boolean
            Get
                Return m_PVDischargeChecked
            End Get
            Set(Value As Boolean)
                m_PVDischargeChecked = Value
            End Set
        End Property

        Public Property PVDischargeComments() As String
            Get
                Return m_PVDischargeComments
            End Get
            Set(Value As String)
                m_PVDischargeComments = Value
            End Set
        End Property

        Public Property DyspeniaChecked() As Boolean
            Get
                Return m_DyspeniaChecked
            End Get
            Set(Value As Boolean)
                m_DyspeniaChecked = Value
            End Set
        End Property

        Public Property DyspeniaComments() As String
            Get
                Return m_DyspeniaComments
            End Get
            Set(Value As String)
                m_DyspeniaComments = Value
            End Set
        End Property

        Public Property ContactBleedingChecked() As Boolean
            Get
                Return m_ContactBleedingChecked
            End Get
            Set(Value As Boolean)
                m_ContactBleedingChecked = Value
            End Set
        End Property

        Public Property ContactBleedingComments() As String
            Get
                Return m_ContactBleedingComments
            End Get
            Set(Value As String)
                m_ContactBleedingComments = Value
            End Set
        End Property

        Public Property OthersChecked() As Boolean
            Get
                Return m_OthersChecked
            End Get
            Set(Value As Boolean)
                m_OthersChecked = Value
            End Set
        End Property

        Public Property OthersComments() As String
            Get
                Return m_OthersComments
            End Get
            Set(Value As String)
                m_OthersComments = Value
            End Set
        End Property

        Public Property PoorUrineStreamChecked() As Boolean
            Get
                Return m_PoorUrineStreamChecked
            End Get
            Set(Value As Boolean)
                m_PoorUrineStreamChecked = Value
            End Set
        End Property

        Public Property PoorUrineStreamComments() As String
            Get
                Return m_PoorUrineStreamComments
            End Get
            Set(Value As String)
                m_PoorUrineStreamComments = Value
            End Set
        End Property

        Public Property DifficultInUrinationChecked() As Boolean
            Get
                Return m_DifficultInUrinationChecked
            End Get
            Set(Value As Boolean)
                m_DifficultInUrinationChecked = Value
            End Set
        End Property

        Public Property DifficultInUrinationComments() As String
            Get
                Return m_DifficultInUrinationComments
            End Get
            Set(Value As String)
                m_DifficultInUrinationComments = Value
            End Set
        End Property

        Public Property OthersSpecifyChecked() As Boolean
            Get
                Return m_OthersSpecifyChecked
            End Get
            Set(Value As Boolean)
                m_OthersSpecifyChecked = Value
            End Set
        End Property

        Public Property OthersSpecifyComment() As String
            Get
                Return m_OthersSpecifyComment
            End Get
            Set(Value As String)
                m_OthersSpecifyComment = Value
            End Set
        End Property

        Public Property RelativesDiagnosedwithCancer() As Boolean
            Get
                Return m_RelativesDiagnosedwithCancer
            End Get
            Set(Value As Boolean)
                m_RelativesDiagnosedwithCancer = Value
            End Set
        End Property

        Public Property FatherChecked() As Boolean
            Get
                Return m_FatherChecked
            End Get
            Set(Value As Boolean)
                m_FatherChecked = Value
            End Set
        End Property

        Public Property FatherTypeOfCancer() As String
            Get
                Return m_FatherTypeOfCancer
            End Get
            Set(Value As String)
                m_FatherTypeOfCancer = Value
            End Set
        End Property

        Public Property FatherAgeDiagnosed() As String
            Get
                Return m_FatherAgeDiagnosed
            End Get
            Set(Value As String)
                m_FatherAgeDiagnosed = Value
            End Set
        End Property

        Public Property MotherChecked() As Boolean
            Get
                Return m_MotherChecked
            End Get
            Set(Value As Boolean)
                m_MotherChecked = Value
            End Set
        End Property

        Public Property MotherTypeOfCancer() As String
            Get
                Return m_MotherTypeOfCancer
            End Get
            Set(Value As String)
                m_MotherTypeOfCancer = Value
            End Set
        End Property

        Public Property MotherAgeDiagnosed() As String
            Get
                Return m_MotherAgeDiagnosed
            End Get
            Set(Value As String)
                m_MotherAgeDiagnosed = Value
            End Set
        End Property

        Public Property BrotherChecked() As Boolean
            Get
                Return m_BrotherChecked
            End Get
            Set(Value As Boolean)
                m_BrotherChecked = Value
            End Set
        End Property

        Public Property BrotherTypeOfCancer() As String
            Get
                Return m_BrotherTypeOfCancer
            End Get
            Set(Value As String)
                m_BrotherTypeOfCancer = Value
            End Set
        End Property

        Public Property BrotherAgeDiagnosed() As String
            Get
                Return m_BrotherAgeDiagnosed
            End Get
            Set(Value As String)
                m_BrotherAgeDiagnosed = Value
            End Set
        End Property

        Public Property SisterChecked() As Boolean
            Get
                Return m_SisterChecked
            End Get
            Set(Value As Boolean)
                m_SisterChecked = Value
            End Set
        End Property

        Public Property SisterTypeOfCancer() As String
            Get
                Return m_SisterTypeOfCancer
            End Get
            Set(Value As String)
                m_SisterTypeOfCancer = Value
            End Set
        End Property

        Public Property SisterAgeDiagnosed() As String
            Get
                Return m_SisterAgeDiagnosed
            End Get
            Set(Value As String)
                m_SisterAgeDiagnosed = Value
            End Set
        End Property

        Public Property UncleChecked() As Boolean
            Get
                Return m_UncleChecked
            End Get
            Set(Value As Boolean)
                m_UncleChecked = Value
            End Set
        End Property

        Public Property UncleTypeOfCancer() As String
            Get
                Return m_UncleTypeOfCancer
            End Get
            Set(Value As String)
                m_UncleTypeOfCancer = Value
            End Set
        End Property

        Public Property UncleAgeDiagnosed() As String
            Get
                Return m_UncleAgeDiagnosed
            End Get
            Set(Value As String)
                m_UncleAgeDiagnosed = Value
            End Set
        End Property

        Public Property AuntChecked() As Boolean
            Get
                Return m_AuntChecked
            End Get
            Set(Value As Boolean)
                m_AuntChecked = Value
            End Set
        End Property

        Public Property AuntTypeOfCancer() As String
            Get
                Return m_AuntTypeOfCancer
            End Get
            Set(Value As String)
                m_AuntTypeOfCancer = Value
            End Set
        End Property

        Public Property AuntAgeDiagnosed() As String
            Get
                Return m_AuntAgeDiagnosed
            End Get
            Set(Value As String)
                m_AuntAgeDiagnosed = Value
            End Set
        End Property

        Public Property GrandFatherChecked() As Boolean
            Get
                Return m_GrandFatherChecked
            End Get
            Set(Value As Boolean)
                m_GrandFatherChecked = Value
            End Set
        End Property

        Public Property GrandFatherTypeOfCancer() As String
            Get
                Return m_GrandFatherTypeOfCancer
            End Get
            Set(Value As String)
                m_GrandFatherTypeOfCancer = Value
            End Set
        End Property

        Public Property GrandFatherAgeDiagnosed() As String
            Get
                Return m_GrandFatherAgeDiagnosed
            End Get
            Set(Value As String)
                m_GrandFatherAgeDiagnosed = Value
            End Set
        End Property

        Public Property GrandMotherChecked() As Boolean
            Get
                Return m_GrandMotherChecked
            End Get
            Set(Value As Boolean)
                m_GrandMotherChecked = Value
            End Set
        End Property

        Public Property GrandMotherTypeOfCancer() As String
            Get
                Return m_GrandMotherTypeOfCancer
            End Get
            Set(Value As String)
                m_GrandMotherTypeOfCancer = Value
            End Set
        End Property

        Public Property GrandMotherAgeDiagnosed() As String
            Get
                Return m_GrandMotherAgeDiagnosed
            End Get
            Set(Value As String)
                m_GrandMotherAgeDiagnosed = Value
            End Set
        End Property

        Public Property OthersPersonChecked() As Boolean
            Get
                Return m_OthersPersonChecked
            End Get
            Set(Value As Boolean)
                m_OthersPersonChecked = Value
            End Set
        End Property

        Public Property OthersTypeOfCancer() As String
            Get
                Return m_OthersTypeOfCancer
            End Get
            Set(Value As String)
                m_OthersTypeOfCancer = Value
            End Set
        End Property

        Public Property OthersAgeDiagnosed() As String
            Get
                Return m_OthersAgeDiagnosed
            End Get
            Set(Value As String)
                m_OthersAgeDiagnosed = Value
            End Set
        End Property

        Public Property Weight() As Single
            Get
                Return m_Weight
            End Get
            Set(Value As Single)
                m_Weight = Value
            End Set
        End Property

        Public Property Height() As Single
            Get
                Return m_Height
            End Get
            Set(Value As Single)
                m_Height = Value
            End Set
        End Property

        Public Property BloodPressure() As String
            Get
                Return m_BloodPressure
            End Get
            Set(Value As String)
                m_BloodPressure = Value
            End Set
        End Property

        Public Property Pulse() As Single
            Get
                Return m_Pulse
            End Get
            Set(Value As Single)
                m_Pulse = Value
            End Set
        End Property

        Public Property CNS() As String
            Get
                Return m_CNS
            End Get
            Set(Value As String)
                m_CNS = Value
            End Set
        End Property

        Public Property RS() As String
            Get
                Return m_RS
            End Get
            Set(Value As String)
                m_RS = Value
            End Set
        End Property

        Public Property CVS() As String
            Get
                Return m_CVS
            End Get
            Set(Value As String)
                m_CVS = Value
            End Set
        End Property

        Public Property PA() As String
            Get
                Return m_PA
            End Get
            Set(Value As String)
                m_PA = Value
            End Set
        End Property

        Public Property MuscloSkeletal() As String
            Get
                Return m_MuscloSkeletal
            End Get
            Set(Value As String)
                m_MuscloSkeletal = Value
            End Set
        End Property

        Public Property HeadAndNeck() As String
            Get
                Return m_HeadAndNeck
            End Get
            Set(Value As String)
                m_HeadAndNeck = Value
            End Set
        End Property

        Public Property Breast() As String
            Get
                Return m_Breast
            End Get
            Set(Value As String)
                m_Breast = Value
            End Set
        End Property

        Public Property SpeculumExam() As String
            Get
                Return m_SpeculumExam
            End Get
            Set(Value As String)
                m_SpeculumExam = Value
            End Set
        End Property

        Public Property VIA() As String
            Get
                Return m_VIA
            End Get
            Set(Value As String)
                m_VIA = Value
            End Set
        End Property

        Public Property Prostate() As String
            Get
                Return m_Prostate
            End Get
            Set(Value As String)
                m_Prostate = Value
            End Set
        End Property

        Public Property ExamFindingsOthers() As String
            Get
                Return m_ExamFindingsOthers
            End Get
            Set(Value As String)
                m_ExamFindingsOthers = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertCancerAwareness")

            With Parameters
                .Add(New ParameterSQL("CccpNo", Me.CccpNo))
                .Add(New ParameterSQL("RegistrationDate", Me.RegistrationDate))
                .Add(New ParameterSQL("Lastname", Me.Lastname))
                .Add(New ParameterSQL("FirstName", Me.FirstName))
                .Add(New ParameterSQL("MiddleName", Me.MiddleName))
                .Add(New ParameterSQL("ParticipantInitials", Me.ParticipantInitials))
                .Add(New ParameterSQL("BirthDate", Me.BirthDate))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("PhoneNo", Me.PhoneNo))
                .Add(New ParameterSQL("Occupation", Me.Occupation))
                .Add(New ParameterSQL("AddressOfResidenceLC1", Me.AddressOfResidenceLC1))
                .Add(New ParameterSQL("AddressOfResidenceLC3", Me.AddressOfResidenceLC3))
                .Add(New ParameterSQL("ResidenceDistrictID", Me.ResidenceDistrictID))
                .Add(New ParameterSQL("AddressOfOriginLC1", Me.AddressOfOriginLC1))
                .Add(New ParameterSQL("OriginDistrictID", Me.OriginDistrictID))
                .Add(New ParameterSQL("PresentingComplaints", Me.PresentingComplaints))
                .Add(New ParameterSQL("LumpBreastAffected", Me.LumpBreastAffected))
                .Add(New ParameterSQL("LumpComments", Me.LumpComments))
                .Add(New ParameterSQL("NipplesDischargeBreastAffected", Me.NipplesDischargeBreastAffected))
                .Add(New ParameterSQL("NippleDischargeComments", Me.NippleDischargeComments))
                .Add(New ParameterSQL("PainBreastAffected", Me.PainBreastAffected))
                .Add(New ParameterSQL("PainComments", Me.PainComments))
                .Add(New ParameterSQL("OthersBreastAffected", Me.OthersBreastAffected))
                .Add(New ParameterSQL("OthersBreastComments", Me.OthersBreastComments))
                .Add(New ParameterSQL("PVDischargeChecked", Me.PVDischargeChecked))
                .Add(New ParameterSQL("PVDischargeComments", Me.PVDischargeComments))
                .Add(New ParameterSQL("DyspeniaChecked", Me.DyspeniaChecked))
                .Add(New ParameterSQL("DyspeniaComments", Me.DyspeniaComments))
                .Add(New ParameterSQL("ContactBleedingChecked", Me.ContactBleedingChecked))
                .Add(New ParameterSQL("ContactBleedingComments", Me.ContactBleedingComments))
                .Add(New ParameterSQL("OthersChecked", Me.OthersChecked))
                .Add(New ParameterSQL("OthersComments", Me.OthersComments))
                .Add(New ParameterSQL("PoorUrineStreamChecked", Me.PoorUrineStreamChecked))
                .Add(New ParameterSQL("PoorUrineStreamComments", Me.PoorUrineStreamComments))
                .Add(New ParameterSQL("DifficultInUrinationChecked", Me.DifficultInUrinationChecked))
                .Add(New ParameterSQL("DifficultInUrinationComments", Me.DifficultInUrinationComments))
                .Add(New ParameterSQL("OthersSpecifyChecked", Me.OthersSpecifyChecked))
                .Add(New ParameterSQL("OthersSpecifyComment", Me.OthersSpecifyComment))
                .Add(New ParameterSQL("RelativesDiagnosedwithCancer", Me.RelativesDiagnosedwithCancer))
                .Add(New ParameterSQL("FatherChecked", Me.FatherChecked))
                .Add(New ParameterSQL("FatherTypeOfCancer", Me.FatherTypeOfCancer))
                .Add(New ParameterSQL("FatherAgeDiagnosed", Me.FatherAgeDiagnosed))
                .Add(New ParameterSQL("MotherChecked", Me.MotherChecked))
                .Add(New ParameterSQL("MotherTypeOfCancer", Me.MotherTypeOfCancer))
                .Add(New ParameterSQL("MotherAgeDiagnosed", Me.MotherAgeDiagnosed))
                .Add(New ParameterSQL("BrotherChecked", Me.BrotherChecked))
                .Add(New ParameterSQL("BrotherTypeOfCancer", Me.BrotherTypeOfCancer))
                .Add(New ParameterSQL("BrotherAgeDiagnosed", Me.BrotherAgeDiagnosed))
                .Add(New ParameterSQL("SisterChecked", Me.SisterChecked))
                .Add(New ParameterSQL("SisterTypeOfCancer", Me.SisterTypeOfCancer))
                .Add(New ParameterSQL("SisterAgeDiagnosed", Me.SisterAgeDiagnosed))
                .Add(New ParameterSQL("UncleChecked", Me.UncleChecked))
                .Add(New ParameterSQL("UncleTypeOfCancer", Me.UncleTypeOfCancer))
                .Add(New ParameterSQL("UncleAgeDiagnosed", Me.UncleAgeDiagnosed))
                .Add(New ParameterSQL("AuntChecked", Me.AuntChecked))
                .Add(New ParameterSQL("AuntTypeOfCancer", Me.AuntTypeOfCancer))
                .Add(New ParameterSQL("AuntAgeDiagnosed", Me.AuntAgeDiagnosed))
                .Add(New ParameterSQL("GrandFatherChecked", Me.GrandFatherChecked))
                .Add(New ParameterSQL("GrandFatherTypeOfCancer", Me.GrandFatherTypeOfCancer))
                .Add(New ParameterSQL("GrandFatherAgeDiagnosed", Me.GrandFatherAgeDiagnosed))
                .Add(New ParameterSQL("GrandMotherChecked", Me.GrandMotherChecked))
                .Add(New ParameterSQL("GrandMotherTypeOfCancer", Me.GrandMotherTypeOfCancer))
                .Add(New ParameterSQL("GrandMotherAgeDiagnosed", Me.GrandMotherAgeDiagnosed))
                .Add(New ParameterSQL("OthersPersonChecked", Me.OthersPersonChecked))
                .Add(New ParameterSQL("OthersTypeOfCancer", Me.OthersTypeOfCancer))
                .Add(New ParameterSQL("OthersAgeDiagnosed", Me.OthersAgeDiagnosed))
                .Add(New ParameterSQL("Weight", Me.Weight))
                .Add(New ParameterSQL("Height", Me.Height))
                .Add(New ParameterSQL("BloodPressure", Me.BloodPressure))
                .Add(New ParameterSQL("Pulse", Me.Pulse))
                .Add(New ParameterSQL("CNS", Me.CNS))
                .Add(New ParameterSQL("RS", Me.RS))
                .Add(New ParameterSQL("CVS", Me.CVS))
                .Add(New ParameterSQL("PA", Me.PA))
                .Add(New ParameterSQL("MuscloSkeletal", Me.MuscloSkeletal))
                .Add(New ParameterSQL("HeadAndNeck", Me.HeadAndNeck))
                .Add(New ParameterSQL("Breast", Me.Breast))
                .Add(New ParameterSQL("SpeculumExam", Me.SpeculumExam))
                .Add(New ParameterSQL("VIA", Me.VIA))
                .Add(New ParameterSQL("Prostate", Me.Prostate))
                .Add(New ParameterSQL("ExamFindingsOthers", Me.ExamFindingsOthers))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateCancerAwareness")

            With Parameters
                .Add(New ParameterSQL("CccpNo", Me.CccpNo))
                .Add(New ParameterSQL("RegistrationDate", Me.RegistrationDate))
                .Add(New ParameterSQL("Lastname", Me.Lastname))
                .Add(New ParameterSQL("FirstName", Me.FirstName))
                .Add(New ParameterSQL("MiddleName", Me.MiddleName))
                .Add(New ParameterSQL("ParticipantInitials", Me.ParticipantInitials))
                .Add(New ParameterSQL("BirthDate", Me.BirthDate))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("PhoneNo", Me.PhoneNo))
                .Add(New ParameterSQL("Occupation", Me.Occupation))
                .Add(New ParameterSQL("AddressOfResidenceLC1", Me.AddressOfResidenceLC1))
                .Add(New ParameterSQL("AddressOfResidenceLC3", Me.AddressOfResidenceLC3))
                .Add(New ParameterSQL("ResidenceDistrictID", Me.ResidenceDistrictID))
                .Add(New ParameterSQL("AddressOfOriginLC1", Me.AddressOfOriginLC1))
                .Add(New ParameterSQL("OriginDistrictID", Me.OriginDistrictID))
                .Add(New ParameterSQL("PresentingComplaints", Me.PresentingComplaints))
                .Add(New ParameterSQL("LumpBreastAffected", Me.LumpBreastAffected))
                .Add(New ParameterSQL("LumpComments", Me.LumpComments))
                .Add(New ParameterSQL("NipplesDischargeBreastAffected", Me.NipplesDischargeBreastAffected))
                .Add(New ParameterSQL("NippleDischargeComments", Me.NippleDischargeComments))
                .Add(New ParameterSQL("PainBreastAffected", Me.PainBreastAffected))
                .Add(New ParameterSQL("PainComments", Me.PainComments))
                .Add(New ParameterSQL("OthersBreastAffected", Me.OthersBreastAffected))
                .Add(New ParameterSQL("OthersBreastComments", Me.OthersBreastComments))
                .Add(New ParameterSQL("PVDischargeChecked", Me.PVDischargeChecked))
                .Add(New ParameterSQL("PVDischargeComments", Me.PVDischargeComments))
                .Add(New ParameterSQL("DyspeniaChecked", Me.DyspeniaChecked))
                .Add(New ParameterSQL("DyspeniaComments", Me.DyspeniaComments))
                .Add(New ParameterSQL("ContactBleedingChecked", Me.ContactBleedingChecked))
                .Add(New ParameterSQL("ContactBleedingComments", Me.ContactBleedingComments))
                .Add(New ParameterSQL("OthersChecked", Me.OthersChecked))
                .Add(New ParameterSQL("OthersComments", Me.OthersComments))
                .Add(New ParameterSQL("PoorUrineStreamChecked", Me.PoorUrineStreamChecked))
                .Add(New ParameterSQL("PoorUrineStreamComments", Me.PoorUrineStreamComments))
                .Add(New ParameterSQL("DifficultInUrinationChecked", Me.DifficultInUrinationChecked))
                .Add(New ParameterSQL("DifficultInUrinationComments", Me.DifficultInUrinationComments))
                .Add(New ParameterSQL("OthersSpecifyChecked", Me.OthersSpecifyChecked))
                .Add(New ParameterSQL("OthersSpecifyComment", Me.OthersSpecifyComment))
                .Add(New ParameterSQL("RelativesDiagnosedwithCancer", Me.RelativesDiagnosedwithCancer))
                .Add(New ParameterSQL("FatherChecked", Me.FatherChecked))
                .Add(New ParameterSQL("FatherTypeOfCancer", Me.FatherTypeOfCancer))
                .Add(New ParameterSQL("FatherAgeDiagnosed", Me.FatherAgeDiagnosed))
                .Add(New ParameterSQL("MotherChecked", Me.MotherChecked))
                .Add(New ParameterSQL("MotherTypeOfCancer", Me.MotherTypeOfCancer))
                .Add(New ParameterSQL("MotherAgeDiagnosed", Me.MotherAgeDiagnosed))
                .Add(New ParameterSQL("BrotherChecked", Me.BrotherChecked))
                .Add(New ParameterSQL("BrotherTypeOfCancer", Me.BrotherTypeOfCancer))
                .Add(New ParameterSQL("BrotherAgeDiagnosed", Me.BrotherAgeDiagnosed))
                .Add(New ParameterSQL("SisterChecked", Me.SisterChecked))
                .Add(New ParameterSQL("SisterTypeOfCancer", Me.SisterTypeOfCancer))
                .Add(New ParameterSQL("SisterAgeDiagnosed", Me.SisterAgeDiagnosed))
                .Add(New ParameterSQL("UncleChecked", Me.UncleChecked))
                .Add(New ParameterSQL("UncleTypeOfCancer", Me.UncleTypeOfCancer))
                .Add(New ParameterSQL("UncleAgeDiagnosed", Me.UncleAgeDiagnosed))
                .Add(New ParameterSQL("AuntChecked", Me.AuntChecked))
                .Add(New ParameterSQL("AuntTypeOfCancer", Me.AuntTypeOfCancer))
                .Add(New ParameterSQL("AuntAgeDiagnosed", Me.AuntAgeDiagnosed))
                .Add(New ParameterSQL("GrandFatherChecked", Me.GrandFatherChecked))
                .Add(New ParameterSQL("GrandFatherTypeOfCancer", Me.GrandFatherTypeOfCancer))
                .Add(New ParameterSQL("GrandFatherAgeDiagnosed", Me.GrandFatherAgeDiagnosed))
                .Add(New ParameterSQL("GrandMotherChecked", Me.GrandMotherChecked))
                .Add(New ParameterSQL("GrandMotherTypeOfCancer", Me.GrandMotherTypeOfCancer))
                .Add(New ParameterSQL("GrandMotherAgeDiagnosed", Me.GrandMotherAgeDiagnosed))
                .Add(New ParameterSQL("OthersPersonChecked", Me.OthersPersonChecked))
                .Add(New ParameterSQL("OthersTypeOfCancer", Me.OthersTypeOfCancer))
                .Add(New ParameterSQL("OthersAgeDiagnosed", Me.OthersAgeDiagnosed))
                .Add(New ParameterSQL("Weight", Me.Weight))
                .Add(New ParameterSQL("Height", Me.Height))
                .Add(New ParameterSQL("BloodPressure", Me.BloodPressure))
                .Add(New ParameterSQL("Pulse", Me.Pulse))
                .Add(New ParameterSQL("CNS", Me.CNS))
                .Add(New ParameterSQL("RS", Me.RS))
                .Add(New ParameterSQL("CVS", Me.CVS))
                .Add(New ParameterSQL("PA", Me.PA))
                .Add(New ParameterSQL("MuscloSkeletal", Me.MuscloSkeletal))
                .Add(New ParameterSQL("HeadAndNeck", Me.HeadAndNeck))
                .Add(New ParameterSQL("Breast", Me.Breast))
                .Add(New ParameterSQL("SpeculumExam", Me.SpeculumExam))
                .Add(New ParameterSQL("VIA", Me.VIA))
                .Add(New ParameterSQL("Prostate", Me.Prostate))
                .Add(New ParameterSQL("ExamFindingsOthers", Me.ExamFindingsOthers))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("CancerAwareness")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "CccpNo = '" + Me.CccpNo + "'"
            Dim errorPart As String = "CccpNo: " + Me.CccpNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "CancerAwareness"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("CancerAwareness")

            Return Parameters

        End Function

        Public Function GetCancerAwareness(cccpNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("CccpNo", cccpNo))
            End With

            Return Me.Load("uspGetCancerAwareness", "CancerAwareness", Parameters)

        End Function

#End Region



    End Class

    Public Class HCTClientCard : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_DistrictsID As String
        Private m_HealthUnitCode As String
        Private m_HSD As String
        Private m_CenterTypeID As String
        Private m_TestingPointID As String
        Private m_AccompaniedByID As String
        Private m_PreTestCounselingID As String
        Private m_CounseledAsID As String
        Private m_HCTEntryPoint As String
        Private m_MaritalStatusID As String
        Private m_SexualPatnerNo As Integer
        Private m_TestedHIVBeforeID As String
        Private m_HIVTestThreeMonthsID As String
        Private m_HIVTestSixMonthsID As String
        Private m_HIVTestTwelveMonthsID As String
        Private m_ResultThreeMonthsID As String
        Private m_ResultSixMonthsID As String
        Private m_ResultTwelveMonthsID As String
        Private m_NoTestsInTwelveMonthsID As String
        Private m_PatnerTestedHIVID As String
        Private m_PatnerTypeID As String
        Private m_PatnerResultID As String
        Private m_KnowAboutServiceID As String
        Private m_ConsentID As String
        Private m_NoConsentReasonID As String
        Private m_HIVResultID As String
        Private m_TestDoneBy As String
        Private m_Designation As String
        Private m_TestDate As Date
        Private m_ResultReceivedID As String
        Private m_ResultReceivedAsCoupleID As String
        Private m_CoupleResultsID As String
        Private m_TBSuspicionID As String
        Private m_STIID As String
        Private m_StartedCotrimoxazoleID As String
        Private m_LinkedToCareID As String
        Private m_WhereLinkedToCareID As String
        Private m_ReferralReason As String
        Private m_CounselorName As String
        Private m_CounselDate As Date

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property DistrictsID() As String
            Get
                Return m_DistrictsID
            End Get
            Set(Value As String)
                m_DistrictsID = Value
            End Set
        End Property

        Public Property HealthUnitCode() As String
            Get
                Return m_HealthUnitCode
            End Get
            Set(Value As String)
                m_HealthUnitCode = Value
            End Set
        End Property

        Public Property HSD() As String
            Get
                Return m_HSD
            End Get
            Set(Value As String)
                m_HSD = Value
            End Set
        End Property

        Public Property CenterTypeID() As String
            Get
                Return m_CenterTypeID
            End Get
            Set(Value As String)
                m_CenterTypeID = Value
            End Set
        End Property

        Public Property TestingPointID() As String
            Get
                Return m_TestingPointID
            End Get
            Set(Value As String)
                m_TestingPointID = Value
            End Set
        End Property

        Public Property AccompaniedByID() As String
            Get
                Return m_AccompaniedByID
            End Get
            Set(Value As String)
                m_AccompaniedByID = Value
            End Set
        End Property

        Public Property PreTestCounselingID() As String
            Get
                Return m_PreTestCounselingID
            End Get
            Set(Value As String)
                m_PreTestCounselingID = Value
            End Set
        End Property

        Public Property CounseledAsID() As String
            Get
                Return m_CounseledAsID
            End Get
            Set(Value As String)
                m_CounseledAsID = Value
            End Set
        End Property

        Public Property HCTEntryPoint() As String
            Get
                Return m_HCTEntryPoint
            End Get
            Set(Value As String)
                m_HCTEntryPoint = Value
            End Set
        End Property

        Public Property MaritalStatusID() As String
            Get
                Return m_MaritalStatusID
            End Get
            Set(Value As String)
                m_MaritalStatusID = Value
            End Set
        End Property

        Public Property SexualPatnerNo() As Integer
            Get
                Return m_SexualPatnerNo
            End Get
            Set(Value As Integer)
                m_SexualPatnerNo = Value
            End Set
        End Property

        Public Property TestedHIVBeforeID() As String
            Get
                Return m_TestedHIVBeforeID
            End Get
            Set(Value As String)
                m_TestedHIVBeforeID = Value
            End Set
        End Property

        Public Property HIVTestThreeMonthsID() As String
            Get
                Return m_HIVTestThreeMonthsID
            End Get
            Set(Value As String)
                m_HIVTestThreeMonthsID = Value
            End Set
        End Property

        Public Property HIVTestSixMonthsID() As String
            Get
                Return m_HIVTestSixMonthsID
            End Get
            Set(Value As String)
                m_HIVTestSixMonthsID = Value
            End Set
        End Property

        Public Property HIVTestTwelveMonthsID() As String
            Get
                Return m_HIVTestTwelveMonthsID
            End Get
            Set(Value As String)
                m_HIVTestTwelveMonthsID = Value
            End Set
        End Property

        Public Property ResultThreeMonthsID() As String
            Get
                Return m_ResultThreeMonthsID
            End Get
            Set(Value As String)
                m_ResultThreeMonthsID = Value
            End Set
        End Property

        Public Property ResultSixMonthsID() As String
            Get
                Return m_ResultSixMonthsID
            End Get
            Set(Value As String)
                m_ResultSixMonthsID = Value
            End Set
        End Property

        Public Property ResultTwelveMonthsID() As String
            Get
                Return m_ResultTwelveMonthsID
            End Get
            Set(Value As String)
                m_ResultTwelveMonthsID = Value
            End Set
        End Property

        Public Property NoTestsInTwelveMonthsID() As String
            Get
                Return m_NoTestsInTwelveMonthsID
            End Get
            Set(Value As String)
                m_NoTestsInTwelveMonthsID = Value
            End Set
        End Property

        Public Property PatnerTestedHIVID() As String
            Get
                Return m_PatnerTestedHIVID
            End Get
            Set(Value As String)
                m_PatnerTestedHIVID = Value
            End Set
        End Property

        Public Property PatnerTypeID() As String
            Get
                Return m_PatnerTypeID
            End Get
            Set(Value As String)
                m_PatnerTypeID = Value
            End Set
        End Property

        Public Property PatnerResultID() As String
            Get
                Return m_PatnerResultID
            End Get
            Set(Value As String)
                m_PatnerResultID = Value
            End Set
        End Property

        Public Property KnowAboutServiceID() As String
            Get
                Return m_KnowAboutServiceID
            End Get
            Set(Value As String)
                m_KnowAboutServiceID = Value
            End Set
        End Property

        Public Property ConsentID() As String
            Get
                Return m_ConsentID
            End Get
            Set(Value As String)
                m_ConsentID = Value
            End Set
        End Property

        Public Property NoConsentReasonID() As String
            Get
                Return m_NoConsentReasonID
            End Get
            Set(Value As String)
                m_NoConsentReasonID = Value
            End Set
        End Property

        Public Property HIVResultID() As String
            Get
                Return m_HIVResultID
            End Get
            Set(Value As String)
                m_HIVResultID = Value
            End Set
        End Property

        Public Property TestDoneBy() As String
            Get
                Return m_TestDoneBy
            End Get
            Set(Value As String)
                m_TestDoneBy = Value
            End Set
        End Property

        Public Property Designation() As String
            Get
                Return m_Designation
            End Get
            Set(Value As String)
                m_Designation = Value
            End Set
        End Property

        Public Property TestDate() As Date
            Get
                Return m_TestDate
            End Get
            Set(Value As Date)
                m_TestDate = Value
            End Set
        End Property

        Public Property ResultReceivedID() As String
            Get
                Return m_ResultReceivedID
            End Get
            Set(Value As String)
                m_ResultReceivedID = Value
            End Set
        End Property

        Public Property ResultReceivedAsCoupleID() As String
            Get
                Return m_ResultReceivedAsCoupleID
            End Get
            Set(Value As String)
                m_ResultReceivedAsCoupleID = Value
            End Set
        End Property

        Public Property CoupleResultsID() As String
            Get
                Return m_CoupleResultsID
            End Get
            Set(Value As String)
                m_CoupleResultsID = Value
            End Set
        End Property

        Public Property TBSuspicionID() As String
            Get
                Return m_TBSuspicionID
            End Get
            Set(Value As String)
                m_TBSuspicionID = Value
            End Set
        End Property

        Public Property STIID() As String
            Get
                Return m_STIID
            End Get
            Set(Value As String)
                m_STIID = Value
            End Set
        End Property

        Public Property StartedCotrimoxazoleID() As String
            Get
                Return m_StartedCotrimoxazoleID
            End Get
            Set(Value As String)
                m_StartedCotrimoxazoleID = Value
            End Set
        End Property

        Public Property LinkedToCareID() As String
            Get
                Return m_LinkedToCareID
            End Get
            Set(Value As String)
                m_LinkedToCareID = Value
            End Set
        End Property

        Public Property WhereLinkedToCareID() As String
            Get
                Return m_WhereLinkedToCareID
            End Get
            Set(Value As String)
                m_WhereLinkedToCareID = Value
            End Set
        End Property

        Public Property ReferralReason() As String
            Get
                Return m_ReferralReason
            End Get
            Set(Value As String)
                m_ReferralReason = Value
            End Set
        End Property

        Public Property CounselorName() As String
            Get
                Return m_CounselorName
            End Get
            Set(Value As String)
                m_CounselorName = Value
            End Set
        End Property

        Public Property CounselDate() As Date
            Get
                Return m_CounselDate
            End Get
            Set(Value As Date)
                m_CounselDate = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertHCTClientCard")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("DistrictsID", Me.DistrictsID))
                .Add(New ParameterSQL("HealthUnitCode", Me.HealthUnitCode))
                .Add(New ParameterSQL("HSD", Me.HSD))
                .Add(New ParameterSQL("CenterTypeID", Me.CenterTypeID))
                .Add(New ParameterSQL("TestingPointID", Me.TestingPointID))
                .Add(New ParameterSQL("AccompaniedByID", Me.AccompaniedByID))
                .Add(New ParameterSQL("PreTestCounselingID", Me.PreTestCounselingID))
                .Add(New ParameterSQL("CounseledAsID", Me.CounseledAsID))
                .Add(New ParameterSQL("HCTEntryPoint", Me.HCTEntryPoint))
                .Add(New ParameterSQL("MaritalStatusID", Me.MaritalStatusID))
                .Add(New ParameterSQL("SexualPatnerNo", Me.SexualPatnerNo))
                .Add(New ParameterSQL("TestedHIVBeforeID", Me.TestedHIVBeforeID))
                .Add(New ParameterSQL("HIVTestThreeMonthsID", Me.HIVTestThreeMonthsID))
                .Add(New ParameterSQL("HIVTestSixMonthsID", Me.HIVTestSixMonthsID))
                .Add(New ParameterSQL("HIVTestTwelveMonthsID", Me.HIVTestTwelveMonthsID))
                .Add(New ParameterSQL("ResultThreeMonthsID", Me.ResultThreeMonthsID))
                .Add(New ParameterSQL("ResultSixMonthsID", Me.ResultSixMonthsID))
                .Add(New ParameterSQL("ResultTwelveMonthsID", Me.ResultTwelveMonthsID))
                .Add(New ParameterSQL("NoTestsInTwelveMonthsID", Me.NoTestsInTwelveMonthsID))
                .Add(New ParameterSQL("PatnerTestedHIVID", Me.PatnerTestedHIVID))
                .Add(New ParameterSQL("PatnerTypeID", Me.PatnerTypeID))
                .Add(New ParameterSQL("PatnerResultID", Me.PatnerResultID))
                .Add(New ParameterSQL("KnowAboutServiceID", Me.KnowAboutServiceID))
                .Add(New ParameterSQL("ConsentID", Me.ConsentID))
                .Add(New ParameterSQL("NoConsentReasonID", Me.NoConsentReasonID))
                .Add(New ParameterSQL("HIVResultID", Me.HIVResultID))
                .Add(New ParameterSQL("TestDoneBy", Me.TestDoneBy))
                .Add(New ParameterSQL("Designation", Me.Designation))
                .Add(New ParameterSQL("TestDate", Me.TestDate))
                .Add(New ParameterSQL("ResultReceivedID", Me.ResultReceivedID))
                .Add(New ParameterSQL("ResultReceivedAsCoupleID", Me.ResultReceivedAsCoupleID))
                .Add(New ParameterSQL("CoupleResultsID", Me.CoupleResultsID))
                .Add(New ParameterSQL("TBSuspicionID", Me.TBSuspicionID))
                .Add(New ParameterSQL("STIID", Me.STIID))
                .Add(New ParameterSQL("StartedCotrimoxazoleID", Me.StartedCotrimoxazoleID))
                .Add(New ParameterSQL("LinkedToCareID", Me.LinkedToCareID))
                .Add(New ParameterSQL("WhereLinkedToCareID", Me.WhereLinkedToCareID))
                .Add(New ParameterSQL("ReferralReason", Me.ReferralReason))
                .Add(New ParameterSQL("CounselorName", Me.CounselorName))
                .Add(New ParameterSQL("CounselDate", Me.CounselDate))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateHCTClientCard")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("DistrictsID", Me.DistrictsID))
                .Add(New ParameterSQL("HealthUnitCode", Me.HealthUnitCode))
                .Add(New ParameterSQL("HSD", Me.HSD))
                .Add(New ParameterSQL("CenterTypeID", Me.CenterTypeID))
                .Add(New ParameterSQL("TestingPointID", Me.TestingPointID))
                .Add(New ParameterSQL("AccompaniedByID", Me.AccompaniedByID))
                .Add(New ParameterSQL("PreTestCounselingID", Me.PreTestCounselingID))
                .Add(New ParameterSQL("CounseledAsID", Me.CounseledAsID))
                .Add(New ParameterSQL("HCTEntryPoint", Me.HCTEntryPoint))
                .Add(New ParameterSQL("MaritalStatusID", Me.MaritalStatusID))
                .Add(New ParameterSQL("SexualPatnerNo", Me.SexualPatnerNo))
                .Add(New ParameterSQL("TestedHIVBeforeID", Me.TestedHIVBeforeID))
                .Add(New ParameterSQL("HIVTestThreeMonthsID", Me.HIVTestThreeMonthsID))
                .Add(New ParameterSQL("HIVTestSixMonthsID", Me.HIVTestSixMonthsID))
                .Add(New ParameterSQL("HIVTestTwelveMonthsID", Me.HIVTestTwelveMonthsID))
                .Add(New ParameterSQL("ResultThreeMonthsID", Me.ResultThreeMonthsID))
                .Add(New ParameterSQL("ResultSixMonthsID", Me.ResultSixMonthsID))
                .Add(New ParameterSQL("ResultTwelveMonthsID", Me.ResultTwelveMonthsID))
                .Add(New ParameterSQL("NoTestsInTwelveMonthsID", Me.NoTestsInTwelveMonthsID))
                .Add(New ParameterSQL("PatnerTestedHIVID", Me.PatnerTestedHIVID))
                .Add(New ParameterSQL("PatnerTypeID", Me.PatnerTypeID))
                .Add(New ParameterSQL("PatnerResultID", Me.PatnerResultID))
                .Add(New ParameterSQL("KnowAboutServiceID", Me.KnowAboutServiceID))
                .Add(New ParameterSQL("ConsentID", Me.ConsentID))
                .Add(New ParameterSQL("NoConsentReasonID", Me.NoConsentReasonID))
                .Add(New ParameterSQL("HIVResultID", Me.HIVResultID))
                .Add(New ParameterSQL("TestDoneBy", Me.TestDoneBy))
                .Add(New ParameterSQL("Designation", Me.Designation))
                .Add(New ParameterSQL("TestDate", Me.TestDate))
                .Add(New ParameterSQL("ResultReceivedID", Me.ResultReceivedID))
                .Add(New ParameterSQL("ResultReceivedAsCoupleID", Me.ResultReceivedAsCoupleID))
                .Add(New ParameterSQL("CoupleResultsID", Me.CoupleResultsID))
                .Add(New ParameterSQL("TBSuspicionID", Me.TBSuspicionID))
                .Add(New ParameterSQL("STIID", Me.STIID))
                .Add(New ParameterSQL("StartedCotrimoxazoleID", Me.StartedCotrimoxazoleID))
                .Add(New ParameterSQL("LinkedToCareID", Me.LinkedToCareID))
                .Add(New ParameterSQL("WhereLinkedToCareID", Me.WhereLinkedToCareID))
                .Add(New ParameterSQL("ReferralReason", Me.ReferralReason))
                .Add(New ParameterSQL("CounselorName", Me.CounselorName))
                .Add(New ParameterSQL("CounselDate", Me.CounselDate))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("HCTClientCard")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "HCTClientCard"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("HCTClientCard")

            Return Parameters

        End Function

        Public Function GetHCTClientCard(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetHCTClientCard", "HCTClientCard", Parameters)

        End Function

#End Region



    End Class


    Public Class SymptomsHistory : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_Fever As String
        Private m_Cough As String
        Private m_CoughMoreThanTwoWeeks As String
        Private m_DifficultyInBreathing As String
        Private m_ImmunizationDetails As String
        Private m_OtherHistory As String
        Private m_Convulsions As String
        Private m_AlteredConsciousness As String
        Private m_Vomiting As String
        Private m_UnableToDrinkBreastfeed As String
        Private m_PastMedicalHistory As String
        Private m_Diarrhoea As String
        Private m_DiarrhoeaLongerThanTwoWeeks As String
        Private m_BloodDiarrhoea As String
        Private m_PassingTeaColouredUrine As String
        Private m_FeedingHistory As String
        Private m_Pallor As String
        Private m_SkinPinchReturn As String
        Private m_SevereWasting As String
        Private m_Edema As String
        Private m_SunkenEyes As String
        Private m_Jaundice As String
        Private m_MUAC As Integer
        Private m_Height As Integer
        Private m_DeepBreathing As String
        Private m_FlaringOfNostrils As String
        Private m_IntercostalRecession As String
        Private m_SubcostalRecession As String
        Private m_Pulse As String
        Private m_CapRefill As String
        Private m_Airway As String
        Private m_Wheezing As String
        Private m_PleuralRub As String
        Private m_Crackles As String
        Private m_Unconscious As String
        Private m_Lethargic As String
        Private m_UnableToSitStand As String
        Private m_BulgingFontanelle As String
        Private m_StiffNeck As String
        Private m_KerningsSign As String
        Private m_IsBloodTransfusionDesired As String
        Private m_BloodTransfusionStateReasons As String
        Private m_IfDesiredWasBloodGiven As String
        Private m_IfYesVolume As Integer
        Private m_TransfusionDate As Date
        Private m_BloodUnits As Integer
        Private m_BloodTransfusionNotGivenStateReasons As String
        Private m_OtherFormsOfSupportiveCare As String
        Private m_ReasonsForDiagnosisOfSevereComplicatedMalaria As String
        Private m_ReasonsForAdmissionWithPositiveMalariaTest As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property Fever() As String
            Get
                Return m_Fever
            End Get
            Set(ByVal Value As String)
                m_Fever = Value
            End Set
        End Property

        Public Property Cough() As String
            Get
                Return m_Cough
            End Get
            Set(ByVal Value As String)
                m_Cough = Value
            End Set
        End Property

        Public Property CoughMoreThanTwoWeeks() As String
            Get
                Return m_CoughMoreThanTwoWeeks
            End Get
            Set(ByVal Value As String)
                m_CoughMoreThanTwoWeeks = Value
            End Set
        End Property

        Public Property DifficultyInBreathing() As String
            Get
                Return m_DifficultyInBreathing
            End Get
            Set(ByVal Value As String)
                m_DifficultyInBreathing = Value
            End Set
        End Property

        Public Property ImmunizationDetails() As String
            Get
                Return m_ImmunizationDetails
            End Get
            Set(ByVal Value As String)
                m_ImmunizationDetails = Value
            End Set
        End Property

        Public Property OtherHistory() As String
            Get
                Return m_OtherHistory
            End Get
            Set(ByVal Value As String)
                m_OtherHistory = Value
            End Set
        End Property

        Public Property Convulsions() As String
            Get
                Return m_Convulsions
            End Get
            Set(ByVal Value As String)
                m_Convulsions = Value
            End Set
        End Property

        Public Property AlteredConsciousness() As String
            Get
                Return m_AlteredConsciousness
            End Get
            Set(ByVal Value As String)
                m_AlteredConsciousness = Value
            End Set
        End Property

        Public Property Vomiting() As String
            Get
                Return m_Vomiting
            End Get
            Set(ByVal Value As String)
                m_Vomiting = Value
            End Set
        End Property

        Public Property UnableToDrinkBreastfeed() As String
            Get
                Return m_UnableToDrinkBreastfeed
            End Get
            Set(ByVal Value As String)
                m_UnableToDrinkBreastfeed = Value
            End Set
        End Property

        Public Property PastMedicalHistory() As String
            Get
                Return m_PastMedicalHistory
            End Get
            Set(ByVal Value As String)
                m_PastMedicalHistory = Value
            End Set
        End Property

        Public Property Diarrhoea() As String
            Get
                Return m_Diarrhoea
            End Get
            Set(ByVal Value As String)
                m_Diarrhoea = Value
            End Set
        End Property

        Public Property DiarrhoeaLongerThanTwoWeeks() As String
            Get
                Return m_DiarrhoeaLongerThanTwoWeeks
            End Get
            Set(ByVal Value As String)
                m_DiarrhoeaLongerThanTwoWeeks = Value
            End Set
        End Property

        Public Property BloodDiarrhoea() As String
            Get
                Return m_BloodDiarrhoea
            End Get
            Set(ByVal Value As String)
                m_BloodDiarrhoea = Value
            End Set
        End Property

        Public Property PassingTeaColouredUrine() As String
            Get
                Return m_PassingTeaColouredUrine
            End Get
            Set(ByVal Value As String)
                m_PassingTeaColouredUrine = Value
            End Set
        End Property

        Public Property FeedingHistory() As String
            Get
                Return m_FeedingHistory
            End Get
            Set(ByVal Value As String)
                m_FeedingHistory = Value
            End Set
        End Property

        Public Property Pallor() As String
            Get
                Return m_Pallor
            End Get
            Set(ByVal Value As String)
                m_Pallor = Value
            End Set
        End Property

        Public Property SkinPinchReturn() As String
            Get
                Return m_SkinPinchReturn
            End Get
            Set(ByVal Value As String)
                m_SkinPinchReturn = Value
            End Set
        End Property

        Public Property SevereWasting() As String
            Get
                Return m_SevereWasting
            End Get
            Set(ByVal Value As String)
                m_SevereWasting = Value
            End Set
        End Property

        Public Property Edema() As String
            Get
                Return m_Edema
            End Get
            Set(ByVal Value As String)
                m_Edema = Value
            End Set
        End Property

        Public Property SunkenEyes() As String
            Get
                Return m_SunkenEyes
            End Get
            Set(ByVal Value As String)
                m_SunkenEyes = Value
            End Set
        End Property

        Public Property Jaundice() As String
            Get
                Return m_Jaundice
            End Get
            Set(ByVal Value As String)
                m_Jaundice = Value
            End Set
        End Property

        Public Property MUAC() As Integer
            Get
                Return m_MUAC
            End Get
            Set(ByVal Value As Integer)
                m_MUAC = Value
            End Set
        End Property

        Public Property Height() As Integer
            Get
                Return m_Height
            End Get
            Set(ByVal Value As Integer)
                m_Height = Value
            End Set
        End Property

        Public Property DeepBreathing() As String
            Get
                Return m_DeepBreathing
            End Get
            Set(ByVal Value As String)
                m_DeepBreathing = Value
            End Set
        End Property

        Public Property FlaringOfNostrils() As String
            Get
                Return m_FlaringOfNostrils
            End Get
            Set(ByVal Value As String)
                m_FlaringOfNostrils = Value
            End Set
        End Property

        Public Property IntercostalRecession() As String
            Get
                Return m_IntercostalRecession
            End Get
            Set(ByVal Value As String)
                m_IntercostalRecession = Value
            End Set
        End Property

        Public Property SubcostalRecession() As String
            Get
                Return m_SubcostalRecession
            End Get
            Set(ByVal Value As String)
                m_SubcostalRecession = Value
            End Set
        End Property

        Public Property Pulse() As String
            Get
                Return m_Pulse
            End Get
            Set(ByVal Value As String)
                m_Pulse = Value
            End Set
        End Property

        Public Property CapRefill() As String
            Get
                Return m_CapRefill
            End Get
            Set(ByVal Value As String)
                m_CapRefill = Value
            End Set
        End Property

        Public Property Airway() As String
            Get
                Return m_Airway
            End Get
            Set(ByVal Value As String)
                m_Airway = Value
            End Set
        End Property

        Public Property Wheezing() As String
            Get
                Return m_Wheezing
            End Get
            Set(ByVal Value As String)
                m_Wheezing = Value
            End Set
        End Property

        Public Property PleuralRub() As String
            Get
                Return m_PleuralRub
            End Get
            Set(ByVal Value As String)
                m_PleuralRub = Value
            End Set
        End Property

        Public Property Crackles() As String
            Get
                Return m_Crackles
            End Get
            Set(ByVal Value As String)
                m_Crackles = Value
            End Set
        End Property

        Public Property Unconscious() As String
            Get
                Return m_Unconscious
            End Get
            Set(ByVal Value As String)
                m_Unconscious = Value
            End Set
        End Property

        Public Property Lethargic() As String
            Get
                Return m_Lethargic
            End Get
            Set(ByVal Value As String)
                m_Lethargic = Value
            End Set
        End Property

        Public Property UnableToSitStand() As String
            Get
                Return m_UnableToSitStand
            End Get
            Set(ByVal Value As String)
                m_UnableToSitStand = Value
            End Set
        End Property

        Public Property BulgingFontanelle() As String
            Get
                Return m_BulgingFontanelle
            End Get
            Set(ByVal Value As String)
                m_BulgingFontanelle = Value
            End Set
        End Property

        Public Property StiffNeck() As String
            Get
                Return m_StiffNeck
            End Get
            Set(ByVal Value As String)
                m_StiffNeck = Value
            End Set
        End Property

        Public Property KerningsSign() As String
            Get
                Return m_KerningsSign
            End Get
            Set(ByVal Value As String)
                m_KerningsSign = Value
            End Set
        End Property

        Public Property IsBloodTransfusionDesired() As String
            Get
                Return m_IsBloodTransfusionDesired
            End Get
            Set(ByVal Value As String)
                m_IsBloodTransfusionDesired = Value
            End Set
        End Property

        Public Property BloodTransfusionStateReasons() As String
            Get
                Return m_BloodTransfusionStateReasons
            End Get
            Set(ByVal Value As String)
                m_BloodTransfusionStateReasons = Value
            End Set
        End Property

        Public Property IfDesiredWasBloodGiven() As String
            Get
                Return m_IfDesiredWasBloodGiven
            End Get
            Set(ByVal Value As String)
                m_IfDesiredWasBloodGiven = Value
            End Set
        End Property

        Public Property IfYesVolume() As Integer
            Get
                Return m_IfYesVolume
            End Get
            Set(ByVal Value As Integer)
                m_IfYesVolume = Value
            End Set
        End Property

        Public Property TransfusionDate() As Date
            Get
                Return m_TransfusionDate
            End Get
            Set(ByVal Value As Date)
                m_TransfusionDate = Value
            End Set
        End Property

        Public Property BloodUnits() As Integer
            Get
                Return m_BloodUnits
            End Get
            Set(ByVal Value As Integer)
                m_BloodUnits = Value
            End Set
        End Property

        Public Property BloodTransfusionNotGivenStateReasons() As String
            Get
                Return m_BloodTransfusionNotGivenStateReasons
            End Get
            Set(ByVal Value As String)
                m_BloodTransfusionNotGivenStateReasons = Value
            End Set
        End Property

        Public Property OtherFormsOfSupportiveCare() As String
            Get
                Return m_OtherFormsOfSupportiveCare
            End Get
            Set(ByVal Value As String)
                m_OtherFormsOfSupportiveCare = Value
            End Set
        End Property

        Public Property ReasonsForDiagnosisOfSevereComplicatedMalaria() As String
            Get
                Return m_ReasonsForDiagnosisOfSevereComplicatedMalaria
            End Get
            Set(ByVal Value As String)
                m_ReasonsForDiagnosisOfSevereComplicatedMalaria = Value
            End Set
        End Property

        Public Property ReasonsForAdmissionWithPositiveMalariaTest() As String
            Get
                Return m_ReasonsForAdmissionWithPositiveMalariaTest
            End Get
            Set(ByVal Value As String)
                m_ReasonsForAdmissionWithPositiveMalariaTest = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertSymptomsHistory")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("Fever", Me.Fever))
                .Add(New ParameterSQL("Cough", Me.Cough))
                .Add(New ParameterSQL("CoughMoreThanTwoWeeks", Me.CoughMoreThanTwoWeeks))
                .Add(New ParameterSQL("DifficultyInBreathing", Me.DifficultyInBreathing))
                .Add(New ParameterSQL("ImmunizationDetails", Me.ImmunizationDetails))
                .Add(New ParameterSQL("OtherHistory", Me.OtherHistory))
                .Add(New ParameterSQL("Convulsions", Me.Convulsions))
                .Add(New ParameterSQL("AlteredConsciousness", Me.AlteredConsciousness))
                .Add(New ParameterSQL("Vomiting", Me.Vomiting))
                .Add(New ParameterSQL("UnableToDrinkBreastfeed", Me.UnableToDrinkBreastfeed))
                .Add(New ParameterSQL("PastMedicalHistory", Me.PastMedicalHistory))
                .Add(New ParameterSQL("Diarrhoea", Me.Diarrhoea))
                .Add(New ParameterSQL("DiarrhoeaLongerThanTwoWeeks", Me.DiarrhoeaLongerThanTwoWeeks))
                .Add(New ParameterSQL("BloodDiarrhoea", Me.BloodDiarrhoea))
                .Add(New ParameterSQL("PassingTeaColouredUrine", Me.PassingTeaColouredUrine))
                .Add(New ParameterSQL("FeedingHistory", Me.FeedingHistory))
                .Add(New ParameterSQL("Pallor", Me.Pallor))
                .Add(New ParameterSQL("SkinPinchReturn", Me.SkinPinchReturn))
                .Add(New ParameterSQL("SevereWasting", Me.SevereWasting))
                .Add(New ParameterSQL("Edema", Me.Edema))
                .Add(New ParameterSQL("SunkenEyes", Me.SunkenEyes))
                .Add(New ParameterSQL("Jaundice", Me.Jaundice))
                .Add(New ParameterSQL("MUAC", Me.MUAC))
                .Add(New ParameterSQL("Height", Me.Height))
                .Add(New ParameterSQL("DeepBreathing", Me.DeepBreathing))
                .Add(New ParameterSQL("FlaringOfNostrils", Me.FlaringOfNostrils))
                .Add(New ParameterSQL("IntercostalRecession ", Me.IntercostalRecession))
                .Add(New ParameterSQL("SubcostalRecession ", Me.SubcostalRecession))
                .Add(New ParameterSQL("Pulse", Me.Pulse))
                .Add(New ParameterSQL("CapRefill", Me.CapRefill))
                .Add(New ParameterSQL("Airway", Me.Airway))
                .Add(New ParameterSQL("Wheezing", Me.Wheezing))
                .Add(New ParameterSQL("PleuralRub", Me.PleuralRub))
                .Add(New ParameterSQL("Crackles", Me.Crackles))
                .Add(New ParameterSQL("Unconscious", Me.Unconscious))
                .Add(New ParameterSQL("Lethargic", Me.Lethargic))
                .Add(New ParameterSQL("UnableToSitStand", Me.UnableToSitStand))
                .Add(New ParameterSQL("BulgingFontanelle", Me.BulgingFontanelle))
                .Add(New ParameterSQL("StiffNeck", Me.StiffNeck))
                .Add(New ParameterSQL("KerningsSign", Me.KerningsSign))
                .Add(New ParameterSQL("IsBloodTransfusionDesired", Me.IsBloodTransfusionDesired))
                .Add(New ParameterSQL("BloodTransfusionStateReasons", Me.BloodTransfusionStateReasons))
                .Add(New ParameterSQL("IfDesiredWasBloodGiven", Me.IfDesiredWasBloodGiven))
                .Add(New ParameterSQL("IfYesVolume", Me.IfYesVolume))
                .Add(New ParameterSQL("TransfusionDate", Me.TransfusionDate))
                .Add(New ParameterSQL("BloodUnits", Me.BloodUnits))
                .Add(New ParameterSQL("BloodTransfusionNotGivenStateReasons", Me.BloodTransfusionNotGivenStateReasons))
                .Add(New ParameterSQL("OtherFormsOfSupportiveCare", Me.OtherFormsOfSupportiveCare))
                .Add(New ParameterSQL("ReasonsForDiagnosisOfSevereComplicatedMalaria", Me.ReasonsForDiagnosisOfSevereComplicatedMalaria))
                .Add(New ParameterSQL("ReasonsForAdmissionWithPositiveMalariaTest", Me.ReasonsForAdmissionWithPositiveMalariaTest))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateSymptomsHistory")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("Fever", Me.Fever))
                .Add(New ParameterSQL("Cough", Me.Cough))
                .Add(New ParameterSQL("CoughMoreThanTwoWeeks", Me.CoughMoreThanTwoWeeks))
                .Add(New ParameterSQL("DifficultyInBreathing", Me.DifficultyInBreathing))
                .Add(New ParameterSQL("ImmunizationDetails", Me.ImmunizationDetails))
                .Add(New ParameterSQL("OtherHistory", Me.OtherHistory))
                .Add(New ParameterSQL("Convulsions", Me.Convulsions))
                .Add(New ParameterSQL("AlteredConsciousness", Me.AlteredConsciousness))
                .Add(New ParameterSQL("Vomiting", Me.Vomiting))
                .Add(New ParameterSQL("UnableToDrinkBreastfeed", Me.UnableToDrinkBreastfeed))
                .Add(New ParameterSQL("PastMedicalHistory", Me.PastMedicalHistory))
                .Add(New ParameterSQL("Diarrhoea", Me.Diarrhoea))
                .Add(New ParameterSQL("DiarrhoeaLongerThanTwoWeeks", Me.DiarrhoeaLongerThanTwoWeeks))
                .Add(New ParameterSQL("BloodDiarrhoea", Me.BloodDiarrhoea))
                .Add(New ParameterSQL("PassingTeaColouredUrine", Me.PassingTeaColouredUrine))
                .Add(New ParameterSQL("FeedingHistory", Me.FeedingHistory))
                .Add(New ParameterSQL("Pallor", Me.Pallor))
                .Add(New ParameterSQL("SkinPinchReturn", Me.SkinPinchReturn))
                .Add(New ParameterSQL("SevereWasting", Me.SevereWasting))
                .Add(New ParameterSQL("Edema", Me.Edema))
                .Add(New ParameterSQL("SunkenEyes", Me.SunkenEyes))
                .Add(New ParameterSQL("Jaundice", Me.Jaundice))
                .Add(New ParameterSQL("MUAC", Me.MUAC))
                .Add(New ParameterSQL("Height", Me.Height))
                .Add(New ParameterSQL("DeepBreathing", Me.DeepBreathing))
                .Add(New ParameterSQL("FlaringOfNostrils", Me.FlaringOfNostrils))
                .Add(New ParameterSQL("IntercostalRecession ", Me.IntercostalRecession))
                .Add(New ParameterSQL("SubcostalRecession ", Me.SubcostalRecession))
                .Add(New ParameterSQL("Pulse", Me.Pulse))
                .Add(New ParameterSQL("CapRefill", Me.CapRefill))
                .Add(New ParameterSQL("Airway", Me.Airway))
                .Add(New ParameterSQL("Wheezing", Me.Wheezing))
                .Add(New ParameterSQL("PleuralRub", Me.PleuralRub))
                .Add(New ParameterSQL("Crackles", Me.Crackles))
                .Add(New ParameterSQL("Unconscious", Me.Unconscious))
                .Add(New ParameterSQL("Lethargic", Me.Lethargic))
                .Add(New ParameterSQL("UnableToSitStand", Me.UnableToSitStand))
                .Add(New ParameterSQL("BulgingFontanelle", Me.BulgingFontanelle))
                .Add(New ParameterSQL("StiffNeck", Me.StiffNeck))
                .Add(New ParameterSQL("KerningsSign", Me.KerningsSign))
                .Add(New ParameterSQL("IsBloodTransfusionDesired", Me.IsBloodTransfusionDesired))
                .Add(New ParameterSQL("BloodTransfusionStateReasons", Me.BloodTransfusionStateReasons))
                .Add(New ParameterSQL("IfDesiredWasBloodGiven", Me.IfDesiredWasBloodGiven))
                .Add(New ParameterSQL("IfYesVolume", Me.IfYesVolume))
                .Add(New ParameterSQL("TransfusionDate", Me.TransfusionDate))
                .Add(New ParameterSQL("BloodUnits", Me.BloodUnits))
                .Add(New ParameterSQL("BloodTransfusionNotGivenStateReasons", Me.BloodTransfusionNotGivenStateReasons))
                .Add(New ParameterSQL("OtherFormsOfSupportiveCare", Me.OtherFormsOfSupportiveCare))
                .Add(New ParameterSQL("ReasonsForDiagnosisOfSevereComplicatedMalaria", Me.ReasonsForDiagnosisOfSevereComplicatedMalaria))
                .Add(New ParameterSQL("ReasonsForAdmissionWithPositiveMalariaTest", Me.ReasonsForAdmissionWithPositiveMalariaTest))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("SymptomsHistory")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "VisitNo: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "SymptomsHistory"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("SymptomsHistory")

            Return Parameters

        End Function

        Public Function GetSymptomsHistory(ByVal visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetSymptomsHistory", "SymptomsHistory", Parameters)

        End Function

#End Region



    End Class

#End Region

#Region " Transactional "


    Public Class Packages : Inherits DBConnect

#Region " Fields "

        Private m_PackageNo As String
        Private m_PackageName As String
        Private m_UnitPrice As Decimal
        Private m_UnitCost As Decimal
        Private m_ExpiryDays As Integer
        Private m_RevenueStreamCode As String
        Private m_Hidden As Boolean
        Private m_MonitorQty As Boolean
#End Region

#Region " Properties "

        Public Property PackageNo() As String
            Get
                Return m_PackageNo
            End Get
            Set(ByVal Value As String)
                m_PackageNo = Value
            End Set
        End Property

        Public Property PackageName() As String
            Get
                Return m_PackageName
            End Get
            Set(ByVal Value As String)
                m_PackageName = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(ByVal Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property UnitCost() As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(ByVal Value As Decimal)
                m_UnitCost = Value
            End Set
        End Property

        Public Property ExpiryDays() As Integer
            Get
                Return m_ExpiryDays
            End Get
            Set(ByVal Value As Integer)
                m_ExpiryDays = Value
            End Set
        End Property

        Public Property RevenueStreamCode() As String
            Get
                Return m_RevenueStreamCode
            End Get
            Set(ByVal Value As String)
                m_RevenueStreamCode = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(ByVal Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

        Public Property MonitorQty() As Boolean
            Get
                Return m_MonitorQty
            End Get
            Set(ByVal Value As Boolean)
                m_MonitorQty = Value
            End Set
        End Property
#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPackages")

            With Parameters
                .Add(New ParameterSQL("PackageNo", Me.PackageNo))
                .Add(New ParameterSQL("PackageName", Me.PackageName))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("ExpiryDays", Me.ExpiryDays))
                .Add(New ParameterSQL("RevenueStreamCode", Me.RevenueStreamCode))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("MonitorQty", Me.MonitorQty))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePackages")

            With Parameters
                .Add(New ParameterSQL("PackageNo", Me.PackageNo))
                .Add(New ParameterSQL("PackageName", Me.PackageName))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("ExpiryDays", Me.ExpiryDays))
                .Add(New ParameterSQL("RevenueStreamCode", Me.RevenueStreamCode))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("MonitorQty", Me.MonitorQty))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("Packages")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PackageNo = '" + Me.PackageNo + "'"
            Dim errorPart As String = "PackageNo: " + Me.PackageNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Packages"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Packages")

            Return Parameters

        End Function

        Public Function GetPackages(ByVal packageNo As String) As DataSet
            If String.IsNullOrEmpty(packageNo) Then
                With Parameters
                    .Add(New ParameterSQL("PackageNo", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("PackageNo", packageNo))
                End With


            End If

            Return Me.Load("uspGetPackages", "Packages", Parameters)

        End Function
        Public Function GetPackages() As DataSet
            Return Me.GetPackages(String.Empty)

        End Function

        Public Function GetPackageName(ByVal PackageNo As String) As DataSet

            If PackageNo <> "" OrElse PackageNo <> String.Empty Then
                With Parameters
                    .Add(New ParameterSQL("PackageNo", PackageNo))
                End With

            ElseIf (PackageNo = "" OrElse PackageNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("PackageNo", Nothing))
                End With
            End If
            Return Me.Load("uspGetPackageName", "Packages", Parameters)


        End Function

        Public Function GetPackageName() As DataSet
            Return Me.GetPackageName(String.Empty)
        End Function

        Public Function GetPatientActivePackage(ByVal patientNo As String, ByVal packageNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
                .Add(New ParameterSQL("PackageNo", packageNo))
            End With

            Return Me.Load("uspGetPatientActivePackage", "Packages", Parameters)

        End Function

        Public Function IsPackageStillOn(patientNo As String, packageNo As String, itemCode As String, itemCategoryID As String) As Boolean

            Dim authorized As Boolean

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
                .Add(New ParameterSQL("PackageNo", packageNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("IsPackageOn", SqlDbType.Bit))
            End With

            Me.ReadData = Read("uspIsPackageStillOn", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("IsPackageOn")) Then
                    authorized = False
                Else : authorized = CBool(Me.ReadData("IsPackageOn"))
                End If
            End If

            Return authorized

        End Function


        Public Function GetNextPackageID() As Integer

            With Parameters
                .Add(New ParameterSQL("PackageID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextPackageID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("PackageID")) Then
                    Return CInt(Me.ReadData("PackageID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function


#End Region



    End Class

    Public Class PackagesEXT : Inherits DBConnect

#Region " Fields "

        Private m_PackageNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Quantity As Integer
        Private m_UnitPrice As Decimal
        Private m_UnitCost As Decimal
#End Region

#Region " Properties "

        Public Property PackageNo() As String
            Get
                Return m_PackageNo
            End Get
            Set(ByVal Value As String)
                m_PackageNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(ByVal Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(ByVal Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property UnitCost() As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(ByVal Value As Decimal)
                m_UnitCost = Value
            End Set
        End Property
#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditPackagesEXT")

            With Parameters
                .Add(New ParameterSQL("PackageNo", Me.PackageNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function


        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PackageNo = '" + Me.PackageNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "PackageNo: " + Me.PackageNo + " and ItemCode: " + Me.ItemCode + " and ItemCategoryID: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PackagesEXT"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PackagesEXT")

            Return Parameters

        End Function

        Public Function GetPackagesEXT(ByVal packageNo As String, ByVal itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PackageNo", packageNo))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetPackagesEXT", "PackagesEXT", Parameters)

        End Function

        Public Function GetAllowedPackagePrescritions(ByVal packageNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PackageNo", packageNo))
            End With

            Return Me.Load("uspGetAllowedPackagePrescritions", "PackagesEXT", Parameters)

        End Function

        Public Function GetAllowedPackageLabTests(ByVal packageNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PackageNo", packageNo))
            End With

            Return Me.Load("uspGetAllowedPackageLabTests", "PackagesEXT", Parameters)

        End Function

        Public Function GetAllowedPackageConsumables(ByVal packageNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PackageNo", packageNo))
            End With

            Return Me.Load("uspGetAllowedPackageConsumableItems", "PackagesEXT", Parameters)

        End Function



        Public Function GetAllowedPackageCardiologyExaminations(ByVal packageNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PackageNo", packageNo))
            End With

            Return Me.Load("uspGetAllowedPackageCardiologyExaminations", "PackagesEXT", Parameters)

        End Function

        Public Function GetAllowedPackageRadiologyExaminations(ByVal packageNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PackageNo", packageNo))
            End With

            Return Me.Load("uspGetAllowedPackageRadiologyExaminations", "PackagesEXT", Parameters)

        End Function

        Public Function GetAllowedPackageProcedures(ByVal packageNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PackageNo", packageNo))
            End With

            Return Me.Load("uspGetAllowedPackageProcedures", "PackagesEXT", Parameters)

        End Function

        Public Function IsPackageItem(ByVal packageNo As String, ByVal itemCode As String, ByVal itemCategoryID As String) As Boolean

            Dim records As Integer

            With Parameters
                .Add(New ParameterSQL("PackageNo", packageNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("Records", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspIsPackageItem", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("Records")) Then
                    records = 0
                Else : records = CInt(Me.ReadData("Records"))
                End If
            End If

            Return records > 0

        End Function

        Public Function GetPackageItemUnitPrice(ByVal packageNo As String, ByVal itemCode As String, ByVal itemCategoryID As String) As Decimal


            With Parameters
                .Add(New ParameterSQL("PackageNo", packageNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("UnitPrice", SqlDbType.Money))
            End With

            Me.ReadData = Read("uspGetPackageItemUnitPrice", Parameters)

            If Not Me.ReadData Is Nothing Then

                If IsDBNull(Me.ReadData("UnitPrice")) Then
                    Me.UnitPrice = 0
                Else : Me.UnitPrice = CDec((Me.ReadData("UnitPrice")))
                End If

                Return Me.UnitPrice

            End If

        End Function


        Public Function hasPackage(ByVal patientNo As String, ByVal packageNo As String) As Boolean

            Dim records As Integer

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
                .Add(New ParameterSQL("PackageNo", packageNo))

                .Add(New ParameterSQL("Records", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("usphasPackage", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("Records")) Then
                    records = 0
                Else : records = CInt(Me.ReadData("Records"))
                End If
            End If

            Return records > 0

        End Function


        Public Function GetPackageServices(ByVal packageNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PackageNo", packageNo))
            End With

            Return Me.Load("uspGetPackageServices", "PackagesEXT", Parameters)

        End Function



#End Region

    End Class

    Public Class AttachPackage : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_PatientNo As String
        Private m_PackageNo As String
        Private m_PackageVisitNo As String
        Private m_Details As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(ByVal Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property PackageNo() As String
            Get
                Return m_PackageNo
            End Get
            Set(ByVal Value As String)
                m_PackageNo = Value
            End Set
        End Property

        Public Property Details() As String
            Get
                Return m_Details
            End Get
            Set(ByVal Value As String)
                m_Details = Value
            End Set
        End Property


        Public Property PackageVisitNo() As String
            Get
                Return m_PackageVisitNo
            End Get
            Set(ByVal Value As String)
                m_PackageVisitNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertAttachPackage")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("PackageNo", Me.PackageNo))
                .Add(New ParameterSQL("PackageVisitNo", Me.PackageVisitNo))
                .Add(New ParameterSQL("Details", Me.Details))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateAttachPackage")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("PackageNo", Me.PackageNo))
                .Add(New ParameterSQL("PackageVisitNo", Me.PackageVisitNo))
                .Add(New ParameterSQL("Details", Me.Details))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("AttachPackage")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and PackageNo = '" + Me.PackageNo + "'"
            Dim errorPart As String = "VisitNo: " + Me.VisitNo + " and PackageNo: " + Me.PackageNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "AttachPackage"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("AttachPackage")

            Return Parameters

        End Function

        Public Function GetAttachPackage(ByVal visitNo As String, ByVal packageNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("PackageNo", packageNo))
            End With

            Return Me.Load("uspGetAttachPackage", "AttachPackage", Parameters)

        End Function

        Public Function GetNextPackageVisitID() As Integer

            With Parameters
                .Add(New ParameterSQL("AttachPackageID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextPackageVisitID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("AttachPackageID")) Then
                    Return CInt(Me.ReadData("AttachPackageID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

#End Region



    End Class

    Public Class PackageVisits : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_PatientNo As String
        Private m_PackageNo As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(ByVal Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property PackageNo() As String
            Get
                Return m_PackageNo
            End Get
            Set(ByVal Value As String)
                m_PackageNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPackageVisits")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("PackageNo", Me.PackageNo))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePackageVisits")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("PackageNo", Me.PackageNo))
            End With

            'For Audit Trail
            Me.SetLogObject("PackageVisits")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and PackageNo = '" + Me.PackageNo + "'"
            Dim errorPart As String = "VisitNo: " + Me.VisitNo + " and PackageNo: " + Me.PackageNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PackageVisits"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PackageVisits")

            Return Parameters

        End Function

        Public Function GetPackageVisits(ByVal visitNo As String, ByVal packageNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("PackageNo", packageNo))
            End With

            Return Me.Load("uspGetPackageVisits", "PackageVisits", Parameters)

        End Function

#End Region



    End Class

    '    Public Class PackageDetails : Inherits DBConnect

    '#Region " Fields "

    '        Private m_VisitNo As String
    '        Private m_PatientNo As String
    '        Private m_PackageNo As String
    '        Private m_StatusID As String

    '#End Region

    '#Region " Properties "

    '        Public Property VisitNo() As String
    '            Get
    '                Return m_VisitNo
    '            End Get
    '            Set(ByVal Value As String)
    '                m_VisitNo = Value
    '            End Set
    '        End Property

    '        Public Property PatientNo() As String
    '            Get
    '                Return m_PatientNo
    '            End Get
    '            Set(ByVal Value As String)
    '                m_PatientNo = Value
    '            End Set
    '        End Property


    '        Public Property PackageNo() As String
    '            Get
    '                Return m_PackageNo
    '            End Get
    '            Set(ByVal Value As String)
    '                m_PackageNo = Value
    '            End Set
    '        End Property

    '        Public Property StatusID() As String
    '            Get
    '                Return m_StatusID
    '            End Get
    '            Set(ByVal Value As String)
    '                m_StatusID = Value
    '            End Set
    '        End Property

    '#End Region

    '#Region " Constructors "

    '        Public Sub New()
    '            MyBase.New()
    '        End Sub

    '        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
    '            MyClass.New()
    '            Me.ServerName = serverName
    '            Me.DatabaseName = databaseName
    '        End Sub

    '#End Region

    '#Region " Methods "

    '        Protected Overrides Function SaveData() As ArrayList

    '            Me.SetCommand("uspInsertPackageDetails")

    '            With Parameters
    '                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
    '                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
    '                .Add(New ParameterSQL("PackageNo", Me.PackageNo))
    '                .Add(New ParameterSQL("StatusID", Me.StatusID))
    '                .Add(New ParameterSQL("LoginID", Me.LoginID))
    '            End With

    '            Return Parameters

    '        End Function

    '        Protected Overrides Function UpdateData() As ArrayList

    '            Me.SetCommand("uspUpdatePackageDetails")

    '            With Parameters
    '                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
    '                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
    '                .Add(New ParameterSQL("PackageNo", Me.PackageNo))
    '                .Add(New ParameterSQL("StatusID", Me.StatusID))
    '                .Add(New ParameterSQL("LoginID", Me.LoginID))
    '            End With

    '            'For Audit Trail
    '            Me.SetLogObject("PackageDetails")

    '            Return Parameters

    '        End Function

    '        Protected Overrides Function DeleteData() As ArrayList

    '            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
    '            Dim errorPart As String = "VisitNo: " + Me.VisitNo

    '            Me.SetCommand("uspDeleteObject")

    '            With Parameters
    '                .Add(New ParameterSQL("ObjectName", "PackageDetails"))
    '                .Add(New ParameterSQL("Where", where))
    '                .Add(New ParameterSQL("ErrorPart", errorPart))
    '            End With

    '            'For Audit Trail
    '            Me.SetLogObject("PackageDetails")

    '            Return Parameters

    '        End Function

    '        Public Function GetPackageDetails(ByVal visitNo As String) As DataSet

    '            With Parameters
    '                .Add(New ParameterSQL("VisitNo", visitNo))
    '            End With

    '            Return Me.Load("uspGetPackageDetails", "PackageDetails", Parameters)

    '        End Function

    '#End Region

    '    End Class

    Public Class StaffPayments : Inherits DBConnect

#Region " Fields "
        Private m_PaymentVoucherNo As String
        Private m_VisitTypeID As String
        Private m_StartDateTime As Date
        Private m_EndDateTime As Date
        Private m_BillModesID As String
        Private m_StaffNo As String
        Private m_VoucherStatusID As String
        'Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property PaymentVoucherNo() As String
            Get
                Return m_PaymentVoucherNo
            End Get
            Set(ByVal Value As String)
                m_PaymentVoucherNo = Value
            End Set
        End Property

        Public Property VisitTypeID() As String
            Get
                Return m_VisitTypeID
            End Get
            Set(ByVal Value As String)
                m_VisitTypeID = Value
            End Set
        End Property

        Public Property StartDateTime() As Date
            Get
                Return m_StartDateTime
            End Get
            Set(ByVal Value As Date)
                m_StartDateTime = Value
            End Set
        End Property

        Public Property EndDateTime() As Date
            Get
                Return m_EndDateTime
            End Get
            Set(ByVal Value As Date)
                m_EndDateTime = Value
            End Set
        End Property

        Public Property BillModesID() As String
            Get
                Return m_BillModesID
            End Get
            Set(ByVal Value As String)
                m_BillModesID = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(ByVal Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property VoucherStatusID() As String
            Get
                Return m_VoucherStatusID
            End Get
            Set(ByVal Value As String)
                m_VoucherStatusID = Value
            End Set
        End Property

        'Public Property RecordDateTime() As Date
        '    Get
        '        Return m_RecordDateTime
        '    End Get
        '    Set(ByVal Value As Date)
        '        m_RecordDateTime = Value
        '    End Set
        'End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertStaffPayments")

            With Parameters
                .Add(New ParameterSQL("PaymentVoucherNo", Me.PaymentVoucherNo))
                .Add(New ParameterSQL("VisitTypeID", Me.VisitTypeID))
                .Add(New ParameterSQL("StartDateTime", Me.StartDateTime))
                .Add(New ParameterSQL("EndDateTime", Me.EndDateTime))
                .Add(New ParameterSQL("BillModesID", Me.BillModesID))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("VoucherStatusID", Me.VoucherStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                '.Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateStaffPayments")

            With Parameters
                .Add(New ParameterSQL("PaymentVoucherNo", Me.PaymentVoucherNo))
                .Add(New ParameterSQL("VisitTypeID", Me.VisitTypeID))
                .Add(New ParameterSQL("StartDateTime", Me.StartDateTime))
                .Add(New ParameterSQL("EndDateTime", Me.EndDateTime))
                .Add(New ParameterSQL("BillModesID", Me.BillModesID))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("VoucherStatusID", Me.VoucherStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                '.Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            'For Audit Trail
            Me.SetLogObject("StaffPayments")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PaymentVoucherNo = '" + Me.PaymentVoucherNo + "'"
            Dim errorPart As String = "Payment VoucherNo: " + Me.PaymentVoucherNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "StaffPayments"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("StaffPayments")

            Return Parameters

        End Function

        Public Function GetStaffPayments(ByVal paymentVoucherNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PaymentVoucherNo", paymentVoucherNo))
            End With

            Return Me.Load("uspGetStaffPayments", "StaffPayments", Parameters)

        End Function

        Public Function GetPendingStaffPayments() As DataSet

            Return Me.Load("uspGetPendingStaffPayments", "StaffPayments")

        End Function

        Public Function GetPeriodicPendingStaffPayments(ByVal StartDateTime As Nullable(Of DateTime), ByVal EndDateTime As Nullable(Of DateTime), ByVal VisitTypeID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDateTime", StartDateTime))
                .Add(New ParameterSQL("EndDateTime", EndDateTime))
                .Add(New ParameterSQL("VisitTypeID", VisitTypeID))
            End With

            Return Me.Load("uspGetPeriodicPendingStaffPayments", "StaffPayments", Parameters)

        End Function

        Public Function GetNextPaymentVoucherID() As Integer

            With Parameters
                .Add(New ParameterSQL("PaymentVoucherID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextPaymentVoucherID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("PaymentVoucherID")) Then
                    Return CInt(Me.ReadData("PaymentVoucherID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function GetVoucherPaymentDetails(staffNo As String, startDateTime As Nullable(Of DateTime),
                                       endDateTime As Nullable(Of DateTime), itemCategoryID As String,
                                       billModesID As String, visitTypeID As String, itemStatusID As String,
                                       accountNo As String, companyNo As String) As DataSet
            With Parameters
                .Add(New ParameterSQL("StaffNo", staffNo))
                .Add(New ParameterSQL("StartDate", startDateTime))
                .Add(New ParameterSQL("EndDate", endDateTime))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("BillModesID", billModesID))
                .Add(New ParameterSQL("VisitTypeID", visitTypeID))
                .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                .Add(New ParameterSQL("AccountNo", accountNo))
                .Add(New ParameterSQL("CompanyNo", companyNo))
            End With
            Return Me.Load("uspToGetVoucherPaymentDetails", "voucherItems", Parameters)

        End Function

        Public Function GetVoucherPaymentDetailsExt(staffNo As String, startDateTime As Nullable(Of DateTime),
                                      endDateTime As Nullable(Of DateTime), itemCategoryID As String,
                                      billModesID As String, visitTypeID As String, itemStatusID As String,
                                      accountNo As String, companyNo As String) As DataSet
            With Parameters
                .Add(New ParameterSQL("StaffNo", staffNo))
                .Add(New ParameterSQL("StartDate", startDateTime))
                .Add(New ParameterSQL("EndDate", endDateTime))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("BillModesID", billModesID))
                .Add(New ParameterSQL("VisitTypeID", visitTypeID))
                .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                .Add(New ParameterSQL("AccountNo", accountNo))
                .Add(New ParameterSQL("CompanyNo", companyNo))
            End With
            Return Me.Load("uspToGetVoucherPaymentDetailsExt", "voucherItems", Parameters)

        End Function


        Public Function GetPendingVoucherPaymentDetails(staffNo As String, startDateTime As Nullable(Of DateTime),
                                      endDateTime As Nullable(Of DateTime), paymentVoucherNo As String,
                                      billModesID As String, visitTypeID As String) As DataSet
            With Parameters
                .Add(New ParameterSQL("StaffNo", staffNo))
                .Add(New ParameterSQL("StartDate", startDateTime))
                .Add(New ParameterSQL("EndDate", endDateTime))
                .Add(New ParameterSQL("PaymentVoucherNo", paymentVoucherNo))
                .Add(New ParameterSQL("BillModesID", billModesID))
                .Add(New ParameterSQL("VisitTypeID", visitTypeID))
            End With
            Return Me.Load("uspToGetPendingVoucherPaymentDetails", "voucherItems", Parameters)

        End Function

#End Region

    End Class

    Public Class IPDStaffPaymentDetails : Inherits DBConnect

#Region " Fields "

        Private m_PaymentVoucherNo As String
        Private m_VisitNo As String
        Private m_RoundNo As String
        Private m_ExtraBillNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Amount As Decimal
        Private m_ApprovalStatusID As String
        Private m_ApprovalNotes As String
        'Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property PaymentVoucherNo() As String
            Get
                Return m_PaymentVoucherNo
            End Get
            Set(ByVal Value As String)
                m_PaymentVoucherNo = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(ByVal Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property ExtraBillNo() As String
            Get
                Return m_ExtraBillNo
            End Get
            Set(ByVal Value As String)
                m_ExtraBillNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

        Public Property ApprovalStatusID() As String
            Get
                Return m_ApprovalStatusID
            End Get
            Set(ByVal Value As String)
                m_ApprovalStatusID = Value
            End Set
        End Property

        Public Property ApprovalNotes() As String
            Get
                Return m_ApprovalNotes
            End Get
            Set(ByVal Value As String)
                m_ApprovalNotes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertIPDStaffPaymentDetails")

            With Parameters
                .Add(New ParameterSQL("PaymentVoucherNo", Me.PaymentVoucherNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("ApprovalNotes", Me.ApprovalNotes))
                .Add(New ParameterSQL("ApprovalStatusID", Me.ApprovalStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                '.Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDStaffPaymentDetails")

            With Parameters
                .Add(New ParameterSQL("PaymentVoucherNo", Me.PaymentVoucherNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("ApprovalNotes", Me.ApprovalNotes))
                .Add(New ParameterSQL("ApprovalStatusID", Me.ApprovalStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                '.Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDStaffPaymentDetails")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PaymentVoucherNo = '" + Me.PaymentVoucherNo + "'"
            Dim errorPart As String = "Payment VoucherNo: " + Me.PaymentVoucherNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDStaffPaymentDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDStaffPaymentDetails")

            Return Parameters

        End Function

        Public Function GetIPDStaffPaymentDetails(ByVal paymentVoucherNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PaymentVoucherNo", paymentVoucherNo))
            End With

            Return Me.Load("uspGetIPDStaffPaymentDetails", "IPDStaffPaymentDetails", Parameters)

        End Function

#End Region


    End Class

    Public Class OPDStaffPaymentDetails : Inherits DBConnect

#Region " Fields "

        Private m_PaymentVoucherNo As String
        Private m_VisitNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Amount As Decimal
        Private m_ApprovalStatusID As String
        Private m_ApprovalNotes As String
        'Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property PaymentVoucherNo() As String
            Get
                Return m_PaymentVoucherNo
            End Get
            Set(ByVal Value As String)
                m_PaymentVoucherNo = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        'Public Property RoundNo() As String
        '    Get
        '        Return m_RoundNo
        '    End Get
        '    Set(ByVal Value As String)
        '        m_RoundNo = Value
        '    End Set
        'End Property

        'Public Property ExtraBillNo() As String
        '    Get
        '        Return m_ExtraBillNo
        '    End Get
        '    Set(ByVal Value As String)
        '        m_ExtraBillNo = Value
        '    End Set
        'End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

        Public Property ApprovalStatusID() As String
            Get
                Return m_ApprovalStatusID
            End Get
            Set(ByVal Value As String)
                m_ApprovalStatusID = Value
            End Set
        End Property

        Public Property ApprovalNotes() As String
            Get
                Return m_ApprovalNotes
            End Get
            Set(ByVal Value As String)
                m_ApprovalNotes = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertOPDStaffPaymentDetails")

            With Parameters
                .Add(New ParameterSQL("PaymentVoucherNo", Me.PaymentVoucherNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                '.Add(New ParameterSQL("RoundNo", Me.RoundNo))
                '.Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("ApprovalNotes", Me.ApprovalNotes))
                .Add(New ParameterSQL("ApprovalStatusID", Me.ApprovalStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                '.Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateOPDStaffPaymentDetails")

            With Parameters
                .Add(New ParameterSQL("PaymentVoucherNo", Me.PaymentVoucherNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                '.Add(New ParameterSQL("RoundNo", Me.RoundNo))
                '.Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("ApprovalNotes", Me.ApprovalNotes))
                .Add(New ParameterSQL("ApprovalStatusID", Me.ApprovalStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                '.Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            'For Audit Trail
            Me.SetLogObject("OPDStaffPaymentDetails")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PaymentVoucherNo = '" + Me.PaymentVoucherNo + "'"
            Dim errorPart As String = "Payment VoucherNo: " + Me.PaymentVoucherNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "OPDStaffPaymentDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("OPDStaffPaymentDetails")

            Return Parameters

        End Function

        Public Function GetOPDStaffPaymentDetails(ByVal paymentVoucherNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PaymentVoucherNo", paymentVoucherNo))
            End With

            Return Me.Load("uspGetOPDStaffPaymentDetails", "OPDStaffPaymentDetails", Parameters)

        End Function

#End Region


    End Class

    Public Class StaffPaymentsExt : Inherits DBConnect

#Region " Fields "

        Private m_PaymentVoucherNo As String
        Private m_ApprovalDateTime As Date
        Private m_PayModeID As String
        Private m_DocumentNo As String
        Private m_CurrenciesID As String
        Private m_ExchangeRate As Decimal
        Private m_Amount As Decimal
        Private m_AmountWords As String
        Private m_ApprovalStatusID As String
        'Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property PaymentVoucherNo() As String
            Get
                Return m_PaymentVoucherNo
            End Get
            Set(ByVal Value As String)
                m_PaymentVoucherNo = Value
            End Set
        End Property

        Public Property ApprovalDateTime() As Date
            Get
                Return m_ApprovalDateTime
            End Get
            Set(ByVal Value As Date)
                m_ApprovalDateTime = Value
            End Set
        End Property

        Public Property PayModeID() As String
            Get
                Return m_PayModeID
            End Get
            Set(ByVal Value As String)
                m_PayModeID = Value
            End Set
        End Property

        Public Property DocumentNo() As String
            Get
                Return m_DocumentNo
            End Get
            Set(ByVal Value As String)
                m_DocumentNo = Value
            End Set
        End Property

        Public Property CurrenciesID() As String
            Get
                Return m_CurrenciesID
            End Get
            Set(ByVal Value As String)
                m_CurrenciesID = Value
            End Set
        End Property

        Public Property ExchangeRate() As Decimal
            Get
                Return m_ExchangeRate
            End Get
            Set(ByVal Value As Decimal)
                m_ExchangeRate = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

        Public Property AmountWords() As String
            Get
                Return m_AmountWords
            End Get
            Set(ByVal Value As String)
                m_AmountWords = Value
            End Set
        End Property

        Public Property ApprovalStatusID() As String
            Get
                Return m_ApprovalStatusID
            End Get
            Set(ByVal Value As String)
                m_ApprovalStatusID = Value
            End Set
        End Property

        'Public Property RecordDateTime() As Date
        '	Get
        '		Return m_RecordDateTime
        '	End Get
        '	Set(ByVal Value As Date)
        '		m_RecordDateTime = Value
        '	End Set
        'End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertStaffPaymentsExt")

            With Parameters
                .Add(New ParameterSQL("PaymentVoucherNo", Me.PaymentVoucherNo))
                .Add(New ParameterSQL("ApprovalDateTime", Me.ApprovalDateTime))
                .Add(New ParameterSQL("PayModeID", Me.PayModeID))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("CurrenciesID", Me.CurrenciesID))
                .Add(New ParameterSQL("ExchangeRate", Me.ExchangeRate))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("AmountWords", Me.AmountWords))
                .Add(New ParameterSQL("ApprovalStatusID", Me.ApprovalStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                '.Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateStaffPaymentsExt")

            With Parameters
                .Add(New ParameterSQL("PaymentVoucherNo", Me.PaymentVoucherNo))
                .Add(New ParameterSQL("ApprovalDateTime", Me.ApprovalDateTime))
                .Add(New ParameterSQL("PayModeID", Me.PayModeID))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("CurrenciesID", Me.CurrenciesID))
                .Add(New ParameterSQL("ExchangeRate", Me.ExchangeRate))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("AmountWords", Me.AmountWords))
                .Add(New ParameterSQL("ApprovalStatusID", Me.ApprovalStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                '.Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            'For Audit Trail
            Me.SetLogObject("StaffPaymentsExt")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PaymentVoucherNo = '" + Me.PaymentVoucherNo + "'"
            Dim errorPart As String = "Payment VoucherNo: " + Me.PaymentVoucherNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "StaffPaymentsExt"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("StaffPaymentsExt")

            Return Parameters

        End Function

        Public Function GetStaffPaymentsExt(ByVal paymentVoucherNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PaymentVoucherNo", paymentVoucherNo))
            End With

            Return Me.Load("uspGetStaffPaymentsExt", "StaffPaymentsExt", Parameters)

        End Function

#End Region


    End Class

    Public Class Patients : Inherits Person

#Region " Fields "
        Private m_PatientNo As String
        Private m_DefaultBillModesID As String
        Private m_DefaultBillNo As String
        Private m_DefaultMemberCardNo As String
        Private m_DefaultMainMemberName As String
        Private m_EnforceDefaultBillNo As Boolean
        Private m_HideDetails As Boolean
        Private m_CareEntryPointID As String
        Private m_CountryID As String
        Private m_EducationLevelID As String
        Private m_Employer As String
        Private m_EmployerAddress As String
        Private m_ReferringMedicalOfficer As String
        Private m_NearestDispensary As String
        Private m_PreviousAdmissions As String
        Private m_ChronicDiseases As String
        Private m_NationalIDNo As String
        Private m_XrayNumbers As Decimal
        Private m_PoliceNotified As Boolean
        Private m_InfectiousDiseasesNotified As Boolean
        Private m_MedicalConditions As String
        Private m_ProvisionalDiagnosis As String
        Private m_CommunityID As String
        Private m_ReferringFacility As String
#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(value As String)
                m_PatientNo = value
            End Set
        End Property

        Public Property DefaultBillModesID() As String
            Get
                Return m_DefaultBillModesID
            End Get
            Set(Value As String)
                m_DefaultBillModesID = Value
            End Set
        End Property

        Public Property DefaultBillNo() As String
            Get
                Return m_DefaultBillNo
            End Get
            Set(value As String)
                m_DefaultBillNo = value
            End Set
        End Property

        Public Property EnforceDefaultBillNo() As Boolean
            Get
                Return m_EnforceDefaultBillNo
            End Get
            Set(value As Boolean)
                m_EnforceDefaultBillNo = value
            End Set
        End Property

        Public Property HideDetails() As Boolean
            Get
                Return m_HideDetails
            End Get
            Set(value As Boolean)
                m_HideDetails = value
            End Set
        End Property

        Public Property DefaultMemberCardNo() As String
            Get
                Return m_DefaultMemberCardNo
            End Get
            Set(Value As String)
                m_DefaultMemberCardNo = Value
            End Set
        End Property

        Public Property DefaultMainMemberName() As String
            Get
                Return m_DefaultMainMemberName
            End Get
            Set(Value As String)
                m_DefaultMainMemberName = Value
            End Set
        End Property

        Public Property CareEntryPointID() As String
            Get
                Return m_CareEntryPointID
            End Get
            Set(Value As String)
                m_CareEntryPointID = Value
            End Set
        End Property

        Public Property CommunityID() As String
            Get
                Return m_CommunityID
            End Get
            Set(Value As String)
                m_CommunityID = Value
            End Set
        End Property

        Public Property EducationLevelID() As String
            Get
                Return m_EducationLevelID
            End Get
            Set(Value As String)
                m_EducationLevelID = Value
            End Set
        End Property

        Public Property CountryID() As String
            Get
                Return m_CountryID
            End Get
            Set(Value As String)
                m_CountryID = Value
            End Set
        End Property
        Public Property Employer() As String
            Get
                Return m_Employer
            End Get
            Set(Value As String)
                m_Employer = Value
            End Set
        End Property

        Public Property EmployerAddress() As String
            Get
                Return m_EmployerAddress
            End Get
            Set(Value As String)
                m_EmployerAddress = Value
            End Set
        End Property

        Public Property ReferringMedicalOfficer() As String
            Get
                Return m_ReferringMedicalOfficer
            End Get
            Set(Value As String)
                m_ReferringMedicalOfficer = Value
            End Set
        End Property

        Public Property NearestDispensary() As String
            Get
                Return m_NearestDispensary
            End Get
            Set(Value As String)
                m_NearestDispensary = Value
            End Set
        End Property

        Public Property PreviousAdmissions() As String
            Get
                Return m_PreviousAdmissions
            End Get
            Set(Value As String)
                m_PreviousAdmissions = Value
            End Set
        End Property

        Public Property ChronicDiseases() As String
            Get
                Return m_ChronicDiseases
            End Get
            Set(Value As String)
                m_ChronicDiseases = Value
            End Set
        End Property

        Public Property NationalIDNo() As String
            Get
                Return m_NationalIDNo
            End Get
            Set(Value As String)
                m_NationalIDNo = Value
            End Set
        End Property

        Public Property XrayNumbers() As Decimal
            Get
                Return m_XrayNumbers
            End Get
            Set(Value As Decimal)
                m_XrayNumbers = Value
            End Set
        End Property

        Public Property PoliceNotified() As Boolean
            Get
                Return m_PoliceNotified
            End Get
            Set(Value As Boolean)
                m_PoliceNotified = Value
            End Set
        End Property

        Public Property InfectiousDiseasesNotified() As Boolean
            Get
                Return m_InfectiousDiseasesNotified
            End Get
            Set(Value As Boolean)
                m_InfectiousDiseasesNotified = Value
            End Set
        End Property

        Public Property MedicalConditions() As String
            Get
                Return m_MedicalConditions
            End Get
            Set(Value As String)
                m_MedicalConditions = Value
            End Set
        End Property

        Public Property ProvisionalDiagnosis() As String
            Get
                Return m_ProvisionalDiagnosis
            End Get
            Set(Value As String)
                m_ProvisionalDiagnosis = Value
            End Set
        End Property

        Public Property ReferringFacility() As String
            Get
                Return m_ReferringFacility
            End Get
            Set(Value As String)
                m_ReferringFacility = Value
            End Set
        End Property
#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPatients")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("ReferenceNo", Me.ReferenceNo))
                .Add(New ParameterSQL("NationalIDNo", Me.NationalIDNo))
                .Add(New ParameterSQL("FirstName", Me.FirstName))
                .Add(New ParameterSQL("LastName", Me.LastName))
                .Add(New ParameterSQL("MiddleName", Me.MiddleName))
                .Add(New ParameterSQL("BirthDate", Me.BirthDate))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("Photo", Me.Photo))
                .Add(New ParameterSQL("Fingerprint", Me.Fingerprint))
                .Add(New ParameterSQL("BirthPlace", Me.BirthPlace))
                .Add(New ParameterSQL("Address", Me.Address))
                .Add(New ParameterSQL("Occupation", Me.Occupation))
                .Add(New ParameterSQL("Phone", Me.Phone))
                .Add(New ParameterSQL("Email", Me.Email))
                .Add(New ParameterSQL("JoinDate", Me.JoinDate))
                .Add(New ParameterSQL("Location", Me.Location))
                .Add(New ParameterSQL("NOKName", Me.NOKName))
                .Add(New ParameterSQL("NOKRelationship", Me.NOKRelationship))
                .Add(New ParameterSQL("NOKPhone", Me.NOKPhone))
                .Add(New ParameterSQL("DefaultBillModesID", Me.DefaultBillModesID))
                .Add(New ParameterSQL("DefaultBillNo", Me.DefaultBillNo))
                .Add(New ParameterSQL("DefaultMemberCardNo", Me.DefaultMemberCardNo))
                .Add(New ParameterSQL("DefaultMainMemberName", Me.DefaultMainMemberName))
                .Add(New ParameterSQL("EnforceDefaultBillNo", Me.EnforceDefaultBillNo))
                .Add(New ParameterSQL("HideDetails", Me.HideDetails))
                .Add(New ParameterSQL("StatusID", Me.StatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                '''''''''''''' Optional Fields ''''''''''''''''''''''''''
                .Add(New ParameterSQL("BloodGroupID", Me.BloodGroupID))
                .Add(New ParameterSQL("VillageCode", Me.VillageCode))
                .Add(New ParameterSQL("TribeID", Me.TribeID))
                .Add(New ParameterSQL("ReligionID", Me.ReligionID))
                .Add(New ParameterSQL("MaritalStatusID", Me.MaritalStatusID))
                .Add(New ParameterSQL("CareEntryPointID", Me.CareEntryPointID))
                .Add(New ParameterSQL("CommunityID", Me.CommunityID))
                .Add(New ParameterSQL("CountryID", Me.CountryID))
                .Add(New ParameterSQL("EducationLevelID", Me.EducationLevelID))
                .Add(New ParameterSQL("Employer", Me.Employer))
                .Add(New ParameterSQL("EmployerAddress", Me.EmployerAddress))
                .Add(New ParameterSQL("ReferringMedicalOfficer", Me.ReferringMedicalOfficer))
                .Add(New ParameterSQL("NearestDispensary", Me.NearestDispensary))
                .Add(New ParameterSQL("PreviousAdmissions", Me.PreviousAdmissions))
                .Add(New ParameterSQL("ChronicDiseases", Me.ChronicDiseases))
                .Add(New ParameterSQL("XrayNumbers", Me.XrayNumbers))
                .Add(New ParameterSQL("PoliceNotified", Me.PoliceNotified))
                .Add(New ParameterSQL("InfectiousDiseasesNotified", Me.InfectiousDiseasesNotified))
                .Add(New ParameterSQL("MedicalConditions", Me.MedicalConditions))
                .Add(New ParameterSQL("ProvisionalDiagnosis", Me.ProvisionalDiagnosis))
                .Add(New ParameterSQL("ReferringFacility", Me.ReferringFacility))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePatients")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("ReferenceNo", Me.ReferenceNo))
                .Add(New ParameterSQL("NationalIDNo", Me.NationalIDNo))
                .Add(New ParameterSQL("FirstName", Me.FirstName))
                .Add(New ParameterSQL("LastName", Me.LastName))
                .Add(New ParameterSQL("MiddleName", Me.MiddleName))
                .Add(New ParameterSQL("BirthDate", Me.BirthDate))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("Photo", Me.Photo))
                .Add(New ParameterSQL("Fingerprint", Me.Fingerprint))
                .Add(New ParameterSQL("BirthPlace", Me.BirthPlace))
                .Add(New ParameterSQL("Address", Me.Address))
                .Add(New ParameterSQL("Occupation", Me.Occupation))
                .Add(New ParameterSQL("Phone", Me.Phone))
                .Add(New ParameterSQL("Email", Me.Email))
                .Add(New ParameterSQL("JoinDate", Me.JoinDate))
                .Add(New ParameterSQL("Location", Me.Location))
                .Add(New ParameterSQL("NOKName", Me.NOKName))
                .Add(New ParameterSQL("NOKRelationship", Me.NOKRelationship))
                .Add(New ParameterSQL("NOKPhone", Me.NOKPhone))
                .Add(New ParameterSQL("DefaultBillModesID", Me.DefaultBillModesID))
                .Add(New ParameterSQL("DefaultBillNo", Me.DefaultBillNo))
                .Add(New ParameterSQL("DefaultMemberCardNo", Me.DefaultMemberCardNo))
                .Add(New ParameterSQL("DefaultMainMemberName", Me.DefaultMainMemberName))
                .Add(New ParameterSQL("EnforceDefaultBillNo", Me.EnforceDefaultBillNo))
                .Add(New ParameterSQL("HideDetails", Me.HideDetails))
                .Add(New ParameterSQL("StatusID", Me.StatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                '''''''''''''' Optional Fields ''''''''''''''''''''''''''
                .Add(New ParameterSQL("BloodGroupID", Me.BloodGroupID))
                .Add(New ParameterSQL("VillageCode", Me.VillageCode))
                .Add(New ParameterSQL("TribeID", Me.TribeID))
                .Add(New ParameterSQL("ReligionID", Me.ReligionID))
                .Add(New ParameterSQL("MaritalStatusID", Me.MaritalStatusID))
                .Add(New ParameterSQL("CareEntryPointID", Me.CareEntryPointID))
                .Add(New ParameterSQL("CommunityID", Me.CommunityID))
                .Add(New ParameterSQL("EducationLevelID", Me.EducationLevelID))
                .Add(New ParameterSQL("CountryID", Me.CountryID))
                .Add(New ParameterSQL("Employer", Me.Employer))
                .Add(New ParameterSQL("EmployerAddress", Me.EmployerAddress))
                .Add(New ParameterSQL("ReferringMedicalOfficer", Me.ReferringMedicalOfficer))
                .Add(New ParameterSQL("NearestDispensary", Me.NearestDispensary))
                .Add(New ParameterSQL("PreviousAdmissions", Me.PreviousAdmissions))
                .Add(New ParameterSQL("ChronicDiseases", Me.ChronicDiseases))
                .Add(New ParameterSQL("XrayNumbers", Me.XrayNumbers))
                .Add(New ParameterSQL("PoliceNotified", Me.PoliceNotified))
                .Add(New ParameterSQL("InfectiousDiseasesNotified", Me.InfectiousDiseasesNotified))
                .Add(New ParameterSQL("MedicalConditions", Me.MedicalConditions))
                .Add(New ParameterSQL("ProvisionalDiagnosis", Me.ProvisionalDiagnosis))
                .Add(New ParameterSQL("ReferringFacility", Me.ReferringFacility))
            End With

            'For Audit Trial
            Me.SetLogObject("Patients")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Me.SetCommand("uspDeletePatients")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
            End With

            'For Audit Trial
            Me.SetLogObject("Patients")

            Return Parameters

        End Function

        Public Function GetPatient(patientNo As String) As Boolean

            Dim oAppData As New SyncSoft.Common.Classes.AppData()

            Try

                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("FirstName", SqlDbType.VarChar, 20))
                    .Add(New ParameterSQL("LastName", SqlDbType.VarChar, 20))
                    .Add(New ParameterSQL("Phone", SqlDbType.VarChar, 30))
                    .Add(New ParameterSQL("BirthDate", SqlDbType.SmallDateTime))
                End With

                Me.ReadData = Me.Read("uspGetPatient", Parameters)

                If Not Me.ReadData Is Nothing Then

                    If Not IsDBNull(Me.ReadData("FirstName")) Then
                        Me.FirstName = CStr(Me.ReadData("FirstName"))
                    Else : Me.FirstName = String.Empty
                    End If

                    If Not IsDBNull(Me.ReadData("LastName")) Then
                        Me.LastName = CStr(Me.ReadData("LastName"))
                    Else : Me.LastName = String.Empty
                    End If

                    If Not IsDBNull(Me.ReadData("Phone")) Then
                        Me.Phone = CStr(Me.ReadData("Phone"))
                    Else : Me.Phone = String.Empty
                    End If

                    If Not IsDBNull(Me.ReadData("BirthDate")) Then
                        Me.BirthDate = CDate(Me.ReadData("BirthDate"))
                    Else : Me.BirthDate = oAppData.NullDateValue
                    End If

                    Return True
                Else : Return False
                End If

            Catch ex As Exception
                Throw ex

            End Try

        End Function

        Public Function GetPatients(patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetPatients", "Patients", Parameters)

        End Function

        ''' <summary>
        ''' Get active patients with registered fingerprints for specified patient no
        ''' </summary>
        ''' <param name="patientNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPatientFingerprints(patientNo As String) As DataSet

            If String.IsNullOrEmpty(patientNo) Then
                With Parameters
                    .Add(New ParameterSQL("PatientNo", Nothing))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                End With
            End If

            Return Me.Load("uspGetPatientFingerprints", "Patients", Parameters)

        End Function

        Public Function GetLabResultsFingerprints(patientNo As String) As DataSet

            If String.IsNullOrEmpty(patientNo) Then
                With Parameters
                    .Add(New ParameterSQL("PatientNo", Nothing))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                End With
            End If

            Return Me.Load("uspGetLabResultsFingerprints", "LabResults", Parameters)

        End Function

        ''' <summary>
        ''' Get active patients with registered fingerprints 
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPatientFingerprints() As DataSet
            Return GetPatientFingerprints(String.Empty)
        End Function

        Public Function GetLabResultsFingerprints() As DataSet
            Return GetLabResultsFingerprints(String.Empty)
        End Function

        ''' <summary>
        ''' Returns Patient No for supplied Medical Card No
        ''' </summary>
        ''' <param name="billNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPatientNoByBillNo(billNo As String) As String

            Try

                With Parameters
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("PatientNo", SqlDbType.VarChar, 20))
                End With

                Me.ReadData = Me.Read("uspGetPatientNoByBillNo", Parameters)

                If Not Me.ReadData Is Nothing Then
                    If Not IsDBNull(Me.ReadData("PatientNo")) Then
                        Return CStr(Me.ReadData("PatientNo"))
                    Else : Return String.Empty
                    End If
                Else : Return String.Empty
                End If

            Catch ex As Exception
                Throw ex

            End Try

        End Function

        ''' <summary>
        ''' Returns Patient No for supplied Member Card No
        ''' </summary>
        ''' <param name="MemberCardNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPatientNoByMemberCardNo(memberCardNo As String) As String

            Try

                With Parameters
                    .Add(New ParameterSQL("MemberCardNo", memberCardNo))
                    .Add(New ParameterSQL("PatientNo", SqlDbType.VarChar, 20))
                End With

                Me.ReadData = Me.Read("uspGetPatientNoByMemberCardNo", Parameters)

                If Not Me.ReadData Is Nothing Then
                    If Not IsDBNull(Me.ReadData("PatientNo")) Then
                        Return CStr(Me.ReadData("PatientNo"))
                    Else : Return String.Empty
                    End If
                Else : Return String.Empty
                End If

            Catch ex As Exception
                Throw ex

            End Try

        End Function

        Public Function GetPatientByChronicDiseases(patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetPatientByChronicDiseases", "Patients", Parameters)

        End Function

        Public Function GetNextPatientID() As Integer

            With Parameters
                .Add(New ParameterSQL("PatientID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextPatientID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("PatientID")) Then
                    Return CInt(Me.ReadData("PatientID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

        Public Function GetNextSelfRequestPatientID() As Integer

            With Parameters
                .Add(New ParameterSQL("PatientID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextSelfRequestPatientID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("PatientID")) Then
                    Return CInt(Me.ReadData("PatientID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

        Public Function IsFullNameSaved(fullName As String) As Boolean

            Dim records As Integer

            With Parameters
                .Add(New ParameterSQL("FullName", fullName))
                .Add(New ParameterSQL("Records", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspCountPatientFullName", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("Records")) Then
                    records = 0
                Else : records = CInt(Me.ReadData("Records"))
                End If
            End If

            Return records > 0

        End Function

        Public Function HasInWardAdmission(patientNo As String) As Boolean

            Dim records As Integer

            With Parameters
                .Add(New ParameterSQL("PatientNo", PatientNo))
                .Add(New ParameterSQL("Records", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspCountPatientInWardAdmissions", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("Records")) Then
                    records = 0
                Else : records = CInt(Me.ReadData("Records"))
                End If
            End If

            Return records > 0

        End Function

        Public Function IsNINSaved(nationalIDNo As String) As Boolean

            Dim records As Integer

            With Parameters
                .Add(New ParameterSQL("NationalIDNo", nationalIDNo))
                .Add(New ParameterSQL("Records", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspCountNationalIdentificationNo", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("Records")) Then
                    records = 0
                Else : records = CInt(Me.ReadData("Records"))
                End If
            End If

            Return records > 0

        End Function

        Public Function GetPatientBirthdays(patientNo As String) As DataSet

            If Not String.IsNullOrEmpty(patientNo) Then
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("PatientNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetPatientBirthdays", "Patients", Parameters)

        End Function


        ''' <summary>
        ''' Get all  today birthdays 
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPatientBirthdays() As DataSet
            Return GetPatientBirthdays(String.Empty)
        End Function


        Public Function GetPatientPhoneNos(startDate As Date, endDate As Date) As DataSet


                With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                End With


            Return Me.Load("uspGetPatientPhoneNumber", "Patients", Parameters)

        End Function

        Public Function GetPatientRegistrationDetails(startDateTime As Date, endDateTime As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))

            End With

            Return Me.Load("uspGetPatientRegistrationDetails", "Patients", Parameters)

        End Function
#End Region

    End Class

    Public Class PatientsEXT : Inherits DBConnect

#Region " Fields "

        Private m_PatientNo As String
        Private m_AlternateNo As String
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property AlternateNo() As String
            Get
                Return m_AlternateNo
            End Get
            Set(Value As String)
                m_AlternateNo = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditPatientsEXT")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("AlternateNo", Me.AlternateNo))
                .Add(New ParameterSQL("Notes", Me.Notes))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "PatientNo = '" + Me.PatientNo + "' and AlternateNo = '" + Me.AlternateNo + "'"
            errorPart = "Patient No: " + Me.PatientNo + " and Alternate No: " + Me.AlternateNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PatientsEXT"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PatientsEXT")

            Return Parameters

        End Function

        Public Function GetPatientsEXT(patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetPatientsEXT", "PatientsEXT", Parameters)

        End Function

#End Region

    End Class

    Public Class PatientConsent : Inherits DBConnect

#Region " Fields "

        Private m_PatientNo As String
        Private m_PhoneNo As String
        Private m_Notes As String
        Private m_FingerprintVerified As Boolean

#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(ByVal Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property PhoneNo() As String
            Get
                Return m_PhoneNo
            End Get
            Set(ByVal Value As String)
                m_PhoneNo = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

        Public Property FingerprintVerified() As Boolean
            Get
                Return m_FingerprintVerified
            End Get
            Set(ByVal Value As Boolean)
                m_FingerprintVerified = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPatientConsent")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("PhoneNo", Me.PhoneNo))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("FingerprintVerified", Me.FingerprintVerified))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePatientConsent")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("PhoneNo", Me.PhoneNo))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("FingerprintVerified", Me.FingerprintVerified))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("PatientConsent")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PatientNo = '" + Me.PatientNo + "'"
            Dim errorPart As String = "Patient No: " + Me.PatientNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PatientConsent"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PatientConsent")

            Return Parameters

        End Function

        Public Function GetPatientConsent(ByVal patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetPatientConsent", "PatientConsent", Parameters)

        End Function

#End Region



    End Class

    Public Class HIVCARE : Inherits DBConnect

#Region " Fields "

        Private m_PatientNo As String
        Private m_HealthUnit As String
        Private m_TeamLeader As String
        Private m_PtClinic As String
        Private m_LC1 As String
        Private m_ConfirmedTestDate As Date
        Private m_HIVEnrolledDate As Date
        Private m_EligibleARTDate As Date
        Private m_EligibleReadyDate As Date
        Private m_Ab As Boolean
        Private m_PCR As Boolean
        Private m_HIVCareWhere As String
        Private m_HIVCareTransferIn As Boolean
        Private m_TransferInFrom As String
        Private m_WHOStageID As String
        Private m_CD4 As Single
        Private m_PresumptiveHIV As Boolean
        Private m_PCRInfant As Boolean
        Private m_MedicalConditions As String
        Private m_COHORTMonth As Integer
        Private m_COHORTYear As Integer
        Private m_ARTTransferInDate As Date
        Private m_ARTTransferInFrom As String
        Private m_TransferInRegimen As String
        Private m_StartARTDate As Date
        Private m_StartARTRegimen As String
        Private m_StartARTWeight As Single
        Private m_StartARTWHOStageID As String
        Private m_StartARTCD4 As Single
        Private m_PregnancyStatusID As String

#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(ByVal Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property HealthUnit() As String
            Get
                Return m_HealthUnit
            End Get
            Set(ByVal Value As String)
                m_HealthUnit = Value
            End Set
        End Property

        Public Property TeamLeader() As String
            Get
                Return m_TeamLeader
            End Get
            Set(ByVal Value As String)
                m_TeamLeader = Value
            End Set
        End Property

        Public Property PtClinic() As String
            Get
                Return m_PtClinic
            End Get
            Set(ByVal Value As String)
                m_PtClinic = Value
            End Set
        End Property

        Public Property LC1() As String
            Get
                Return m_LC1
            End Get
            Set(ByVal Value As String)
                m_LC1 = Value
            End Set
        End Property

        Public Property ConfirmedTestDate() As Date
            Get
                Return m_ConfirmedTestDate
            End Get
            Set(ByVal Value As Date)
                m_ConfirmedTestDate = Value
            End Set
        End Property

        Public Property HIVEnrolledDate() As Date
            Get
                Return m_HIVEnrolledDate
            End Get
            Set(ByVal Value As Date)
                m_HIVEnrolledDate = Value
            End Set
        End Property

        Public Property EligibleARTDate() As Date
            Get
                Return m_EligibleARTDate
            End Get
            Set(ByVal Value As Date)
                m_EligibleARTDate = Value
            End Set
        End Property

        Public Property EligibleReadyDate() As Date
            Get
                Return m_EligibleReadyDate
            End Get
            Set(ByVal Value As Date)
                m_EligibleReadyDate = Value
            End Set
        End Property

        Public Property Ab() As Boolean
            Get
                Return m_Ab
            End Get
            Set(ByVal Value As Boolean)
                m_Ab = Value
            End Set
        End Property

        Public Property PCR() As Boolean
            Get
                Return m_PCR
            End Get
            Set(ByVal Value As Boolean)
                m_PCR = Value
            End Set
        End Property

        Public Property HIVCareWhere() As String
            Get
                Return m_HIVCareWhere
            End Get
            Set(ByVal Value As String)
                m_HIVCareWhere = Value
            End Set
        End Property

        Public Property HIVCareTransferIn() As Boolean
            Get
                Return m_HIVCareTransferIn
            End Get
            Set(ByVal Value As Boolean)
                m_HIVCareTransferIn = Value
            End Set
        End Property

        Public Property TransferInFrom() As String
            Get
                Return m_TransferInFrom
            End Get
            Set(ByVal Value As String)
                m_TransferInFrom = Value
            End Set
        End Property

        Public Property WHOStageID() As String
            Get
                Return m_WHOStageID
            End Get
            Set(ByVal Value As String)
                m_WHOStageID = Value
            End Set
        End Property

        Public Property CD4() As Single
            Get
                Return m_CD4
            End Get
            Set(ByVal Value As Single)
                m_CD4 = Value
            End Set
        End Property

        Public Property PresumptiveHIV() As Boolean
            Get
                Return m_PresumptiveHIV
            End Get
            Set(ByVal Value As Boolean)
                m_PresumptiveHIV = Value
            End Set
        End Property

        Public Property PCRInfant() As Boolean
            Get
                Return m_PCRInfant
            End Get
            Set(ByVal Value As Boolean)
                m_PCRInfant = Value
            End Set
        End Property

        Public Property MedicalConditions() As String
            Get
                Return m_MedicalConditions
            End Get
            Set(ByVal Value As String)
                m_MedicalConditions = Value
            End Set
        End Property

        Public Property COHORTMonth() As Integer
            Get
                Return m_COHORTMonth
            End Get
            Set(ByVal Value As Integer)
                m_COHORTMonth = Value
            End Set
        End Property

        Public Property COHORTYear() As Integer
            Get
                Return m_COHORTYear
            End Get
            Set(ByVal Value As Integer)
                m_COHORTYear = Value
            End Set
        End Property

        Public Property ARTTransferInDate() As Date
            Get
                Return m_ARTTransferInDate
            End Get
            Set(ByVal Value As Date)
                m_ARTTransferInDate = Value
            End Set
        End Property

        Public Property ARTTransferInFrom() As String
            Get
                Return m_ARTTransferInFrom
            End Get
            Set(ByVal Value As String)
                m_ARTTransferInFrom = Value
            End Set
        End Property

        Public Property TransferInRegimen() As String
            Get
                Return m_TransferInRegimen
            End Get
            Set(ByVal Value As String)
                m_TransferInRegimen = Value
            End Set
        End Property

        Public Property StartARTDate() As Date
            Get
                Return m_StartARTDate
            End Get
            Set(ByVal Value As Date)
                m_StartARTDate = Value
            End Set
        End Property

        Public Property StartARTRegimen() As String
            Get
                Return m_StartARTRegimen
            End Get
            Set(ByVal Value As String)
                m_StartARTRegimen = Value
            End Set
        End Property

        Public Property StartARTWeight() As Single
            Get
                Return m_StartARTWeight
            End Get
            Set(ByVal Value As Single)
                m_StartARTWeight = Value
            End Set
        End Property

        Public Property StartARTWHOStageID() As String
            Get
                Return m_StartARTWHOStageID
            End Get
            Set(ByVal Value As String)
                m_StartARTWHOStageID = Value
            End Set
        End Property

        Public Property StartARTCD4() As Single
            Get
                Return m_StartARTCD4
            End Get
            Set(ByVal Value As Single)
                m_StartARTCD4 = Value
            End Set
        End Property

        Public Property PregnancyStatusID() As String
            Get
                Return m_PregnancyStatusID
            End Get
            Set(ByVal Value As String)
                m_PregnancyStatusID = Value
            End Set
        End Property



#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertHIVCARE")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("HealthUnitCode", Me.HealthUnit))
                .Add(New ParameterSQL("TeamLeader", Me.TeamLeader))
                .Add(New ParameterSQL("PtClinic", Me.PtClinic))
                .Add(New ParameterSQL("LC1", Me.LC1))
                .Add(New ParameterSQL("ConfirmedTestDate", Me.ConfirmedTestDate))
                .Add(New ParameterSQL("HIVEnrolledDate", Me.HIVEnrolledDate))
                .Add(New ParameterSQL("EligibleARTDate", Me.EligibleARTDate))
                .Add(New ParameterSQL("EligibleReadyDate", Me.EligibleReadyDate))
                .Add(New ParameterSQL("Ab", Me.Ab))
                .Add(New ParameterSQL("PCR", Me.PCR))
                .Add(New ParameterSQL("HIVCareWhere", Me.HIVCareWhere))
                .Add(New ParameterSQL("HIVCareTransferIn", Me.HIVCareTransferIn))
                .Add(New ParameterSQL("TransferInFrom", Me.TransferInFrom))
                .Add(New ParameterSQL("WHOStageID", Me.WHOStageID))
                .Add(New ParameterSQL("CD4", Me.CD4))
                .Add(New ParameterSQL("PresumptiveHIV", Me.PresumptiveHIV))
                .Add(New ParameterSQL("PCRInfant", Me.PCRInfant))
                .Add(New ParameterSQL("MedicalConditions", Me.MedicalConditions))
                .Add(New ParameterSQL("COHORTMonth", Me.COHORTMonth))
                .Add(New ParameterSQL("COHORTYear", Me.COHORTYear))
                .Add(New ParameterSQL("ARTTransferInDate", Me.ARTTransferInDate))
                .Add(New ParameterSQL("ARTTransferInFrom", Me.ARTTransferInFrom))
                .Add(New ParameterSQL("TransferInRegimen", Me.TransferInRegimen))
                .Add(New ParameterSQL("StartARTDate", Me.StartARTDate))
                .Add(New ParameterSQL("StartARTRegimen", Me.StartARTRegimen))
                .Add(New ParameterSQL("StartARTWeight", Me.StartARTWeight))
                .Add(New ParameterSQL("StartARTWHOStageID", Me.StartARTWHOStageID))
                .Add(New ParameterSQL("StartARTCD4", Me.StartARTCD4))
                .Add(New ParameterSQL("PregnancyStatusID", Me.PregnancyStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateHIVCARE")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("HealthUnitCode", Me.HealthUnit))
                .Add(New ParameterSQL("TeamLeader", Me.TeamLeader))
                .Add(New ParameterSQL("PtClinic", Me.PtClinic))
                .Add(New ParameterSQL("LC1", Me.LC1))
                .Add(New ParameterSQL("ConfirmedTestDate", Me.ConfirmedTestDate))
                .Add(New ParameterSQL("HIVEnrolledDate", Me.HIVEnrolledDate))
                .Add(New ParameterSQL("EligibleARTDate", Me.EligibleARTDate))
                .Add(New ParameterSQL("EligibleReadyDate", Me.EligibleReadyDate))
                .Add(New ParameterSQL("Ab", Me.Ab))
                .Add(New ParameterSQL("PCR", Me.PCR))
                .Add(New ParameterSQL("HIVCareWhere", Me.HIVCareWhere))
                .Add(New ParameterSQL("HIVCareTransferIn", Me.HIVCareTransferIn))
                .Add(New ParameterSQL("TransferInFrom", Me.TransferInFrom))
                .Add(New ParameterSQL("WHOStageID", Me.WHOStageID))
                .Add(New ParameterSQL("CD4", Me.CD4))
                .Add(New ParameterSQL("PresumptiveHIV", Me.PresumptiveHIV))
                .Add(New ParameterSQL("PCRInfant", Me.PCRInfant))
                .Add(New ParameterSQL("MedicalConditions", Me.MedicalConditions))
                .Add(New ParameterSQL("COHORTMonth", Me.COHORTMonth))
                .Add(New ParameterSQL("COHORTYear", Me.COHORTYear))
                .Add(New ParameterSQL("ARTTransferInDate", Me.ARTTransferInDate))
                .Add(New ParameterSQL("ARTTransferInFrom", Me.ARTTransferInFrom))
                .Add(New ParameterSQL("TransferInRegimen", Me.TransferInRegimen))
                .Add(New ParameterSQL("StartARTDate", Me.StartARTDate))
                .Add(New ParameterSQL("StartARTRegimen", Me.StartARTRegimen))
                .Add(New ParameterSQL("StartARTWeight", Me.StartARTWeight))
                .Add(New ParameterSQL("StartARTWHOStageID", Me.StartARTWHOStageID))
                .Add(New ParameterSQL("StartARTCD4", Me.StartARTCD4))
                .Add(New ParameterSQL("PregnancyStatusID", Me.PregnancyStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("HIVCARE")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PatientNo = '" + Me.PatientNo + "'"
            Dim errorPart As String = "Patient No: " + Me.PatientNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "HIVCARE"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("HIVCARE")

            Return Parameters

        End Function

        Public Function GetHIVCARE(ByVal patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetHIVCARE", "HIVCARE", Parameters)

        End Function

#End Region

    End Class

    Public Class FamilyMembers : Inherits DBConnect

#Region " Fields "

        Private m_PatientNo As String
        Private m_MemberName As String
        Private m_Age As Short
        Private m_HIVStatusID As String
        Private m_HIVCareID As String
        Private m_UniqueNo As String

#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(ByVal Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property MemberName() As String
            Get
                Return m_MemberName
            End Get
            Set(ByVal Value As String)
                m_MemberName = Value
            End Set
        End Property

        Public Property Age() As Short
            Get
                Return m_Age
            End Get
            Set(ByVal Value As Short)
                m_Age = Value
            End Set
        End Property

        Public Property HIVStatusID() As String
            Get
                Return m_HIVStatusID
            End Get
            Set(ByVal Value As String)
                m_HIVStatusID = Value
            End Set
        End Property

        Public Property HIVCareID() As String
            Get
                Return m_HIVCareID
            End Get
            Set(ByVal Value As String)
                m_HIVCareID = Value
            End Set
        End Property

        Public Property UniqueNo() As String
            Get
                Return m_UniqueNo
            End Get
            Set(ByVal Value As String)
                m_UniqueNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditFamilyMembers")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("MemberName", Me.MemberName))
                .Add(New ParameterSQL("Age", Me.Age))
                .Add(New ParameterSQL("HIVStatusID", Me.HIVStatusID))
                .Add(New ParameterSQL("HIVCareID", Me.HIVCareID))
                .Add(New ParameterSQL("UniqueNo", Me.UniqueNo))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "PatientNo = '" + Me.PatientNo + "' and MemberName = '" + Me.MemberName + "'"
            errorPart = "Patient No: " + Me.PatientNo + " and Member Name: " + Me.MemberName

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "FamilyMembers"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("FamilyMembers")

            Return Parameters

        End Function

        Public Function GetFamilyMembers(ByVal patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetFamilyMembers", "FamilyMembers", Parameters)

        End Function

#End Region

    End Class

    Public Class ExposedInfants : Inherits DBConnect

#Region " Fields "

        Private m_PatientNo As String
        Private m_InfantName As String
        Private m_BirthDate As Date
        Private m_InfantFeedingID As String
        Private m_CTXStarted As String
        Private m_HIVTestTypeID As String
        Private m_TestResultsID As String
        Private m_InfantStatusID As String
        Private m_UniqueNo As String

#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(ByVal Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property InfantName() As String
            Get
                Return m_InfantName
            End Get
            Set(ByVal Value As String)
                m_InfantName = Value
            End Set
        End Property

        Public Property BirthDate() As Date
            Get
                Return m_BirthDate
            End Get
            Set(ByVal Value As Date)
                m_BirthDate = Value
            End Set
        End Property

        Public Property InfantFeedingID() As String
            Get
                Return m_InfantFeedingID
            End Get
            Set(ByVal Value As String)
                m_InfantFeedingID = Value
            End Set
        End Property

        Public Property CTXStarted() As String
            Get
                Return m_CTXStarted
            End Get
            Set(ByVal Value As String)
                m_CTXStarted = Value
            End Set
        End Property

        Public Property HIVTestTypeID() As String
            Get
                Return m_HIVTestTypeID
            End Get
            Set(ByVal Value As String)
                m_HIVTestTypeID = Value
            End Set
        End Property

        Public Property TestResultsID() As String
            Get
                Return m_TestResultsID
            End Get
            Set(ByVal Value As String)
                m_TestResultsID = Value
            End Set
        End Property

        Public Property InfantStatusID() As String
            Get
                Return m_InfantStatusID
            End Get
            Set(ByVal Value As String)
                m_InfantStatusID = Value
            End Set
        End Property

        Public Property UniqueNo() As String
            Get
                Return m_UniqueNo
            End Get
            Set(ByVal Value As String)
                m_UniqueNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditExposedInfants")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("InfantName", Me.InfantName))
                .Add(New ParameterSQL("BirthDate", Me.BirthDate))
                .Add(New ParameterSQL("InfantFeedingID", Me.InfantFeedingID))
                .Add(New ParameterSQL("CTXStarted", Me.CTXStarted))
                .Add(New ParameterSQL("HIVTestTypeID", Me.HIVTestTypeID))
                .Add(New ParameterSQL("TestResultsID", Me.TestResultsID))
                .Add(New ParameterSQL("InfantStatusID", Me.InfantStatusID))
                .Add(New ParameterSQL("UniqueNo", Me.UniqueNo))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "PatientNo = '" + Me.PatientNo + "' and InfantName = '" + Me.InfantName + "'"
            errorPart = "PatientNo: " + Me.PatientNo + " and Infant Name: " + Me.InfantName

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ExposedInfants"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ExposedInfants")

            Return Parameters

        End Function

        Public Function GetExposedInfants(ByVal patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetExposedInfants", "ExposedInfants", Parameters)

        End Function

#End Region

    End Class

    Public Class PriorARTDetails : Inherits DBConnect

#Region " Fields "

        Private m_PatientNo As String
        Private m_PriorARTID As String
        Private m_ARTDate As Date
        Private m_ARTWhere As String
        Private m_Combination As String

#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(ByVal Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property PriorARTID() As String
            Get
                Return m_PriorARTID
            End Get
            Set(ByVal Value As String)
                m_PriorARTID = Value
            End Set
        End Property

        Public Property ARTDate() As Date
            Get
                Return m_ARTDate
            End Get
            Set(ByVal Value As Date)
                m_ARTDate = Value
            End Set
        End Property

        Public Property ARTWhere() As String
            Get
                Return m_ARTWhere
            End Get
            Set(ByVal Value As String)
                m_ARTWhere = Value
            End Set
        End Property

        Public Property Combination() As String
            Get
                Return m_Combination
            End Get
            Set(ByVal Value As String)
                m_Combination = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditPriorARTDetails")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("PriorARTID", Me.PriorARTID))
                .Add(New ParameterSQL("ARTDate", Me.ARTDate))
                .Add(New ParameterSQL("ARTWhere", Me.ARTWhere))
                .Add(New ParameterSQL("Combination", Me.Combination))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "PatientNo = '" + Me.PatientNo + "' and PriorARTID = '" + Me.PriorARTID + "'"
            errorPart = "PatientNo: " + Me.PatientNo + " and Prior ART: " + Me.PriorARTID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PriorARTDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PriorARTDetails")

            Return Parameters

        End Function

        Public Function GetPriorARTDetails(ByVal patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetPriorARTDetails", "PriorARTDetails", Parameters)

        End Function

#End Region

    End Class

    Public Class Examinations : Inherits DBConnect

#Region " Fields "
        Private m_VisitNo As String
        Private m_ExamVisitTypeID As String
        Private m_FollowupDate As Date
        Private m_DurationStartART As Integer
        Private m_DurationCurrentART As Integer
        Private m_OedemaID As String
        Private m_PregnancyStatusID As String
        Private m_ExpectedDeliveryDate As Date
        Private m_PMTCT As Boolean
        Private m_GestationalAge As Integer
        Private m_MUACID As String
        Private m_FPMethods As String
        Private m_TBStatusID As String
        Private m_TBRxStartDate As Date
        Private m_TBRxStopDate As Date
        Private m_TBRegNo As String
        Private m_SideEffects As String
        Private m_NewOI As String
        Private m_FunctionalStatusID As String
        Private m_WHOStageID As String
        Private m_CPTAdhereID As String
        Private m_CPTDosage As Integer
        Private m_CPTDuration As Integer
        Private m_OtherMeds As String
        Private m_NutritionalSupID As String
        Private m_ARVAdhereID As String
        Private m_ARVAdhereWhy As String
        Private m_Combination As String
        Private m_ARVDosage As Integer
        Private m_ARVDuration As Integer
        Private m_CD4ABS As Single
        Private m_CD4PCT As Single
        Private m_Investigations As String
        Private m_Refer As String
        Private m_DaysHOSP As Integer
#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ExamVisitTypeID() As String
            Get
                Return m_ExamVisitTypeID
            End Get
            Set(ByVal Value As String)
                m_ExamVisitTypeID = Value
            End Set
        End Property

        Public Property FollowupDate() As Date
            Get
                Return m_FollowupDate
            End Get
            Set(ByVal Value As Date)
                m_FollowupDate = Value
            End Set
        End Property

        Public Property DurationStartART() As Integer
            Get
                Return m_DurationStartART
            End Get
            Set(ByVal Value As Integer)
                m_DurationStartART = Value
            End Set
        End Property

        Public Property DurationCurrentART() As Integer
            Get
                Return m_DurationCurrentART
            End Get
            Set(ByVal Value As Integer)
                m_DurationCurrentART = Value
            End Set
        End Property

        Public Property OedemaID() As String
            Get
                Return m_OedemaID
            End Get
            Set(ByVal Value As String)
                m_OedemaID = Value
            End Set
        End Property

        Public Property PregnancyStatusID() As String
            Get
                Return m_PregnancyStatusID
            End Get
            Set(ByVal Value As String)
                m_PregnancyStatusID = Value
            End Set
        End Property

        Public Property ExpectedDeliveryDate() As Date
            Get
                Return m_ExpectedDeliveryDate
            End Get
            Set(ByVal Value As Date)
                m_ExpectedDeliveryDate = Value
            End Set
        End Property

        Public Property PMTCT() As Boolean
            Get
                Return m_PMTCT
            End Get
            Set(ByVal Value As Boolean)
                m_PMTCT = Value
            End Set
        End Property

        Public Property GestationalAge() As Integer
            Get
                Return m_GestationalAge
            End Get
            Set(ByVal Value As Integer)
                m_GestationalAge = Value
            End Set
        End Property

        Public Property MUACID() As String
            Get
                Return m_MUACID
            End Get
            Set(ByVal Value As String)
                m_MUACID = Value
            End Set
        End Property

        Public Property FPMethods() As String
            Get
                Return m_FPMethods
            End Get
            Set(ByVal Value As String)
                m_FPMethods = Value
            End Set
        End Property

        Public Property TBStatusID() As String
            Get
                Return m_TBStatusID
            End Get
            Set(ByVal Value As String)
                m_TBStatusID = Value
            End Set
        End Property

        Public Property TBRxStartDate() As Date
            Get
                Return m_TBRxStartDate
            End Get
            Set(ByVal Value As Date)
                m_TBRxStartDate = Value
            End Set
        End Property

        Public Property TBRxStopDate() As Date
            Get
                Return m_TBRxStopDate
            End Get
            Set(ByVal Value As Date)
                m_TBRxStopDate = Value
            End Set
        End Property

        Public Property TBRegNo() As String
            Get
                Return m_TBRegNo
            End Get
            Set(ByVal Value As String)
                m_TBRegNo = Value
            End Set
        End Property

        Public Property SideEffects() As String
            Get
                Return m_SideEffects
            End Get
            Set(ByVal Value As String)
                m_SideEffects = Value
            End Set
        End Property

        Public Property NewOI() As String
            Get
                Return m_NewOI
            End Get
            Set(ByVal Value As String)
                m_NewOI = Value
            End Set
        End Property

        Public Property FunctionalStatusID() As String
            Get
                Return m_FunctionalStatusID
            End Get
            Set(ByVal Value As String)
                m_FunctionalStatusID = Value
            End Set
        End Property

        Public Property WHOStageID() As String
            Get
                Return m_WHOStageID
            End Get
            Set(ByVal Value As String)
                m_WHOStageID = Value
            End Set
        End Property

        Public Property CPTAdhereID() As String
            Get
                Return m_CPTAdhereID
            End Get
            Set(ByVal Value As String)
                m_CPTAdhereID = Value
            End Set
        End Property

        Public Property CPTDosage() As Integer
            Get
                Return m_CPTDosage
            End Get
            Set(ByVal Value As Integer)
                m_CPTDosage = Value
            End Set
        End Property

        Public Property CPTDuration() As Integer
            Get
                Return m_CPTDuration
            End Get
            Set(ByVal Value As Integer)
                m_CPTDuration = Value
            End Set
        End Property

        Public Property OtherMeds() As String
            Get
                Return m_OtherMeds
            End Get
            Set(ByVal Value As String)
                m_OtherMeds = Value
            End Set
        End Property

        Public Property NutritionalSupID() As String
            Get
                Return m_NutritionalSupID
            End Get
            Set(ByVal Value As String)
                m_NutritionalSupID = Value
            End Set
        End Property

        Public Property ARVAdhereID() As String
            Get
                Return m_ARVAdhereID
            End Get
            Set(ByVal Value As String)
                m_ARVAdhereID = Value
            End Set
        End Property

        Public Property ARVAdhereWhy() As String
            Get
                Return m_ARVAdhereWhy
            End Get
            Set(ByVal Value As String)
                m_ARVAdhereWhy = Value
            End Set
        End Property

        Public Property Combination() As String
            Get
                Return m_Combination
            End Get
            Set(ByVal Value As String)
                m_Combination = Value
            End Set
        End Property

        Public Property ARVDosage() As Integer
            Get
                Return m_ARVDosage
            End Get
            Set(ByVal Value As Integer)
                m_ARVDosage = Value
            End Set
        End Property

        Public Property ARVDuration() As Integer
            Get
                Return m_ARVDuration
            End Get
            Set(ByVal Value As Integer)
                m_ARVDuration = Value
            End Set
        End Property

        Public Property CD4ABS() As Single
            Get
                Return m_CD4ABS
            End Get
            Set(ByVal Value As Single)
                m_CD4ABS = Value
            End Set
        End Property

        Public Property CD4PCT() As Single
            Get
                Return m_CD4PCT
            End Get
            Set(ByVal Value As Single)
                m_CD4PCT = Value
            End Set
        End Property

        Public Property Investigations() As String
            Get
                Return m_Investigations
            End Get
            Set(ByVal Value As String)
                m_Investigations = Value
            End Set
        End Property

        Public Property Refer() As String
            Get
                Return m_Refer
            End Get
            Set(ByVal Value As String)
                m_Refer = Value
            End Set
        End Property

        Public Property DaysHOSP() As Integer
            Get
                Return m_DaysHOSP
            End Get
            Set(ByVal Value As Integer)
                m_DaysHOSP = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertExaminations")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ExamVisitTypeID", Me.ExamVisitTypeID))
                .Add(New ParameterSQL("FollowupDate", Me.FollowupDate))
                .Add(New ParameterSQL("DurationStartART", Me.DurationStartART))
                .Add(New ParameterSQL("DurationCurrentART", Me.DurationCurrentART))
                .Add(New ParameterSQL("OedemaID", Me.OedemaID))
                .Add(New ParameterSQL("PregnancyStatusID", Me.PregnancyStatusID))
                .Add(New ParameterSQL("ExpectedDeliveryDate", Me.ExpectedDeliveryDate))
                .Add(New ParameterSQL("PMTCT", Me.PMTCT))
                .Add(New ParameterSQL("GestationalAge", Me.GestationalAge))
                .Add(New ParameterSQL("MUACStatusID", Me.MUACID))
                .Add(New ParameterSQL("FPMethods", Me.FPMethods))
                .Add(New ParameterSQL("TBStatusID", Me.TBStatusID))
                .Add(New ParameterSQL("TBRxStartDate", Me.TBRxStartDate))
                .Add(New ParameterSQL("TBRxStopDate", Me.TBRxStopDate))
                .Add(New ParameterSQL("TBRegNo", Me.TBRegNo))
                .Add(New ParameterSQL("SideEffects", Me.SideEffects))
                .Add(New ParameterSQL("NewOI", Me.NewOI))
                .Add(New ParameterSQL("FunctionalStatusID", Me.FunctionalStatusID))
                .Add(New ParameterSQL("WHOStageID", Me.WHOStageID))
                .Add(New ParameterSQL("CPTAdhereID", Me.CPTAdhereID))
                .Add(New ParameterSQL("CPTDosage", Me.CPTDosage))
                .Add(New ParameterSQL("CPTDuration", Me.CPTDuration))
                .Add(New ParameterSQL("OtherMeds", Me.OtherMeds))
                .Add(New ParameterSQL("NutritionalSupID", Me.NutritionalSupID))
                .Add(New ParameterSQL("ARVAdhereID", Me.ARVAdhereID))
                .Add(New ParameterSQL("ARVAdhereWhy", Me.ARVAdhereWhy))
                .Add(New ParameterSQL("Combination", Me.Combination))
                .Add(New ParameterSQL("ARVDosage", Me.ARVDosage))
                .Add(New ParameterSQL("ARVDuration", Me.ARVDuration))
                .Add(New ParameterSQL("CD4ABS", Me.CD4ABS))
                .Add(New ParameterSQL("CD4PCT", Me.CD4PCT))
                .Add(New ParameterSQL("Investigations", Me.Investigations))
                .Add(New ParameterSQL("Refer", Me.Refer))
                .Add(New ParameterSQL("DaysHOSP", Me.DaysHOSP))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateExaminations")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ExamVisitTypeID", Me.ExamVisitTypeID))
                .Add(New ParameterSQL("FollowupDate", Me.FollowupDate))
                .Add(New ParameterSQL("DurationStartART", Me.DurationStartART))
                .Add(New ParameterSQL("DurationCurrentART", Me.DurationCurrentART))
                .Add(New ParameterSQL("OedemaID", Me.OedemaID))
                .Add(New ParameterSQL("PregnancyStatusID", Me.PregnancyStatusID))
                .Add(New ParameterSQL("ExpectedDeliveryDate", Me.ExpectedDeliveryDate))
                .Add(New ParameterSQL("PMTCT", Me.PMTCT))
                .Add(New ParameterSQL("GestationalAge", Me.GestationalAge))
                .Add(New ParameterSQL("MUACStatusID", Me.MUACID))
                .Add(New ParameterSQL("FPMethods", Me.FPMethods))
                .Add(New ParameterSQL("TBStatusID", Me.TBStatusID))
                .Add(New ParameterSQL("TBRxStartDate", Me.TBRxStartDate))
                .Add(New ParameterSQL("TBRxStopDate", Me.TBRxStopDate))
                .Add(New ParameterSQL("TBRegNo", Me.TBRegNo))
                .Add(New ParameterSQL("SideEffects", Me.SideEffects))
                .Add(New ParameterSQL("NewOI", Me.NewOI))
                .Add(New ParameterSQL("FunctionalStatusID", Me.FunctionalStatusID))
                .Add(New ParameterSQL("WHOStageID", Me.WHOStageID))
                .Add(New ParameterSQL("CPTAdhereID", Me.CPTAdhereID))
                .Add(New ParameterSQL("CPTDosage", Me.CPTDosage))
                .Add(New ParameterSQL("CPTDuration", Me.CPTDuration))
                .Add(New ParameterSQL("OtherMeds", Me.OtherMeds))
                .Add(New ParameterSQL("NutritionalSupID", Me.NutritionalSupID))
                .Add(New ParameterSQL("ARVAdhereID", Me.ARVAdhereID))
                .Add(New ParameterSQL("ARVAdhereWhy", Me.ARVAdhereWhy))
                .Add(New ParameterSQL("Combination", Me.Combination))
                .Add(New ParameterSQL("ARVDosage", Me.ARVDosage))
                .Add(New ParameterSQL("ARVDuration", Me.ARVDuration))
                .Add(New ParameterSQL("CD4ABS", Me.CD4ABS))
                .Add(New ParameterSQL("CD4PCT", Me.CD4PCT))
                .Add(New ParameterSQL("Investigations", Me.Investigations))
                .Add(New ParameterSQL("Refer", Me.Refer))
                .Add(New ParameterSQL("DaysHOSP", Me.DaysHOSP))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("Examinations")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "VisitNo = '" + Me.VisitNo + "'"
            errorPart = "Exam No: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Examinations"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Examinations")

            Return Parameters

        End Function

        Public Function GetExaminations(ByVal visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetExaminations", "Examinations", Parameters)

        End Function

#End Region

    End Class

    Public Class Visits : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_PatientNo As String
        Private m_VisitDate As Date
        Private m_DoctorSpecialtyID As String
        Private m_StaffNo As String
        Private m_VisitCategoryID As String
        Private m_ReferredBy As String
        Private m_ServiceCode As String
        Private m_BillModesID As String
        Private m_BillNo As String
        Private m_InsuranceNo As String
        Private m_AssociatedBillNo As String
        Private m_MemberCardNo As String
        Private m_MainMemberName As String
        Private m_ClaimReferenceNo As String
        Private m_VisitStatusID As String
        Private m_AccessCashServices As Nullable(Of Boolean)
        Private m_FingerprintVerified As Boolean
        Private m_CoPayTypeID As String
        Private m_CoPayPercent As Single
        Private m_CoPayValue As Decimal
        Private m_SmartCardApplicable As Boolean
        Private m_VisitsPriorityID As String
        Private m_CommunityID As String
#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property VisitDate() As Date
            Get
                Return m_VisitDate
            End Get
            Set(Value As Date)
                m_VisitDate = Value
            End Set
        End Property

        Public Property DoctorSpecialtyID() As String
            Get
                Return m_DoctorSpecialtyID
            End Get
            Set(Value As String)
                m_DoctorSpecialtyID = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(Value As String)
                m_StaffNo = Value
            End Set
        End Property

      Public Property VisitCategoryID() As String
            Get
                Return m_VisitCategoryID
            End Get
            Set(Value As String)
                m_VisitCategoryID = Value
            End Set
        End Property

        Public Property ReferredBy() As String
            Get
                Return m_ReferredBy
            End Get
            Set(value As String)
                m_ReferredBy = value
            End Set
        End Property

        Public Property ServiceCode() As String
            Get
                Return m_ServiceCode
            End Get
            Set(value As String)
                m_ServiceCode = value
            End Set
        End Property

        Public Property BillModesID() As String
            Get
                Return m_BillModesID
            End Get
            Set(Value As String)
                m_BillModesID = Value
            End Set
        End Property

        Public Property BillNo() As String
            Get
                Return m_BillNo
            End Get
            Set(value As String)
                m_BillNo = value
            End Set
        End Property

        Public Property InsuranceNo() As String
            Get
                Return m_InsuranceNo
            End Get
            Set(Value As String)
                m_InsuranceNo = Value
            End Set
        End Property

        Public Property AssociatedBillNo() As String
            Get
                Return m_AssociatedBillNo
            End Get
            Set(Value As String)
                m_AssociatedBillNo = Value
            End Set
        End Property

        Public Property MemberCardNo() As String
            Get
                Return m_MemberCardNo
            End Get
            Set(Value As String)
                m_MemberCardNo = Value
            End Set
        End Property

        Public Property MainMemberName() As String
            Get
                Return m_MainMemberName
            End Get
            Set(Value As String)
                m_MainMemberName = Value
            End Set
        End Property

        Public Property ClaimReferenceNo() As String
            Get
                Return m_ClaimReferenceNo
            End Get
            Set(Value As String)
                m_ClaimReferenceNo = Value
            End Set
        End Property

        Public Property VisitStatusID() As String
            Get
                Return m_VisitStatusID
            End Get
            Set(Value As String)
                m_VisitStatusID = Value
            End Set
        End Property

        Public Property AccessCashServices() As Nullable(Of Boolean)
            Get
                Return m_AccessCashServices
            End Get
            Set(Value As Nullable(Of Boolean))
                m_AccessCashServices = Value
            End Set
        End Property

        Public Property FingerprintVerified() As Boolean
            Get
                Return m_FingerprintVerified
            End Get
            Set(Value As Boolean)
                m_FingerprintVerified = Value
            End Set
        End Property

        Public Property CoPayTypeID() As String
            Get
                Return m_CoPayTypeID
            End Get
            Set(Value As String)
                m_CoPayTypeID = Value
            End Set
        End Property

        Public Property CoPayPercent() As Single
            Get
                Return m_CoPayPercent
            End Get
            Set(Value As Single)
                m_CoPayPercent = Value
            End Set
        End Property

        Public Property CoPayValue() As Decimal
            Get
                Return m_CoPayValue
            End Get
            Set(Value As Decimal)
                m_CoPayValue = Value
            End Set
        End Property

        Public Property SmartCardApplicable() As Boolean
            Get
                Return m_SmartCardApplicable
            End Get
            Set(Value As Boolean)
                m_SmartCardApplicable = Value
            End Set
        End Property


        Public Property VisitsPriorityID() As String
            Get
                Return m_VisitsPriorityID
            End Get
            Set(Value As String)
                m_VisitsPriorityID = Value
            End Set
        End Property

        Public Property CommunityID() As String
            Get
                Return m_CommunityID
            End Get
            Set(Value As String)
                m_CommunityID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertVisits")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("VisitDate", Me.VisitDate))
                .Add(New ParameterSQL("DoctorSpecialtyID", Me.DoctorSpecialtyID))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("VisitCategoryID", Me.VisitCategoryID))
                .Add(New ParameterSQL("ReferredBy", Me.ReferredBy))
                .Add(New ParameterSQL("ServiceCode", Me.ServiceCode))
                .Add(New ParameterSQL("BillModesID", Me.BillModesID))
                .Add(New ParameterSQL("BillNo", Me.BillNo))
                .Add(New ParameterSQL("InsuranceNo", Me.InsuranceNo))
                .Add(New ParameterSQL("AssociatedBillNo", Me.AssociatedBillNo))
                .Add(New ParameterSQL("MemberCardNo", Me.MemberCardNo))
                .Add(New ParameterSQL("MainMemberName", Me.MainMemberName))
                .Add(New ParameterSQL("ClaimReferenceNo", Me.ClaimReferenceNo))
                .Add(New ParameterSQL("VisitStatusID", Me.VisitStatusID))
                .Add(New ParameterSQL("AccessCashServices", Me.AccessCashServices))
                .Add(New ParameterSQL("FingerprintVerified", Me.FingerprintVerified))
                .Add(New ParameterSQL("CoPayTypeID", Me.CoPayTypeID))
                .Add(New ParameterSQL("CoPayPercent", Me.CoPayPercent))
                .Add(New ParameterSQL("CoPayValue", Me.CoPayValue))
                .Add(New ParameterSQL("SmartCardApplicable", Me.SmartCardApplicable))
                .Add(New ParameterSQL("VisitsPriorityID", Me.VisitsPriorityID))
                .Add(New ParameterSQL("CommunityID", Me.CommunityID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Dim oAppData As New SyncSoft.Common.Classes.AppData()

            Me.SetCommand("uspUpdateVisits")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("VisitStatusID", Me.VisitStatusID))
                If Me.VisitDate.Equals(oAppData.NullDateValue) Then
                    .Add(New ParameterSQL("VisitDate", Nothing))
                Else : .Add(New ParameterSQL("VisitDate", Me.VisitDate))
                End If
                .Add(New ParameterSQL("BillModesID", Me.BillModesID))
                .Add(New ParameterSQL("BillNo", Me.BillNo))
                .Add(New ParameterSQL("InsuranceNo", Me.InsuranceNo))
                .Add(New ParameterSQL("AssociatedBillNo", Me.AssociatedBillNo))
                .Add(New ParameterSQL("MemberCardNo", Me.MemberCardNo))
                .Add(New ParameterSQL("MainMemberName", Me.MainMemberName))
                .Add(New ParameterSQL("ClaimReferenceNo", Me.ClaimReferenceNo))
                If (Me.AccessCashServices Is Nothing) Then
                    .Add(New ParameterSQL("AccessCashServices", Nothing))
                Else : .Add(New ParameterSQL("AccessCashServices", Me.AccessCashServices))
                End If
                .Add(New ParameterSQL("CoPayTypeID", Me.CoPayTypeID))
                .Add(New ParameterSQL("CoPayPercent", Me.CoPayPercent))
                .Add(New ParameterSQL("CoPayValue", Me.CoPayValue))
                .Add(New ParameterSQL("SmartCardApplicable", Me.SmartCardApplicable))
                .Add(New ParameterSQL("CommunityID", Me.CommunityID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trial
            Me.SetLogObject("Visits")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Me.SetCommand("uspDeleteVisits")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
            End With

            'For Audit Trial
            Me.SetLogObject("Visits")

            Return Parameters

        End Function

        ''' <summary>
        ''' Returns aparticular visit
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 

        Public Function GetVisits(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetVisits", "Visits", Parameters)

        End Function

        Public Function GetAdmissionsDetails(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetAdmissionsDetails", "Visits", Parameters)

        End Function

        ''' <summary>
        ''' Returns all visits as per supplied visit status for the specified period
        ''' </summary>
        ''' <param name="visitStatusID"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDoctorVisits(visitStatusID As String, startDate As Nullable(Of Date),
                                        endDate As Nullable(Of Date)) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("VisitStatusID", visitStatusID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("VisitStatusID", visitStatusID))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If

            Return Me.Load("uspGetDoctorVisits", "Visits", Parameters)

        End Function

        ''' <summary>
        ''' Returns all visits as per supplied visit status
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDoctorVisits(visitStatusID As String) As DataSet
            Return GetDoctorVisits(visitStatusID, Nothing, Nothing)
        End Function


        Public Function GetToSeeDoctorVisits(StaffNo As String, startDateTime As Nullable(Of DateTime),
                                        endDateTime As Nullable(Of DateTime)) As DataSet

            If (StaffNo = "" OrElse StaffNo = String.Empty) Then
                If (startDateTime IsNot Nothing) And (endDateTime IsNot Nothing) Then
                    With Parameters
                        .Add(New ParameterSQL("StaffNo", Nothing))
                        .Add(New ParameterSQL("StartDate", startDateTime))
                        .Add(New ParameterSQL("EndDate", endDateTime))
                    End With
                Else
                    With Parameters
                        .Add(New ParameterSQL("StaffNo", Nothing))
                        .Add(New ParameterSQL("StartDate", Nothing))
                        .Add(New ParameterSQL("EndDate", Nothing))
                    End With
                End If
            Else
                If (startDateTime IsNot Nothing) And (endDateTime IsNot Nothing) Then
                    With Parameters
                        .Add(New ParameterSQL("StaffNo", StaffNo))
                        .Add(New ParameterSQL("StartDate", startDateTime))
                        .Add(New ParameterSQL("EndDate", endDateTime))
                    End With
                Else
                    With Parameters
                        .Add(New ParameterSQL("StaffNo", StaffNo))
                        .Add(New ParameterSQL("StartDate", Nothing))
                        .Add(New ParameterSQL("EndDate", Nothing))
                    End With
                End If
            End If


            Return Me.Load("uspToSeeDoctorsVisits", "Visits", Parameters)

        End Function

        ''' <summary>
        ''' Returns all visits as per supplied visit status
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetToSeeDoctorVisits(StaffNo As String) As DataSet
            Return GetToSeeDoctorVisits(StaffNo, Nothing, Nothing)
        End Function

        ''' <summary>
        ''' Get todays visits
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetTodaysVisits() As DataSet
            Return Me.Load("uspGetTodaysVisits", "Visits", Parameters)
        End Function

        Public Function GetCountTodaysVisits() As DataSet
            Return Me.Load("uspGetcountTodaysVisits", "Visits", Parameters)
        End Function

        ''' <summary>
        ''' Returns all visits as per doctor  for the specified period
        ''' </summary>
        '''  <param name="StaffNo"></param>
        ''' <param name="startDateTime"></param>
        ''' <param name="endDateTime"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDoctorVisitsPerDoctor(staffNo As String, startDateTime As Nullable(Of DateTime),
                                        endDateTime As Nullable(Of DateTime)) As DataSet

            If (startDateTime IsNot Nothing) And (endDateTime IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("StaffNo", staffNo))
                    .Add(New ParameterSQL("StartDate", startDateTime))
                    .Add(New ParameterSQL("EndDate", endDateTime))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StaffNo", staffNo))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If

            Return Me.Load("uspToSeeDoctorVisitsPerDoctor", "Visits", Parameters)

        End Function

        Public Function GetDoctorVisitsPerDoctor(staffNo As String) As DataSet
            Return GetDoctorVisitsPerDoctor(StaffNo, Nothing, Nothing)
        End Function



        ''' <summary>
        ''' Returns today's and yesterday's visit waiting to see the logged in doctor
        ''' </summary>
        ''' <param name="staffLoginID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetWaitingVisits(staffLoginID As String) As DataSet

            If (staffLoginID = "" OrElse staffLoginID = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("StaffLoginID", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StaffLoginID", staffLoginID))
                End With
            End If

            Return Me.Load("uspGetWaitingVisits", "Visits", Parameters)

        End Function

        ''' <summary>
        ''' Returns today's and yesterday's Emergency visit waiting to see doctors
        ''' </summary>
        ''' <returns></returns>
        Public Function GetEmergencyWaitingVisits(staffLoginID As String) As DataSet

            If (staffLoginID = "" OrElse staffLoginID = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("StaffLoginID", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StaffLoginID", staffLoginID))
                End With
            End If

            Return Me.Load("uspGetEmergencyWaitingVisits", "Visits", Parameters)

        End Function
        Public Function GetEmergencyWaitingVisits() As DataSet
            Return GetEmergencyWaitingVisits(String.Empty)
        End Function

        ''' <summary>
        ''' Returns today's and yesterday's visit waiting to see doctors
        ''' </summary>
        ''' <returns></returns>
        Public Function GetWaitingVisits() As DataSet
            Return GetWaitingVisits(String.Empty)
        End Function

        ''' <summary>
        ''' Gets recent eye visits with pending vision assessment files self requests are 
        ''' excluded or included according to supplied hideSelfRequest
        ''' </summary>
        ''' <param name="hideSelfRequest"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetPendingEyeFiles(hideSelfRequest As Boolean) As DataSet

            With Parameters
                .Add(New ParameterSQL("HideSelfRequest", hideSelfRequest))
            End With

            Return Me.Load("uspGetPendingVisionAssessment", "Visits", Parameters)

        End Function

        ''' <summary>
        ''' Gets recent emergency visits with pending triage  self requests are 
        ''' excluded or included according to supplied hideSelfRequest
        ''' </summary>
        ''' <param name="hideSelfRequest"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetEmergencyPendingVisitTriage(hideSelfRequest As Boolean) As DataSet

            With Parameters
                .Add(New ParameterSQL("HideSelfRequest", hideSelfRequest))
            End With

            Return Me.Load("uspGetEmergencyPendingVisitTriage", "Visits", Parameters)

        End Function

        ''' <summary>
        ''' Gets recent visits with pending vision assessment  self requests are 
        ''' excluded or included according to supplied hideSelfRequest
        ''' </summary>
        ''' <param name="hideSelfRequest"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetPendingVisionAssessment(hideSelfRequest As Boolean) As DataSet

            With Parameters
                .Add(New ParameterSQL("HideSelfRequest", hideSelfRequest))
            End With

            Return Me.Load("uspGetPendingVisionAssessment", "Visits", Parameters)

        End Function

        ''' <summary>
        ''' Returns all paying visits as per specified visit period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPayingVisits(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetPayingVisits", "Visits", Parameters)

        End Function

        ''' <summary>
        ''' Returns all periodic visits as per specified visit period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicVisits(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetPeriodicVisits", "Visits", Parameters)

        End Function

        ''' <summary>
        ''' Returns all periodic visits as per specified visit period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicInvoicedVisits(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetPeriodicInvoicedVisits", "Visits", Parameters)

        End Function


        ''' <summary>
        ''' Returns visits for aparticular patient no
        ''' </summary>
        ''' <param name="patientNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetVisitsByPatientNo(patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetVisitsByPatientNo", "Visits", Parameters)

        End Function

        ''' <summary>
        ''' Get recent visits with registered fingerprints 
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetVisitFingerprints() As DataSet
            Return Me.Load("uspGetVisitFingerprints", "Visits", Parameters)
        End Function

        ''' <summary>
        ''' Gets recent visits with pending visit files self requests are 
        ''' excluded or included according to supplied hideSelfRequest
        ''' </summary>
        ''' <param name="hideSelfRequest"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPendingVisitFiles(hideSelfRequest As Boolean) As DataSet

            With Parameters
                .Add(New ParameterSQL("HideSelfRequest", hideSelfRequest))
            End With

            Return Me.Load("uspGetPendingVisitFiles", "Visits", Parameters)

        End Function

        ''' <summary>
        ''' Gets recent visits with pending visit triage self requests are 
        ''' excluded or included according to supplied hideSelfRequest
        ''' </summary>
        ''' <param name="hideSelfRequest"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPendingVisitTriage(hideSelfRequest As Boolean) As DataSet

            With Parameters
                .Add(New ParameterSQL("HideSelfRequest", hideSelfRequest))
            End With

            Return Me.Load("uspGetPendingVisitTriage", "Visits", Parameters)

        End Function

        Public Function GetVisitNo(patientNo As String, visitDate As Nullable(Of Date)) As String

            Dim oAppData As New SyncSoft.Common.Classes.AppData()

            If IsNothing(visitDate) OrElse CDate(visitDate).Equals(oAppData.NullDateValue) Then
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("VisitDate", SqlDbType.SmallDateTime))
                    .Add(New ParameterSQL("VisitNo", SqlDbType.VarChar, 20))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("VisitDate", visitDate))
                    .Add(New ParameterSQL("VisitNo", SqlDbType.VarChar, 20))
                End With
            End If

            Me.ReadData = Me.Read("uspGetVisitNo", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("VisitNo")) Then
                    Return CStr(Me.ReadData("VisitNo"))
                Else : Return String.Empty
                End If

            Else : Return Nothing
            End If

        End Function

        Public Function GetVisitNo(patientNo As String) As String
            Return Me.GetVisitNo(patientNo, Nothing)
        End Function

        ''' <summary>
        ''' Checks to see if the sent visit for sent speciality already has a visist for that date
        ''' </summary>
        ''' <param name="patientNo"></param>
        ''' <param name="visitDate"></param>
        ''' <param name="doctorSpecialtyID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function IsVisitDateSaved(patientNo As String, visitDate As Date, doctorSpecialtyID As String) As Boolean

            Dim records As Integer

            If Not String.IsNullOrEmpty(doctorSpecialtyID) Then
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("VisitDate", visitDate))
                    .Add(New ParameterSQL("DoctorSpecialtyID", doctorSpecialtyID))
                    .Add(New ParameterSQL("Records", SqlDbType.TinyInt))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("VisitDate", visitDate))
                    .Add(New ParameterSQL("DoctorSpecialtyID", Nothing, 10, ParameterDirection.Input))
                    .Add(New ParameterSQL("Records", SqlDbType.TinyInt))
                End With
            End If

            Me.ReadData = Read("uspCountPatientVisitDate", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("Records")) Then
                    records = 0
                Else : records = CInt(Me.ReadData("Records"))
                End If
            End If

            Return records > 0

        End Function

        ''' <summary>
        ''' Checks to see if the sent visit already has a visit for that date
        ''' </summary>
        ''' <param name="patientNo"></param>
        ''' <param name="visitDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function IsVisitDateSaved(patientNo As String, visitDate As Date) As Boolean
            Return IsVisitDateSaved(patientNo, visitDate, String.Empty)
        End Function

        Public Function GetNextVisitID(patientNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
                .Add(New ParameterSQL("VisitID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextVisitID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("VisitID")) Then
                    Return CInt(Me.ReadData("VisitID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function GetDailyInsuranceVisitsPayments(startDateTime As Nullable(Of Date), endDateTime As Nullable(Of Date), branchID As String) As DataSet
            If Not String.IsNullOrEmpty(branchID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            ElseIf String.IsNullOrEmpty(branchID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            End If
            Return Me.Load("uspGetDailyIsurancePayments", "Visits", Parameters)

        End Function

        Public Function GetDailyInsuranceVisitsPayments(startDateTime As Date, endDateTime As Date) As DataSet
            Return GetDailyInsuranceVisitsPayments(startDateTime, endDateTime, Nothing)
        End Function

        Public Function GetDailyAccountVisitsPayments(startDateTime As Date, endDateTime As Date, branchID As String) As DataSet

            If Not String.IsNullOrEmpty(branchID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            ElseIf String.IsNullOrEmpty(branchID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With
            End If
            Return Me.Load("uspGetDailyAccountPayments", "Visits", Parameters)

        End Function

        Public Function GetDailyAccountVisitsPayments(startDateTime As Date, endDateTime As Date) As DataSet
            Return GetDailyAccountVisitsPayments(startDateTime, endDateTime, Nothing)
        End Function

        Public Function GetOPDDoctorVisits(startDateTime As Date, endDateTime As Date, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))

            End With

            Return Me.Load("uspGetOPDDoctorVisitsCount", "Visits", Parameters)

        End Function

        Public Function GetVisitRegistrationDetails(startDateTime As Date, endDateTime As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))

            End With

            Return Me.Load("uspGetVisitRegistrationDetails", "Visits", Parameters)

        End Function
#End Region

    End Class

    Public Class AccessedCashServices : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ToVisitDate As Date
        Private m_AuthorisedBy As String
        Private m_AuthorisationReason As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ToVisitDate() As Date
            Get
                Return m_ToVisitDate
            End Get
            Set(ByVal Value As Date)
                m_ToVisitDate = Value
            End Set
        End Property

        Public Property AuthorisedBy() As String
            Get
                Return m_AuthorisedBy
            End Get
            Set(ByVal Value As String)
                m_AuthorisedBy = Value
            End Set
        End Property

        Public Property AuthorisationReason() As String
            Get
                Return m_AuthorisationReason
            End Get
            Set(ByVal Value As String)
                m_AuthorisationReason = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertAccessedCashServices")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ToVisitDate", Me.ToVisitDate))
                .Add(New ParameterSQL("AuthorisedBy", Me.AuthorisedBy))
                .Add(New ParameterSQL("AuthorisationReason", Me.AuthorisationReason))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateAccessedCashServices")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ToVisitDate", Me.ToVisitDate))
                .Add(New ParameterSQL("AuthorisedBy", Me.AuthorisedBy))
                .Add(New ParameterSQL("AuthorisationReason", Me.AuthorisationReason))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("AccessedCashServices")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and ToVisitDate =  '" + FormatDate(Me.ToVisitDate) + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo + " And Authorisation Date: " + FormatDate(Me.ToVisitDate)

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "AccessedCashServices"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("AccessedCashServices")

            Return Parameters

        End Function

        Public Function GetAccessedCashServices(ByVal visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetAccessedCashServices", "AccessedCashServices", Parameters)

        End Function

        Public Function IsAccessedCashServicesAuthorized(visitNo As String) As Boolean

            Dim authorized As Boolean
            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("IsAccessedCashServicesAuthorized", SqlDbType.Bit))

            End With
            Me.ReadData = Read("uspGetAccessedCashServicesAuthorized", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("IsAccessedCashServicesAuthorized")) Then
                    authorized = False
                Else : authorized = CBool(Me.ReadData("IsAccessedCashServicesAuthorized"))
                End If
            End If
            Return authorized

        End Function

#End Region



    End Class


    Public Class AccountTransferDetails : Inherits DBConnect

#Region " Fields "

        Private m_TranNo As String
        Private m_FromAccount As String
        Private m_ToAccount As String
        Private m_Amount As Decimal
        Private m_AmountInWords As String
        Private m_Reason As String

#End Region

#Region " Properties "

        Public Property TranNo() As String
            Get
                Return m_TranNo
            End Get
            Set(ByVal Value As String)
                m_TranNo = Value
            End Set
        End Property

        Public Property FromAccount() As String
            Get
                Return m_FromAccount
            End Get
            Set(ByVal Value As String)
                m_FromAccount = Value
            End Set
        End Property

        Public Property ToAccount() As String
            Get
                Return m_ToAccount
            End Get
            Set(ByVal Value As String)
                m_ToAccount = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

        Public Property AmountInWords() As String
            Get
                Return m_AmountInWords
            End Get
            Set(ByVal Value As String)
                m_AmountInWords = Value
            End Set
        End Property

        Public Property Reason() As String
            Get
                Return m_Reason
            End Get
            Set(ByVal Value As String)
                m_Reason = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertAccountTransferDetails")

            With Parameters
                .Add(New ParameterSQL("TranNo", Me.TranNo))
                .Add(New ParameterSQL("FromAccount", Me.FromAccount))
                .Add(New ParameterSQL("ToAccount", Me.ToAccount))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("AmountInWords", Me.AmountInWords))
                .Add(New ParameterSQL("Reason", Me.Reason))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateAccountTransferDetails")

            With Parameters
                .Add(New ParameterSQL("TranNo", Me.TranNo))
                .Add(New ParameterSQL("FromAccount", Me.FromAccount))
                .Add(New ParameterSQL("ToAccount", Me.ToAccount))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("AmountInWords", Me.AmountInWords))
                .Add(New ParameterSQL("Reason", Me.Reason))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("AccountTransferDetails")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "TranNo = '" + Me.TranNo + "'"
            Dim errorPart As String = "TranNo: " + Me.TranNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "AccountTransferDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("AccountTransferDetails")

            Return Parameters

        End Function

        Public Function GetAccountTransferDetails(ByVal tranNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("TranNo", tranNo))
            End With

            Return Me.Load("uspGetAccountTransferDetails", "AccountTransferDetails", Parameters)

        End Function

#End Region



    End Class



    Public Class VisitFiles : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_FileStatusID As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property FileStatusID() As String
            Get
                Return m_FileStatusID
            End Get
            Set(Value As String)
                m_FileStatusID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertVisitFiles")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("FileStatusID", Me.FileStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateVisitFiles")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("FileStatusID", Me.FileStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("VisitFiles")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "VisitFiles"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("VisitFiles")

            Return Parameters

        End Function

        Public Function GetVisitFiles(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetVisitFiles", "VisitFiles", Parameters)

        End Function

#End Region

    End Class

    Public Class Triage : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_Weight As Single
        Private m_Temperature As Single
        Private m_Height As Nullable(Of Single)
        Private m_Pulse As Nullable(Of Short)
        Private m_BloodPressure As String
        Private m_HeadCircum As Nullable(Of Single)
        Private m_BodySurfaceArea As Nullable(Of Single)
        Private m_RespirationRate As Nullable(Of Short)
        Private m_OxygenSaturation As Nullable(Of Single)
        Private m_HeartRate As Nullable(Of Short)
        Private m_Notes As String
        Private m_TriagePriorityID As String
        Private m_MUACStatusID As String
        Private m_BMIStatusID As String
        Private m_MUAC As Single
#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property Weight() As Single
            Get
                Return m_Weight
            End Get
            Set(Value As Single)
                m_Weight = Value
            End Set
        End Property

        Public Property Temperature() As Single
            Get
                Return m_Temperature
            End Get
            Set(Value As Single)
                m_Temperature = Value
            End Set
        End Property

        Public Property Height() As Nullable(Of Single)
            Get
                Return m_Height
            End Get
            Set(Value As Nullable(Of Single))
                m_Height = Value
            End Set
        End Property

        Public Property Pulse() As Nullable(Of Short)
            Get
                Return m_Pulse
            End Get
            Set(Value As Nullable(Of Short))
                m_Pulse = Value
            End Set
        End Property

        Public Property BloodPressure() As String
            Get
                Return m_BloodPressure
            End Get
            Set(Value As String)
                m_BloodPressure = Value
            End Set
        End Property

        Public Property HeadCircum() As Nullable(Of Single)
            Get
                Return m_HeadCircum
            End Get
            Set(Value As Nullable(Of Single))
                m_HeadCircum = Value
            End Set
        End Property

        Public Property BodySurfaceArea() As Nullable(Of Single)
            Get
                Return m_BodySurfaceArea
            End Get
            Set(Value As Nullable(Of Single))
                m_BodySurfaceArea = Value
            End Set
        End Property

        Public Property RespirationRate() As Nullable(Of Short)
            Get
                Return m_RespirationRate
            End Get
            Set(Value As Nullable(Of Short))
                m_RespirationRate = Value
            End Set
        End Property

        Public Property OxygenSaturation() As Nullable(Of Single)
            Get
                Return m_OxygenSaturation
            End Get
            Set(Value As Nullable(Of Single))
                m_OxygenSaturation = Value
            End Set
        End Property

        Public Property HeartRate() As Nullable(Of Short)
            Get
                Return m_HeartRate
            End Get
            Set(Value As Nullable(Of Short))
                m_HeartRate = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

        Public Property TriagePriorityID() As String
            Get
                Return m_TriagePriorityID
            End Get
            Set(Value As String)
                m_TriagePriorityID = Value
            End Set
        End Property

        Public Property BMIStatusID() As String
            Get
                Return m_BMIStatusID
            End Get
            Set(ByVal Value As String)
                m_BMIStatusID = Value
            End Set
        End Property

        Public Property MUACStatusID() As String
            Get
                Return m_MUACStatusID
            End Get
            Set(ByVal Value As String)
                m_MUACStatusID = Value
            End Set
        End Property

        Public Property MUAC() As Single
            Get
                Return m_MUAC
            End Get
            Set(ByVal Value As Single)
                m_MUAC = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "
        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertTriage")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("Weight", Me.Weight))
                .Add(New ParameterSQL("Temperature", Me.Temperature))
                .Add(New ParameterSQL("Height", Me.Height))
                .Add(New ParameterSQL("MUAC", Me.MUAC))
                .Add(New ParameterSQL("Pulse", Me.Pulse))
                .Add(New ParameterSQL("BloodPressure", Me.BloodPressure))
                .Add(New ParameterSQL("HeadCircum", Me.HeadCircum))
                .Add(New ParameterSQL("BodySurfaceArea", Me.BodySurfaceArea))
                .Add(New ParameterSQL("RespirationRate", Me.RespirationRate))
                .Add(New ParameterSQL("OxygenSaturation", Me.OxygenSaturation))
                .Add(New ParameterSQL("HeartRate", Me.HeartRate))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("TriagePriorityID", Me.TriagePriorityID))
                .Add(New ParameterSQL("BMIStatusID", Me.BMIStatusID))
                .Add(New ParameterSQL("MUACStatusID", Me.MUACStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateTriage")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("Weight", Me.Weight))
                .Add(New ParameterSQL("Temperature", Me.Temperature))
                .Add(New ParameterSQL("Height", Me.Height))
                .Add(New ParameterSQL("MUAC", Me.MUAC))
                .Add(New ParameterSQL("Pulse", Me.Pulse))
                .Add(New ParameterSQL("BloodPressure", Me.BloodPressure))
                .Add(New ParameterSQL("HeadCircum", Me.HeadCircum))
                .Add(New ParameterSQL("BodySurfaceArea", Me.BodySurfaceArea))
                .Add(New ParameterSQL("RespirationRate", Me.RespirationRate))
                .Add(New ParameterSQL("OxygenSaturation", Me.OxygenSaturation))
                .Add(New ParameterSQL("HeartRate", Me.HeartRate))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("TriagePriorityID", Me.TriagePriorityID))
                .Add(New ParameterSQL("BMIStatusID", Me.BMIStatusID))
                .Add(New ParameterSQL("MUACStatusID", Me.MUACStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("Triage")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Triage"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Triage")

            Return Parameters

        End Function

        Public Function GetTriage(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetTriage", "Triage", Parameters)

        End Function

#End Region

    End Class

    Public Class TBIntensifiedCaseFinding : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_CoughingTwoWeeksMoreID As String
        Private m_PersistantFeversID As String
        Private m_NoticableWeightLossID As String
        Private m_ExcessiveNightSweatsID As String
        Private m_PoorWeightGainID As String
        Private m_PulmonaryTBChronicCoughContactID As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property CoughingTwoWeeksMoreID() As String
            Get
                Return m_CoughingTwoWeeksMoreID
            End Get
            Set(ByVal Value As String)
                m_CoughingTwoWeeksMoreID = Value
            End Set
        End Property

        Public Property PersistantFeversID() As String
            Get
                Return m_PersistantFeversID
            End Get
            Set(ByVal Value As String)
                m_PersistantFeversID = Value
            End Set
        End Property

        Public Property NoticableWeightLossID() As String
            Get
                Return m_NoticableWeightLossID
            End Get
            Set(ByVal Value As String)
                m_NoticableWeightLossID = Value
            End Set
        End Property

        Public Property ExcessiveNightSweatsID() As String
            Get
                Return m_ExcessiveNightSweatsID
            End Get
            Set(ByVal Value As String)
                m_ExcessiveNightSweatsID = Value
            End Set
        End Property

        Public Property PoorWeightGainID() As String
            Get
                Return m_PoorWeightGainID
            End Get
            Set(ByVal Value As String)
                m_PoorWeightGainID = Value
            End Set
        End Property

        Public Property PulmonaryTBChronicCoughContactID() As String
            Get
                Return m_PulmonaryTBChronicCoughContactID
            End Get
            Set(ByVal Value As String)
                m_PulmonaryTBChronicCoughContactID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertTBIntensifiedCaseFinding")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("CoughingTwoWeeksMoreID", Me.CoughingTwoWeeksMoreID))
                .Add(New ParameterSQL("PersistantFeversID", Me.PersistantFeversID))
                .Add(New ParameterSQL("NoticableWeightLossID", Me.NoticableWeightLossID))
                .Add(New ParameterSQL("ExcessiveNightSweatsID", Me.ExcessiveNightSweatsID))
                .Add(New ParameterSQL("PoorWeightGainID", Me.PoorWeightGainID))
                .Add(New ParameterSQL("PulmonaryTBChronicCoughContactID", Me.PulmonaryTBChronicCoughContactID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateTBIntensifiedCaseFinding")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("CoughingTwoWeeksMoreID", Me.CoughingTwoWeeksMoreID))
                .Add(New ParameterSQL("PersistantFeversID", Me.PersistantFeversID))
                .Add(New ParameterSQL("NoticableWeightLossID", Me.NoticableWeightLossID))
                .Add(New ParameterSQL("ExcessiveNightSweatsID", Me.ExcessiveNightSweatsID))
                .Add(New ParameterSQL("PoorWeightGainID", Me.PoorWeightGainID))
                .Add(New ParameterSQL("PulmonaryTBChronicCoughContactID", Me.PulmonaryTBChronicCoughContactID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("TBIntensifiedCaseFinding")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "VisitNo: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "TBIntensifiedCaseFinding"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("TBIntensifiedCaseFinding")

            Return Parameters

        End Function

        Public Function GetTBIntensifiedCaseFinding(ByVal visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetTBIntensifiedCaseFinding", "TBIntensifiedCaseFinding", Parameters)

        End Function

#End Region



    End Class

    Public Class VisionAssessment : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_EyeTestID As String
        Private m_VisualAcuityRightID As String
        Private m_VisualAcuityRightExtID As String
        Private m_VisualAcuityLeftID As String
        Private m_VisualAcuityLeftExtID As String
        Private m_PreferentialLookingRightID As String
        Private m_PreferentialLookingLeftID As String
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property EyeTestID() As String
            Get
                Return m_EyeTestID
            End Get
            Set(ByVal Value As String)
                m_EyeTestID = Value
            End Set
        End Property

        Public Property VisualAcuityRightID() As String
            Get
                Return m_VisualAcuityRightID
            End Get
            Set(ByVal Value As String)
                m_VisualAcuityRightID = Value
            End Set
        End Property

        Public Property VisualAcuityRightExtID() As String
            Get
                Return m_VisualAcuityRightExtID
            End Get
            Set(ByVal Value As String)
                m_VisualAcuityRightExtID = Value
            End Set
        End Property

        Public Property VisualAcuityLeftID() As String
            Get
                Return m_VisualAcuityLeftID
            End Get
            Set(ByVal Value As String)
                m_VisualAcuityLeftID = Value
            End Set
        End Property

        Public Property VisualAcuityLeftExtID() As String
            Get
                Return m_VisualAcuityLeftExtID
            End Get
            Set(ByVal Value As String)
                m_VisualAcuityLeftExtID = Value
            End Set
        End Property



        Public Property PreferentialLookingRightID() As String
            Get
                Return m_PreferentialLookingRightID
            End Get
            Set(ByVal Value As String)
                m_PreferentialLookingRightID = Value
            End Set
        End Property

        Public Property PreferentialLookingLeftID() As String
            Get
                Return m_PreferentialLookingLeftID
            End Get
            Set(ByVal Value As String)
                m_PreferentialLookingLeftID = Value
            End Set
        End Property



        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertVisionAssessment")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("EyeTestID", Me.EyeTestID))
                .Add(New ParameterSQL("VisualAcuityRightID", Me.VisualAcuityRightID))
                .Add(New ParameterSQL("VisualAcuityRightExtID", Me.VisualAcuityRightExtID))
                .Add(New ParameterSQL("VisualAcuityLeftID", Me.VisualAcuityLeftID))
                .Add(New ParameterSQL("VisualAcuityLeftExtID", Me.VisualAcuityLeftExtID))
                .Add(New ParameterSQL("PreferentialLookingRightID", Me.PreferentialLookingRightID))
                .Add(New ParameterSQL("PreferentialLookingLeftID", Me.PreferentialLookingLeftID))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateVisionAssessment")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("EyeTestID", Me.EyeTestID))
                .Add(New ParameterSQL("VisualAcuityRightID", Me.VisualAcuityRightID))
                .Add(New ParameterSQL("VisualAcuityRightExtID", Me.VisualAcuityRightExtID))
                .Add(New ParameterSQL("VisualAcuityLeftID", Me.VisualAcuityLeftID))
                .Add(New ParameterSQL("VisualAcuityLeftExtID", Me.VisualAcuityLeftExtID))
                .Add(New ParameterSQL("PreferentialLookingRightID", Me.PreferentialLookingRightID))
                .Add(New ParameterSQL("PreferentialLookingLeftID", Me.PreferentialLookingLeftID))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("VisionAssessment")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and EyeTestID = '" + Me.EyeTestID + "'"
            Dim errorPart As String = "VisitNo: " + Me.VisitNo + " and Eye Test: " + Me.EyeTestID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "VisionAssessment"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("VisionAssessment")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets a vision assessment for supplied visit no and eye test id
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <param name="eyeTestID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetVisionAssessment(ByVal visitNo As String, ByVal eyeTestID As String) As DataSet

            If Not String.IsNullOrEmpty(eyeTestID) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("EyeTestID", eyeTestID))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("EyeTestID", Nothing))
                End With

            End If

            Return Me.Load("uspGetVisionAssessment", "VisionAssessment", Parameters)

        End Function

        ''' <summary>
        ''' Gets all vision assessment for supplied visit no
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetVisionAssessment(ByVal visitNo As String) As DataSet
            Return GetVisionAssessment(visitNo, String.Empty)
        End Function

#End Region

    End Class

    Public Class Items : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_InvoiceNo As String
        Private m_Quantity As Integer
        Private m_UnitPrice As Decimal
        Private m_ItemDetails As String
        Private m_LastUpdate As Date
        Private m_ItemStatusID As String
        Private m_PayStatusID As String
#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property


        Public Property InvoiceNo() As String
            Get
                Return m_InvoiceNo
            End Get
            Set(Value As String)
                m_InvoiceNo = Value
            End Set
        End Property


        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(value As Integer)
                m_Quantity = value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property ItemDetails() As String
            Get
                Return m_ItemDetails
            End Get
            Set(value As String)
                m_ItemDetails = value
            End Set
        End Property

        Public Property LastUpdate() As Date
            Get
                Return m_LastUpdate
            End Get
            Set(value As Date)
                m_LastUpdate = value
            End Set
        End Property

        Public Property ItemStatusID() As String
            Get
                Return m_ItemStatusID
            End Get
            Set(Value As String)
                m_ItemStatusID = Value
            End Set
        End Property

        Public Property PayStatusID() As String
            Get
                Return m_PayStatusID
            End Get
            Set(Value As String)
                m_PayStatusID = Value
            End Set
        End Property



#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertItems")

            With Parameters

                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("ItemDetails", Me.ItemDetails))
                .Add(New ParameterSQL("LastUpdate", Me.LastUpdate))
                .Add(New ParameterSQL("ItemStatusID", Me.ItemStatusID))
                .Add(New ParameterSQL("PayStatusID", Me.PayStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("CreatorLoginID", Me.LoginID))
                .Add(New ParameterSQL("CreatorClientMachine", My.Computer.Name))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateItems")

            If Me.ItemStatusID = String.Empty OrElse Me.ItemStatusID Is Nothing Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                    .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                    .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                    .Add(New ParameterSQL("LastUpdate", Me.LastUpdate))
                    .Add(New ParameterSQL("PayStatusID", Me.PayStatusID))
                    .Add(New ParameterSQL("LoginID", Me.LoginID))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                    .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                    .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                    .Add(New ParameterSQL("LastUpdate", Me.LastUpdate))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Me.LoginID))
                    .Add(New ParameterSQL("ItemStatusID", Me.ItemStatusID))
                    .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                End With
            End If

            'For Audit Trial
            Me.SetLogObject("Items")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Me.SetCommand("uspDeleteItem")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
            End With

            'For Audit Trial
            Me.SetLogObject("Items")

            Return Parameters

        End Function

        Public Function GetItems(visitNo As String, itemCategory As String,
                          itemStatus As String, payStatus As String, billAccount As String) As DataSet

            If (visitNo <> "" OrElse visitNo <> String.Empty) And
            (itemCategory = "" OrElse itemCategory = String.Empty) And
            (itemStatus = "" OrElse itemStatus = String.Empty) And
            (payStatus <> "" OrElse payStatus <> String.Empty) And
            (billAccount <> "" OrElse billAccount <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatus))
                    .Add(New ParameterSQL("BillAccount", billAccount))
                End With

            ElseIf (visitNo <> "" OrElse visitNo <> String.Empty) And
            (itemCategory <> "" OrElse itemCategory <> String.Empty) And
            (itemStatus = "" OrElse itemStatus = String.Empty) And
            (payStatus = "" OrElse payStatus = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategory))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillAccount", Nothing))
                End With

            ElseIf (visitNo <> "" OrElse visitNo <> String.Empty) And
            (itemCategory <> "" OrElse itemCategory <> String.Empty) And
            (itemStatus <> "" OrElse itemStatus <> String.Empty) And
            (payStatus = "" OrElse payStatus = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategory))
                    .Add(New ParameterSQL("ItemStatusID", itemStatus))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillAccount", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategory))
                    .Add(New ParameterSQL("ItemStatusID", itemStatus))
                    .Add(New ParameterSQL("PayStatusID", payStatus))
                    .Add(New ParameterSQL("BillAccount", Nothing))
                End With
            End If

            Return Me.Load("uspGetItems", "Items", Parameters)

        End Function

        Public Function GetItems(visitNo As String, itemCategory As String) As DataSet
            Return Me.GetItems(visitNo, itemCategory, String.Empty, String.Empty, String.Empty)
        End Function

        Public Function GetItems(visitNo As String, itemCategory As String, itemStatus As String) As DataSet
            Return Me.GetItems(visitNo, itemCategory, itemStatus, String.Empty, String.Empty)
        End Function

        Public Function GetItems(visitNo As String, itemCategory As String, itemStatus As String, payStatus As String) As DataSet
            Return Me.GetItems(visitNo, itemCategory, itemStatus, payStatus, String.Empty)
        End Function

        Public Function GetDrugAdministrationPerVisit(visitNo As String, itemCategory As String, ItemCode As String) As DataSet
            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("ItemCategoryID", itemCategory))
                .Add(New ParameterSQL("ItemCode", ItemCode))
            End With


            Return Me.Load("uspGetDrugAdministrationPerVisit", "Items", Parameters)

        End Function

        ''' <summary>
        ''' Gets Items for supplied VisitNo
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetItemsByVisitNo(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetItemsByVisitNo", "Items", Parameters)

        End Function


        ''' <summary>
        ''' Gets IPD Items for supplied VisitNo
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDItemsByVisitNo(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetIPDItemsByVisitNo", "IPDItems", Parameters)
        End Function

        ''' <summary>
        ''' Gets dental items corresponding to supplied visit no and dental category
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <param name="dentalCategory"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDentalItems(visitNo As String, dentalCategory As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("DentalCategory", dentalCategory))
            End With

            Return Me.Load("uspGetDentalItems", "Items", Parameters)

        End Function

        ''' <summary>
        ''' Gets the not paid for Co-Pay items
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNotPaidItemsCASH(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetNotPaidItemsCASH", "Items", Parameters)

        End Function

        ''' <summary>
        ''' Returns all not paid items for the specified period and supplied company
        ''' </summary>
        ''' <param name="billModesID"></param>
        ''' <param name="billNo"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <param name="companyNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNotPaidItems(billModesID As String, billNo As String, startDate As Nullable(Of Date),
                                        endDate As Nullable(Of Date), companyNo As String) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) And Not String.IsNullOrEmpty(companyNo) Then
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With

            ElseIf (startDate IsNot Nothing) And (endDate IsNot Nothing) And String.IsNullOrEmpty(companyNo) Then
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With

            ElseIf (startDate Is Nothing) And (endDate Is Nothing) And Not String.IsNullOrEmpty(companyNo) Then
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetNotPaidItems", "Items", Parameters)

        End Function

        ''' <summary>
        ''' Returns all not paid items for the specified
        ''' </summary>
        ''' <param name="billModesID"></param>
        ''' <param name="billNo"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNotPaidItems(billModesID As String, billNo As String, startDate As Nullable(Of Date),
                                        endDate As Nullable(Of Date)) As DataSet
            Return GetNotPaidItems(billModesID, billNo, startDate, endDate, String.Empty)
        End Function

        ''' <summary>
        ''' Returns all not paid items for a specified company
        ''' </summary>
        ''' <param name="billModesID"></param>
        ''' <param name="billNo"></param>
        ''' <param name="companyNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNotPaidItems(billModesID As String, billNo As String, companyNo As String) As DataSet
            Return GetNotPaidItems(billModesID, billNo, Nothing, Nothing, companyNo)
        End Function

        ''' <summary>
        ''' Returns all not paid items
        ''' </summary>
        ''' <param name="billModesID"></param>
        ''' <param name="billNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNotPaidItems(billModesID As String, billNo As String) As DataSet
            Return GetNotPaidItems(billModesID, billNo, Nothing, Nothing, String.Empty)
        End Function

        ''' <summary>
        ''' Gets the not paid for as per supplied visit no
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNotPaidItemsByVisitNo(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetNotPaidItemsByVisitNo", "Items", Parameters)

        End Function

        ''' <summary>
        ''' Returns all items that are pending for the specified period
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPendingItems(itemCategoryID As String, startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If

            Return Me.Load("uspGetPendingItems", "Items", Parameters)

        End Function

        ''' <summary>
        ''' Returns all items that are pending
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPendingItems(itemCategoryID As String) As DataSet
            Return GetPendingItems(itemCategoryID, Nothing, Nothing)
        End Function

        '====================================================================30-11-2017=========================================================='
        ''' <summary>
        ''' Returns all Cardiology items that are processing for the specified period
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetCardiologyProcessingItems(itemCategoryID As String, startDate As Nullable(Of Date),
                                        endDate As Nullable(Of Date)) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If

            Return Me.Load("uspGetCardiologyProcessingItems", "Items", Parameters)

        End Function

        ''' <summary>
        ''' Returns all Cardiology items that are processing
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetCardiologyProcessingItems(itemCategoryID As String) As DataSet
            Return GetCardiologyProcessingItems(itemCategoryID, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Returns all items that are processing for the specified period
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetProcessingItems(itemCategoryID As String, startDate As Nullable(Of Date),
                                        endDate As Nullable(Of Date)) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If

            Return Me.Load("uspGetProcessingItems", "Items", Parameters)

        End Function

        ''' <summary>
        ''' Returns all items that are processing
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetProcessingItems(itemCategoryID As String) As DataSet
            Return GetProcessingItems(itemCategoryID, Nothing, Nothing)
        End Function

        ''' <summary>
        ''' Returns all items that are done for the specified period
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDoneItems(itemCategoryID As String, startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If

            Return Me.Load("uspGetDoneItems", "Items", Parameters)

        End Function

        ''' <summary>
        ''' Returns all items that are done
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDoneItems(itemCategoryID As String) As DataSet
            Return GetDoneItems(itemCategoryID, Nothing, Nothing)
        End Function

        ''' <summary>
        ''' Returns all items that by sent doctor for the specified period
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="staffLoginID"></param>
        ''' <param name="showOnlyPending"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDoctorItems(itemCategoryID As String, staffLoginID As String, showOnlyPending As Boolean,
                                       startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StaffLoginID", staffLoginID))
                    .Add(New ParameterSQL("ShowOnlyPending", showOnlyPending))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StaffLoginID", staffLoginID))
                    .Add(New ParameterSQL("ShowOnlyPending", showOnlyPending))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If

            Return Me.Load("uspGetDoctorItems", "Items", Parameters)

        End Function

        ''' <summary>
        ''' Returns all items that are sent by specified doctor
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="staffLoginID"></param>
        ''' <param name="showOnlyPending"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDoctorItems(itemCategoryID As String, staffLoginID As String, showOnlyPending As Boolean) As DataSet
            Return GetDoctorItems(itemCategoryID, staffLoginID, showOnlyPending, Nothing, Nothing)
        End Function

        Public Function GetItem(visitNo As String, itemCode As String, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetItem", "Items", Parameters)

        End Function

        Public Function GetSagePastelReport(startDateTime As Date, endDateTime As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))
            End With
            Return Me.Load("uspGetSagePastelReport", "Items", Parameters)

        End Function

        Public Function GetSelfRequestItems(visitNo As String, itemCategory As String) As DataSet
            Return Me.GetSelfRequestItems(visitNo, itemCategory, String.Empty, String.Empty, String.Empty)
            'With Parameters
            '    .Add(New ParameterSQL("StartDateTime", startDateTime))
            '    .Add(New ParameterSQL("EndDateTime", endDateTime))
            'End With
            'Return Me.Load("uspGetSelfRequestItems", "Items", Parameters)

        End Function

        Public Function GetSelfRequestItems(visitNo As String, itemCategory As String,
                         itemStatus As String, payStatus As String, billAccount As String) As DataSet

            If (visitNo <> "" OrElse visitNo <> String.Empty) And
            (itemCategory = "" OrElse itemCategory = String.Empty) And
            (itemStatus = "" OrElse itemStatus = String.Empty) And
            (payStatus <> "" OrElse payStatus <> String.Empty) And
            (billAccount <> "" OrElse billAccount <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatus))
                    .Add(New ParameterSQL("BillAccount", billAccount))
                End With

            ElseIf (visitNo <> "" OrElse visitNo <> String.Empty) And
            (itemCategory <> "" OrElse itemCategory <> String.Empty) And
            (itemStatus = "" OrElse itemStatus = String.Empty) And
            (payStatus = "" OrElse payStatus = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategory))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillAccount", Nothing))
                End With

            ElseIf (visitNo <> "" OrElse visitNo <> String.Empty) And
            (itemCategory <> "" OrElse itemCategory <> String.Empty) And
            (itemStatus <> "" OrElse itemStatus <> String.Empty) And
            (payStatus = "" OrElse payStatus = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategory))
                    .Add(New ParameterSQL("ItemStatusID", itemStatus))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillAccount", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategory))
                    .Add(New ParameterSQL("ItemStatusID", itemStatus))
                    .Add(New ParameterSQL("PayStatusID", payStatus))
                    .Add(New ParameterSQL("BillAccount", Nothing))
                End With
            End If

            Return Me.Load("uspGetSelfRequestItems", "Items", Parameters)

        End Function


        Public Function GetDoctorSeenVisitsPayment(staffNo As String, itemCategoryID As String, startDateTime As Date, endDateTime As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StaffNo", staffNo))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))

            End With

            Return Me.Load("uspGetDoctorSeenVisitsPayment", "Items", Parameters)

        End Function
        Public Function GetToReturnItems(visitNo As String, itemCategoryID As String) As DataSet

            If String.IsNullOrEmpty(itemCategoryID) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With
            End If



            Return Me.Load("uspGetToReturnItems", "Items", Parameters)

        End Function


        Public Function GetToReturnItems(visitNo As String) As DataSet

            Return Me.GetToReturnItems(visitNo, Nothing)

        End Function

        Public Function GetItemStatusSummaries(startDateTime As Date, endDateTime As Date, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetItemStatusSummaries", "Items", Parameters)

        End Function

        Public Function GetOperationalOPDItemsReport(startDateTime As Nullable(Of Date), endDateTime As Nullable(Of Date), itemCategoryID As String, itemStatusID As String, payStatusID As String, billModesID As String) As DataSet


            If (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(payStatusID) AndAlso (String.IsNullOrEmpty(itemCategoryID)) AndAlso (String.IsNullOrEmpty(itemStatusID)) AndAlso String.IsNullOrEmpty(billModesID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(payStatusID) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso (String.IsNullOrEmpty(itemStatusID)) AndAlso String.IsNullOrEmpty(billModesID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) AndAlso String.IsNullOrEmpty(billModesID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With


            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemStatusID) AndAlso String.IsNullOrEmpty(billModesID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With


            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemStatusID) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With


            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(payStatusID) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso String.IsNullOrEmpty(itemStatusID) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(billModesID) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso String.IsNullOrEmpty(billModesID) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso String.IsNullOrEmpty(itemStatusID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso String.IsNullOrEmpty(billModesID) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso String.IsNullOrEmpty(itemStatusID) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With


            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(payStatusID) AndAlso Not (String.IsNullOrEmpty(billModesID)) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemStatusID) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With
            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso String.IsNullOrEmpty(billModesID) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso (String.IsNullOrEmpty(billModesID)) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso (String.IsNullOrEmpty(payStatusID)) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With
            End If

            Return Me.Load("uspGetOperationalOPDItemsReport", "Items", Parameters)

        End Function

        Public Function GetPatientsRecordOPD(patientNo As String) As DataSet

            With Parameters

                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetPatientsRecordOPD", "Items", Parameters)

        End Function

        Public Function GetPatientsRecordIPD(patientNo As String) As DataSet

            With Parameters

                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetPatientsRecordIPD", "ExtraBillItems", Parameters)

        End Function

        Public Function GetInvoiceCategorization(startDateTime As Date, endDateTime As Date, ExcludePendingItems As Boolean, patientNo As String, billNo As String) As DataSet

            '-----------------------Only PatientNo---------------------------------------
            If String.IsNullOrEmpty(patientNo) AndAlso Not String.IsNullOrEmpty(billNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ExcludePendingItems", ExcludePendingItems))
                    .Add(New ParameterSQL("PatientNo", Nothing))
                    .Add(New ParameterSQL("BillNo", billNo))

                End With

                '------------------------only biiNo Not null---------------------------------------
            ElseIf Not String.IsNullOrEmpty(patientNo) AndAlso String.IsNullOrEmpty(billNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ExcludePendingItems", ExcludePendingItems))
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("BillNo", Nothing))

                End With


                '------------------------All null---------------------------------------
            ElseIf String.IsNullOrEmpty(patientNo) AndAlso String.IsNullOrEmpty(billNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ExcludePendingItems", ExcludePendingItems))
                    .Add(New ParameterSQL("PatientNo", Nothing))
                    .Add(New ParameterSQL("BillNo", Nothing))

                End With


            End If
            Return Me.Load("uspGetInvoiceCategorization", "items", Parameters)
        End Function


        Public Function ClosePendingItems() As Boolean


            With Parameters
                .Add(New ParameterSQL("Updated", SqlDbType.Bit))
            End With

            Me.ReadData = Read("uspClosePendingItems", Parameters)
            Return True
        End Function


        Public Function GetInvoicedNotPaidItems(billModesID As String, billNo As String, startDate As Nullable(Of Date),
                                       endDate As Nullable(Of Date), companyNo As String) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) And Not String.IsNullOrEmpty(companyNo) Then
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With

            ElseIf (startDate IsNot Nothing) And (endDate IsNot Nothing) And String.IsNullOrEmpty(companyNo) Then
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With

            ElseIf (startDate Is Nothing) And (endDate Is Nothing) And Not String.IsNullOrEmpty(companyNo) Then
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetInvoicedNotPaidItems", "Items", Parameters)

        End Function

        ''' <summary>
        ''' Returns all not paid items for the specified
        ''' </summary>
        ''' <param name="billModesID"></param>
        ''' <param name="billNo"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInvoicedNotPaidItems(billModesID As String, billNo As String, startDate As Nullable(Of Date),
                                        endDate As Nullable(Of Date)) As DataSet
            Return GetInvoicedNotPaidItems(billModesID, billNo, startDate, endDate, String.Empty)
        End Function

        ''' <summary>
        ''' Returns all not paid items for a specified company
        ''' </summary>
        ''' <param name="billModesID"></param>
        ''' <param name="billNo"></param>
        ''' <param name="companyNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInvoicedNotPaidItems(billModesID As String, billNo As String, companyNo As String) As DataSet
            Return GetInvoicedNotPaidItems(billModesID, billNo, Nothing, Nothing, companyNo)
        End Function

        ''' <summary>
        ''' Returns all not paid items
        ''' </summary>
        ''' <param name="billModesID"></param>
        ''' <param name="billNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInvoicedNotPaidItems(billModesID As String, billNo As String) As DataSet
            Return GetInvoicedNotPaidItems(billModesID, billNo, Nothing, Nothing, String.Empty)
        End Function

        Public Function GetVisitItemsByInvoiceStatus(invoiceNo As String, invoiced As Boolean) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", invoiceNo))
                .Add(New ParameterSQL("InvoiceStatus", invoiced))

            End With

            Return Me.Load("uspGetVisitItemsByInvoiceStatus", "Items", Parameters)

        End Function


        Public Function GetCountPeriodicNotCashPaidItems(startDate As Date, endDate As Date) As Integer

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("CountedItems", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetCountPeriodicNotCashPaidItems", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("CountedItems")) Then
                    Return CInt(Me.ReadData("CountedItems"))
                Else : Return 1
                End If

            End If

        End Function


        Public Function GetPeriodicCashNotPaidItemsSummary(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With


            Return Me.Load("uspGetPeriodicCashNotPaidItemsSummary", "Items", Parameters)

        End Function

        Public Function GetCashNotPaidItemsSummary() As DataSet

            Return Me.Load("uspGetPeriodicCashNotPaidItemsSummary", "Items")

        End Function


        Public Function GetOPDDispensedDrugs(startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet

            If startDate Is Nothing AndAlso endDate Is Nothing Then
                With Parameters
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            End If




            Return Me.Load("uspGetOPDDispensedDrugs", "Items", Parameters)

        End Function

        Public Function GetOPDDispensedDrugs() As DataSet

            Return Me.GetOPDDispensedDrugs(Nothing, Nothing)

        End Function
  Public Function GetPeriodicItemsByPatientNo(PatientNo As String, startDate As Date, endDateTime As Date, IncludeProcessing As Boolean, IncludePending As Boolean) As DataSet
            With Parameters
                .Add(New ParameterSQL("PatientNo", PatientNo))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDateTime))
                .Add(New ParameterSQL("IncludeProcessing", IncludeProcessing))
                .Add(New ParameterSQL("IncludePending", IncludePending))
            End With


            Return Me.Load("uspGetPeriodicItemsByPatientNo", "Items", Parameters)
        End Function

        Public Function GetPeriodicItemsByBillNo(billNo As String, startDate As Date, endDate As Date, IncludeProcessing As Boolean, IncludePending As Boolean) As DataSet

            '------------------------------------------------------------------------------

            With Parameters
                .Add(New ParameterSQL("BillNo", billNo))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("IncludeProcessing", IncludeProcessing))
                .Add(New ParameterSQL("IncludePending", IncludePending))
            End With


            Return Me.Load("uspGetPeriodicItemsByBillNo", "Items", Parameters)
        End Function

        Public Function GetBillsExceedingAllocatedValue(startDateTime As Nullable(Of DateTime),
                                endDateTime As Nullable(Of DateTime)) As DataSet


            If (startDateTime IsNot Nothing) And (endDateTime IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDateTime))
                    .Add(New ParameterSQL("EndDate", endDateTime))
                End With
            Else
                With Parameters

                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If



            Return Me.Load("uspGetBillsExceedingAllocatedValue", "Items", Parameters)

        End Function

        ''' <summary>
        ''' Returns all pending payments
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetBillsExceedingAllocatedValue() As DataSet
            Return GetBillsExceedingAllocatedValue(Nothing, Nothing)
        End Function

        Public Function GetCountBillsExceedingAllocatedValue(startDate As Date, endDate As Date) As Integer

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("CountedItems", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetCountBillsExceedingAllocatedValue", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("CountedItems")) Then
                    Return CInt(Me.ReadData("CountedItems"))
                Else : Return 1
                End If

            End If

        End Function


#End Region

#Region "Sales"

        Public Function GetSales(startDateTime As Nullable(Of Date), endDateTime As Nullable(Of Date),
                                 branchID As String, ItemCategoryID As String, itemCode As String, billModesID As String,
                                 payStatusID As String, loginID As String) As DataSet

            '------------------------------------------------------------All selected---------------------------------------------------------------
            If Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '--only five Items Selected (only one Not selected)-------------------------------------------------------------------------------

                '------------------------------------------------------------only BranchID Not selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                ' ------------------------------------------------------------only ItemCategoryID Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only ItemCode---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
               String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------------------------------------------only BillMode null---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only PayStatus null---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
               String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------------------------------------------Only LoginID null---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With


                '--only five Items Selected (only one Not selected) End---------------------------------------------------------------------------
                '---------------------------------------------------------------------------------------------------------------------------------

                '--only four Items Selected (only two Not selected) ---------------------------------------------------------------------------
                '---------------------------------------------------------------------------------------------------------------------------------
                '------------------------------------------------------------BranchID And ItemCategory Not selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only BranchID And ItemCode Not selected-------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------------------------------------------Only BranchID And BillMode Not selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only BranchID And PayStatus---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only Branch And LoginID Not selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '------------------------------------------------------------Only ItemCategory And ItemCode Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
               String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
               Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------------------------------------------Only ItemCategory And BillMode Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
               Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
               Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only ItemCategory And PayStatus Not sected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
               String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only ItemCategory And LoginID Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '------------------------------------------------------------only ItemCode And BillMode Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
               String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only ItemCode And PayStatus Not selected--------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
               String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '-----------------------------------------------------------Only ItemCode And LoginID Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '------------------------------------------------------------Only BillMode And PayStatus Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only BillMode And Login------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '---------------------------------------------------------PayStatus And LoginID Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '--only four Items Selected (only two Not selected)End ---------------------------------------------------------------------------
                '---------------------------------------------------------------------------------------------------------------------------------

                '--only 3 Items Selected (only 3 Not selected) ---------------------------------------------------------------------------
                '-------------------------------------------------------------------------------------------------------------------------
                '-----------------------------------------------------------Branch And ItemCategory And ItemCode selected-----------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With


                '---------------------------------------------------BranchID And ItemCategory BillMode selected-------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                  String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '--------------------------------------------------------BranchID And ItemCategory And PayStatus---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '-------------------------------------------------------Only BranchID  And ItemCategory And LoginID -----------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------BranchID And ItemCode And BillMode  selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '------------------------------------------------------------BranchID, ItemCode And PayStatus---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only BranchID,ItemCode And Login selected--------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only BranchID, BillMode And PayStatus selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '------------------------------------------------------------Only BranchID, BillModes, LoginID selected--------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
               String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '-----------------------------------------------------Only BranchID, PayMode And Login selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With


                '------------------------------------------------------------Only ItemCategory, ItemCode And BillMode selected-------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                  String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '-------------------------------------------------Only ItemCategory, ItemCode And PayStatus selected------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '-------------------------------------------------------Only ItemCategory, ItemCode And LoginID---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------------------------------------------Only ItemCategory, BillMode And PayStatus selected--------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '---------------------------------------------------------Only ItemCategory, BillMode And LoginID selected--------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only ItemCategory, PayStatus And Login selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                  String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------------------------------------------Only ItemCode, BillMode And PayStatus selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '--------------------------------------------------------Only ItemCode, BillMode And LoginID selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '---------------------------------------------------------Only ItemCode, PayStatus And LoginID selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '---------------------------------------------------------Only Billmode, PayStatus And LoginID selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '--only 3 Items Selected (only 3 Not selected) End---------------------------------------------------------------------------
                '---------------------------------------------------------------------------------------------------------------------------------

                '--only 2 Items Selected (only 4 Not selected) ---------------------------------------------------------------------------
                '-----------------------------------------------------------------------------------------------------------------------------
                '------------------------------------------------------------On BranchID And ItemCategory selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                          String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                          String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '-----------------------------------------------------Only BranchID And ItemCode selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '-----------------------------------------------------------Only BranchID And BillMode selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '--------------------------------------------------------Only BranchID And PayStatus selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                   String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                  Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '----------------------------------------------------------Only BranchID And LoginID selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '----------------------------------------------------------Only ItemCategory And ItemCode selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only ItemCategory And BillMode selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only ItemCategory And PayStatus selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only ItemCategory And LoginID selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                  String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                  String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------------------------------------------Only ItemCode And BillMode selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
               String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '----------------------------------------------------------Only ItemCode And PayStatus selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only ItemCode And LoginID selected---------------------------------------------------------------

            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '----------------------------------------------------------Only BillModes And PayStatus selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only BillMode And LoginID selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '----------------------------------------------------------Only PayStatus And LoginID---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '--only 2 Items Selected (only 4 Not selected) End---------------------------------------------------------------------------
                '---------------------------------------------------------------------------------------------------------------------------------

                '--only 1 Items Selected (only 5 Not selected) ---------------------------------------------------------------------------
                '---------------------------------------------------------------------------------------------------------------------------------

                '-----------------------------------------------------------Only BranchID selected--------------------------------------------------------------

            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only ItemCategory selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
               String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '------------------------------------------------------------Only ItemCode selected--------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '------------------------------------------------------------Only BillMode selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
               String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '-----------------------------------------------------------Only PayStatus selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only LoginID selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                  String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '--only 1 Items Selected (only 5 Not selected) End----------------------------------------------------------------------------------------
                '-----------------------------------------------------------------------------------------------------------------------------------------

                '---------------------------------------------------------------------------------------------------------------------------------------------
                '------------------------------------------------------------nothing Is selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                  String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With


            End If

            Return Me.Load("uspGetSales", "Items", Parameters)

        End Function

        Public Function GetItemsInventory(startDateTime As Date, endDateTime As Date, itemCategoryID As String) As DataSet
            If String.IsNullOrEmpty(itemCategoryID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With
            End If
            Return Me.Load("uspGetItemsInventory", "Items", Parameters)
        End Function

        Public Function GetItemsLogins(startDateTime As Date, endDateTime As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))
            End With

            Return Me.Load("uspGetItemsLogins", "Items", Parameters)

        End Function


#End Region

    End Class

    Public Class ItemsCASH : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_CashAmount As Decimal
        Private m_CashPayStatusID As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property




        Public Property CashAmount() As Decimal
            Get
                Return m_CashAmount
            End Get
            Set(Value As Decimal)
                m_CashAmount = Value
            End Set
        End Property

        Public Property CashPayStatusID() As String
            Get
                Return m_CashPayStatusID
            End Get
            Set(Value As String)
                m_CashPayStatusID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditItemsCASH")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("CashAmount", Me.CashAmount))
                .Add(New ParameterSQL("CashPayStatusID", Me.CashPayStatusID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateItemsCASH")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
            End With

            'For Audit Trial
            Me.SetLogObject("ItemsCASH")

            Return Parameters

        End Function


        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "VisitNo = '" + Me.VisitNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            errorPart = "Visit No: " + Me.VisitNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ItemsCASH"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ItemsCASH")

            Return Parameters

        End Function

        Public Function GetItemsCASH(visitNo As String, itemCode As String, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetItemsCASH", "ItemsCASH", Parameters)

        End Function

#End Region

    End Class

    Public Class ItemsEXT : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Dosage As String
        Private m_Duration As Integer
        Private m_DrQuantity As Integer
        Private m_Pharmacist As String
        Private m_LocationID As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property Dosage() As String
            Get
                Return m_Dosage
            End Get
            Set(Value As String)
                m_Dosage = Value
            End Set
        End Property

        Public Property Duration() As Integer
            Get
                Return m_Duration
            End Get
            Set(Value As Integer)
                m_Duration = Value
            End Set
        End Property

        Public Property DrQuantity() As Integer
            Get
                Return m_DrQuantity
            End Get
            Set(Value As Integer)
                m_DrQuantity = Value
            End Set
        End Property

        Public Property Pharmacist() As String
            Get
                Return m_Pharmacist
            End Get
            Set(Value As String)
                m_Pharmacist = Value
            End Set
        End Property

        Public Property LocationID() As String
            Get
                Return m_LocationID
            End Get
            Set(Value As String)
                m_LocationID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditItemsEXT")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Dosage", Me.Dosage))
                .Add(New ParameterSQL("Duration", Me.Duration))
                .Add(New ParameterSQL("DrQuantity", Me.DrQuantity))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateItemsEXT")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Pharmacist", Me.Pharmacist))
                .Add(New ParameterSQL("LocationID", Me.LocationID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            'Me.SetLogObject("ItemsEXT")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ItemsEXT"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ItemsEXT")

            Return Parameters

        End Function

        Public Function GetItemsEXT(visitNo As String, itemCode As String, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetItemsEXT", "ItemsEXT", Parameters)

        End Function

#End Region

    End Class

    Public Class ReceiptReversalsEXT : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_ReceiptNo As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ReceiptNo() As String
            Get
                Return m_ReceiptNo
            End Get
            Set(ByVal Value As String)
                m_ReceiptNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspReverseReceiptsOPD")

            With Parameters
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
            End With

            'For Audit Trail
            Me.SetLogObject("Payments")

            Return Parameters

        End Function

#End Region

    End Class

    Public Class ItemsBalanceDetails : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Balance As Integer
        Private m_BalanceStatus As String
        Private m_NextVisitNo As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property Balance() As Integer
            Get
                Return m_Balance
            End Get
            Set(ByVal Value As Integer)
                m_Balance = Value
            End Set
        End Property

        Public Property BalanceStatus() As String
            Get
                Return m_BalanceStatus
            End Get
            Set(ByVal Value As String)
                m_BalanceStatus = Value
            End Set
        End Property

        Public Property NextVisitNo() As String
            Get
                Return m_NextVisitNo
            End Get
            Set(ByVal Value As String)
                m_NextVisitNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertItemsBalanceDetails")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Balance", Me.Balance))
                '.Add(New ParameterSQL("BalanceStatus", Me.BalanceStatus))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateItemsBalanceDetails")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("NextVisitNo", Me.NextVisitNo))
                '.Add(New ParameterSQL("LoginID", Me.LoginID))
                '.Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("itemBalanceDetails")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "VisitNo: " + Me.VisitNo + " and ItemCode: " + Me.ItemCode + " and ItemCategoryID: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "itemBalanceDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("itemBalanceDetails")

            Return Parameters

        End Function

        Public Function GetItemsBalanceDetails(ByVal visitNo As String, ByVal itemCode As String, ByVal itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetItemsBalanceDetails", "itemBalanceDetails", Parameters)

        End Function

#End Region



    End Class

    Public Class Payments : Inherits DBConnect

#Region " Fields "

        Private m_ReceiptNo As String
        Private m_PayTypeID As String
        Private m_PayNo As String
        Private m_ClientFullName As String
        Private m_PayDate As Date
        Private m_PayModesID As String
        Private m_DocumentNo As String
        Private m_AmountWords As String
        Private m_Notes As String
        Private m_CurrenciesID As String
        Private m_WithholdingTax As Decimal
        Private m_GrandDiscount As Decimal
        Private m_AmountTendered As Decimal
        Private m_ExchangeRate As Decimal
        Private m_Change As Decimal
        Private m_SendBalanceToAccount As Boolean
        Private m_UseAccountBalance As Boolean
        Private m_VisitTypeID As String
        Private m_FilterNo As String

#End Region

#Region " Properties "

        Public Property ReceiptNo() As String
            Get
                Return m_ReceiptNo
            End Get
            Set(Value As String)
                m_ReceiptNo = Value
            End Set
        End Property

        Public Property PayTypeID() As String
            Get
                Return m_PayTypeID
            End Get
            Set(Value As String)
                m_PayTypeID = Value
            End Set
        End Property

        Public Property ClientFullName() As String
            Get
                Return m_ClientFullName
            End Get
            Set(Value As String)
                m_ClientFullName = Value
            End Set
        End Property

        Public Property PayNo() As String
            Get
                Return m_PayNo
            End Get
            Set(Value As String)
                m_PayNo = Value
            End Set
        End Property

        Public Property PayDate() As Date
            Get
                Return m_PayDate
            End Get
            Set(Value As Date)
                m_PayDate = Value
            End Set
        End Property

        Public Property PayModesID() As String
            Get
                Return m_PayModesID
            End Get
            Set(Value As String)
                m_PayModesID = Value
            End Set
        End Property

        Public Property DocumentNo() As String
            Get
                Return m_DocumentNo
            End Get
            Set(Value As String)
                m_DocumentNo = Value
            End Set
        End Property

        Public Property AmountWords() As String
            Get
                Return m_AmountWords
            End Get
            Set(value As String)
                m_AmountWords = value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

        Public Property CurrenciesID() As String
            Get
                Return m_CurrenciesID
            End Get
            Set(Value As String)
                m_CurrenciesID = Value
            End Set
        End Property

        Public Property WithholdingTax() As Decimal
            Get
                Return m_WithholdingTax
            End Get
            Set(ByVal Value As Decimal)
                m_WithholdingTax = Value
            End Set
        End Property

        Public Property GrandDiscount() As Decimal
            Get
                Return m_GrandDiscount
            End Get
            Set(ByVal Value As Decimal)
                m_GrandDiscount = Value
            End Set
        End Property


        Public Property AmountTendered() As Decimal
            Get
                Return m_AmountTendered
            End Get
            Set(Value As Decimal)
                m_AmountTendered = Value
            End Set
        End Property

        Public Property ExchangeRate() As Decimal
            Get
                Return m_ExchangeRate
            End Get
            Set(Value As Decimal)
                m_ExchangeRate = Value
            End Set
        End Property

        Public Property Change() As Decimal
            Get
                Return m_Change
            End Get
            Set(Value As Decimal)
                m_Change = Value
            End Set
        End Property

        Public Property SendBalanceToAccount() As Boolean
            Get
                Return m_SendBalanceToAccount
            End Get
            Set(Value As Boolean)
                m_SendBalanceToAccount = Value
            End Set
        End Property

        Public Property UseAccountBalance() As Boolean
            Get
                Return m_UseAccountBalance
            End Get
            Set(Value As Boolean)
                m_UseAccountBalance = Value
            End Set
        End Property

        Public Property VisitTypeID() As String
            Get
                Return m_VisitTypeID
            End Get
            Set(Value As String)
                m_VisitTypeID = Value
            End Set
        End Property

        Public Property FilterNo() As String
            Get
                Return m_FilterNo
            End Get
            Set(Value As String)
                m_FilterNo = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPayments")

            With Parameters
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("PayTypeID", Me.PayTypeID))
                .Add(New ParameterSQL("PayNo", Me.PayNo))
                .Add(New ParameterSQL("ClientFullName", Me.ClientFullName))
                .Add(New ParameterSQL("PayDate", Me.PayDate))
                .Add(New ParameterSQL("PayModesID", Me.PayModesID))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("AmountWords", Me.AmountWords))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("CurrenciesID", Me.CurrenciesID))
                .Add(New ParameterSQL("WithholdingTax", Me.WithholdingTax))
                .Add(New ParameterSQL("GrandDiscount", Me.GrandDiscount))
                .Add(New ParameterSQL("AmountTendered", Me.AmountTendered))
                .Add(New ParameterSQL("ExchangeRate", Me.ExchangeRate))
                .Add(New ParameterSQL("Change", Me.Change))
                .Add(New ParameterSQL("SendBalanceToAccount", Me.SendBalanceToAccount))
                .Add(New ParameterSQL("UseAccountBalance", Me.UseAccountBalance))
                .Add(New ParameterSQL("VisitTypeID", Me.VisitTypeID))
                .Add(New ParameterSQL("FilterNo", Me.FilterNo))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Public Function GetPayments(receiptNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ReceiptNo", receiptNo))
            End With

            Return Me.Load("uspGetPayments", "Payments", Parameters)

        End Function

        Private Function GetCashPayments(receiptNo As String, startDateTime As Nullable(Of Date), endDateTime As Nullable(Of Date), VisitsBranch As String, loginID As String) As DataSet

            If (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso (String.IsNullOrEmpty(VisitsBranch)) AndAlso (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso (String.IsNullOrEmpty(VisitsBranch)) AndAlso Not (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With


            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(VisitsBranch)) AndAlso (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(VisitsBranch)) AndAlso Not (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", receiptNo))
                    .Add(New ParameterSQL("StartDateTime", Nothing))
                    .Add(New ParameterSQL("EndDateTime", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
            End If

            Return Me.Load("uspGetCashPayments", "Payments", Parameters)

        End Function



        ''' <summary>
        ''' Gets Cash Payments for specified receipt no
        ''' </summary>
        ''' <param name="receiptNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetCashPayments(receiptNo As String) As DataSet
            Return GetCashPayments(receiptNo, Nothing, Nothing, Nothing, String.Empty)
        End Function

        ' ''' <summary>
        ' ''' Gets Cash Payment for record DateTime between start DateTime and end DateTime
        ' ''' </summary>
        ' ''' <param name="startDateTime"></param>
        ' ''' <param name="endDateTime"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        ' ''' 
        'Public Function GetCashPayments(startDateTime As Date, endDateTime As Date) As DataSet
        '    Return GetCashPayments(String.Empty, startDateTime, endDateTime, Nothing, String.Empty)
        'End Function

        ' ''' <summary>
        ' ''' Gets Cash Payment for record DateTime between start DateTime and end DateTime for aspecific login id
        ' ''' </summary>
        ' ''' <param name="startDateTime"></param>
        ' ''' <param name="endDateTime"></param>
        ' ''' <param name="loginID"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>

        'Public Function GetCashPayments(startDateTime As Date, endDateTime As Date, LoginID As String) As DataSet
        '    Return GetCashPayments(startDateTime, endDateTime, Nothing, LoginID)
        'End Function

        Public Function GetCashPayments(startDateTime As Date, endDateTime As Date, VisitsBranch As String, LoginID As String) As DataSet
            Return GetCashPayments(String.Empty, startDateTime, endDateTime, VisitsBranch, LoginID)
        End Function

        Public Function GetTimelySMSIncomeSummaries(startDateTime As Date, endDateTime As Date) As DataSet


            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))
            End With


            Return Me.Load("uspGetTimelySMSIncomeSummaries", "Payments", Parameters)

        End Function

        Public Function GetOtherPayments(startDateTime As Nullable(Of Date), endDateTime As Nullable(Of Date), paymentsModeID As String, branchID As String) As DataSet

            If String.IsNullOrEmpty(paymentsModeID) AndAlso Not String.IsNullOrEmpty(branchID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PaymentsModeID", Nothing))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            ElseIf Not String.IsNullOrEmpty(paymentsModeID) AndAlso String.IsNullOrEmpty(branchID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PaymentsModeID", paymentsModeID))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            ElseIf String.IsNullOrEmpty(paymentsModeID) AndAlso String.IsNullOrEmpty(branchID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PaymentsModeID", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            ElseIf Not String.IsNullOrEmpty(paymentsModeID) AndAlso Not String.IsNullOrEmpty(branchID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PaymentsModeID", paymentsModeID))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With
            End If

            Return Me.Load("UspGetOtherPayments", "Payments", Parameters)

        End Function

        Public Function GetOtherPayments(startDateTime As Date, endDateTime As Date, paymentsModeID As String) As DataSet
            Return GetOtherPayments(startDateTime, endDateTime, paymentsModeID, String.Empty)
        End Function


        Private Function GetBillFormPayment(receiptNo As String, startDateTime As Nullable(Of Date),
                              endDateTime As Nullable(Of Date), visitsBranch As String, loginID As String) As DataSet

            If (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso (String.IsNullOrEmpty(visitsBranch)) AndAlso (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(loginID)) AndAlso Not (String.IsNullOrEmpty(visitsBranch)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", visitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso (String.IsNullOrEmpty(loginID)) AndAlso Not (String.IsNullOrEmpty(visitsBranch)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", visitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(loginID)) AndAlso (String.IsNullOrEmpty(visitsBranch)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", receiptNo))
                    .Add(New ParameterSQL("StartDateTime", Nothing))
                    .Add(New ParameterSQL("EndDateTime", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
            End If

            Return Me.Load("uspGetBillFormPayment", "Payments", Parameters)

        End Function

        ''' <summary>
        ''' Gets Bill Form Payment for specified receipt no
        ''' </summary>
        ''' <param name="receiptNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetBillFormPayment(receiptNo As String) As DataSet
            Return GetBillFormPayment(receiptNo, Nothing, Nothing, Nothing, String.Empty)
        End Function


        ''' <summary>
        ''' Gets Bill Form Payment for record DateTime between start DateTime and end DateTime for aspecific login id
        ''' </summary>
        ''' <param name="startDateTime"></param>
        ''' <param name="endDateTime"></param>
        ''' <param name="loginID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetBillFormPayment(startDateTime As Date, endDateTime As Date, loginID As String, VisitsBranch As String) As DataSet
            Return GetBillFormPayment(String.Empty, startDateTime, endDateTime, VisitsBranch, loginID)
        End Function

        Private Function GetBillsPayment(receiptNo As String, startDateTime As Nullable(Of Date),
                                            endDateTime As Nullable(Of Date), visitsBranch As String, loginID As String) As DataSet

            If (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso (String.IsNullOrEmpty(visitsBranch)) AndAlso (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(loginID)) AndAlso Not (String.IsNullOrEmpty(visitsBranch)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", visitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso (String.IsNullOrEmpty(loginID)) AndAlso Not (String.IsNullOrEmpty(visitsBranch)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", visitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(loginID)) AndAlso (String.IsNullOrEmpty(visitsBranch)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", receiptNo))
                    .Add(New ParameterSQL("StartDateTime", Nothing))
                    .Add(New ParameterSQL("EndDateTime", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
            End If


            Return Me.Load("uspGetBillsPayment", "Payments", Parameters)

        End Function

        ''' <summary>
        ''' Gets Bill Payment for specified receipt no
        ''' </summary>
        ''' <param name="receiptNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetBillsPayment(receiptNo As String) As DataSet
            Return GetBillsPayment(receiptNo, Nothing, Nothing, Nothing, String.Empty)
        End Function


        ''' <summary>
        ''' Gets Bill Payment for record DateTime between start DateTime and end DateTime for aspecific login id
        ''' </summary>
        ''' <param name="startDateTime"></param>
        ''' <param name="endDateTime"></param>
        ''' <param name="loginID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetBillsPayment(startDateTime As Date, endDateTime As Date, visitsBranch As String, loginID As String) As DataSet
            Return GetBillsPayment(String.Empty, startDateTime, endDateTime, visitsBranch, loginID)
        End Function

        Private Function GetCreditBillFormPayment(receiptNo As String, startDateTime As Nullable(Of Date),
                                            endDateTime As Nullable(Of Date), visitsBranch As String, loginID As String) As DataSet

            If (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso (String.IsNullOrEmpty(visitsBranch)) AndAlso (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(loginID)) AndAlso Not (String.IsNullOrEmpty(visitsBranch)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", visitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With


            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso (String.IsNullOrEmpty(loginID)) AndAlso Not (String.IsNullOrEmpty(visitsBranch)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", visitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(loginID)) AndAlso (String.IsNullOrEmpty(visitsBranch)) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With


            Else
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", receiptNo))
                    .Add(New ParameterSQL("StartDateTime", Nothing))
                    .Add(New ParameterSQL("EndDateTime", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
            End If

            Return Me.Load("uspGetCreditBillFormPayment", "Payments", Parameters)

        End Function

        ''' <summary>
        ''' Gets credit bill form payment for specified receipt no
        ''' </summary>
        ''' <param name="receiptNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetCreditBillFormPayment(receiptNo As String) As DataSet
            Return GetCreditBillFormPayment(receiptNo, Nothing, Nothing, Nothing, String.Empty)
        End Function


        Public Function GetCreditBillFormPayment(startDateTime As Date, endDateTime As Date, visitsBranch As String, loginID As String) As DataSet
            Return GetCreditBillFormPayment(String.Empty, startDateTime, endDateTime, visitsBranch, loginID)
        End Function

        ''' <summary>
        ''' Gets cahier logins for record DateTime between start DateTime and end DateTime
        ''' </summary>
        ''' <param name="startDateTime"></param>
        ''' <param name="endDateTime"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetCahierLogins(startDateTime As Date, endDateTime As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))
            End With

            Return Me.Load("uspGetCahierLogins", "Payments", Parameters)

        End Function

        ''' <summary>
        ''' Gets currency summaries payment for record DateTime between start DateTime and end DateTime and LoginID
        ''' </summary>
        ''' <param name="startDateTime"></param>
        ''' <param name="endDateTime"></param>
        ''' <param name="loginID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetCurrencySummaries(startDateTime As Date, endDateTime As Date, loginID As String) As DataSet

            If (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
            End If

            Return Me.Load("uspGetCurrencySummaries", "Payments", Parameters)

        End Function

        ''' <summary>
        ''' Gets currency summaries payment for record DateTime between start DateTime and end DateTime
        ''' </summary>
        ''' <param name="startDateTime"></param>
        ''' <param name="endDateTime"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetCurrencySummaries(startDateTime As Date, endDateTime As Date) As DataSet
            Return GetCurrencySummaries(startDateTime, endDateTime, String.Empty)
        End Function

        Public Function GetNextReceiptID() As Integer

            With Parameters
                .Add(New ParameterSQL("ReceiptID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextReceiptID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("ReceiptID")) Then
                    Return CInt(Me.ReadData("ReceiptID"))
                Else : Return 1
                End If

            End If

        End Function


        Public Function GetDailyNetCashCollections(collectionStartDate As Date, collectionEndDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("CollectionStartDate", collectionStartDate))
                .Add(New ParameterSQL("CollectionEndDate", collectionEndDate))

            End With

            Return Me.Load("uspGetDailyNetCashCollections", "CashPayments", Parameters)

        End Function


        Public Function GetPeriodicPayModesPaymentsSummary(startDateTime As Date, endDateTime As Date, payModesID As String, loginID As String, VisitsBranch As String) As DataSet

            '-----------------------All null---------------------------------------
            If String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With


                '------------------------only PayModeID Not null---------------------------------------
            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With


                '------------------------only LoginID Not null---------------------------------------
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With


                '------------------------only VisitsBranch Not null---------------------------------------
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With



                '----------------------------- Not PayModesID And LoginID----------------------------------------

            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------only PayModesID And BranchID Not null---------------------------------------	
            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------only Login ID And Branch ID Not null---------------------------------------	
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With


            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
            End If
            Return Me.Load("uspGetPeriodicPayModePaymentSummaries", "Payments", Parameters)
        End Function


        Public Function GetPeriodicPayModesPayments(startDateTime As Date, endDateTime As Date, payModesID As String, loginID As String, VisitsBranch As String) As DataSet

            '-----------------------All null---------------------------------------
            If String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With




                '------------------------only PayModeID Not null---------------------------------------
            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With


                '------------------------only LoginID Not null---------------------------------------
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With


                '------------------------only VisitsBranch Not null---------------------------------------
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With



                '----------------------------- Not PayModesID And LoginID----------------------------------------

            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------only PayModesID And BranchID Not null---------------------------------------	
            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------only Login ID And Branch ID Not null---------------------------------------	
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With


            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
            End If
            Return Me.Load("uspGetPeriodicPayModePayments", "Payments", Parameters)
        End Function




        Public Function GetOPDPaymentCategorization(PatientNo As String, startDateTime As Date, endDateTime As Date) As DataSet

            '------------------------------------------------------------------------------
            If String.IsNullOrEmpty(PatientNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PatientNo", Nothing))

                End With

                '------------------------ PatientNo ---------------------------------------
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PatientNo", PatientNo))

                End With

            End If
            Return Me.Load("uspGetOPDCashPaymentCategorisation", "Payments", Parameters)
        End Function


        Public Function GetIPDPaymentCategorization(PatientNo As String, startDateTime As Date, endDateTime As Date) As DataSet

            '------------------------------------------------------------------------------
            If String.IsNullOrEmpty(PatientNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PatientNo", Nothing))

                End With

                '------------------------ PatientNo ---------------------------------------
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PatientNo", PatientNo))

                End With

            End If
            Return Me.Load("uspGetIPDCashPaymentCategorisation", "Payments", Parameters)
        End Function


        Public Function GetOPDCreditPaymentCategorisation(AccountNo As String, startDateTime As Date, endDateTime As Date) As DataSet

            '------------------------------------------------------------------------------
            If String.IsNullOrEmpty(AccountNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("AccountNo", Nothing))

                End With
                '------------------------ AccountNo ---------------------------------------
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("AccountNo", AccountNo))

                End With

            End If
            Return Me.Load("uspGetOPDCreditPaymentCategorisation", "Payments", Parameters)
        End Function


        Public Function GetIPDCreditPaymentCategorisation(AccountNo As String, startDateTime As Date, endDateTime As Date) As DataSet

            '------------------------------------------------------------------------------
            If String.IsNullOrEmpty(AccountNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("AccountNo", Nothing))

                End With

                '------------------------ AccountNo ---------------------------------------
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("AccountNo", AccountNo))

                End With

            End If
            Return Me.Load("uspGetIPDCreditPaymentCategorisation", "Payments", Parameters)
        End Function


        Public Function GetOPDCreditInvoiceCategorisationDetails(AccountNo As String, startDateTime As Date, endDateTime As Date) As DataSet

            '------------------------------------------------------------------------------
            If String.IsNullOrEmpty(AccountNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("AccountNo", Nothing))

                End With

                '------------------------ AccountNo ---------------------------------------
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("AccountNo", AccountNo))

                End With

            End If
            Return Me.Load("uspGetOPDCreditInvoiceCategorisationDetails", "Payments", Parameters)
        End Function

        Public Function GetIPDCreditInvoiceCategorisationDetails(AccountNo As String, startDateTime As Date, endDateTime As Date) As DataSet

            '------------------------------------------------------------------------------
            If String.IsNullOrEmpty(AccountNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("AccountNo", Nothing))

                End With

                '------------------------ AccountNo ---------------------------------------
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("AccountNo", AccountNo))

                End With

            End If
            Return Me.Load("uspGetIPDCreditInvoiceCategorisationDetails", "Payments", Parameters)
        End Function


        Public Function GetOPDCashInvoiceCategorisationDetails(PatientNo As String, startDateTime As Date, endDateTime As Date) As DataSet

            '------------------------------------------------------------------------------
            If String.IsNullOrEmpty(PatientNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PatientNo", Nothing))

                End With

                '------------------------ PatientNo ---------------------------------------
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PatientNo", PatientNo))

                End With

            End If
            Return Me.Load("uspGetOPDCashInvoiceCategorisationDetails", "Payments", Parameters)
        End Function

        Public Function GetIPDCashInvoiceCategorisationDetails(PatientNo As String, startDateTime As Date, endDateTime As Date) As DataSet

            '------------------------------------------------------------------------------
            If String.IsNullOrEmpty(PatientNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PatientNo", Nothing))

                End With

                '------------------------ PatientNo ---------------------------------------
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PatientNo", PatientNo))

                End With

            End If
            Return Me.Load("uspGetIPDCashInvoiceCategorisationDetails", "Payments", Parameters)
        End Function


        Public Function GetPeriodicPaymentsByBillToCustomerNo(billNo As String, billModesID As String, startDate As Date, endDate As Date) As DataSet

            '------------------------------------------------------------------------------

            With Parameters
                .Add(New ParameterSQL("BillNo", billNo))
                .Add(New ParameterSQL("BillModesID", billModesID))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With


            Return Me.Load("uspGetPeriodicPaymentsByBillToCustomerNo", "Payments", Parameters)
        End Function


#End Region

    End Class

    Public Class PaymentDetails : Inherits DBConnect

#Region " Fields "

        Private m_ReceiptNo As String
        Private m_VisitNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Quantity As Integer
        Private m_UnitPrice As Decimal
        Private m_Discount As Decimal
        Private m_Amount As Decimal

#End Region

#Region " Properties "

        Public Property ReceiptNo() As String
            Get
                Return m_ReceiptNo
            End Get
            Set(Value As String)
                m_ReceiptNo = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(value As Integer)
                m_Quantity = value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property Discount() As Decimal
            Get
                Return m_Discount
            End Get
            Set(value As Decimal)
                m_Discount = value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(Value As Decimal)
                m_Amount = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPaymentDetails")

            With Parameters
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("Discount", Me.Discount))
                .Add(New ParameterSQL("Amount", Me.Amount))
            End With

            Return Parameters

        End Function

          Public Function GetPaymentDetails(receiptNo As String, ItemCategoryID As String) As DataSet

            If String.IsNullOrEmpty(ItemCategoryID) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", receiptNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", receiptNo))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))

                End With

            End If



            Return Me.Load("uspGetPaymentDetails", "PaymentDetails", Parameters)

        End Function

        Public Function GetPaymentDetails(receiptNo As String) As DataSet
            Return Me.GetPaymentDetails(receiptNo, Nothing)

        End Function

        Public Function GetVisitPaymentDetails(receiptNo As String, visitNo As String, ItemCategoryID As String) As DataSet

            If String.IsNullOrEmpty(ItemCategoryID) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", receiptNo))
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", receiptNo))
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))

                End With

            End If



            Return Me.Load("uspGetVisitPaymentDetails", "PaymentDetails", Parameters)

        End Function

        Public Function GetVisitPaymentDetails(receiptNo As String, visitNo As String) As DataSet

            Return Me.GetVisitPaymentDetails(receiptNo, visitNo, String.Empty)

        End Function


        Public Function GetDiscounts(startDateTime As Date, endDateTime As Date, branchID As String) As DataSet

            If Not String.IsNullOrEmpty(branchID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            ElseIf String.IsNullOrEmpty(branchID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            End If

            Return Me.Load("uspGetDiscounts", "PaymentDetails", Parameters)

        End Function

        Public Function GetDiscounts(startDateTime As Date, endDateTime As Date) As DataSet
            Return GetDiscounts(startDateTime, endDateTime, Nothing)
        End Function
#End Region

    End Class

    Public Class PaymentVouchers : Inherits DBConnect

#Region " Fields "

        Private m_VoucherNo As String
        Private m_PayTypeID As String
        Private m_BillNo As String
        Private m_PayDate As Date
        Private m_PayModesID As String
        Private m_DocumentNo As String
        Private m_AmountWords As String
        Private m_Notes As String
        Private m_CurrenciesID As String
        Private m_AmountTendered As Decimal
        Private m_ExchangeRate As Decimal
        Private m_Change As Decimal
        Private m_SendBalanceToAccount As Boolean
        Private m_UseAccountBalance As Boolean
        Private m_VoucherTypeID As String
        Private m_FilterNo As String
        Private m_PayNo As String
        Private m_Payee As String

#End Region

#Region " Properties "

        Public Property VoucherNo() As String
            Get
                Return m_VoucherNo
            End Get
            Set(ByVal Value As String)
                m_VoucherNo = Value
            End Set
        End Property

        Public Property PayTypeID() As String
            Get
                Return m_PayTypeID
            End Get
            Set(ByVal Value As String)
                m_PayTypeID = Value
            End Set
        End Property

        Public Property BillNo() As String
            Get
                Return m_BillNo
            End Get
            Set(ByVal Value As String)
                m_BillNo = Value
            End Set
        End Property

        Public Property PayDate() As Date
            Get
                Return m_PayDate
            End Get
            Set(ByVal Value As Date)
                m_PayDate = Value
            End Set
        End Property

        Public Property PayModesID() As String
            Get
                Return m_PayModesID
            End Get
            Set(ByVal Value As String)
                m_PayModesID = Value
            End Set
        End Property

        Public Property DocumentNo() As String
            Get
                Return m_DocumentNo
            End Get
            Set(ByVal Value As String)
                m_DocumentNo = Value
            End Set
        End Property

        Public Property AmountWords() As String
            Get
                Return m_AmountWords
            End Get
            Set(ByVal Value As String)
                m_AmountWords = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

        Public Property CurrenciesID() As String
            Get
                Return m_CurrenciesID
            End Get
            Set(ByVal Value As String)
                m_CurrenciesID = Value
            End Set
        End Property

        Public Property AmountTendered() As Decimal
            Get
                Return m_AmountTendered
            End Get
            Set(ByVal Value As Decimal)
                m_AmountTendered = Value
            End Set
        End Property

        Public Property ExchangeRate() As Decimal
            Get
                Return m_ExchangeRate
            End Get
            Set(ByVal Value As Decimal)
                m_ExchangeRate = Value
            End Set
        End Property

        Public Property Change() As Decimal
            Get
                Return m_Change
            End Get
            Set(ByVal Value As Decimal)
                m_Change = Value
            End Set
        End Property

        Public Property SendBalanceToAccount() As Boolean
            Get
                Return m_SendBalanceToAccount
            End Get
            Set(ByVal Value As Boolean)
                m_SendBalanceToAccount = Value
            End Set
        End Property

        Public Property UseAccountBalance() As Boolean
            Get
                Return m_UseAccountBalance
            End Get
            Set(ByVal Value As Boolean)
                m_UseAccountBalance = Value
            End Set
        End Property

        Public Property VoucherTypeID() As String
            Get
                Return m_VoucherTypeID
            End Get
            Set(ByVal Value As String)
                m_VoucherTypeID = Value
            End Set
        End Property

        Public Property FilterNo() As String
            Get
                Return m_FilterNo
            End Get
            Set(ByVal Value As String)
                m_FilterNo = Value
            End Set
        End Property

        Public Property PayNo() As String
            Get
                Return m_PayNo
            End Get
            Set(ByVal Value As String)
                m_PayNo = Value
            End Set
        End Property

        Public Property Payee() As String
            Get
                Return m_Payee
            End Get
            Set(ByVal Value As String)
                m_Payee = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPaymentVouchers")

            With Parameters
                .Add(New ParameterSQL("VoucherNo", Me.VoucherNo))
                .Add(New ParameterSQL("PayTypeID", Me.PayTypeID))
                .Add(New ParameterSQL("BillNo", Me.BillNo))
                .Add(New ParameterSQL("PayDate", Me.PayDate))
                .Add(New ParameterSQL("PayModesID", Me.PayModesID))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("AmountWords", Me.AmountWords))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("CurrenciesID", Me.CurrenciesID))
                .Add(New ParameterSQL("AmountTendered", Me.AmountTendered))
                .Add(New ParameterSQL("ExchangeRate", Me.ExchangeRate))
                .Add(New ParameterSQL("Change", Me.Change))
                .Add(New ParameterSQL("SendBalanceToAccount", Me.SendBalanceToAccount))
                .Add(New ParameterSQL("UseAccountBalance", Me.UseAccountBalance))
                .Add(New ParameterSQL("VoucherTypeID", Me.VoucherTypeID))
                .Add(New ParameterSQL("FilterNo", Me.FilterNo))
                .Add(New ParameterSQL("PayNo", Me.PayNo))
                .Add(New ParameterSQL("Payee", Me.Payee))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function


        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VoucherNo = '" + Me.VoucherNo + "'"
            Dim errorPart As String = "VoucherNo: " + Me.VoucherNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PaymentVouchers"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PaymentVouchers")

            Return Parameters

        End Function

        Public Function GetPaymentVouchers(ByVal voucherNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VoucherNo", voucherNo))
            End With

            Return Me.Load("uspGetPaymentVouchers", "PaymentVouchers", Parameters)

        End Function


        Public Function GetNextVoucherID() As Integer

            With Parameters
                .Add(New ParameterSQL("VoucherID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextVoucherID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("VoucherID")) Then
                    Return CInt(Me.ReadData("VoucherID"))
                Else : Return 1
                End If

            End If

        End Function


#End Region

    End Class

    Public Class PaymentVoucherDetails : Inherits DBConnect

#Region " Fields "

        Private m_VoucherNo As String
        Private m_BillNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Quantity As Integer
        Private m_UnitPrice As Decimal
        Private m_Discount As Decimal
        Private m_Amount As Decimal

#End Region

#Region " Properties "

        Public Property VoucherNo() As String
            Get
                Return m_VoucherNo
            End Get
            Set(ByVal Value As String)
                m_VoucherNo = Value
            End Set
        End Property

        Public Property BillNo() As String
            Get
                Return m_BillNo
            End Get
            Set(ByVal Value As String)
                m_BillNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(ByVal Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(ByVal Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property Discount() As Decimal
            Get
                Return m_Discount
            End Get
            Set(ByVal Value As Decimal)
                m_Discount = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPaymentVoucherDetails")

            With Parameters
                .Add(New ParameterSQL("VoucherNo", Me.VoucherNo))
                .Add(New ParameterSQL("BillNo", Me.BillNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("Discount", Me.Discount))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

      Public Function GetPaymentVoucherDetails(ByVal voucherNo As String, ByVal billNo As String, ByVal itemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VoucherNo", voucherNo))
                .Add(New ParameterSQL("BillNo", billNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
            End With

            Return Me.Load("uspGetPaymentVoucherDetails", "PaymentVoucherDetails", Parameters)

        End Function

#End Region



    End Class

    Public Class RefundRequests : Inherits DBConnect

#Region " Fields "

        Private m_RefundRequestNo As String
        Private m_ReceiptNo As String
        Private m_RequestStatusID As String
        Private m_ApprovalStatusID As String
        Private m_VisitTypeID As String
        Private m_RequestedBy As String
        Private m_Amount As Decimal

#End Region

#Region " Properties "

        Public Property RefundRequestNo() As String
            Get
                Return m_RefundRequestNo
            End Get
            Set(ByVal Value As String)
                m_RefundRequestNo = Value
            End Set
        End Property

        Public Property ReceiptNo() As String
            Get
                Return m_ReceiptNo
            End Get
            Set(ByVal Value As String)
                m_ReceiptNo = Value
            End Set
        End Property

        Public Property RequestStatusID() As String
            Get
                Return m_RequestStatusID
            End Get
            Set(ByVal Value As String)
                m_RequestStatusID = Value
            End Set
        End Property

        Public Property ApprovalStatusID() As String
            Get
                Return m_ApprovalStatusID
            End Get
            Set(ByVal Value As String)
                m_ApprovalStatusID = Value
            End Set
        End Property

        Public Property VisitTypeID() As String
            Get
                Return m_VisitTypeID
            End Get
            Set(ByVal Value As String)
                m_VisitTypeID = Value
            End Set
        End Property

        Public Property RequestedBy() As String
            Get
                Return m_RequestedBy
            End Get
            Set(ByVal Value As String)
                m_RequestedBy = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

#End Region


#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "


        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertRefundRequests")

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", Me.RefundRequestNo))
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("RequestStatusID", Me.RequestStatusID))
                .Add(New ParameterSQL("ApprovalStatusID", Me.ApprovalStatusID))
                .Add(New ParameterSQL("VisitTypeID", Me.VisitTypeID))
                .Add(New ParameterSQL("RequestedBy", Me.RequestedBy))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateRefundRequests")

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", Me.RefundRequestNo))
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("RequestStatusID", Me.RequestStatusID))
                .Add(New ParameterSQL("ApprovalStatusID", Me.ApprovalStatusID))
                .Add(New ParameterSQL("VisitTypeID", Me.VisitTypeID))
                .Add(New ParameterSQL("RequestedBy", Me.RequestedBy))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("RefundRequests")

            Return Parameters

        End Function
        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RefundRequestNo = '" + Me.RefundRequestNo + "'"
            Dim errorPart As String = "Refund Request No: " + Me.RefundRequestNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "RefundRequests"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("RefundRequests")

            Return Parameters

        End Function

        Private Function GetRefundRequests(ByVal refundRequestNo As String, requestStatusID As String, approvalStatusID As String) As DataSet

            If Not String.IsNullOrEmpty(refundRequestNo) Then
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", refundRequestNo))
                    .Add(New ParameterSQL("RequestStatusID", Nothing))
                    .Add(New ParameterSQL("ApprovalStatusID", Nothing))

                End With
            ElseIf Not String.IsNullOrEmpty(requestStatusID) AndAlso String.IsNullOrEmpty(approvalStatusID) Then
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", Nothing))
                    .Add(New ParameterSQL("RequestStatusID", requestStatusID))
                    .Add(New ParameterSQL("ApprovalStatusID", Nothing))

                End With

            ElseIf Not String.IsNullOrEmpty(requestStatusID) AndAlso Not String.IsNullOrEmpty(approvalStatusID) Then
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", Nothing))
                    .Add(New ParameterSQL("RequestStatusID", requestStatusID))
                    .Add(New ParameterSQL("ApprovalStatusID", approvalStatusID))

                End With

            End If


            Return Me.Load("uspGetRefundRequests", "RefundRequests", Parameters)

        End Function


        Public Function GetRefundRequests(ByVal refundRequestNo As String) As DataSet

            Return Me.GetRefundRequests(refundRequestNo, String.Empty, String.Empty)

        End Function

        Public Function GetRefundRequestsByRequestStatus(ByVal approvalRequestStatus As String) As DataSet

            Return Me.GetRefundRequests(Nothing, approvalRequestStatus, String.Empty)

        End Function

        Public Function GetRefundRequestsByRequestAndApprovalStatus(ByVal approvalRequestStatus As String, approvalStatus As String) As DataSet

            Return Me.GetRefundRequests(Nothing, approvalRequestStatus, approvalStatus)

        End Function


        Public Function GetToApproveRefundRequests(ByVal refundRequestNo As String) As DataSet

            If Not String.IsNullOrEmpty(refundRequestNo) Then
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", refundRequestNo))

                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", Nothing))

                End With

            End If


            Return Me.Load("uspGetToApproveRefundRequests", "RefundRequests", Parameters)

        End Function

        Public Function GetToRefundRequests(ByVal refundRequestNo As String) As DataSet

            If Not String.IsNullOrEmpty(refundRequestNo) Then
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", refundRequestNo))

                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", Nothing))

                End With

            End If


            Return Me.Load("uspGetToRefundRequests", "RefundRequests", Parameters)

        End Function

        Public Function GetCountToRefundRequests() As Integer

            With Parameters
                .Add(New ParameterSQL("ToRefuntCount", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetCountToRefundRequests", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("ToRefuntCount")) Then
                    Return CInt(Me.ReadData("ToRefuntCount"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function GetRefundRequestNo(receiptNo As String, requestDate As Nullable(Of Date)) As String

            Dim oAppData As New SyncSoft.Common.Classes.AppData()

            If IsNothing(requestDate) OrElse CDate(requestDate).Equals(oAppData.NullDateValue) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", receiptNo))
                    .Add(New ParameterSQL("RecordDateTime", SqlDbType.SmallDateTime))
                    .Add(New ParameterSQL("RefundRequestNo", SqlDbType.VarChar, 20))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", receiptNo))
                    .Add(New ParameterSQL("RecordDateTime", requestDate))
                    .Add(New ParameterSQL("RefundRequestNo", SqlDbType.VarChar, 20))
                End With
            End If

            Me.ReadData = Me.Read("uspGetRefundRequestNo", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("RefundRequestNo")) Then
                    Return CStr(Me.ReadData("RefundRequestNo"))
                Else : Return String.Empty
                End If

            Else : Return Nothing
            End If

        End Function

        Public Function GetRefundRequestNo(receiptNo As String) As String
            Return Me.GetRefundRequestNo(receiptNo, Nothing)
        End Function

        Public Function GetNextRefundRequestID() As Integer

            With Parameters
                .Add(New ParameterSQL("RefundRequestID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextRefundRequestID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("RefundRequestID")) Then
                    Return CInt(Me.ReadData("RefundRequestID"))
                Else : Return 1
                End If

            End If

        End Function


#End Region



    End Class

    Public Class RefundRequestDetails : Inherits DBConnect

#Region " Fields "

        Private m_RefundRequestNo As String
        Private m_VisitNo As String
        Private m_ReceiptNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_ReturnReasonID As String
        Private m_Quantity As Integer
        Private m_Amount As Decimal
        Private m_NewPrice As Decimal

#End Region

#Region " Properties "

        Public Property RefundRequestNo() As String
            Get
                Return m_RefundRequestNo
            End Get
            Set(ByVal Value As String)
                m_RefundRequestNo = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ReceiptNo() As String
            Get
                Return m_ReceiptNo
            End Get
            Set(ByVal Value As String)
                m_ReceiptNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ReturnReasonID() As String
            Get
                Return m_ReturnReasonID
            End Get
            Set(ByVal Value As String)
                m_ReturnReasonID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(ByVal Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

        Public Property NewPrice() As Decimal
            Get
                Return m_NewPrice
            End Get
            Set(value As Decimal)
                m_NewPrice = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertRefundRequestDetails")

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", Me.RefundRequestNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReturnReasonID", Me.ReturnReasonID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("NewPrice", Me.NewPrice))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateRefundRequestDetails")

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", Me.RefundRequestNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReturnReasonID", Me.ReturnReasonID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("NewPrice", Me.NewPrice))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("RefundRequestDetails")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RefundRequestNo = '" + Me.RefundRequestNo + "' and VisitNo = '" + Me.VisitNo + "' and ReceiptNo = '" + Me.ReceiptNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Refund Request No: " + Me.RefundRequestNo + " and Visit No: " + Me.VisitNo + " and Receipt No: " + Me.ReceiptNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "RefundRequestDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("RefundRequestDetails")

            Return Parameters

        End Function

        Public Function GetRefundRequestDetails(ByVal refundRequestNo As String, ByVal visitNo As String, ByVal receiptNo As String, ByVal itemCode As String, ByVal itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", refundRequestNo))
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("ReceiptNo", receiptNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetRefundRequestDetails", "RefundRequestDetails", Parameters)

        End Function

        Private Function GetRefundRequestDetail(ByVal refundRequestNo As String, ByVal itemCategoryID As String, ByVal itemCode As String) As DataSet
            If Not String.IsNullOrEmpty(refundRequestNo) AndAlso Not String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) Then
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", refundRequestNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                End With

            ElseIf Not String.IsNullOrEmpty(refundRequestNo) AndAlso Not String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) Then
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", refundRequestNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                End With

            ElseIf Not String.IsNullOrEmpty(refundRequestNo) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) Then
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", refundRequestNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                End With
            End If


            Return Me.Load("uspGetRefundRequestDetails", "RefundRequestDetails", Parameters)

        End Function

        Public Function GetRefundRequestDetails(ByVal refundRequestNo As String, ByVal itemCategoryID As String, ByVal itemCode As String) As DataSet
            Return Me.GetRefundRequestDetail(refundRequestNo, itemCategoryID, itemCode)
        End Function

        Public Function GetRefundRequestDetail(ByVal refundRequestNo As String, itemCategoryID As String) As DataSet
            Return Me.GetRefundRequestDetails(refundRequestNo, itemCategoryID, Nothing)
        End Function

        Public Function GetRefundRequestDetails(ByVal refundRequestNo As String) As DataSet
            Return Me.GetRefundRequestDetail(refundRequestNo, Nothing, Nothing)
        End Function


        Public Function GetPendingRefundRequestDetailsByItemCategoryItemCode(receiptNo As String, itemCategoryID As String, ByVal itemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ReceiptNo", receiptNo))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("ItemCode", itemCode))
            End With

            Return Me.Load("uspGetPendingRefundRequestDetailsByItemCategoryItemCode", "RefundRequestDetails", Parameters)

        End Function

        Public Function GetRefundRequestDetailsByRequestNo(ByVal refundRequestNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", refundRequestNo))

            End With

            Return Me.Load("uspGetRefundRequestDetailsByRequestNo", "RefundRequestDetails", Parameters)

        End Function



#End Region



    End Class


    Public Class RefundRequestExtraBillItems : Inherits DBConnect

#Region " Fields "

        Private m_RefundRequestNo As String
        Private m_ExtraBillNo As String
        Private m_ReceiptNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_ReturnReasonID As String
        Private m_Quantity As Integer
        Private m_Amount As Decimal
        Private m_NewPrice As Decimal

#End Region

#Region " Properties "

        Public Property RefundRequestNo() As String
            Get
                Return m_RefundRequestNo
            End Get
            Set(ByVal Value As String)
                m_RefundRequestNo = Value
            End Set
        End Property

        Public Property ExtraBillNo() As String
            Get
                Return m_ExtraBillNo
            End Get
            Set(ByVal Value As String)
                m_ExtraBillNo = Value
            End Set
        End Property

        Public Property ReceiptNo() As String
            Get
                Return m_ReceiptNo
            End Get
            Set(ByVal Value As String)
                m_ReceiptNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ReturnReasonID() As String
            Get
                Return m_ReturnReasonID
            End Get
            Set(ByVal Value As String)
                m_ReturnReasonID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(ByVal Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

        Public Property NewPrice() As Decimal
            Get
                Return m_NewPrice
            End Get
            Set(value As Decimal)
                m_NewPrice = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertRefundRequestExtraBillItems")

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", Me.RefundRequestNo))
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReturnReasonID", Me.ReturnReasonID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("NewPrice", Me.NewPrice))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateRefundRequestExtraBillItems")

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", Me.RefundRequestNo))
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReturnReasonID", Me.ReturnReasonID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("NewPrice", Me.NewPrice))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("RefundRequestExtraBillItems")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RefundRequestNo = '" + Me.RefundRequestNo + "' and ExtraBillNo = '" + Me.ExtraBillNo + "' and ReceiptNo = '" + Me.ReceiptNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Refund Request No: " + Me.RefundRequestNo + " and Extra Bill No: " + Me.ExtraBillNo + " and Receipt No: " + Me.ReceiptNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "RefundRequestExtraBillItems"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("RefundRequestExtraBillItems")

            Return Parameters

        End Function

        Public Function GetRefundRequestExtraBillItems(ByVal refundRequestNo As String, ByVal extraBillNo As String, ByVal receiptNo As String, ByVal itemCode As String, ByVal itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", refundRequestNo))
                .Add(New ParameterSQL("ExtraBillNo", extraBillNo))
                .Add(New ParameterSQL("ReceiptNo", receiptNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetRefundRequestExtraBillItems", "RefundRequestExtraBillItems", Parameters)

        End Function


        Public Function GetRefundRequestExtraBillItemsByRequestNo(ByVal refundRequestNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", refundRequestNo))

            End With

            Return Me.Load("uspGetRefundRequestExtraBillItemsByRequestNo", "RefundRequestExtraBillItems", Parameters)

        End Function


#End Region



    End Class

    Public Class Refunds : Inherits DBConnect

#Region " Fields "

        Private m_RefundNo As String
        Private m_ReceiptNo As String
        Private m_RefundRequestNo As String
        Private m_VisitTypeID As String
        Private m_RefundDate As Date
        Private m_Amount As Decimal
        Private m_AmountWords As String
        Private m_Notes As String
#End Region

#Region " Properties "

        Public Property RefundNo() As String
            Get
                Return m_RefundNo
            End Get
            Set(Value As String)
                m_RefundNo = Value
            End Set
        End Property

        Public Property ReceiptNo() As String
            Get
                Return m_ReceiptNo
            End Get
            Set(Value As String)
                m_ReceiptNo = Value
            End Set
        End Property

        Public Property RefundRequestNo() As String
            Get
                Return m_RefundRequestNo
            End Get
            Set(Value As String)
                m_RefundRequestNo = Value
            End Set
        End Property

        Public Property VisitTypeID() As String
            Get
                Return m_VisitTypeID
            End Get
            Set(Value As String)
                m_VisitTypeID = Value
            End Set
        End Property


        Public Property RefundDate() As Date
            Get
                Return m_RefundDate
            End Get
            Set(Value As Date)
                m_RefundDate = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(Value As Decimal)
                m_Amount = Value
            End Set
        End Property

        Public Property AmountWords() As String
            Get
                Return m_AmountWords
            End Get
            Set(Value As String)
                m_AmountWords = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertRefunds")

            With Parameters
                .Add(New ParameterSQL("RefundNo", Me.RefundNo))
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("RefundRequestNo", Me.RefundRequestNo))
                .Add(New ParameterSQL("VisitTypeID", Me.VisitTypeID))
                .Add(New ParameterSQL("RefundDate", Me.RefundDate))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("AmountWords", Me.AmountWords))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Private Function GetRefunds(refundNo As String, startDateTime As Nullable(Of Date),
                                 endDateTime As Nullable(Of Date), loginID As String, branchID As String) As DataSet

            If (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(branchID) AndAlso (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("RefundNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(branchID) AndAlso Not (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("RefundNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(loginID) AndAlso Not (String.IsNullOrEmpty(branchID)) Then
                With Parameters
                    .Add(New ParameterSQL("RefundNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(loginID)) AndAlso Not (String.IsNullOrEmpty(branchID)) Then
                With Parameters
                    .Add(New ParameterSQL("RefundNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("RefundNo", refundNo))
                    .Add(New ParameterSQL("StartDateTime", Nothing))
                    .Add(New ParameterSQL("EndDateTime", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With
            End If

            Return Me.Load("uspGetRefunds", "Refunds", Parameters)

        End Function

        ''' <summary>
        ''' Gets Refunds for specified Refund no
        ''' </summary>
        ''' <param name="refundNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>

        Public Function GetRefunds(refundNo As String) As DataSet
            Return GetRefunds(refundNo, Nothing, Nothing, String.Empty, Nothing)
        End Function

        ' ''' <summary>
        ' ''' Gets Refunds for record DateTime between start DateTime and end DateTime
        ' ''' </summary>
        ' ''' <param name="startDateTime"></param>
        ' ''' <param name="endDateTime"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        'Public Function GetRefunds(startDateTime As Date, endDateTime As Date) As DataSet
        '    Return GetRefunds(String.Empty, startDateTime, endDateTime, String.Empty, Nothing)
        'End Function

        ' ''' <summary>
        ' ''' Gets Refunds for record DateTime between start DateTime and end DateTime for aspecific login id
        ' ''' </summary>
        ' ''' <param name="startDateTime"></param>
        ' ''' <param name="endDateTime"></param>
        ' ''' <param name="loginID"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        'Public Function GetRefunds(startDateTime As Date, endDateTime As Date, loginID As String) As DataSet
        '    Return GetRefunds(String.Empty, startDateTime, endDateTime, loginID, Nothing)
        'End Function

        Public Function GetRefunds(startDateTime As Date, endDateTime As Date, loginID As String, branchID As String) As DataSet
            Return GetRefunds(String.Empty, startDateTime, endDateTime, loginID, branchID)
        End Function

        Public Function GetRefunds(startDateTime As Date, endDateTime As Date) As DataSet
            Return GetRefunds(String.Empty, startDateTime, endDateTime, Nothing, Nothing)
        End Function

        Private Function GetRefundsWithTransDate(refundNo As String, startDateTime As Nullable(Of Date),
                 endDateTime As Nullable(Of Date), loginID As String, branchID As String) As DataSet

            If (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(branchID) AndAlso (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("RefundNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(branchID) AndAlso Not (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("RefundNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(loginID) AndAlso Not (String.IsNullOrEmpty(branchID)) Then
                With Parameters
                    .Add(New ParameterSQL("RefundNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(loginID)) AndAlso Not (String.IsNullOrEmpty(branchID)) Then
                With Parameters
                    .Add(New ParameterSQL("RefundNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("RefundNo", refundNo))
                    .Add(New ParameterSQL("StartDateTime", Nothing))
                    .Add(New ParameterSQL("EndDateTime", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With
            End If

            Return Me.Load("uspGetRefundsWithTransDate", "Refunds", Parameters)

        End Function

        ''' <summary>
        ''' Gets Refunds for specified Refund no
        ''' </summary>
        ''' <param name="refundNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>

        Public Function GetRefundsWithTransDate(refundNo As String) As DataSet
            Return GetRefundsWithTransDate(refundNo, Nothing, Nothing, String.Empty, Nothing)
        End Function

        ' ''' <summary>
        ' ''' Gets Refunds for record DateTime between start DateTime and end DateTime
        ' ''' </summary>
        ' ''' <param name="startDateTime"></param>
        ' ''' <param name="endDateTime"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        'Public Function GetRefundsWithTransDate(startDateTime As Date, endDateTime As Date) As DataSet
        '    Return GetRefundsWithTransDate(String.Empty, startDateTime, endDateTime, String.Empty, Nothing)
        'End Function

        ' ''' <summary>
        ' ''' Gets Refunds for record DateTime between start DateTime and end DateTime for aspecific login id
        ' ''' </summary>
        ' ''' <param name="startDateTime"></param>
        ' ''' <param name="endDateTime"></param>
        ' ''' <param name="loginID"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        'Public Function GetRefundsWithTransDate(startDateTime As Date, endDateTime As Date, loginID As String) As DataSet
        '    Return GetRefundsWithTransDate(String.Empty, startDateTime, endDateTime, loginID, Nothing)
        'End Function

        Public Function GetRefundsWithTransDate(startDateTime As Date, endDateTime As Date, loginID As String, branchID As String) As DataSet
            Return GetRefundsWithTransDate(String.Empty, startDateTime, endDateTime, loginID, branchID)
        End Function

        Public Function GetRefundsWithTransDate(startDateTime As Date, endDateTime As Date) As DataSet
            Return GetRefundsWithTransDate(String.Empty, startDateTime, endDateTime, Nothing, Nothing)
        End Function

        Private Function uspGetRefundByRequestNo(RefundRequestNo As String, startDateTime As Nullable(Of Date),
                                endDateTime As Nullable(Of Date), loginID As String, branchID As String) As DataSet

            If (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(branchID) AndAlso (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(branchID) AndAlso Not (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(loginID) AndAlso Not (String.IsNullOrEmpty(branchID)) Then
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(loginID)) AndAlso Not (String.IsNullOrEmpty(branchID)) Then
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("RefundRequestNo", RefundRequestNo))
                    .Add(New ParameterSQL("StartDateTime", Nothing))
                    .Add(New ParameterSQL("EndDateTime", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With
            End If

            Return Me.Load("uspGetRefundByRequestNo", "Refunds", Parameters)

        End Function

        ''' <summary>
        ''' Gets Refunds for specified Refund no
        ''' </summary>
        ''' <param name="RefundRequestNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>

        Public Function uspGetRefundByRequestNo(RefundRequestNo As String) As DataSet
            Return uspGetRefundByRequestNo(RefundRequestNo, Nothing, Nothing, String.Empty, Nothing)
        End Function

        ' ''' <summary>
        ' ''' Gets Refunds for record DateTime between start DateTime and end DateTime
        ' ''' </summary>
        ' ''' <param name="startDateTime"></param>
        ' ''' <param name="endDateTime"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        'Public Function uspGetRefundByRequestNo(startDateTime As Date, endDateTime As Date) As DataSet
        '    Return uspGetRefundByRequestNo(String.Empty, startDateTime, endDateTime, String.Empty, Nothing)
        'End Function

        ' ''' <summary>
        ' ''' Gets Refunds for record DateTime between start DateTime and end DateTime for aspecific login id
        ' ''' </summary>
        ' ''' <param name="startDateTime"></param>
        ' ''' <param name="endDateTime"></param>
        ' ''' <param name="loginID"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        'Public Function uspGetRefundByRequestNo(startDateTime As Date, endDateTime As Date, loginID As String) As DataSet
        '    Return uspGetRefundByRequestNo(String.Empty, startDateTime, endDateTime, loginID, Nothing)
        'End Function

        Public Function uspGetRefundByRequestNo(startDateTime As Date, endDateTime As Date, loginID As String, branchID As String) As DataSet
            Return uspGetRefundByRequestNo(String.Empty, startDateTime, endDateTime, loginID, branchID)
        End Function

        Public Function uspGetRefundByRequestNo(startDateTime As Date, endDateTime As Date) As DataSet
            Return uspGetRefundByRequestNo(String.Empty, startDateTime, endDateTime, Nothing, Nothing)
        End Function




        Public Function GetNextRefundID(receiptNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("ReceiptNo", receiptNo))
                .Add(New ParameterSQL("RefundID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextRefundID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("RefundID")) Then
                    Return CInt(Me.ReadData("RefundID"))
                Else : Return 1
                End If

            End If

        End Function


      
        Public Function GetPeriodicRefundsByBillToCustomerNo(billNo As String, billModesID As String, startDate As Date, endDate As Date) As DataSet

            '------------------------------------------------------------------------------

            With Parameters
                .Add(New ParameterSQL("BillNo", billNo))
                .Add(New ParameterSQL("BillModesID", billModesID))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With


            Return Me.Load("uspGetPeriodicRefundsByBillToCustomerNo", "Refunds", Parameters)
        End Function


#End Region


    End Class

    Public Class RefundDetails : Inherits DBConnect
#Region " Fields "

        Private m_RefundNo As String
        Private m_VisitNo As String
        Private m_ReceiptNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_ReturnReasonID As String
        Private m_Quantity As Integer
        Private m_Amount As Decimal

#End Region

#Region " Properties "

        Public Property RefundNo() As String
            Get
                Return m_RefundNo
            End Get
            Set(ByVal Value As String)
                m_RefundNo = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ReceiptNo() As String
            Get
                Return m_ReceiptNo
            End Get
            Set(ByVal Value As String)
                m_ReceiptNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ReturnReasonID() As String
            Get
                Return m_ReturnReasonID
            End Get
            Set(ByVal Value As String)
                m_ReturnReasonID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(ByVal Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertRefundDetails")

            With Parameters
                .Add(New ParameterSQL("RefundNo", Me.RefundNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReturnReasonID", Me.ReturnReasonID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RefundNo = '" + Me.RefundNo + "' and VisitNo = '" + Me.VisitNo + "' and ReceiptNo = '" + Me.ReceiptNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Refund No: " + Me.RefundNo + " and Visit No: " + Me.VisitNo + " and Receipt No: " + Me.ReceiptNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "RefundDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("RefundDetails")

            Return Parameters

        End Function

        Public Function GetRefundDetails(ByVal refundNo As String, ByVal visitNo As String, ByVal receiptNo As String, ByVal itemCode As String, ByVal itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RefundNo", refundNo))
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("ReceiptNo", receiptNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetRefundDetails", "RefundDetails", Parameters)

        End Function

        Public Function GetRefundDetails(ByVal refundNo As String, ByVal receiptNo As String, ByVal itemCategoryID As String, ByVal itemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RefundNo", refundNo))
                .Add(New ParameterSQL("ReceiptNo", receiptNo))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("ItemCode", itemCode))
            End With

            Return Me.Load("uspGetRefundDetails", "RefundDetails", Parameters)

        End Function

        Public Function GetAllRefundDetails(ByVal refundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RefundNo", refundNo))
            End With

            Return Me.Load("uspGetAllRefundDetails", "RefundDetails", Parameters)

        End Function

#End Region

    End Class


    Public Class RefundExtraBillItems : Inherits DBConnect

#Region " Fields "

        Private m_RefundNo As String
        Private m_ExtraBillNo As String
        Private m_ReceiptNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_ReturnReasonID As String
        Private m_Quantity As Integer
        Private m_Amount As Decimal

#End Region

#Region " Properties "

        Public Property RefundNo() As String
            Get
                Return m_RefundNo
            End Get
            Set(ByVal Value As String)
                m_RefundNo = Value
            End Set
        End Property

        Public Property ExtraBillNo() As String
            Get
                Return m_ExtraBillNo
            End Get
            Set(ByVal Value As String)
                m_ExtraBillNo = Value
            End Set
        End Property

        Public Property ReceiptNo() As String
            Get
                Return m_ReceiptNo
            End Get
            Set(ByVal Value As String)
                m_ReceiptNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ReturnReasonID() As String
            Get
                Return m_ReturnReasonID
            End Get
            Set(ByVal Value As String)
                m_ReturnReasonID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(ByVal Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertRefundExtraBillItems")

            With Parameters
                .Add(New ParameterSQL("RefundNo", Me.RefundNo))
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReturnReasonID", Me.ReturnReasonID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RefundNo = '" + Me.RefundNo + "' and ExtraBillNo = '" + Me.ExtraBillNo + "' and ReceiptNo = '" + Me.ReceiptNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Refund No: " + Me.RefundNo + " and Extra Bill No: " + Me.ExtraBillNo + " and Receipt No: " + Me.ReceiptNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "RefundExtraBillItems"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("RefundExtraBillItems")

            Return Parameters

        End Function

        Public Function GetRefundExtraBillItems(ByVal refundNo As String, ByVal extraBillNo As String, ByVal receiptNo As String, ByVal itemCode As String, ByVal itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RefundNo", refundNo))
                .Add(New ParameterSQL("ExtraBillNo", extraBillNo))
                .Add(New ParameterSQL("ReceiptNo", receiptNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetRefundExtraBillItems", "RefundExtraBillItems", Parameters)

        End Function

#End Region



    End Class

    Public Class RefundRejects : Inherits DBConnect

#Region " Fields "

        Private m_RefundRequestNo As String
        Private m_ReceiptNo As String
        Private m_RejectedAt As String
        Private m_RejectionDate As Date
        Private m_Notes As String
        Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property RefundRequestNo() As String
            Get
                Return m_RefundRequestNo
            End Get
            Set(ByVal Value As String)
                m_RefundRequestNo = Value
            End Set
        End Property

        Public Property ReceiptNo() As String
            Get
                Return m_ReceiptNo
            End Get
            Set(ByVal Value As String)
                m_ReceiptNo = Value
            End Set
        End Property

        Public Property RejectedAt() As String
            Get
                Return m_RejectedAt
            End Get
            Set(ByVal Value As String)
                m_RejectedAt = Value
            End Set
        End Property

        Public Property RejectionDate() As Date
            Get
                Return m_RejectionDate
            End Get
            Set(ByVal Value As Date)
                m_RejectionDate = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

        Public Property RecordDateTime() As Date
            Get
                Return m_RecordDateTime
            End Get
            Set(ByVal Value As Date)
                m_RecordDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertRefundRejects")

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", Me.RefundRequestNo))
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("RejectedAt", Me.RejectedAt))
                .Add(New ParameterSQL("RejectionDate", Me.RejectionDate))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateRefundRejects")

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", Me.RefundRequestNo))
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("RejectedAt", Me.RejectedAt))
                .Add(New ParameterSQL("RejectionDate", Me.RejectionDate))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            'For Audit Trail
            Me.SetLogObject("RefundRejects")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RefundRequestNo = '" + Me.RefundRequestNo + "'"
            Dim errorPart As String = "Refund Request No: " + Me.RefundRequestNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "RefundRejects"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("RefundRejects")

            Return Parameters

        End Function

        Public Function GetRefundRejects(ByVal refundRequestNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", refundRequestNo))
            End With

            Return Me.Load("uspGetRefundRejects", "RefundRejects", Parameters)

        End Function

#End Region


    End Class

    Public Class RefundApprovals : Inherits DBConnect

#Region " Fields "

        Private m_RefundRequestNo As String
        Private m_Notes As String
        Private m_AttendingPersonel As String
        Private m_ApprovalStausID As String
        Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property RefundRequestNo() As String
            Get
                Return m_RefundRequestNo
            End Get
            Set(ByVal Value As String)
                m_RefundRequestNo = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

        Public Property AttendingPersonel() As String
            Get
                Return m_AttendingPersonel
            End Get
            Set(ByVal Value As String)
                m_AttendingPersonel = Value
            End Set
        End Property

        Public Property ApprovalStausID() As String
            Get
                Return m_ApprovalStausID
            End Get
            Set(ByVal Value As String)
                m_ApprovalStausID = Value
            End Set
        End Property

        Public Property RecordDateTime() As Date
            Get
                Return m_RecordDateTime
            End Get
            Set(ByVal Value As Date)
                m_RecordDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertRefundApprovals")

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", Me.RefundRequestNo))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("AttendingPersonel", Me.AttendingPersonel))
                .Add(New ParameterSQL("ApprovalStatusID", Me.ApprovalStausID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateRefundApprovals")

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", Me.RefundRequestNo))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("AttendingPersonel", Me.AttendingPersonel))
                .Add(New ParameterSQL("ApprovalStatusID", Me.ApprovalStausID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            'For Audit Trail
            Me.SetLogObject("RefundApprovals")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RefundRequestNo = '" + Me.RefundRequestNo + "'"
            Dim errorPart As String = "Refund Request No: " + Me.RefundRequestNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "RefundApprovals"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("RefundApprovals")

            Return Parameters

        End Function

        Public Function GetRefundApprovals(ByVal refundRequestNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RefundRequestNo", refundRequestNo))
            End With

            Return Me.Load("uspGetRefundApprovals", "RefundApprovals", Parameters)

        End Function

#End Region

    End Class

    Public Class ReceiptReversals : Inherits DBConnect

#Region " Fields "

        Private m_ReceiptNo As String
        Private m_RefundNo As String
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property ReceiptNo() As String
            Get
                Return m_ReceiptNo
            End Get
            Set(ByVal Value As String)
                m_ReceiptNo = Value
            End Set
        End Property

        Public Property RefundNo() As String
            Get
                Return m_RefundNo
            End Get
            Set(ByVal Value As String)
                m_RefundNo = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertReceiptReversals")

            With Parameters
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("RefundNo", Me.RefundNo))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateReceiptReversals")

            With Parameters
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("RefundNo", Me.RefundNo))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("ReceiptReversals")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RefundNo = '" + Me.RefundNo + "'"
            Dim errorPart As String = "Refund No: " + Me.RefundNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ReceiptReversals"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ReceiptReversals")

            Return Parameters

        End Function

        Public Function GetReceiptReversals(ByVal refundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RefundNo", refundNo))
            End With

            Return Me.Load("uspGetReceiptReversals", "ReceiptReversals", Parameters)

        End Function

#End Region



    End Class

    Public Class DoctorPaymentsDetails : Inherits DBConnect

#Region " Fields "

        Private m_PayNo As String
        Private m_VisitNo As String
        Private m_StaffNo As String
        Private m_ItemCode As String
        Private m_ItemCategory As String
        Private m_PayDate As Date
        Private m_PayMode As String
        Private m_PayStatusID As String
        Private m_PercentPaid As Integer
        Private m_Amount As Decimal
        Private m_AmountInWords As String

#End Region

#Region " Properties "

        Public Property PayNo() As String
            Get
                Return m_PayNo
            End Get
            Set(ByVal Value As String)
                m_PayNo = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(ByVal Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategory() As String
            Get
                Return m_ItemCategory
            End Get
            Set(ByVal Value As String)
                m_ItemCategory = Value
            End Set
        End Property

        Public Property PayDate() As Date
            Get
                Return m_PayDate
            End Get
            Set(ByVal Value As Date)
                m_PayDate = Value
            End Set
        End Property

        Public Property PayMode() As String
            Get
                Return m_PayMode
            End Get
            Set(ByVal Value As String)
                m_PayMode = Value
            End Set
        End Property

        Public Property PayStatusID() As String
            Get
                Return m_PayStatusID
            End Get
            Set(ByVal Value As String)
                m_PayStatusID = Value
            End Set
        End Property

        Public Property PercentPaid() As Integer
            Get
                Return m_PercentPaid
            End Get
            Set(ByVal Value As Integer)
                m_PercentPaid = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

        Public Property AmountInWords() As String
            Get
                Return m_AmountInWords
            End Get
            Set(ByVal Value As String)
                m_AmountInWords = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertDoctorPaymentsDetails")

            With Parameters
                .Add(New ParameterSQL("PayNo", Me.PayNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategory", Me.ItemCategory))
                .Add(New ParameterSQL("PayDate", Me.PayDate))
                .Add(New ParameterSQL("PayMode", Me.PayMode))
                .Add(New ParameterSQL("PayStatusID", Me.PayStatusID))
                .Add(New ParameterSQL("PercentPaid", Me.PercentPaid))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("AmountInWords", Me.AmountInWords))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateDoctorPaymentsDetails")

            With Parameters
                .Add(New ParameterSQL("PayNo", Me.PayNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategory", Me.ItemCategory))
                .Add(New ParameterSQL("PayDate", Me.PayDate))
                .Add(New ParameterSQL("PayMode", Me.PayMode))
                .Add(New ParameterSQL("PayStatusID", Me.PayStatusID))
                .Add(New ParameterSQL("PercentPaid", Me.PercentPaid))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("AmountInWords", Me.AmountInWords))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("DoctorPaymentsDetails")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PayNo = '" + Me.PayNo + "' and VisitNo = '" + Me.VisitNo + "' and PayDate = '" + Me.PayDate.ToString() + "'"
            Dim errorPart As String = "PayNo: " + Me.PayNo + " and VisitNo: " + Me.VisitNo + " and PayDate: " + Me.PayDate.ToString()

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "DoctorPaymentsDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("DoctorPaymentsDetails")

            Return Parameters

        End Function

        Public Function GetDoctorPaymentsDetails(ByVal payNo As String, ByVal visitNo As String, ByVal payDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("PayNo", payNo))
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("PayDate", payDate))
            End With

            Return Me.Load("uspGetDoctorPaymentsDetails", "DoctorPaymentsDetails", Parameters)

        End Function

#End Region

    End Class

    Public Class Quotations : Inherits DBConnect

#Region " Fields "

        Private m_QuotationNo As String
        Private m_QuotationDate As Date
        Private m_AmountWords As String

#End Region

#Region " Properties "

        Public Property QuotationNo() As String
            Get
                Return m_QuotationNo
            End Get
            Set(Value As String)
                m_QuotationNo = Value
            End Set
        End Property

        Public Property QuotationDate() As Date
            Get
                Return m_QuotationDate
            End Get
            Set(Value As Date)
                m_QuotationDate = Value
            End Set
        End Property

        Public Property AmountWords() As String
            Get
                Return m_AmountWords
            End Get
            Set(Value As String)
                m_AmountWords = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertQuotations")

            With Parameters
                .Add(New ParameterSQL("QuotationNo", Me.QuotationNo))
                .Add(New ParameterSQL("QuotationDate", Me.QuotationDate))
                .Add(New ParameterSQL("AmountWords", Me.AmountWords))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateQuotations")

            With Parameters
                .Add(New ParameterSQL("QuotationNo", Me.QuotationNo))
                .Add(New ParameterSQL("QuotationDate", Me.QuotationDate))
                .Add(New ParameterSQL("AmountWords", Me.AmountWords))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("Quotations")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "QuotationNo = '" + Me.QuotationNo + "'"
            Dim errorPart As String = "Quotation No: " + Me.QuotationNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Quotations"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Quotations")

            Return Parameters

        End Function

        Public Function GetQuotations(quotationNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("QuotationNo", quotationNo))
            End With

            Return Me.Load("uspGetQuotations", "Quotations", Parameters)

        End Function

        ''' <summary>
        ''' Returns all periodic Quotations as per specified Quotation period 
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicQuotations(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetPeriodicQuotations", "Quotations", Parameters)

        End Function

        Public Function GetNextQuotationID() As Integer

            With Parameters
                .Add(New ParameterSQL("QuotationID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextQuotationID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("QuotationID")) Then
                    Return CInt(Me.ReadData("QuotationID"))
                Else : Return 1
                End If

            End If

        End Function

#End Region

    End Class

    Public Class QuotationDetails : Inherits DBConnect

#Region " Fields "

        Private m_QuotationNo As String
        Private m_VisitNo As String
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_ItemName As String
        Private m_UnitMeasure As String
        Private m_Quantity As Integer
        Private m_UnitPrice As Decimal
        Private m_Discount As Decimal
        Private m_Amount As Decimal

#End Region

#Region " Properties "

        Public Property QuotationNo() As String
            Get
                Return m_QuotationNo
            End Get
            Set(Value As String)
                m_QuotationNo = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property ItemName() As String
            Get
                Return m_ItemName
            End Get
            Set(Value As String)
                m_ItemName = Value
            End Set
        End Property

        Public Property UnitMeasure() As String
            Get
                Return m_UnitMeasure
            End Get
            Set(Value As String)
                m_UnitMeasure = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property Discount() As Decimal
            Get
                Return m_Discount
            End Get
            Set(Value As Decimal)
                m_Discount = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(Value As Decimal)
                m_Amount = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditQuotationDetails")

            With Parameters
                .Add(New ParameterSQL("QuotationNo", Me.QuotationNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemName", Me.ItemName))
                .Add(New ParameterSQL("UnitMeasure", Me.UnitMeasure))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("Discount", Me.Discount))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "QuotationNo = '" + Me.QuotationNo + "' and VisitNo = '" + Me.VisitNo + "' and ItemCategoryID = '" + Me.ItemCategoryID + "' and ItemCode = '" + Me.ItemCode + "'"
            Dim errorPart As String = "Quotation No: " + Me.QuotationNo + " and Visit No: " + Me.VisitNo + " and Item Category: " + Me.ItemCategoryID + " and Item Code: " + Me.ItemCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "QuotationDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("QuotationDetails")

            Return Parameters

        End Function

        Public Function GetQuotationDetails(quotationNo As String, itemCategoryID As String) As DataSet

            If Not (String.IsNullOrEmpty(itemCategoryID)) Then
                With Parameters
                    .Add(New ParameterSQL("QuotationNo", quotationNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("QuotationNo", quotationNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With
            End If

            Return Me.Load("uspGetQuotationDetails", "QuotationDetails", Parameters)

        End Function

#End Region

    End Class

    Public Class Invoices : Inherits DBConnect

#Region " Fields "

        Private m_InvoiceNo As String
        Private m_PayTypeID As String
        Private m_PayNo As String
        Private m_InvoiceDate As Date
        Private m_StartDate As Date
        Private m_EndDate As Date
        Private m_AmountWords As String
        Private m_VisitTypeID As String
        Private m_Locked As Boolean

#End Region

#Region " Properties "

        Public Property InvoiceNo() As String
            Get
                Return m_InvoiceNo
            End Get
            Set(Value As String)
                m_InvoiceNo = Value
            End Set
        End Property

        Public Property PayTypeID() As String
            Get
                Return m_PayTypeID
            End Get
            Set(Value As String)
                m_PayTypeID = Value
            End Set
        End Property

        Public Property PayNo() As String
            Get
                Return m_PayNo
            End Get
            Set(Value As String)
                m_PayNo = Value
            End Set
        End Property

        Public Property InvoiceDate() As Date
            Get
                Return m_InvoiceDate
            End Get
            Set(Value As Date)
                m_InvoiceDate = Value
            End Set
        End Property

        Public Property StartDate() As Date
            Get
                Return m_StartDate
            End Get
            Set(Value As Date)
                m_StartDate = Value
            End Set
        End Property

        Public Property EndDate() As Date
            Get
                Return m_EndDate
            End Get
            Set(Value As Date)
                m_EndDate = Value
            End Set
        End Property

        Public Property AmountWords() As String
            Get
                Return m_AmountWords
            End Get
            Set(Value As String)
                m_AmountWords = Value
            End Set
        End Property

        Public Property VisitTypeID() As String
            Get
                Return m_VisitTypeID
            End Get
            Set(Value As String)
                m_VisitTypeID = Value
            End Set
        End Property

        Public Property Locked() As Boolean
            Get
                Return m_Locked
            End Get
            Set(Value As Boolean)
                m_Locked = Value
            End Set
        End Property

        Public Property EntryModeID As String

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertInvoices")

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", Me.InvoiceNo))
                .Add(New ParameterSQL("PayTypeID", Me.PayTypeID))
                .Add(New ParameterSQL("PayNo", Me.PayNo))
                .Add(New ParameterSQL("InvoiceDate", Me.InvoiceDate))
                .Add(New ParameterSQL("StartDate", Me.StartDate))
                .Add(New ParameterSQL("EndDate", Me.EndDate))
                .Add(New ParameterSQL("AmountWords", Me.AmountWords))
                .Add(New ParameterSQL("VisitTypeID", Me.VisitTypeID))
                .Add(New ParameterSQL("EntryModeID", Me.EntryModeID))
                .Add(New ParameterSQL("Locked", Me.Locked))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

       
        Public Function GetInvoices(invoiceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", invoiceNo))
            End With

            Return Me.Load("uspGetInvoices", "Invoices", Parameters)

        End Function

        ''' <summary>
        ''' Returns all periodic Invoices as per specified invoice period and paytype
        ''' </summary>
        ''' <param name="payTypeID"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicInvoices(payTypeID As String, startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("PayTypeID", payTypeID))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetPeriodicInvoices", "Invoices", Parameters)

        End Function

        Public Function GetInvoiceNoByPayNo(payTypeID As String, payNo As String, visitTypeID As String) As String

            With Parameters
                .Add(New ParameterSQL("PayTypeID", payTypeID))
                .Add(New ParameterSQL("PayNo", payNo))
                .Add(New ParameterSQL("VisitTypeID", visitTypeID))
                .Add(New ParameterSQL("InvoiceNo", SqlDbType.VarChar, 20))
            End With

            Me.ReadData = Read("uspGetInvoiceNoByPayNo", Parameters)

            If Not Me.ReadData Is Nothing AndAlso Not IsDBNull(Me.ReadData("InvoiceNo")) Then
                Return CStr(Me.ReadData("InvoiceNo"))
            Else : Return String.Empty
            End If

        End Function

        Public Function HasVisitInvoices(payTypeID As String, payNo As String, visitTypeID As String,
                                         startDate As Date, endDate As Date) As Boolean

            Dim records As Integer

            With Parameters
                .Add(New ParameterSQL("PayTypeID", payTypeID))
                .Add(New ParameterSQL("PayNo", payNo))
                .Add(New ParameterSQL("VisitTypeID", visitTypeID))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("Records", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspCountVisitInvoices", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("Records")) Then
                    records = 0
                Else : records = CInt(Me.ReadData("Records"))
                End If
            End If

            Return records > 0

        End Function

        Public Function GetNextInvoiceID() As Integer

            With Parameters
                .Add(New ParameterSQL("InvoiceID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextInvoiceID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("InvoiceID")) Then
                    Return CInt(Me.ReadData("InvoiceID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function GetVisitNoByInvoiceNo(ByVal InvoiceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", InvoiceNo))
            End With

            Return Me.Load("uspGetVisitNoByInvoiceNo", "Invoices", Parameters)

        End Function

        Public Function GetIPDVisitNoByInvoiceNo(ByVal InvoiceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", InvoiceNo))
            End With

            Return Me.Load("uspGetIPDVisitNoByInvoiceNo", "Invoices", Parameters)

        End Function


        ''' <summary>
        ''' Get Member Premium Balance
        ''' </summary>
        ''' <param name="MedicalCardNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 

        Public Function GetMemberPremiumUsageBalance(MedicalCardNo As String) As Decimal

            With Parameters

                .Add(New ParameterSQL("MedicalCardNo", MedicalCardNo))
                .Add(New ParameterSQL("RemainingBalance", SqlDbType.Money))
            End With

            Me.ReadData = Read("uspGetMemberPremiumUsageBalance", Parameters)

            If Not Me.ReadData Is Nothing Then

                If IsDBNull(Me.ReadData("RemainingBalance")) Then
                    Return 0
                Else : Return CDec(Me.ReadData("RemainingBalance"))
                End If

            End If

        End Function

#End Region

    End Class

    Public Class InvoiceDetails : Inherits DBConnect

#Region " Fields "

        Private m_InvoiceNo As String
        Private m_VisitNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Quantity As Integer
        Private m_UnitPrice As Decimal
        Private m_Discount As Decimal
        Private m_Amount As Decimal

#End Region

#Region " Properties "

        Public Property InvoiceNo() As String
            Get
                Return m_InvoiceNo
            End Get
            Set(Value As String)
                m_InvoiceNo = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property Discount() As Decimal
            Get
                Return m_Discount
            End Get
            Set(Value As Decimal)
                m_Discount = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(Value As Decimal)
                m_Amount = Value
            End Set
        End Property
        Public Property ObjectName As String
#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditInvoiceDetails")

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", Me.InvoiceNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ObjectName", Me.ObjectName))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("Discount", Me.Discount))
                .Add(New ParameterSQL("Amount", Me.Amount))
            End With

            Return Parameters

        End Function

       
        Public Function GetInvoiceDetails(invoiceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", invoiceNo))
            End With

            Return Me.Load("uspGetInvoiceDetails", "InvoiceDetails", Parameters)

        End Function

        Public Function GetToAdjustInvoiceDetails(invoiceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", invoiceNo))
            End With

            Return Me.Load("uspGetToAdjustInvoiceDetails", "InvoiceDetails", Parameters)

        End Function


        Public Function GetVisitInvoiceDetails(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetVisitInvoiceDetails", "InvoiceDetails", Parameters)

        End Function


        Public Function GetInvoiceBillDetails(invoiceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", invoiceNo))
            End With

            Return Me.Load("uspGetInvoiceBillDetails", "InvoiceDetails", Parameters)

        End Function

#End Region

    End Class

    Public Class InvoiceExtraBillItems : Inherits DBConnect

#Region " Fields "

        Private m_InvoiceNo As String
        Private m_ExtraBillNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Quantity As Integer
        Private m_UnitPrice As Decimal
        Private m_Discount As Decimal
        Private m_Amount As Decimal

#End Region

#Region " Properties "

        Public Property InvoiceNo() As String
            Get
                Return m_InvoiceNo
            End Get
            Set(Value As String)
                m_InvoiceNo = Value
            End Set
        End Property

        Public Property ExtraBillNo() As String
            Get
                Return m_ExtraBillNo
            End Get
            Set(Value As String)
                m_ExtraBillNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property Discount() As Decimal
            Get
                Return m_Discount
            End Get
            Set(Value As Decimal)
                m_Discount = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(Value As Decimal)
                m_Amount = Value
            End Set
        End Property
        Public Property ObjectName As String
#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditInvoiceExtraBillItems")

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", Me.InvoiceNo))
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ObjectName", Me.ObjectName))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("Discount", Me.Discount))
                .Add(New ParameterSQL("Amount", Me.Amount))
            End With

            Return Parameters

        End Function

        
        Public Function GetInvoiceExtraBillItems(invoiceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", invoiceNo))
            End With

            Return Me.Load("uspGetInvoiceExtraBillItems", "InvoiceExtraBillItems", Parameters)

        End Function


        Public Function GetToAdjustInvoiceExtraBillItems(invoiceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", invoiceNo))
            End With

            Return Me.Load("uspGetToAdjustInvoiceExtraBillItems", "InvoiceExtraBillItems", Parameters)

        End Function




        Public Function GetInvoiceExtraBillDetails(invoiceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", invoiceNo))
            End With

            Return Me.Load("uspGetInvoiceExtraBillDetails", "InvoiceExtraBillItems", Parameters)

        End Function

        Public Function GetVisitInvoiceExtraBillItems(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetVisitInvoiceExtraBillItems", "InvoiceExtraBillItems", Parameters)

        End Function


#End Region

    End Class

    Public Class InvoiceAdjustments : Inherits DBConnect

#Region " Fields "

        Private m_AdjustmentNo As String
        Private m_VisitTypeID As String
        Private m_AdjustmentTypeID As String
        Private m_ReversalActionID As String
        Private m_InvoiceNo As String
        Private m_EntryLevelID As String
        Private m_AdjustmentDate As Date
        Private m_Amount As Decimal

#End Region

#Region " Properties "


        Public Property AdjustmentNo() As String
            Get
                Return m_AdjustmentNo
            End Get
            Set(ByVal Value As String)
                m_AdjustmentNo = Value
            End Set
        End Property


        Public Property InvoiceNo() As String
            Get
                Return m_InvoiceNo
            End Get
            Set(ByVal Value As String)
                m_InvoiceNo = Value
            End Set
        End Property

        Public Property VisitTypeID() As String
            Get
                Return m_VisitTypeID
            End Get
            Set(ByVal Value As String)
                m_VisitTypeID = Value
            End Set
        End Property

        Public Property AdjustmentTypeID() As String
            Get
                Return m_AdjustmentTypeID
            End Get
            Set(ByVal Value As String)
                m_AdjustmentTypeID = Value
            End Set
        End Property

        Public Property ReversalActionID() As String
            Get
                Return m_ReversalActionID
            End Get
            Set(ByVal Value As String)
                m_ReversalActionID = Value
            End Set
        End Property


        Public Property EntryLevelID() As String
            Get
                Return m_EntryLevelID
            End Get
            Set(ByVal Value As String)
                m_EntryLevelID = Value
            End Set
        End Property

        Public Property AdjustmentDate() As Date
            Get
                Return m_AdjustmentDate
            End Get
            Set(ByVal Value As Date)
                m_AdjustmentDate = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertInvoiceAdjustments")

            With Parameters
                .Add(New ParameterSQL("AdjustmentNo", Me.AdjustmentNo))
                .Add(New ParameterSQL("InvoiceNo", Me.InvoiceNo))
                .Add(New ParameterSQL("VisitTypeID", Me.VisitTypeID))
                .Add(New ParameterSQL("EntryLevelID", Me.EntryLevelID))
                .Add(New ParameterSQL("AdjustmentDate", Me.AdjustmentDate))
                .Add(New ParameterSQL("AdjustmentTypeID", Me.AdjustmentTypeID))
                .Add(New ParameterSQL("ReversalActionID", Me.ReversalActionID))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function


        Public Function GetInvoiceAdjustments(ByVal AdjustmentsNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AdjustmentNo", AdjustmentsNo))
            End With

            Return Me.Load("uspGetInvoiceAdjustments", "InvoiceAdjustments", Parameters)

        End Function

        Public Function GetNextAdjustmentID(invoiceNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", invoiceNo))
                .Add(New ParameterSQL("AdjustmentID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextAdjustmentID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("AdjustmentID")) Then
                    Return CInt(Me.ReadData("AdjustmentID"))
                Else : Return 1
                End If

            End If
        End Function
#End Region



    End Class

    Public Class InvoiceDetailAdjustments : Inherits DBConnect

#Region " Fields "

        Private m_AdjustmentNo As String
        Private m_VisitNo As String
        Private m_InvoiceNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_ReturnReasonID As String
        Private m_Quantity As Integer
        Private m_Amount As Decimal

#End Region

#Region " Properties "

        Public Property AdjustmentNo() As String
            Get
                Return m_AdjustmentNo
            End Get
            Set(ByVal Value As String)
                m_AdjustmentNo = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property InvoiceNo() As String
            Get
                Return m_InvoiceNo
            End Get
            Set(ByVal Value As String)
                m_InvoiceNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ReturnReasonID() As String
            Get
                Return m_ReturnReasonID
            End Get
            Set(ByVal Value As String)
                m_ReturnReasonID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(ByVal Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertInvoiceDetailAdjustments")

            With Parameters
                .Add(New ParameterSQL("AdjustmentNo", Me.AdjustmentNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("InvoiceNo", Me.InvoiceNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReturnReasonID", Me.ReturnReasonID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function


    
        Public Function GetInvoiceDetailAdjustments(ByVal AdjustmentNo As String, ByVal visitNo As String, ByVal invoiceNo As String, ByVal itemCode As String, ByVal itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AdjustmentNo", AdjustmentNo))
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("InvoiceNo", invoiceNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetInvoiceDetailAdjustments", "InvoiceDetailAdjustments", Parameters)

        End Function

        Public Function GetInvoiceDetailAdjustmentsByInvoiceNo(ByVal invoiceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", invoiceNo))

            End With

            Return Me.Load("uspGetInvoiceDetailAdjustmentsByInvoiceNo", "InvoiceDetailAdjustments", Parameters)

        End Function


#End Region


    End Class

    Public Class InvoiceExtraBillItemAdjustments : Inherits DBConnect

#Region " Fields "

        Private m_AdjustmentNo As String
        Private m_ExtraBillNo As String
        Private m_InvoiceNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_ReturnReasonID As String
        Private m_Quantity As Integer
        Private m_Amount As Decimal

#End Region

#Region " Properties "

        Public Property AdjustmentNo() As String
            Get
                Return m_AdjustmentNo
            End Get
            Set(ByVal Value As String)
                m_AdjustmentNo = Value
            End Set
        End Property

        Public Property ExtraBillNo() As String
            Get
                Return m_ExtraBillNo
            End Get
            Set(ByVal Value As String)
                m_ExtraBillNo = Value
            End Set
        End Property

        Public Property InvoiceNo() As String
            Get
                Return m_InvoiceNo
            End Get
            Set(ByVal Value As String)
                m_InvoiceNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ReturnReasonID() As String
            Get
                Return m_ReturnReasonID
            End Get
            Set(ByVal Value As String)
                m_ReturnReasonID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(ByVal Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertInvoiceExtraBillItemAdjustments")

            With Parameters
                .Add(New ParameterSQL("AdjustmentNo", Me.AdjustmentNo))
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("InvoiceNo", Me.InvoiceNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReturnReasonID", Me.ReturnReasonID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        
        Public Function GetInvoiceExtraBillItemAdjustments(ByVal AdjustmentNo As String, ByVal extraBillNo As String, ByVal invoiceNo As String, ByVal itemCode As String, ByVal itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AdjustmentNo", AdjustmentNo))
                .Add(New ParameterSQL("ExtraBillNo", extraBillNo))
                .Add(New ParameterSQL("InvoiceNo", invoiceNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetInvoiceExtraBillItemAdjustments", "InvoiceExtraBillItemAdjustments", Parameters)

        End Function

        Public Function GetInvoiceExtraBillItemAdjustmentsByInvoiceNo(ByVal invoiceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", invoiceNo))

            End With

            Return Me.Load("uspGetInvoiceExtraBillItemAdjustmentsByInvoiceNo", "InvoiceExtraBillItemAdjustments", Parameters)

        End Function


#End Region



    End Class


    Public Class ReceiptInvoiceDetails : Inherits DBConnect

#Region " Fields "

        Private m_InvoiceNo As String
        Private m_ReceiptNo As String

#End Region

#Region " Properties "

        Public Property InvoiceNo() As String
            Get
                Return m_InvoiceNo
            End Get
            Set(ByVal Value As String)
                m_InvoiceNo = Value
            End Set
        End Property

        Public Property ReceiptNo() As String
            Get
                Return m_ReceiptNo
            End Get
            Set(ByVal Value As String)
                m_ReceiptNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertReceiptInvoiceDetails")

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", Me.InvoiceNo))
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateReceiptInvoiceDetails")

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", Me.InvoiceNo))
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
            End With

            'For Audit Trail
            Me.SetLogObject("ReceiptInvoiceDetails")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "InvoiceNo = '" + Me.InvoiceNo + "' and ReceiptNo = '" + Me.ReceiptNo + "'"
            Dim errorPart As String = "InvoiceNo: " + Me.InvoiceNo + " and ReceiptNo: " + Me.ReceiptNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ReceiptInvoiceDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ReceiptInvoiceDetails")

            Return Parameters

        End Function

        Public Function GetReceiptInvoiceDetails(ByVal invoiceNo As String, ByVal receiptNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("InvoiceNo", invoiceNo))
                .Add(New ParameterSQL("ReceiptNo", receiptNo))
            End With

            Return Me.Load("uspGetReceiptInvoiceDetails", "ReceiptInvoiceDetails", Parameters)

        End Function

#End Region



    End Class

    Public Class Accounts : Inherits DBConnect

#Region " Fields "

        Private m_TranNo As String
        Private m_AccountBillModesID As String
        Private m_AccountBillNo As String
        Private m_ClientFullName As String
        Private m_TranDate As Date
        Private m_PayModesID As String
        Private m_AccountActionID As String
        Private m_Amount As Decimal
        Private Shared m_Balance As Decimal
        Private m_DocumentNo As String
        Private m_AmountWords As String
        Private m_CurrenciesID As String
        Private m_AmountTendered As Decimal
        Private m_ExchangeRate As Decimal
        Private m_Change As Decimal
        Private m_AccountGroupID As String
        Private m_ReferenceNo As String
        Private m_Notes As String
        Private m_EntryModeID As String

#End Region

#Region " Properties "

        Public Property TranNo() As String
            Get
                Return m_TranNo
            End Get
            Set(value As String)
                m_TranNo = value
            End Set
        End Property

        Public Property AccountBillModesID() As String
            Get
                Return m_AccountBillModesID
            End Get
            Set(Value As String)
                m_AccountBillModesID = Value
            End Set
        End Property

        Public Property AccountBillNo() As String
            Get
                Return m_AccountBillNo
            End Get
            Set(Value As String)
                m_AccountBillNo = Value
            End Set
        End Property

        Public Property ClientFullName() As String
            Get
                Return m_ClientFullName
            End Get
            Set(Value As String)
                m_ClientFullName = Value
            End Set
        End Property

        Public Property TranDate() As Date
            Get
                Return m_TranDate
            End Get
            Set(Value As Date)
                m_TranDate = Value
            End Set
        End Property

        Public Property PayModesID() As String
            Get
                Return m_PayModesID
            End Get
            Set(Value As String)
                m_PayModesID = Value
            End Set
        End Property

        Public Property ReferenceNo() As String
            Get
                Return m_ReferenceNo
            End Get
            Set(Value As String)
                m_ReferenceNo = Value
            End Set
        End Property

        Public Property AccountActionID() As String
            Get
                Return m_AccountActionID
            End Get
            Set(Value As String)
                m_AccountActionID = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(value As Decimal)
                m_Amount = value
            End Set
        End Property

        Public Property Balance() As Decimal
            Get
                Return m_Balance
            End Get
            Set(value As Decimal)
                m_Balance = value
            End Set
        End Property

        Public Property DocumentNo() As String
            Get
                Return m_DocumentNo
            End Get
            Set(Value As String)
                m_DocumentNo = Value
            End Set
        End Property

        Public Property AmountWords() As String
            Get
                Return m_AmountWords
            End Get
            Set(value As String)
                m_AmountWords = value
            End Set
        End Property

        Public Property CurrenciesID() As String
            Get
                Return m_CurrenciesID
            End Get
            Set(Value As String)
                m_CurrenciesID = Value
            End Set
        End Property

        Public Property AmountTendered() As Decimal
            Get
                Return m_AmountTendered
            End Get
            Set(Value As Decimal)
                m_AmountTendered = Value
            End Set
        End Property

        Public Property ExchangeRate() As Decimal
            Get
                Return m_ExchangeRate
            End Get
            Set(Value As Decimal)
                m_ExchangeRate = Value
            End Set
        End Property

        Public Property Change() As Decimal
            Get
                Return m_Change
            End Get
            Set(Value As Decimal)
                m_Change = Value
            End Set
        End Property

        Public Property AccountGroupID() As String
            Get
                Return m_AccountGroupID
            End Get
            Set(Value As String)
                m_AccountGroupID = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

        Public Property EntryModeID() As String
            Get
                Return m_EntryModeID
            End Get
            Set(Value As String)
                m_EntryModeID = Value
            End Set
        End Property

       
#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertAccounts")

            With Parameters
                .Add(New ParameterSQL("TranNo", Me.TranNo))
                .Add(New ParameterSQL("AccountBillModesID", Me.AccountBillModesID))
                .Add(New ParameterSQL("AccountBillNo", Me.AccountBillNo))
                .Add(New ParameterSQL("ClientFullName", Me.ClientFullName))
                .Add(New ParameterSQL("TranDate", Me.TranDate))
                .Add(New ParameterSQL("PayModesID", Me.PayModesID))
                .Add(New ParameterSQL("AccountActionID", Me.AccountActionID))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("AmountWords", Me.AmountWords))
                .Add(New ParameterSQL("CurrenciesID", Me.CurrenciesID))
                .Add(New ParameterSQL("AmountTendered", Me.AmountTendered))
                .Add(New ParameterSQL("ExchangeRate", Me.ExchangeRate))
                .Add(New ParameterSQL("Change", Me.Change))
                .Add(New ParameterSQL("AccountGroupID", Me.AccountGroupID))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("EntryModeID", Me.EntryModeID))
                .Add(New ParameterSQL("ReferenceNo", Me.ReferenceNo))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Private Function GetAccounts(tranNo As String, startDateTime As Nullable(Of Date),
                                  endDateTime As Nullable(Of Date), VisitsBranch As String, loginID As String) As DataSet

            If (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso (String.IsNullOrEmpty(VisitsBranch)) AndAlso (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("TranNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso (String.IsNullOrEmpty(VisitsBranch)) AndAlso Not (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("TranNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(VisitsBranch)) AndAlso (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("TranNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(VisitsBranch)) AndAlso Not (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("TranNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("TranNo", tranNo))
                    .Add(New ParameterSQL("StartDateTime", Nothing))
                    .Add(New ParameterSQL("EndDateTime", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
            End If

            Return Me.Load("uspGetAccounts", "Accounts", Parameters)

        End Function

        ''' <summary>
        ''' Gets Accounts for specified tran no
        ''' </summary>
        ''' <param name="tranNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetAccounts(tranNo As String) As DataSet
            Return GetAccounts(tranNo, Nothing, Nothing, Nothing, String.Empty)
        End Function

        ' ''' <summary>
        ' ''' Gets Accounts for record DateTime between start DateTime and end DateTime
        ' ''' </summary>
        ' ''' <param name="startDateTime"></param>
        ' ''' <param name="endDateTime"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        'Public Function GetAccounts(startDateTime As Date, endDateTime As Date) As DataSet
        '    Return GetAccounts(String.Empty, startDateTime, endDateTime, String.Empty)
        'End Function

        ''' <summary>
        ''' Gets Accounts for record DateTime between start DateTime and end DateTime for aspecific login id
        ''' </summary>
        ''' <param name="startDateTime"></param>
        ''' <param name="endDateTime"></param>
        ''' <param name="loginID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetAccounts(startDateTime As Date, endDateTime As Date, VisitsBranch As String, loginID As String) As DataSet
            Return GetAccounts(String.Empty, startDateTime, endDateTime, VisitsBranch, loginID)
        End Function

        Public Function GetAccountBalance(accountBillModesID As String, accountBillNo As String) As Decimal

            With Parameters
                .Add(New ParameterSQL("AccountBillModesID", accountBillModesID))
                .Add(New ParameterSQL("AccountBillNo", accountBillNo))
                .Add(New ParameterSQL("Balance", SqlDbType.Money))
            End With

            Me.ReadData = Read("uspGetAccountBalance", Parameters)

            If Not Me.ReadData Is Nothing Then

                If IsDBNull(Me.ReadData("Balance")) Then
                    Me.Balance = 0
                Else : Me.Balance = CDec((Me.ReadData("Balance")))
                End If

                Return Me.Balance

            End If

        End Function

        Public Function GetAccountOpeningBalance(accountBillNo As String, accountBillModesID As String, recorddatetime As Date) As Decimal

            With Parameters
                .Add(New ParameterSQL("AccountBillNo", accountBillNo))
                .Add(New ParameterSQL("AccountBillModesID", accountBillModesID))
                .Add(New ParameterSQL("RecordDateTime", recorddatetime))
                .Add(New ParameterSQL("Balance", SqlDbType.Money))
            End With

            Me.ReadData = Read("uspGetAccountOpeningBalance", Parameters)

            If Not Me.ReadData Is Nothing Then

                If IsDBNull(Me.ReadData("Balance")) Then
                    Me.Balance = 0
                Else : Me.Balance = CDec((Me.ReadData("Balance")))
                End If

                Return Me.Balance

            End If

        End Function

        Public Function NewBalance(credit As Decimal, debit As Decimal) As Decimal
            Return (Me.Balance + credit - debit)
        End Function

        Public Function GetNextTranID() As Integer

            With Parameters
                .Add(New ParameterSQL("TranID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextTranID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("TranID")) Then
                    Return CInt(Me.ReadData("TranID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function GetManageAccountCredits(startDateTime As Date, endDateTime As Date, branchID As String) As DataSet

            If Not String.IsNullOrEmpty(branchID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            ElseIf String.IsNullOrEmpty(branchID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            End If

            Return Me.Load("uspGetManageAccountCredits", "Accounts", Parameters)

        End Function

        Public Function GetManageAccountCredits(startDateTime As Date, endDateTime As Date) As DataSet
            Return GetManageAccountCredits(startDateTime, endDateTime, Nothing)
        End Function

        Public Function GetManageAccountDebits(startDateTime As Date, endDateTime As Date, branchID As String) As DataSet

            If Not String.IsNullOrEmpty(BranchID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", BranchID))
                End With

            ElseIf String.IsNullOrEmpty(BranchID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            End If

            Return Me.Load("uspGetManageAccountDebits", "Accounts", Parameters)

        End Function

        Public Function GetManageAccountDebits(startDateTime As Date, endDateTime As Date) As DataSet
            Return GetManageAccountDebits(startDateTime, endDateTime, Nothing)
        End Function

        Public Function GetPatientsMiniAccountStatement(ByVal accountBillNo As String, ByVal accountBillModesID As String, startDateTime As Date, endDateTime As Date) As DataSet
            ''go
            With Parameters
                .Add(New ParameterSQL("AccountBillNo", accountBillNo))
                .Add(New ParameterSQL("AccountBillModesID", accountBillModesID))
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))
            End With

            Return Me.Load("uspGetPatientsAccountStatement", "Accounts", Parameters)

        End Function
        Public Function GetAccountDeposits(startDateTime As Date, endDateTime As Date) As DataSet
            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))
            End With

            Return Me.Load("uspGetAccountDeposits", "Accounts", Parameters)

        End Function

        'Public Function GetPatientsMiniAccountStatement(ByVal accountBillNo As String, startDateTime As Date, endDateTime As Date) As DataSet

        '    With Parameters
        '        .Add(New ParameterSQL("AccountBillNo", accountBillNo))
        '        .Add(New ParameterSQL("StartDateTime", startDateTime))
        '        .Add(New ParameterSQL("EndDateTime", endDateTime))
        '    End With

        '    Return Me.Load("uspGetPatientsAccountStatement", "Accounts", Parameters)

        'End Function


        Public Function GetTimelyAccountsSMS(startDateTime As Date, endDateTime As Date) As DataSet


            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))
            End With


            Return Me.Load("uspGetTimelyAccountsSMS", "Accounts", Parameters)

        End Function


        Public Function GetPeriodicPayModesAccountsSummary(startDateTime As Date, endDateTime As Date, payModesID As String, loginID As String, VisitsBranch As String) As DataSet

            '-----------------------All null---------------------------------------
            If String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With




                '------------------------only PayModeID Not null---------------------------------------
            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With


                '------------------------only LoginID Not null---------------------------------------
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With


                '------------------------only VisitsBranch Not null---------------------------------------
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With



                '----------------------------- Not PayModesID And LoginID----------------------------------------

            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------only PayModesID And BranchID Not null---------------------------------------	
            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------only Login ID And Branch ID Not null---------------------------------------	
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With


            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
            End If
            Return Me.Load("uspGetPeriodicAccountSummaries", "Accounts", Parameters)
        End Function


        Public Function GetPeriodicPayModeAccounts(startDateTime As Date, endDateTime As Date, payModesID As String, loginID As String, VisitsBranch As String) As DataSet

            '-----------------------All null---------------------------------------
            If String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With




                '------------------------only PayModeID Not null---------------------------------------
            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With


                '------------------------only LoginID Not null---------------------------------------
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With


                '------------------------only VisitsBranch Not null---------------------------------------
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With



                '----------------------------- Not PayModesID And LoginID----------------------------------------

            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------only PayModesID And BranchID Not null---------------------------------------	
            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------only Login ID And Branch ID Not null---------------------------------------	
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With


            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
            End If
            Return Me.Load("uspGetPeriodicPayModeAccount", "Accounts", Parameters)
        End Function

        Public Function GetPeriodicAccountTransactionsByAccountBillNo(ByVal accountBillNo As String, startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("AccountBillNo", accountBillNo))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetPeriodicAccountTransactionsByAccountBillNo", "Accounts", Parameters)

        End Function

        Public Function GetDashboardManualDebits(startDateTime As Nullable(Of DateTime),
                        endDateTime As Nullable(Of DateTime)) As DataSet


            If (startDateTime IsNot Nothing) And (endDateTime IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDateTime))
                    .Add(New ParameterSQL("EndDate", endDateTime))
                End With
            Else
                With Parameters

                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If



            Return Me.Load("uspGetDashboardManualDebits", "Accounts", Parameters)

        End Function


        ''' <summary>
        ''' Returns all Manual Debits
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDashboardManualDebits() As DataSet
            Return GetDashboardManualDebits(Nothing, Nothing)
        End Function

        Public Function GetCountDashboardManualDebits(startDate As Date, endDate As Date) As Integer

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("CountedItems", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetCountDashboardManualDebits", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("CountedItems")) Then
                    Return CInt(Me.ReadData("CountedItems"))
                Else : Return 1
                End If

            End If

        End Function


        Public Function GetPatientAccountBalances(amount As Nullable(Of Decimal)) As DataSet
            If (amount IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("AccountBalance", amount))
                End With
            Else
                With Parameters

                    .Add(New ParameterSQL("AccountBalance", Nothing))
                End With
            End If

            Return Me.Load("uspGetPatientAccountBalances", "Patients", Parameters)

        End Function

        ''' <summary>
        ''' Returns all Patients
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetPatientAccountBalances() As DataSet
            Return GetPatientAccountBalances(Nothing)
        End Function

        Public Function GetCountPatientAccountBalances() As DataSet
            Return Me.Load("uspGetCountPatientAccountBalances", "Patients", Parameters)
        End Function

#End Region

    End Class

    Public Class AccountsEXT : Inherits DBConnect

#Region " Fields "

        Private m_TranNo As String
        Private m_ReferenceNo As String

#End Region

#Region " Properties "

        Public Property TranNo() As String
            Get
                Return m_TranNo
            End Get
            Set(ByVal Value As String)
                m_TranNo = Value
            End Set
        End Property

        Public Property ReferenceNo() As String
            Get
                Return m_ReferenceNo
            End Get
            Set(ByVal Value As String)
                m_ReferenceNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertAccountsEXT")

            With Parameters
                .Add(New ParameterSQL("TranNo", Me.TranNo))
                .Add(New ParameterSQL("ReferenceNo", Me.ReferenceNo))
            End With

            Return Parameters

        End Function

        Public Function GetAccountsEXT(ByVal tranNo As String, ByVal referenceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("TranNo", tranNo))
                .Add(New ParameterSQL("ReferenceNo", referenceNo))
            End With

            Return Me.Load("uspGetAccountsEXT", "AccountsEXT", Parameters)

        End Function

#End Region

    End Class

    Public Class BulkPayDetails : Inherits DBConnect

#Region " Fields "

        Private m_TranNo As String
        Private m_VisitNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Discount As Decimal
        Private m_Amount As Decimal

#End Region

#Region " Properties "

        Public Property TranNo() As String
            Get
                Return m_TranNo
            End Get
            Set(Value As String)
                m_TranNo = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property Discount() As Decimal
            Get
                Return m_Discount
            End Get
            Set(value As Decimal)
                m_Discount = value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(Value As Decimal)
                m_Amount = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyBase.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertBulkPayDetails")

            With Parameters
                .Add(New ParameterSQL("TranNo", Me.TranNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Discount", Me.Discount))
                .Add(New ParameterSQL("Amount", Me.Amount))
            End With

            Return Parameters

        End Function

#End Region

    End Class

    Public Class DoctorVisits : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_StaffNo As String
        Private m_ServiceCode As String
        Private m_StaffFullName As String ' readonly
        Private m_Closed As Boolean

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property ServiceCode() As String
            Get
                Return m_ServiceCode
            End Get
            Set(value As String)
                m_ServiceCode = value
            End Set
        End Property

        Public ReadOnly Property StaffFullName() As String
            Get
                Return m_StaffFullName
            End Get
        End Property

        Public Property Closed() As Boolean
            Get
                Return m_Closed
            End Get
            Set(Value As Boolean)
                m_Closed = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertDoctorVisits")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("ServiceCode", Me.ServiceCode))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateDoctorVisits")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("Closed", Me.Closed))
            End With

            'For Audit Trial
            Me.SetLogObject("DoctorVisits")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "DoctorVisits"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trial
            Me.SetLogObject("DoctorVisits")

            Return Parameters

        End Function

        Public Function GetDoctorVisit(visitNo As String) As Boolean

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("StaffFullName", SqlDbType.VarChar, 60))
                .Add(New ParameterSQL("ServiceCode", SqlDbType.VarChar, 10))
                .Add(New ParameterSQL("Closed", SqlDbType.Bit))
            End With

            Me.ReadData = Read("uspGetDoctorVisit", Parameters)

            If Me.ReadData Is Nothing Then Return False

            If Not IsDBNull(Me.ReadData("StaffFullName")) Then
                m_StaffFullName = CStr(Me.ReadData("StaffFullName"))
            Else : m_StaffFullName = String.Empty
            End If

            If Not IsDBNull(Me.ReadData("ServiceCode")) Then
                Me.ServiceCode = CStr(Me.ReadData("ServiceCode"))
            Else : Me.ServiceCode = String.Empty
            End If

            If Not IsDBNull(Me.ReadData("Closed")) Then
                Me.Closed = CBool(Me.ReadData("Closed"))
            Else : Me.Closed = False
            End If

            Return Not String.IsNullOrEmpty(m_StaffFullName)

        End Function

        Public Function DoctorVisitSaved() As Boolean

            Dim numberVisits As Short

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("NoDoctorVisit", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspCountDoctorVisit", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("NoDoctorVisit")) Then
                    numberVisits = 0
                Else : numberVisits = CShort(Me.ReadData("NoDoctorVisit"))
                End If
            End If

            Return numberVisits > 0

        End Function

#End Region

    End Class

    Public Class ClinicalFindings : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_PresentingComplaint As String
        Private m_ClinicalNotes As String
        Private m_ROS As String
        Private m_PMH As String
        Private m_POH As String
        Private m_PGH As String
        Private m_FSH As String
        Private m_GeneralAppearance As String
        Private m_Respiratory As String
        Private m_CVS As String
        Private m_ENT As String
        Private m_Abdomen As String
        Private m_CNS As String
        Private m_EYE As String
        Private m_MuscularSkeletal As String
        Private m_Skin As String
        Private m_PV As String
        Private m_PsychologicalStatus As String
        Private m_ProvisionalDiagnosis As String
        Private m_TreatmentPlan As String
        Private m_ClinicalImage() As Byte

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property PresentingComplaint() As String
            Get
                Return m_PresentingComplaint
            End Get
            Set(Value As String)
                m_PresentingComplaint = Value
            End Set
        End Property

        Public Property ClinicalNotes() As String
            Get
                Return m_ClinicalNotes
            End Get
            Set(Value As String)
                m_ClinicalNotes = Value
            End Set
        End Property

        Public Property ROS() As String
            Get
                Return m_ROS
            End Get
            Set(Value As String)
                m_ROS = Value
            End Set
        End Property

        Public Property PMH() As String
            Get
                Return m_PMH
            End Get
            Set(Value As String)
                m_PMH = Value
            End Set
        End Property

        Public Property POH() As String
            Get
                Return m_POH
            End Get
            Set(Value As String)
                m_POH = Value
            End Set
        End Property

        Public Property PGH() As String
            Get
                Return m_PGH
            End Get
            Set(Value As String)
                m_PGH = Value
            End Set
        End Property

        Public Property FSH() As String
            Get
                Return m_FSH
            End Get
            Set(Value As String)
                m_FSH = Value
            End Set
        End Property

        Public Property GeneralAppearance() As String
            Get
                Return m_GeneralAppearance
            End Get
            Set(Value As String)
                m_GeneralAppearance = Value
            End Set
        End Property

        Public Property Respiratory() As String
            Get
                Return m_Respiratory
            End Get
            Set(Value As String)
                m_Respiratory = Value
            End Set
        End Property

        Public Property CVS() As String
            Get
                Return m_CVS
            End Get
            Set(Value As String)
                m_CVS = Value
            End Set
        End Property

        Public Property ENT() As String
            Get
                Return m_ENT
            End Get
            Set(Value As String)
                m_ENT = Value
            End Set
        End Property

        Public Property Abdomen() As String
            Get
                Return m_Abdomen
            End Get
            Set(Value As String)
                m_Abdomen = Value
            End Set
        End Property

        Public Property CNS() As String
            Get
                Return m_CNS
            End Get
            Set(Value As String)
                m_CNS = Value
            End Set
        End Property

        Public Property EYE() As String
            Get
                Return m_EYE
            End Get
            Set(Value As String)
                m_EYE = Value
            End Set
        End Property

        Public Property MuscularSkeletal() As String
            Get
                Return m_MuscularSkeletal
            End Get
            Set(Value As String)
                m_MuscularSkeletal = Value
            End Set
        End Property

        Public Property Skin() As String
            Get
                Return m_Skin
            End Get
            Set(Value As String)
                m_Skin = Value
            End Set
        End Property

        Public Property PV() As String
            Get
                Return m_PV
            End Get
            Set(Value As String)
                m_PV = Value
            End Set
        End Property

        Public Property PsychologicalStatus() As String
            Get
                Return m_PsychologicalStatus
            End Get
            Set(Value As String)
                m_PsychologicalStatus = Value
            End Set
        End Property

        Public Property ProvisionalDiagnosis() As String
            Get
                Return m_ProvisionalDiagnosis
            End Get
            Set(Value As String)
                m_ProvisionalDiagnosis = Value
            End Set
        End Property

        Public Property TreatmentPlan() As String
            Get
                Return m_TreatmentPlan
            End Get
            Set(Value As String)
                m_TreatmentPlan = Value
            End Set
        End Property

        Public Property ClinicalImage() As Byte()
            Get
                Return m_ClinicalImage
            End Get
            Set(value As Byte())
                m_ClinicalImage = value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditClinicalFindings")

            With Parameters

                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("PresentingComplaint", Me.PresentingComplaint))
                .Add(New ParameterSQL("ClinicalNotes", Me.ClinicalNotes))
                .Add(New ParameterSQL("ROS", Me.ROS))
                .Add(New ParameterSQL("PMH", Me.PMH))
                .Add(New ParameterSQL("POH", Me.POH))
                .Add(New ParameterSQL("PGH", Me.PGH))
                .Add(New ParameterSQL("FSH", Me.FSH))
                .Add(New ParameterSQL("GeneralAppearance", Me.GeneralAppearance))
                .Add(New ParameterSQL("Respiratory", Me.Respiratory))
                .Add(New ParameterSQL("CVS", Me.CVS))
                .Add(New ParameterSQL("ENT", Me.ENT))
                .Add(New ParameterSQL("Abdomen", Me.Abdomen))
                .Add(New ParameterSQL("CNS", Me.CNS))
                .Add(New ParameterSQL("EYE", Me.EYE))
                .Add(New ParameterSQL("MuscularSkeletal", Me.MuscularSkeletal))
                .Add(New ParameterSQL("Skin", Me.Skin))
                .Add(New ParameterSQL("PV", Me.PV))
                .Add(New ParameterSQL("PsychologicalStatus", Me.PsychologicalStatus))
                .Add(New ParameterSQL("ProvisionalDiagnosis", Me.ProvisionalDiagnosis))
                .Add(New ParameterSQL("TreatmentPlan", Me.TreatmentPlan))
                .Add(New ParameterSQL("ClinicalImage", Me.ClinicalImage))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ClinicalFindings"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trial
            Me.SetLogObject("ClinicalFindings")

            Return Parameters

        End Function

        Public Function GetClinicalFindings(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetClinicalFindings", "ClinicalFindings", Parameters)

        End Function

#End Region

    End Class

    Public Class EyeAssessment : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_LeftPupil As String
        Private m_RightPupil As String
        Private m_LeftLidMargin As String
        Private m_RightLidMargin As String
        Private m_LeftConjuctiva As String
        Private m_RightConjuctiva As String
        Private m_LeftBulbarConjuctiva As String
        Private m_RightBulbarConjuctiva As String
        Private m_LeftCentralCornea As String
        Private m_RightCentralCornea As String
        Private m_LeftVerticalCornea As String
        Private m_RightVerticalCornea As String
        Private m_LeftAnteriorChamber As String
        Private m_RightAnteriorChamber As String
        Private m_LeftIrish As String
        Private m_RightIrish As String
        Private m_LeftAnteriorChamberAngle As String
        Private m_RightAnteriorChamberAngle As String
        Private m_LeftRetina As String
        Private m_RightRetina As String
        Private m_LeftMacular As String
        Private m_RightMacular As String
        Private m_LeftOpticDisc As String
        Private m_RightOpticDisc As String
        Private m_LeftIOP As String
        Private m_RightIOP As String
        Private m_LeftVitreous As String
        Private m_RightVitreous As String
        Private m_LeftLense As String
        Private m_RightLense As String
        Private m_EyeNotes As String
        Private m_LeftEyeBall As String
        Private m_RightEyeBall As String
        Private m_LeftOrbit As String
        Private m_RightOrbit As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property LeftPupil() As String
            Get
                Return m_LeftPupil
            End Get
            Set(Value As String)
                m_LeftPupil = Value
            End Set
        End Property

        Public Property RightPupil() As String
            Get
                Return m_RightPupil
            End Get
            Set(Value As String)
                m_RightPupil = Value
            End Set
        End Property

        Public Property LeftLidMargin() As String
            Get
                Return m_LeftLidMargin
            End Get
            Set(Value As String)
                m_LeftLidMargin = Value
            End Set
        End Property

        Public Property RightLidMargin() As String
            Get
                Return m_RightLidMargin
            End Get
            Set(Value As String)
                m_RightLidMargin = Value
            End Set
        End Property

        Public Property LeftConjuctiva() As String
            Get
                Return m_LeftConjuctiva
            End Get
            Set(Value As String)
                m_LeftConjuctiva = Value
            End Set
        End Property

        Public Property RightConjuctiva() As String
            Get
                Return m_RightConjuctiva
            End Get
            Set(Value As String)
                m_RightConjuctiva = Value
            End Set
        End Property

        Public Property LeftBulbarConjuctiva() As String
            Get
                Return m_LeftBulbarConjuctiva
            End Get
            Set(Value As String)
                m_LeftBulbarConjuctiva = Value
            End Set
        End Property

        Public Property RightBulbarConjuctiva() As String
            Get
                Return m_RightBulbarConjuctiva
            End Get
            Set(Value As String)
                m_RightBulbarConjuctiva = Value
            End Set
        End Property

        Public Property LeftCentralCornea() As String
            Get
                Return m_LeftCentralCornea
            End Get
            Set(Value As String)
                m_LeftCentralCornea = Value
            End Set
        End Property

        Public Property RightCentralCornea() As String
            Get
                Return m_RightCentralCornea
            End Get
            Set(Value As String)
                m_RightCentralCornea = Value
            End Set
        End Property

        Public Property LeftVerticalCornea() As String
            Get
                Return m_LeftVerticalCornea
            End Get
            Set(Value As String)
                m_LeftVerticalCornea = Value
            End Set
        End Property

        Public Property RightVerticalCornea() As String
            Get
                Return m_RightVerticalCornea
            End Get
            Set(Value As String)
                m_RightVerticalCornea = Value
            End Set
        End Property

        Public Property LeftAnteriorChamber() As String
            Get
                Return m_LeftAnteriorChamber
            End Get
            Set(Value As String)
                m_LeftAnteriorChamber = Value
            End Set
        End Property

        Public Property RightAnteriorChamber() As String
            Get
                Return m_RightAnteriorChamber
            End Get
            Set(Value As String)
                m_RightAnteriorChamber = Value
            End Set
        End Property

        Public Property LeftIrish() As String
            Get
                Return m_LeftIrish
            End Get
            Set(Value As String)
                m_LeftIrish = Value
            End Set
        End Property

        Public Property RightIrish() As String
            Get
                Return m_RightIrish
            End Get
            Set(Value As String)
                m_RightIrish = Value
            End Set
        End Property

        Public Property LeftAnteriorChamberAngle() As String
            Get
                Return m_LeftAnteriorChamberAngle
            End Get
            Set(Value As String)
                m_LeftAnteriorChamberAngle = Value
            End Set
        End Property

        Public Property RightAnteriorChamberAngle() As String
            Get
                Return m_RightAnteriorChamberAngle
            End Get
            Set(Value As String)
                m_RightAnteriorChamberAngle = Value
            End Set
        End Property

        Public Property LeftRetina() As String
            Get
                Return m_LeftRetina
            End Get
            Set(Value As String)
                m_LeftRetina = Value
            End Set
        End Property

        Public Property RightRetina() As String
            Get
                Return m_RightRetina
            End Get
            Set(Value As String)
                m_RightRetina = Value
            End Set
        End Property

        Public Property LeftMacular() As String
            Get
                Return m_LeftMacular
            End Get
            Set(Value As String)
                m_LeftMacular = Value
            End Set
        End Property

        Public Property RightMacular() As String
            Get
                Return m_RightMacular
            End Get
            Set(Value As String)
                m_RightMacular = Value
            End Set
        End Property

        Public Property LeftOpticDisc() As String
            Get
                Return m_LeftOpticDisc
            End Get
            Set(Value As String)
                m_LeftOpticDisc = Value
            End Set
        End Property

        Public Property RightOpticDisc() As String
            Get
                Return m_RightOpticDisc
            End Get
            Set(Value As String)
                m_RightOpticDisc = Value
            End Set
        End Property

        Public Property LeftIOP() As String
            Get
                Return m_LeftIOP
            End Get
            Set(Value As String)
                m_LeftIOP = Value
            End Set
        End Property

        Public Property RightIOP() As String
            Get
                Return m_RightIOP
            End Get
            Set(Value As String)
                m_RightIOP = Value
            End Set
        End Property

        Public Property LeftVitreous() As String
            Get
                Return m_LeftVitreous
            End Get
            Set(Value As String)
                m_LeftVitreous = Value
            End Set
        End Property

        Public Property RightVitreous() As String
            Get
                Return m_RightVitreous
            End Get
            Set(Value As String)
                m_RightVitreous = Value
            End Set
        End Property

        Public Property LeftLense() As String
            Get
                Return m_LeftLense
            End Get
            Set(Value As String)
                m_LeftLense = Value
            End Set
        End Property

        Public Property RightLense() As String
            Get
                Return m_RightLense
            End Get
            Set(Value As String)
                m_RightLense = Value
            End Set
        End Property

        Public Property EyeNotes() As String
            Get
                Return m_EyeNotes
            End Get
            Set(Value As String)
                m_EyeNotes = Value
            End Set
        End Property

        Public Property LeftEyeBall() As String
            Get
                Return m_LeftEyeBall
            End Get
            Set(Value As String)
                m_LeftEyeBall = Value
            End Set
        End Property

        Public Property RightEyeBall() As String
            Get
                Return m_RightEyeBall
            End Get
            Set(Value As String)
                m_RightEyeBall = Value
            End Set
        End Property

        Public Property LeftOrbit() As String
            Get
                Return m_LeftOrbit
            End Get
            Set(Value As String)
                m_LeftOrbit = Value
            End Set
        End Property

        Public Property RightOrbit() As String
            Get
                Return m_RightOrbit
            End Get
            Set(Value As String)
                m_RightOrbit = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditEyeAssessment")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("LeftPupil", Me.LeftPupil))
                .Add(New ParameterSQL("RightPupil", Me.RightPupil))
                .Add(New ParameterSQL("LeftLidMargin", Me.LeftLidMargin))
                .Add(New ParameterSQL("RightLidMargin", Me.RightLidMargin))
                .Add(New ParameterSQL("LeftConjuctiva", Me.LeftConjuctiva))
                .Add(New ParameterSQL("RightConjuctiva", Me.RightConjuctiva))
                .Add(New ParameterSQL("LeftBulbarConjuctiva", Me.LeftBulbarConjuctiva))
                .Add(New ParameterSQL("RightBulbarConjuctiva", Me.RightBulbarConjuctiva))
                .Add(New ParameterSQL("LeftCentralCornea", Me.LeftCentralCornea))
                .Add(New ParameterSQL("RightCentralCornea", Me.RightCentralCornea))
                .Add(New ParameterSQL("LeftVerticalCornea", Me.LeftVerticalCornea))
                .Add(New ParameterSQL("RightVerticalCornea", Me.RightVerticalCornea))
                .Add(New ParameterSQL("LeftAnteriorChamber", Me.LeftAnteriorChamber))
                .Add(New ParameterSQL("RightAnteriorChamber", Me.RightAnteriorChamber))
                .Add(New ParameterSQL("LeftIrish", Me.LeftIrish))
                .Add(New ParameterSQL("RightIrish", Me.RightIrish))
                .Add(New ParameterSQL("LeftAnteriorChamberAngle", Me.LeftAnteriorChamberAngle))
                .Add(New ParameterSQL("RightAnteriorChamberAngle", Me.RightAnteriorChamberAngle))
                .Add(New ParameterSQL("LeftRetina", Me.LeftRetina))
                .Add(New ParameterSQL("RightRetina", Me.RightRetina))
                .Add(New ParameterSQL("LeftMacular", Me.LeftMacular))
                .Add(New ParameterSQL("RightMacular", Me.RightMacular))
                .Add(New ParameterSQL("LeftOpticDisc", Me.LeftOpticDisc))
                .Add(New ParameterSQL("RightOpticDisc", Me.RightOpticDisc))
                .Add(New ParameterSQL("LeftIOP", Me.LeftIOP))
                .Add(New ParameterSQL("RightIOP", Me.RightIOP))
                .Add(New ParameterSQL("LeftVitreous", Me.LeftVitreous))
                .Add(New ParameterSQL("RightVitreous", Me.RightVitreous))
                .Add(New ParameterSQL("LeftLense", Me.LeftLense))
                .Add(New ParameterSQL("RightLense", Me.RightLense))
                .Add(New ParameterSQL("EyeNotes", Me.EyeNotes))
                .Add(New ParameterSQL("LeftEyeBall", Me.LeftEyeBall))
                .Add(New ParameterSQL("RightEyeBall", Me.RightEyeBall))
                .Add(New ParameterSQL("LeftOrbit", Me.LeftOrbit))
                .Add(New ParameterSQL("RightOrbit", Me.RightOrbit))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "VisitNo: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "EyeAssessment"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("EyeAssessment")

            Return Parameters

        End Function

        Public Function GetEyeAssessment(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetEyeAssessment", "EyeAssessment", Parameters)

        End Function

#End Region

    End Class

    Public Class Refraction : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_RightMRSPH As String
        Private m_LeftMRSPH As String
        Private m_RightMRCYL As String
        Private m_LeftMRCYL As String
        Private m_RightMRAXIS As String
        Private m_LeftMRAXIS As String
        Private m_RightCRSPH As String
        Private m_LeftCRSPH As String
        Private m_RightCRCYL As String
        Private m_LeftCRCYL As String
        Private m_RightCRAXIS As String
        Private m_LeftCRAXIS As String
        Private m_RightPCRSPH As String
        Private m_LeftPCRSPH As String
        Private m_RightPCRCYL As String
        Private m_LeftPCRCYL As String
        Private m_RightPCRAXIS As String
        Private m_LeftPCRRAXIS As String
        Private m_PD As String
        Private m_SegmentHeights As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property RightMRSPH() As String
            Get
                Return m_RightMRSPH
            End Get
            Set(ByVal Value As String)
                m_RightMRSPH = Value
            End Set
        End Property

        Public Property LeftMRSPH() As String
            Get
                Return m_LeftMRSPH
            End Get
            Set(ByVal Value As String)
                m_LeftMRSPH = Value
            End Set
        End Property

        Public Property RightMRCYL() As String
            Get
                Return m_RightMRCYL
            End Get
            Set(ByVal Value As String)
                m_RightMRCYL = Value
            End Set
        End Property

        Public Property LeftMRCYL() As String
            Get
                Return m_LeftMRCYL
            End Get
            Set(ByVal Value As String)
                m_LeftMRCYL = Value
            End Set
        End Property

        Public Property RightMRAXIS() As String
            Get
                Return m_RightMRAXIS
            End Get
            Set(ByVal Value As String)
                m_RightMRAXIS = Value
            End Set
        End Property

        Public Property LeftMRAXIS() As String
            Get
                Return m_LeftMRAXIS
            End Get
            Set(ByVal Value As String)
                m_LeftMRAXIS = Value
            End Set
        End Property

        Public Property RightCRSPH() As String
            Get
                Return m_RightCRSPH
            End Get
            Set(ByVal Value As String)
                m_RightCRSPH = Value
            End Set
        End Property

        Public Property LeftCRSPH() As String
            Get
                Return m_LeftCRSPH
            End Get
            Set(ByVal Value As String)
                m_LeftCRSPH = Value
            End Set
        End Property

        Public Property RightCRCYL() As String
            Get
                Return m_RightCRCYL
            End Get
            Set(ByVal Value As String)
                m_RightCRCYL = Value
            End Set
        End Property

        Public Property LeftCRCYL() As String
            Get
                Return m_LeftCRCYL
            End Get
            Set(ByVal Value As String)
                m_LeftCRCYL = Value
            End Set
        End Property

        Public Property RightCRAXIS() As String
            Get
                Return m_RightCRAXIS
            End Get
            Set(ByVal Value As String)
                m_RightCRAXIS = Value
            End Set
        End Property

        Public Property LeftCRAXIS() As String
            Get
                Return m_LeftCRAXIS
            End Get
            Set(ByVal Value As String)
                m_LeftCRAXIS = Value
            End Set
        End Property

        Public Property RightPCRSPH() As String
            Get
                Return m_RightPCRSPH
            End Get
            Set(ByVal Value As String)
                m_RightPCRSPH = Value
            End Set
        End Property

        Public Property LeftPCRSPH() As String
            Get
                Return m_LeftPCRSPH
            End Get
            Set(ByVal Value As String)
                m_LeftPCRSPH = Value
            End Set
        End Property

        Public Property RightPCRCYL() As String
            Get
                Return m_RightPCRCYL
            End Get
            Set(ByVal Value As String)
                m_RightPCRCYL = Value
            End Set
        End Property

        Public Property LeftPCRCYL() As String
            Get
                Return m_LeftPCRCYL
            End Get
            Set(ByVal Value As String)
                m_LeftPCRCYL = Value
            End Set
        End Property

        Public Property RightPCRAXIS() As String
            Get
                Return m_RightPCRAXIS
            End Get
            Set(ByVal Value As String)
                m_RightPCRAXIS = Value
            End Set
        End Property

        Public Property LeftPCRRAXIS() As String
            Get
                Return m_LeftPCRRAXIS
            End Get
            Set(ByVal Value As String)
                m_LeftPCRRAXIS = Value
            End Set
        End Property

        Public Property PD() As String
            Get
                Return m_PD
            End Get
            Set(ByVal Value As String)
                m_PD = Value
            End Set
        End Property

        Public Property segmentHeights() As String
            Get
                Return m_SegmentHeights
            End Get
            Set(ByVal Value As String)
                m_SegmentHeights = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditRefraction")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("RightMRSPH", Me.RightMRSPH))
                .Add(New ParameterSQL("LeftMRSPH", Me.LeftMRSPH))
                .Add(New ParameterSQL("RightMRCYL", Me.RightMRCYL))
                .Add(New ParameterSQL("LeftMRCYL", Me.LeftMRCYL))
                .Add(New ParameterSQL("RightMRAXIS", Me.RightMRAXIS))
                .Add(New ParameterSQL("LeftMRAXIS", Me.LeftMRAXIS))
                .Add(New ParameterSQL("RightCRSPH", Me.RightCRSPH))
                .Add(New ParameterSQL("LeftCRSPH", Me.LeftCRSPH))
                .Add(New ParameterSQL("RightCRCYL", Me.RightCRCYL))
                .Add(New ParameterSQL("LeftCRCYL", Me.LeftCRCYL))
                .Add(New ParameterSQL("RightCRAXIS", Me.RightCRAXIS))
                .Add(New ParameterSQL("LeftCRAXIS", Me.LeftCRAXIS))
                .Add(New ParameterSQL("RightPCRSPH", Me.RightPCRSPH))
                .Add(New ParameterSQL("LeftPCRSPH", Me.LeftPCRSPH))
                .Add(New ParameterSQL("RightPCRCYL", Me.RightPCRCYL))
                .Add(New ParameterSQL("LeftPCRCYL", Me.LeftPCRCYL))
                .Add(New ParameterSQL("RightPCRAXIS", Me.RightPCRAXIS))
                .Add(New ParameterSQL("LeftPCRRAXIS", Me.LeftPCRRAXIS))
                .Add(New ParameterSQL("PD", Me.PD))
                .Add(New ParameterSQL("SegmentHeights", Me.segmentHeights))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateRefraction")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("RightMRSPH", Me.RightMRSPH))
                .Add(New ParameterSQL("LeftMRSPH", Me.LeftMRSPH))
                .Add(New ParameterSQL("RightMRCYL", Me.RightMRCYL))
                .Add(New ParameterSQL("LeftMRCYL", Me.LeftMRCYL))
                .Add(New ParameterSQL("RightMRAXIS", Me.RightMRAXIS))
                .Add(New ParameterSQL("LeftMRAXIS", Me.LeftMRAXIS))
                .Add(New ParameterSQL("RightCRSPH", Me.RightCRSPH))
                .Add(New ParameterSQL("LeftCRSPH", Me.LeftCRSPH))
                .Add(New ParameterSQL("RightCRCYL", Me.RightCRCYL))
                .Add(New ParameterSQL("LeftCRCYL", Me.LeftCRCYL))
                .Add(New ParameterSQL("RightCRAXIS", Me.RightCRAXIS))
                .Add(New ParameterSQL("LeftCRAXIS", Me.LeftCRAXIS))
                .Add(New ParameterSQL("RightPCRSPH", Me.RightPCRSPH))
                .Add(New ParameterSQL("LeftPCRSPH", Me.LeftPCRSPH))
                .Add(New ParameterSQL("RightPCRCYL", Me.RightPCRCYL))
                .Add(New ParameterSQL("LeftPCRCYL", Me.LeftPCRCYL))
                .Add(New ParameterSQL("RightPCRAXIS", Me.RightPCRAXIS))
                .Add(New ParameterSQL("LeftPCRRAXIS", Me.LeftPCRRAXIS))
                .Add(New ParameterSQL("PD", Me.PD))
                .Add(New ParameterSQL("SegmentHeights", Me.segmentHeights))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("Refraction")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "VisitNo: " + Me.VisitNo
            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Refraction"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Refraction")

            Return Parameters

        End Function

        Public Function GetRefraction(ByVal visitNo As String) As DataSet
            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetRefraction", "Refraction", Parameters)

        End Function

#End Region

    End Class

    Public Class Orthoptics : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_HeadPosture As String
        Private m_Fixation As String
        Private m_LeftHirschberg As String
        Private m_RightHirschberg As String
        Private m_RightEOM As String
        Private m_LeftEOM As String
        Private m_CoverTestID As String
        Private m_LeftAPCTGlasses As String
        Private m_RightAPCTGlasses As String
        Private m_LeftAPCTWithOutGlasses As String
        Private m_RightAPCTWithOutGlasses As String
        Private m_Correspondence As String
        Private m_PrismAdaptation As String
        Private m_FusionConvergence As String
        Private m_FusionDivergence As String
        Private m_FusionRange As String
        Private m_NearPointOfAccommodation As String
        Private m_NearPointOfConvergence As String
        Private m_OrthopticsNotes As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property HeadPosture() As String
            Get
                Return m_HeadPosture
            End Get
            Set(Value As String)
                m_HeadPosture = Value
            End Set
        End Property

        Public Property Fixation() As String
            Get
                Return m_Fixation
            End Get
            Set(Value As String)
                m_Fixation = Value
            End Set
        End Property

        Public Property LeftHirschberg() As String
            Get
                Return m_LeftHirschberg
            End Get
            Set(Value As String)
                m_LeftHirschberg = Value
            End Set
        End Property

        Public Property RightHirschberg() As String
            Get
                Return m_RightHirschberg
            End Get
            Set(Value As String)
                m_RightHirschberg = Value
            End Set
        End Property

        Public Property RightEOM() As String
            Get
                Return m_RightEOM
            End Get
            Set(Value As String)
                m_RightEOM = Value
            End Set
        End Property

        Public Property LeftEOM() As String
            Get
                Return m_LeftEOM
            End Get
            Set(Value As String)
                m_LeftEOM = Value
            End Set
        End Property

        Public Property CoverTestID() As String
            Get
                Return m_CoverTestID
            End Get
            Set(Value As String)
                m_CoverTestID = Value
            End Set
        End Property

        Public Property LeftAPCTGlasses() As String
            Get
                Return m_LeftAPCTGlasses
            End Get
            Set(Value As String)
                m_LeftAPCTGlasses = Value
            End Set
        End Property

        Public Property RightAPCTGlasses() As String
            Get
                Return m_RightAPCTGlasses
            End Get
            Set(Value As String)
                m_RightAPCTGlasses = Value
            End Set
        End Property

        Public Property LeftAPCTWithOutGlasses() As String
            Get
                Return m_LeftAPCTWithOutGlasses
            End Get
            Set(Value As String)
                m_LeftAPCTWithOutGlasses = Value
            End Set
        End Property

        Public Property RightAPCTWithOutGlasses() As String
            Get
                Return m_RightAPCTWithOutGlasses
            End Get
            Set(Value As String)
                m_RightAPCTWithOutGlasses = Value
            End Set
        End Property

        Public Property Correspondence() As String
            Get
                Return m_Correspondence
            End Get
            Set(Value As String)
                m_Correspondence = Value
            End Set
        End Property

        Public Property PrismAdaptation() As String
            Get
                Return m_PrismAdaptation
            End Get
            Set(Value As String)
                m_PrismAdaptation = Value
            End Set
        End Property

        Public Property FusionConvergence() As String
            Get
                Return m_FusionConvergence
            End Get
            Set(Value As String)
                m_FusionConvergence = Value
            End Set
        End Property

        Public Property FusionDivergence() As String
            Get
                Return m_FusionDivergence
            End Get
            Set(Value As String)
                m_FusionDivergence = Value
            End Set
        End Property

        Public Property FusionRange() As String
            Get
                Return m_FusionRange
            End Get
            Set(Value As String)
                m_FusionRange = Value
            End Set
        End Property

        Public Property NearPointOfAccommodation() As String
            Get
                Return m_NearPointOfAccommodation
            End Get
            Set(Value As String)
                m_NearPointOfAccommodation = Value
            End Set
        End Property

        Public Property NearPointOfConvergence() As String
            Get
                Return m_NearPointOfConvergence
            End Get
            Set(Value As String)
                m_NearPointOfConvergence = Value
            End Set
        End Property

        Public Property OrthopticsNotes() As String
            Get
                Return m_OrthopticsNotes
            End Get
            Set(Value As String)
                m_OrthopticsNotes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditOrthoptics")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("HeadPosture", Me.HeadPosture))
                .Add(New ParameterSQL("Fixation", Me.Fixation))
                .Add(New ParameterSQL("LeftHirschberg", Me.LeftHirschberg))
                .Add(New ParameterSQL("RightHirschberg", Me.RightHirschberg))
                .Add(New ParameterSQL("RightEOM", Me.RightEOM))
                .Add(New ParameterSQL("LeftEOM", Me.LeftEOM))
                .Add(New ParameterSQL("CoverTestID", Me.CoverTestID))
                .Add(New ParameterSQL("LeftAPCTGlasses", Me.LeftAPCTGlasses))
                .Add(New ParameterSQL("RightAPCTGlasses", Me.RightAPCTGlasses))
                .Add(New ParameterSQL("LeftAPCTWithOutGlasses", Me.LeftAPCTWithOutGlasses))
                .Add(New ParameterSQL("RightAPCTWithOutGlasses", Me.RightAPCTWithOutGlasses))
                .Add(New ParameterSQL("Correspondence", Me.Correspondence))
                .Add(New ParameterSQL("PrismAdaptation", Me.PrismAdaptation))
                .Add(New ParameterSQL("FusionConvergence", Me.FusionConvergence))
                .Add(New ParameterSQL("FusionDivergence", Me.FusionDivergence))
                .Add(New ParameterSQL("FusionRange", Me.FusionRange))
                .Add(New ParameterSQL("NearPointOfAccommodation", Me.NearPointOfAccommodation))
                .Add(New ParameterSQL("NearPointOfConvergence", Me.NearPointOfConvergence))
                .Add(New ParameterSQL("OrthopticsNotes", Me.OrthopticsNotes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                '.Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "VisitNo: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Orthoptics"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Orthoptics")

            Return Parameters

        End Function

        Public Function GetOrthoptics(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetOrthoptics", "Orthoptics", Parameters)

        End Function

#End Region

    End Class

    Public Class IPDOrthoptics : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_HeadPosture As String
        Private m_Fixation As String
        Private m_LeftHirschberg As String
        Private m_RightHirschberg As String
        Private m_RightEOM As String
        Private m_LeftEOM As String
        Private m_CoverTestID As String
        Private m_LeftAPCTGlasses As String
        Private m_RightAPCTGlasses As String
        Private m_LeftAPCTWithOutGlasses As String
        Private m_RightAPCTWithOutGlasses As String
        Private m_Correspondence As String
        Private m_PrismAdaptation As String
        Private m_FusionConvergence As String
        Private m_FusionDivergence As String
        Private m_FusionRange As String
        Private m_NearPointOfAccommodation As String
        Private m_NearPointOfConvergence As String
        Private m_OrthopticsNotes As String

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property HeadPosture() As String
            Get
                Return m_HeadPosture
            End Get
            Set(Value As String)
                m_HeadPosture = Value
            End Set
        End Property

        Public Property Fixation() As String
            Get
                Return m_Fixation
            End Get
            Set(Value As String)
                m_Fixation = Value
            End Set
        End Property

        Public Property LeftHirschberg() As String
            Get
                Return m_LeftHirschberg
            End Get
            Set(Value As String)
                m_LeftHirschberg = Value
            End Set
        End Property

        Public Property RightHirschberg() As String
            Get
                Return m_RightHirschberg
            End Get
            Set(Value As String)
                m_RightHirschberg = Value
            End Set
        End Property

        Public Property RightEOM() As String
            Get
                Return m_RightEOM
            End Get
            Set(Value As String)
                m_RightEOM = Value
            End Set
        End Property

        Public Property LeftEOM() As String
            Get
                Return m_LeftEOM
            End Get
            Set(Value As String)
                m_LeftEOM = Value
            End Set
        End Property

        Public Property CoverTestID() As String
            Get
                Return m_CoverTestID
            End Get
            Set(Value As String)
                m_CoverTestID = Value
            End Set
        End Property

        Public Property LeftAPCTGlasses() As String
            Get
                Return m_LeftAPCTGlasses
            End Get
            Set(Value As String)
                m_LeftAPCTGlasses = Value
            End Set
        End Property

        Public Property RightAPCTGlasses() As String
            Get
                Return m_RightAPCTGlasses
            End Get
            Set(Value As String)
                m_RightAPCTGlasses = Value
            End Set
        End Property

        Public Property LeftAPCTWithOutGlasses() As String
            Get
                Return m_LeftAPCTWithOutGlasses
            End Get
            Set(Value As String)
                m_LeftAPCTWithOutGlasses = Value
            End Set
        End Property

        Public Property RightAPCTWithOutGlasses() As String
            Get
                Return m_RightAPCTWithOutGlasses
            End Get
            Set(Value As String)
                m_RightAPCTWithOutGlasses = Value
            End Set
        End Property

        Public Property Correspondence() As String
            Get
                Return m_Correspondence
            End Get
            Set(Value As String)
                m_Correspondence = Value
            End Set
        End Property

        Public Property PrismAdaptation() As String
            Get
                Return m_PrismAdaptation
            End Get
            Set(Value As String)
                m_PrismAdaptation = Value
            End Set
        End Property

        Public Property FusionConvergence() As String
            Get
                Return m_FusionConvergence
            End Get
            Set(Value As String)
                m_FusionConvergence = Value
            End Set
        End Property

        Public Property FusionDivergence() As String
            Get
                Return m_FusionDivergence
            End Get
            Set(Value As String)
                m_FusionDivergence = Value
            End Set
        End Property

        Public Property FusionRange() As String
            Get
                Return m_FusionRange
            End Get
            Set(Value As String)
                m_FusionRange = Value
            End Set
        End Property

        Public Property NearPointOfAccommodation() As String
            Get
                Return m_NearPointOfAccommodation
            End Get
            Set(Value As String)
                m_NearPointOfAccommodation = Value
            End Set
        End Property

        Public Property NearPointOfConvergence() As String
            Get
                Return m_NearPointOfConvergence
            End Get
            Set(Value As String)
                m_NearPointOfConvergence = Value
            End Set
        End Property

        Public Property OrthopticsNotes() As String
            Get
                Return m_OrthopticsNotes
            End Get
            Set(Value As String)
                m_OrthopticsNotes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditIPDOrthoptics")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("HeadPosture", Me.HeadPosture))
                .Add(New ParameterSQL("Fixation", Me.Fixation))
                .Add(New ParameterSQL("LeftHirschberg", Me.LeftHirschberg))
                .Add(New ParameterSQL("RightHirschberg", Me.RightHirschberg))
                .Add(New ParameterSQL("RightEOM", Me.RightEOM))
                .Add(New ParameterSQL("LeftEOM", Me.LeftEOM))
                .Add(New ParameterSQL("CoverTestID", Me.CoverTestID))
                .Add(New ParameterSQL("LeftAPCTGlasses", Me.LeftAPCTGlasses))
                .Add(New ParameterSQL("RightAPCTGlasses", Me.RightAPCTGlasses))
                .Add(New ParameterSQL("LeftAPCTWithOutGlasses", Me.LeftAPCTWithOutGlasses))
                .Add(New ParameterSQL("RightAPCTWithOutGlasses", Me.RightAPCTWithOutGlasses))
                .Add(New ParameterSQL("Correspondence", Me.Correspondence))
                .Add(New ParameterSQL("PrismAdaptation", Me.PrismAdaptation))
                .Add(New ParameterSQL("FusionConvergence", Me.FusionConvergence))
                .Add(New ParameterSQL("FusionDivergence", Me.FusionDivergence))
                .Add(New ParameterSQL("FusionRange", Me.FusionRange))
                .Add(New ParameterSQL("NearPointOfAccommodation", Me.NearPointOfAccommodation))
                .Add(New ParameterSQL("NearPointOfConvergence", Me.NearPointOfConvergence))
                .Add(New ParameterSQL("OrthopticsNotes", Me.OrthopticsNotes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RoundNo = '" + Me.RoundNo + "'"
            Dim errorPart As String = "RoundNo: " + Me.RoundNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDOrthoptics"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDOrthoptics")

            Return Parameters

        End Function

        Public Function GetIPDOrthoptics(roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
            End With

            Return Me.Load("uspGetIPDOrthoptics", "IPDOrthoptics", Parameters)

        End Function

#End Region

    End Class

    Public Class LowVision : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_BriefHistory As String
        Private m_Profession As String
        Private m_MajorOcularDiagnosisRE As String
        Private m_MajorOcularDiagnosisLE As String
        Private m_OtherOcularDiagnosisRE As String
        Private m_OtherOcularDiagnosisLE As String
        Private m_OphthalmologistSeenID As String
        Private m_OtherImpairmentsID As String
        Private m_OtherImpairments As String
        Private m_ExistingTreatmentFarRE As String
        Private m_ExistingTreatmentFarLE As String
        Private m_ExistingTreatmentNearRE As String
        Private m_ExistingTreatmentNearLE As String
        Private m_NewTreatmentFarRE As String
        Private m_NewTreatmentFarLE As String
        Private m_NewTreatmentNearRE As String
        Private m_NewTreatmentNearLE As String

        Private m_ExistingVisualAcuityFarLEID As String
        Private m_ExistingVisualAcuityFarREID As String
        Private m_ExistingVisualAcuityNearLEID As String
        Private m_ExistingVisualAcuitynearREID As String
        Private m_NewVisualAcuityFarLEID As String
        Private m_NewVisualAcuityFarREID As String
        Private m_NewVisualAcuityNearLEID As String
        Private m_NewVisualAcuitynearREID As String

        Private m_ExistingLVDsNear As String
        Private m_ExistingLVDsFar As String
        Private m_ProblemEncounteredLVDsNear As String
        Private m_ProblemEncounteredLVDsFar As String
        Private m_ColourVisionDefectID As String
        Private m_ColourVisionTestUsed As String
        Private m_ContrastSensitivityID As String
        Private m_ContrastSensitivityTestUsed As String
        Private m_VisualFieldDefectID As String
        Private m_VisualFieldDefectTestUsed As String
        Private m_LowVisionDevicesFar As String
        Private m_LowVisionDevicesNear As String
        Private m_NonOpticalAids As String
        Private m_Advice As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property BriefHistory() As String
            Get
                Return m_BriefHistory
            End Get
            Set(ByVal Value As String)
                m_BriefHistory = Value
            End Set
        End Property

        Public Property Profession() As String
            Get
                Return m_Profession
            End Get
            Set(ByVal Value As String)
                m_Profession = Value
            End Set
        End Property

        Public Property MajorOcularDiagnosisRE() As String
            Get
                Return m_MajorOcularDiagnosisRE
            End Get
            Set(ByVal Value As String)
                m_MajorOcularDiagnosisRE = Value
            End Set
        End Property

        Public Property MajorOcularDiagnosisLE() As String
            Get
                Return m_MajorOcularDiagnosisLE
            End Get
            Set(ByVal Value As String)
                m_MajorOcularDiagnosisLE = Value
            End Set
        End Property

        Public Property OtherOcularDiagnosisRE() As String
            Get
                Return m_OtherOcularDiagnosisRE
            End Get
            Set(ByVal Value As String)
                m_OtherOcularDiagnosisRE = Value
            End Set
        End Property

        Public Property OtherOcularDiagnosisLE() As String
            Get
                Return m_OtherOcularDiagnosisLE
            End Get
            Set(ByVal Value As String)
                m_OtherOcularDiagnosisLE = Value
            End Set
        End Property

        Public Property OphthalmologistSeenID() As String
            Get
                Return m_OphthalmologistSeenID
            End Get
            Set(ByVal Value As String)
                m_OphthalmologistSeenID = Value
            End Set
        End Property


        Public Property OtherImpairmentsID() As String
            Get
                Return m_OtherImpairmentsID
            End Get
            Set(ByVal Value As String)
                m_OtherImpairmentsID = Value
            End Set
        End Property

        Public Property OtherImpairments() As String
            Get
                Return m_OtherImpairments
            End Get
            Set(ByVal Value As String)
                m_OtherImpairments = Value
            End Set
        End Property

        Public Property ExistingTreatmentFarRE() As String
            Get
                Return m_ExistingTreatmentFarRE
            End Get
            Set(ByVal Value As String)
                m_ExistingTreatmentFarRE = Value
            End Set
        End Property

        Public Property ExistingTreatmentFarLE() As String
            Get
                Return m_ExistingTreatmentFarLE
            End Get
            Set(ByVal Value As String)
                m_ExistingTreatmentFarLE = Value
            End Set
        End Property
        Public Property ExistingTreatmentNearRE() As String
            Get
                Return m_ExistingTreatmentNearRE
            End Get
            Set(ByVal Value As String)
                m_ExistingTreatmentNearRE = Value
            End Set
        End Property

        Public Property ExistingTreatmentNearLE() As String
            Get
                Return m_ExistingTreatmentNearLE
            End Get
            Set(ByVal Value As String)
                m_ExistingTreatmentNearLE = Value
            End Set
        End Property
        Public Property NewTreatmentFarRE() As String
            Get
                Return m_NewTreatmentFarRE
            End Get
            Set(ByVal Value As String)
                m_NewTreatmentFarRE = Value
            End Set
        End Property

        Public Property NewTreatmentFarLE() As String
            Get
                Return m_NewTreatmentFarLE
            End Get
            Set(ByVal Value As String)
                m_NewTreatmentFarLE = Value
            End Set
        End Property

        Public Property NewTreatmentNearRE() As String
            Get
                Return m_NewTreatmentNearRE
            End Get
            Set(ByVal Value As String)
                m_NewTreatmentNearRE = Value
            End Set
        End Property

        Public Property NewTreatmentNearLE() As String
            Get
                Return m_NewTreatmentNearLE
            End Get
            Set(ByVal Value As String)
                m_NewTreatmentNearLE = Value
            End Set
        End Property

        Public Property ExistingVisualAcuityFarLEID() As String
            Get
                Return m_ExistingVisualAcuityFarLEID
            End Get
            Set(ByVal Value As String)
                m_ExistingVisualAcuityFarLEID = Value
            End Set
        End Property
        Public Property ExistingVisualAcuityFarREID() As String
            Get
                Return m_ExistingVisualAcuityFarREID
            End Get
            Set(ByVal Value As String)
                m_ExistingVisualAcuityFarREID = Value
            End Set
        End Property
        Public Property ExistingVisualAcuityNearLEID() As String
            Get
                Return m_ExistingVisualAcuityNearLEID
            End Get
            Set(ByVal Value As String)
                m_ExistingVisualAcuityNearLEID = Value
            End Set
        End Property
        Public Property ExistingVisualAcuityNearREID() As String
            Get
                Return m_ExistingVisualAcuitynearREID
            End Get
            Set(ByVal Value As String)
                m_ExistingVisualAcuitynearREID = Value
            End Set
        End Property

        Public Property NewVisualAcuityFarLEID() As String
            Get
                Return m_NewVisualAcuityFarLEID
            End Get
            Set(ByVal Value As String)
                m_NewVisualAcuityFarLEID = Value
            End Set
        End Property

        Public Property NewVisualAcuityFarREID() As String
            Get
                Return m_NewVisualAcuityFarREID
            End Get
            Set(ByVal Value As String)
                m_NewVisualAcuityFarREID = Value
            End Set
        End Property

        Public Property NewVisualAcuityNearLEID() As String
            Get
                Return m_NewVisualAcuityNearLEID
            End Get
            Set(ByVal Value As String)
                m_NewVisualAcuityNearLEID = Value
            End Set
        End Property

        Public Property NewVisualAcuityNearREID() As String
            Get
                Return m_NewVisualAcuitynearREID
            End Get
            Set(ByVal Value As String)
                m_NewVisualAcuitynearREID = Value
            End Set
        End Property


        Public Property ExistingLVDsNear() As String
            Get
                Return m_ExistingLVDsNear
            End Get
            Set(ByVal Value As String)
                m_ExistingLVDsNear = Value
            End Set
        End Property

        Public Property ExistingLVDsFar() As String
            Get
                Return m_ExistingLVDsFar
            End Get
            Set(ByVal Value As String)
                m_ExistingLVDsFar = Value
            End Set
        End Property

        Public Property ProblemEncounteredLVDsNear() As String
            Get
                Return m_ProblemEncounteredLVDsNear
            End Get
            Set(ByVal Value As String)
                m_ProblemEncounteredLVDsNear = Value
            End Set
        End Property

        Public Property ProblemEncounteredLVDsFar() As String
            Get
                Return m_ProblemEncounteredLVDsFar
            End Get
            Set(ByVal Value As String)
                m_ProblemEncounteredLVDsFar = Value
            End Set
        End Property


        Public Property ColourVisionDefectID() As String
            Get
                Return m_ColourVisionDefectID
            End Get
            Set(ByVal Value As String)
                m_ColourVisionDefectID = Value
            End Set
        End Property


        Public Property ColourVisionTestUsed() As String
            Get
                Return m_ColourVisionTestUsed
            End Get
            Set(ByVal Value As String)
                m_ColourVisionTestUsed = Value
            End Set
        End Property

        Public Property ContrastSensitivityID() As String
            Get
                Return m_ContrastSensitivityID
            End Get
            Set(ByVal Value As String)
                m_ContrastSensitivityID = Value
            End Set
        End Property

        Public Property ContrastSensitivityTestUsed() As String
            Get
                Return m_ContrastSensitivityTestUsed
            End Get
            Set(ByVal Value As String)
                m_ContrastSensitivityTestUsed = Value
            End Set
        End Property

        Public Property VisualFieldDefectID() As String
            Get
                Return m_VisualFieldDefectID
            End Get
            Set(ByVal Value As String)
                m_VisualFieldDefectID = Value
            End Set
        End Property


        Public Property VisualFieldDefectTestUsed() As String
            Get
                Return m_VisualFieldDefectTestUsed
            End Get
            Set(ByVal Value As String)
                m_VisualFieldDefectTestUsed = Value
            End Set
        End Property

        Public Property LowVisionDevicesFar() As String
            Get
                Return m_LowVisionDevicesFar
            End Get
            Set(ByVal Value As String)
                m_LowVisionDevicesFar = Value
            End Set
        End Property

        Public Property LowVisionDevicesNear() As String
            Get
                Return m_LowVisionDevicesNear
            End Get
            Set(ByVal Value As String)
                m_LowVisionDevicesNear = Value
            End Set
        End Property

        Public Property NonOpticalAids() As String
            Get
                Return m_NonOpticalAids
            End Get
            Set(ByVal Value As String)
                m_NonOpticalAids = Value
            End Set
        End Property


        Public Property Advice() As String
            Get
                Return m_Advice
            End Get
            Set(ByVal Value As String)
                m_Advice = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditLowVision")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("BriefHistory", Me.BriefHistory))
                .Add(New ParameterSQL("Profession", Me.Profession))
                .Add(New ParameterSQL("MajorOcularDiagnosisRE", Me.MajorOcularDiagnosisRE))
                .Add(New ParameterSQL("MajorOcularDiagnosisLE", Me.MajorOcularDiagnosisLE))
                .Add(New ParameterSQL("OtherOcularDiagnosisRE", Me.OtherOcularDiagnosisRE))
                .Add(New ParameterSQL("OtherOcularDiagnosisLE", Me.OtherOcularDiagnosisLE))
                .Add(New ParameterSQL("OphthalmologistSeenID", Me.OphthalmologistSeenID))
                .Add(New ParameterSQL("OtherImpairmentsID", Me.OtherImpairmentsID))
                .Add(New ParameterSQL("OtherImpairments", Me.OtherImpairments))
                .Add(New ParameterSQL("ExistingTreatmentFarRE", Me.ExistingTreatmentFarRE))
                .Add(New ParameterSQL("ExistingTreatmentFarLE", Me.ExistingTreatmentFarLE))
                .Add(New ParameterSQL("ExistingTreatmentNearRE", Me.ExistingTreatmentNearRE))
                .Add(New ParameterSQL("ExistingTreatmentNearLE", Me.ExistingTreatmentNearLE))
                .Add(New ParameterSQL("NewTreatmentFarRE", Me.NewTreatmentFarRE))
                .Add(New ParameterSQL("NewTreatmentFarLE", Me.NewTreatmentFarLE))
                .Add(New ParameterSQL("NewTreatmentNearRE", Me.NewTreatmentNearRE))
                .Add(New ParameterSQL("NewTreatmentNearLE", Me.NewTreatmentNearLE))
                .Add(New ParameterSQL("ExistingVisualAcuityFarLEID", Me.ExistingVisualAcuityFarLEID))
                .Add(New ParameterSQL("ExistingVisualAcuityFarREID", Me.ExistingVisualAcuityFarREID))
                .Add(New ParameterSQL("ExistingVisualAcuityNearLEID", Me.ExistingVisualAcuityNearLEID))
                .Add(New ParameterSQL("ExistingVisualAcuityNearREID", Me.ExistingVisualAcuityNearREID))
                .Add(New ParameterSQL("NewVisualAcuityFarLEID", Me.NewVisualAcuityFarLEID))
                .Add(New ParameterSQL("NewVisualAcuityFarREID", Me.NewVisualAcuityFarREID))
                .Add(New ParameterSQL("NewVisualAcuityNearLEID", Me.NewVisualAcuityNearLEID))
                .Add(New ParameterSQL("NewVisualAcuityNearREID", Me.NewVisualAcuityNearREID))
                .Add(New ParameterSQL("ExistingLVDsNear", Me.ExistingLVDsNear))
                .Add(New ParameterSQL("ExistingLVDsFar", Me.ExistingLVDsFar))
                .Add(New ParameterSQL("ProblemEncounteredLVDsNear", Me.ProblemEncounteredLVDsNear))
                .Add(New ParameterSQL("ProblemEncounteredLVDsFar", Me.ProblemEncounteredLVDsFar))
                .Add(New ParameterSQL("ColourVisionDefectID", Me.ColourVisionDefectID))
                .Add(New ParameterSQL("ColourVisionTestUsed", Me.ColourVisionTestUsed))
                .Add(New ParameterSQL("ContrastSensitivityID", Me.ContrastSensitivityID))
                .Add(New ParameterSQL("ContrastSensitivityTestUsed", Me.ContrastSensitivityTestUsed))
                .Add(New ParameterSQL("VisualFieldDefectID", Me.VisualFieldDefectID))
                .Add(New ParameterSQL("VisualFieldDefectTestUsed", Me.VisualFieldDefectTestUsed))
                .Add(New ParameterSQL("LowVisionDevicesFar", Me.LowVisionDevicesFar))
                .Add(New ParameterSQL("LowVisionDevicesNear", Me.LowVisionDevicesNear))
                .Add(New ParameterSQL("NonOpticalAids", Me.NonOpticalAids))
                .Add(New ParameterSQL("Advice", Me.Advice))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function


        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "VisitNo: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "LowVision"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("LowVision")

            Return Parameters

        End Function

        Public Function GetLowVision(ByVal visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetLowVision", "LowVision", Parameters)

        End Function

#End Region

    End Class

    Public Class Optical : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_RightSPH As String
        Private m_RightCYL As String
        Private m_RightAXIS As String
        Private m_RightPRISM As String
        Private m_RightADD As String
        Private m_LeftSPH As String
        Private m_LeftCYL As String
        Private m_LeftAXIS As String
        Private m_LeftPRISM As String
        Private m_LeftADD As String
        Private m_LenseTypeID As String
        Private m_Pd As Integer
        Private m_Sg As Integer

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property RightSPH() As String
            Get
                Return m_RightSPH
            End Get
            Set(Value As String)
                m_RightSPH = Value
            End Set
        End Property

        Public Property RightCYL() As String
            Get
                Return m_RightCYL
            End Get
            Set(Value As String)
                m_RightCYL = Value
            End Set
        End Property

        Public Property RightAXIS() As String
            Get
                Return m_RightAXIS
            End Get
            Set(Value As String)
                m_RightAXIS = Value
            End Set
        End Property

        Public Property RightPRISM() As String
            Get
                Return m_RightPRISM
            End Get
            Set(Value As String)
                m_RightPRISM = Value
            End Set
        End Property

        Public Property RightADD() As String
            Get
                Return m_RightADD
            End Get
            Set(Value As String)
                m_RightADD = Value
            End Set
        End Property

        Public Property LeftSPH() As String
            Get
                Return m_LeftSPH
            End Get
            Set(Value As String)
                m_LeftSPH = Value
            End Set
        End Property

        Public Property LeftCYL() As String
            Get
                Return m_LeftCYL
            End Get
            Set(Value As String)
                m_LeftCYL = Value
            End Set
        End Property

        Public Property LeftAXIS() As String
            Get
                Return m_LeftAXIS
            End Get
            Set(Value As String)
                m_LeftAXIS = Value
            End Set
        End Property

        Public Property LeftPRISM() As String
            Get
                Return m_LeftPRISM
            End Get
            Set(Value As String)
                m_LeftPRISM = Value
            End Set
        End Property

        Public Property LeftADD() As String
            Get
                Return m_LeftADD
            End Get
            Set(Value As String)
                m_LeftADD = Value
            End Set
        End Property

        Public Property LenseTypeID() As String
            Get
                Return m_LenseTypeID
            End Get
            Set(Value As String)
                m_LenseTypeID = Value
            End Set
        End Property

        Public Property Pd() As Integer
            Get
                Return m_Pd
            End Get
            Set(Value As Integer)
                m_Pd = Value
            End Set
        End Property

        Public Property Sg() As Integer
            Get
                Return m_Sg
            End Get
            Set(Value As Integer)
                m_Sg = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditOptical")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("RightSPH", Me.RightSPH))
                .Add(New ParameterSQL("RightCYL", Me.RightCYL))
                .Add(New ParameterSQL("RightAXIS", Me.RightAXIS))
                .Add(New ParameterSQL("RightPRISM", Me.RightPRISM))
                .Add(New ParameterSQL("RightADD", Me.RightADD))
                .Add(New ParameterSQL("LeftSPH", Me.LeftSPH))
                .Add(New ParameterSQL("LeftCYL", Me.LeftCYL))
                .Add(New ParameterSQL("LeftAXIS", Me.LeftAXIS))
                .Add(New ParameterSQL("LeftPRISM", Me.LeftPRISM))
                .Add(New ParameterSQL("LeftADD", Me.LeftADD))
                .Add(New ParameterSQL("LenseTypeID", Me.LenseTypeID))
                .Add(New ParameterSQL("Pd", Me.Pd))
                .Add(New ParameterSQL("Sg", Me.Sg))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "VisitNo: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Optical"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Optical")

            Return Parameters

        End Function

        Public Function GetOptical(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetOptical", "Optical", Parameters)

        End Function

#End Region

    End Class

    Public Class Referrals : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ReferralDate As Date
        Private m_ReferredBy As String
        Private m_DoctorSpecialtyID As String
        Private m_ReferredTo As String
        Private m_ReferralNotes As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ReferralDate() As Date
            Get
                Return m_ReferralDate
            End Get
            Set(Value As Date)
                m_ReferralDate = Value
            End Set
        End Property

        Public Property ReferredBy() As String
            Get
                Return m_ReferredBy
            End Get
            Set(Value As String)
                m_ReferredBy = Value
            End Set
        End Property

        Public Property DoctorSpecialtyID() As String
            Get
                Return m_DoctorSpecialtyID
            End Get
            Set(Value As String)
                m_DoctorSpecialtyID = Value
            End Set
        End Property

        Public Property ReferredTo() As String
            Get
                Return m_ReferredTo
            End Get
            Set(Value As String)
                m_ReferredTo = Value
            End Set
        End Property

        Public Property ReferralNotes() As String
            Get
                Return m_ReferralNotes
            End Get
            Set(Value As String)
                m_ReferralNotes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertReferrals")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ReferralDate", Me.ReferralDate))
                .Add(New ParameterSQL("ReferredBy", Me.ReferredBy))
                .Add(New ParameterSQL("DoctorSpecialtyID", Me.DoctorSpecialtyID))
                .Add(New ParameterSQL("ReferredTo", Me.ReferredTo))
                .Add(New ParameterSQL("ReferralNotes", Me.ReferralNotes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "VisitNo = '" + Me.VisitNo + "'"
            errorPart = "Visit No: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Referrals"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Referrals")

            Return Parameters

        End Function

        Public Function GetReferrals(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetReferrals", "Referrals", Parameters)

        End Function

#End Region

    End Class

    Public Class ExternalReferrals : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ProcedurePaidBy As String
        Private m_EmployeeName As String
        Private m_RefferedTo As String
        Private m_DepartureTime As String
        Private m_DateOfReferral As Date
        Private m_HistoryAndSymptoms As String
        Private m_Diagnosis As String
        Private m_TreatmentGiven As String
        Private m_ReasonForReferral As String
        Private m_LabInvestigations As String
        Private m_StaffNo As String
        Private m_AuthorisedBy As String
        Private m_TreatmentLimit As Nullable(Of Decimal)

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ProcedurePaidBy() As String
            Get
                Return m_ProcedurePaidBy
            End Get
            Set(ByVal Value As String)
                m_ProcedurePaidBy = Value
            End Set
        End Property

        Public Property EmployeeName() As String
            Get
                Return m_EmployeeName
            End Get
            Set(ByVal Value As String)
                m_EmployeeName = Value
            End Set
        End Property

        Public Property RefferedTo() As String
            Get
                Return m_RefferedTo
            End Get
            Set(ByVal Value As String)
                m_RefferedTo = Value
            End Set
        End Property

        Public Property DepartureTime() As String
            Get
                Return m_DepartureTime
            End Get
            Set(ByVal Value As String)
                m_DepartureTime = Value
            End Set
        End Property

        Public Property DateOfReferral() As Date
            Get
                Return m_DateOfReferral
            End Get
            Set(ByVal Value As Date)
                m_DateOfReferral = Value
            End Set
        End Property

        Public Property HistoryAndSymptoms() As String
            Get
                Return m_HistoryAndSymptoms
            End Get
            Set(ByVal Value As String)
                m_HistoryAndSymptoms = Value
            End Set
        End Property

        Public Property Diagnosis() As String
            Get
                Return m_Diagnosis
            End Get
            Set(ByVal Value As String)
                m_Diagnosis = Value
            End Set
        End Property

        Public Property TreatmentGiven() As String
            Get
                Return m_TreatmentGiven
            End Get
            Set(ByVal Value As String)
                m_TreatmentGiven = Value
            End Set
        End Property

        Public Property ReasonForReferral() As String
            Get
                Return m_ReasonForReferral
            End Get
            Set(ByVal Value As String)
                m_ReasonForReferral = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(ByVal Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property AuthorisedBy() As String
            Get
                Return m_AuthorisedBy
            End Get
            Set(ByVal Value As String)
                m_AuthorisedBy = Value
            End Set
        End Property

        Public Property TreatmentLimit() As Nullable(Of Decimal)
            Get
                Return m_TreatmentLimit
            End Get
            Set(ByVal Value As Nullable(Of Decimal))
                m_TreatmentLimit = Value
            End Set
        End Property

        Public Property LabInvestigations() As String
            Get
                Return m_LabInvestigations
            End Get
            Set(ByVal Value As String)
                m_LabInvestigations = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertExternalReferrals")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ProcedurePaidBy", Me.ProcedurePaidBy))
                .Add(New ParameterSQL("EmployeeName", Me.EmployeeName))
                .Add(New ParameterSQL("ReferredTo", Me.RefferedTo))
                .Add(New ParameterSQL("DepartureTime", Me.DepartureTime))
                .Add(New ParameterSQL("DateOfReferral", Me.DateOfReferral))
                .Add(New ParameterSQL("HistoryAndSymptoms", Me.HistoryAndSymptoms))
                .Add(New ParameterSQL("Diagnosis", Me.Diagnosis))
                .Add(New ParameterSQL("TreatmentGiven", Me.TreatmentGiven))
                .Add(New ParameterSQL("LabInvestigations", Me.LabInvestigations))
                .Add(New ParameterSQL("ReasonForReferral", Me.ReasonForReferral))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("AuthorisedBy", Me.AuthorisedBy))
                .Add(New ParameterSQL("TreatmentLimit", Me.TreatmentLimit))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateExternalReferrals")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ProcedurePaidBy", Me.ProcedurePaidBy))
                .Add(New ParameterSQL("EmployeeName", Me.EmployeeName))
                .Add(New ParameterSQL("ReferredTo", Me.RefferedTo))
                .Add(New ParameterSQL("DepartureTime", Me.DepartureTime))
                .Add(New ParameterSQL("DateOfReferral", Me.DateOfReferral))
                .Add(New ParameterSQL("HistoryAndSymptoms", Me.HistoryAndSymptoms))
                .Add(New ParameterSQL("Diagnosis", Me.Diagnosis))
                .Add(New ParameterSQL("TreatmentGiven", Me.TreatmentGiven))
                .Add(New ParameterSQL("ReasonForReferral", Me.ReasonForReferral))
                .Add(New ParameterSQL("LabInvestigations", Me.LabInvestigations))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("AuthorisedBy", Me.AuthorisedBy))
                .Add(New ParameterSQL("TreatmentLimit", Me.TreatmentLimit))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("ExternalReferrals")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "VisitNo: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ExternalReferrals"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ExternalReferrals")

            Return Parameters

        End Function

        Public Function GetExternalReferrals(ByVal visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetExternalReferrals", "ExternalReferrals", Parameters)

        End Function

#End Region

    End Class

    Public Class LabRequests : Inherits DBConnect

#Region " Fields "

        Private m_SpecimenNo As String
        Private m_SpecimenDes As String
        Private m_DrawnBy As String
        Private m_VisitNo As String
        Private m_DrawnDateTime As Date

#End Region

#Region " Properties "

        Public Property SpecimenNo() As String
            Get
                Return m_SpecimenNo
            End Get
            Set(Value As String)
                m_SpecimenNo = Value
            End Set
        End Property

        Public Property SpecimenDes() As String
            Get
                Return m_SpecimenDes
            End Get
            Set(Value As String)
                m_SpecimenDes = Value
            End Set
        End Property

        Public Property DrawnBy() As String
            Get
                Return m_DrawnBy
            End Get
            Set(Value As String)
                m_DrawnBy = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property DrawnDateTime() As Date
            Get
                Return m_DrawnDateTime
            End Get
            Set(Value As Date)
                m_DrawnDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyBase.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertLabRequests")

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", Me.SpecimenNo))
                .Add(New ParameterSQL("SpecimenDes", Me.SpecimenDes))
                .Add(New ParameterSQL("DrawnBy", Me.DrawnBy))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("DrawnDateTime", Me.DrawnDateTime))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateLabRequests")

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", Me.SpecimenNo))
                .Add(New ParameterSQL("SpecimenDes", Me.SpecimenDes))
                .Add(New ParameterSQL("DrawnBy", Me.DrawnBy))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("DrawnDateTime", Me.DrawnDateTime))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trial
            Me.SetLogObject("LabRequests")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "SpecimenNo = '" + Me.SpecimenNo + "'"
            Dim errorPart As String = "Specimen No: " + Me.SpecimenNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "LabRequests"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trial
            Me.SetLogObject("LabRequests")

            Return Parameters

        End Function

        Public Function GetNextSpecimenID(visitNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("SpecimenID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextSpecimenID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("SpecimenID")) Then
                    Return CInt(Me.ReadData("SpecimenID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function GetLabRequests(specimenNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", specimenNo))
            End With

            Return Me.Load("uspGetLabRequests", "LabRequests", Parameters)

        End Function

        Public Function GetSpecimenNo(patientNo As String, visitDate As Nullable(Of Date)) As String

            Dim oAppData As New SyncSoft.Common.Classes.AppData()

            If IsNothing(visitDate) OrElse CDate(visitDate).Equals(oAppData.NullDateValue) Then
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("VisitDate", SqlDbType.SmallDateTime))
                    .Add(New ParameterSQL("SpecimenNo", SqlDbType.VarChar, 20))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("VisitDate", visitDate))
                    .Add(New ParameterSQL("SpecimenNo", SqlDbType.VarChar, 20))
                End With
            End If

            Me.ReadData = Me.Read("uspGetSpecimenNo", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("SpecimenNo")) Then
                    Return CStr(Me.ReadData("SpecimenNo"))
                Else : Return String.Empty
                End If

            Else : Return Nothing
            End If

        End Function

        Public Function GetSpecimenNo(patientNo As String) As String
            Return Me.GetSpecimenNo(patientNo, Nothing)
        End Function

#End Region

    End Class

    Public Class LabRequestsIPD : Inherits DBConnect

#Region " Fields "

        Private m_SpecimenNo As String
        Private m_RoundNo As String

#End Region

#Region " Properties "

        Public Property SpecimenNo() As String
            Get
                Return m_SpecimenNo
            End Get
            Set(Value As String)
                m_SpecimenNo = Value
            End Set
        End Property

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertLabRequestsIPD")

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", Me.SpecimenNo))
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateLabRequestsIPD")

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", Me.SpecimenNo))
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
            End With

            'For Audit Trail
            Me.SetLogObject("LabRequestsIPD")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "SpecimenNo = '" + Me.SpecimenNo + "'"
            Dim errorPart As String = "Specimen No: " + Me.SpecimenNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "LabRequestsIPD"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("LabRequestsIPD")

            Return Parameters

        End Function

        Public Function GetLabRequestsIPD(roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
            End With

            Return Me.Load("uspGetLabRequestsIPD", "LabRequestsIPD", Parameters)

        End Function

        Public Function GetLabRequestsIPDSpecimenNo(roundNo As String) As String

            Try

                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("SpecimenNo", SqlDbType.VarChar, 20))
                End With

                Me.ReadData = Me.Read("uspGetLabRequestsIPD", Parameters)

                If Me.ReadData IsNot Nothing Then

                    If Not IsDBNull(Me.ReadData("SpecimenNo")) Then
                        Me.SpecimenNo = CStr(Me.ReadData("SpecimenNo"))
                    Else : Me.SpecimenNo = String.Empty
                    End If

                    Return Me.SpecimenNo
                Else : Return String.Empty
                End If

            Catch ex As Exception
                Throw ex

            End Try

        End Function

#End Region

    End Class

    Public Class LabRequestDetails : Inherits DBConnect

#Region " Fields "

        Private m_SpecimenNo As String
        Private m_TestCode As String
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property SpecimenNo() As String
            Get
                Return m_SpecimenNo
            End Get
            Set(Value As String)
                m_SpecimenNo = Value
            End Set
        End Property

        Public Property TestCode() As String
            Get
                Return m_TestCode
            End Get
            Set(Value As String)
                m_TestCode = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyBase.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditLabRequestDetails")

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", Me.SpecimenNo))
                .Add(New ParameterSQL("TestCode", Me.TestCode))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trial
            Me.SetLogObject("LabRequestDetails")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Me.SetCommand("uspDeleteLabRequestDetails")

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", Me.SpecimenNo))
                .Add(New ParameterSQL("TestCode", Me.TestCode))
            End With

            'For Audit Trial
            Me.SetLogObject("LabRequestDetails")

            Return Parameters

        End Function

        Public Function GetLabRequestDetails(specimenNo As String) As DataSet

            If specimenNo <> "" OrElse specimenNo <> String.Empty Then
                With Parameters
                    .Add(New ParameterSQL("SpecimenNo", specimenNo))
                End With

            ElseIf (specimenNo = "" OrElse specimenNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("SpecimenNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetLabRequestDetails", "LabRequestDetails", Parameters)

        End Function

        Public Function GetLabRequestDetails() As DataSet
            Return Me.GetLabRequestDetails(String.Empty)
        End Function

        ''' <summary>
        ''' Gets lab results that are still pending for the supplied period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetPendingLabResults(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetPendingLabResults", "LabRequestDetails", Parameters)

        End Function

        Public Function GetAllPendingLabResults(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetAllPendingLabResults", "LabRequestDetails", Parameters)

        End Function

        ''' <summary>
        ''' Gets IPD lab results that are still pending for the supplied period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPendingIPDLabResults(startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If

            Return Me.Load("uspGetPendingIPDLabResults", "LabRequestDetails", Parameters)

        End Function

        ''' <summary>
        ''' Gets all IPD lab results that are still pending
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPendingIPDLabResults() As DataSet
            Return GetPendingIPDLabResults(Nothing, Nothing)
        End Function

#End Region

    End Class

    Public Class LabResults : Inherits DBConnect

#Region " Fields "

        Private m_SpecimenNo As String
        Private m_TestCode As String
        Private m_TestDateTime As Date
        Private m_Result As String
        Private m_UnitMeasure As String
        Private m_NormalRange As String
        Private m_ResultFlagID As String
        Private m_Report As String
        Private m_LabTechnologist As String
        Private m_EntryModeID As String

#End Region

#Region " Properties "

        Public Property SpecimenNo() As String
            Get
                Return m_SpecimenNo
            End Get
            Set(Value As String)
                m_SpecimenNo = Value
            End Set
        End Property

        Public Property TestCode() As String
            Get
                Return m_TestCode
            End Get
            Set(Value As String)
                m_TestCode = Value
            End Set
        End Property

        Public Property TestDateTime() As Date
            Get
                Return m_TestDateTime
            End Get
            Set(Value As Date)
                m_TestDateTime = Value
            End Set
        End Property

        Public Property Result() As String
            Get
                Return m_Result
            End Get
            Set(value As String)
                m_Result = value
            End Set
        End Property

        Public Property UnitMeasure() As String
            Get
                Return m_UnitMeasure
            End Get
            Set(Value As String)
                m_UnitMeasure = Value
            End Set
        End Property

        Public Property NormalRange() As String
            Get
                Return m_NormalRange
            End Get
            Set(Value As String)
                m_NormalRange = Value
            End Set
        End Property

        Public Property ResultFlagID() As String
            Get
                Return m_ResultFlagID
            End Get
            Set(Value As String)
                m_ResultFlagID = Value
            End Set
        End Property

        Public Property Report() As String
            Get
                Return m_Report
            End Get
            Set(Value As String)
                m_Report = Value
            End Set
        End Property

        Public Property LabTechnologist() As String
            Get
                Return m_LabTechnologist
            End Get
            Set(value As String)
                m_LabTechnologist = value
            End Set
        End Property

        Public Property EntryModeID() As String
            Get
                Return m_EntryModeID
            End Get
            Set(Value As String)
                m_EntryModeID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyBase.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertLabResults")

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", Me.SpecimenNo))
                .Add(New ParameterSQL("TestCode", Me.TestCode))
                .Add(New ParameterSQL("TestDateTime", Me.TestDateTime))
                .Add(New ParameterSQL("Result", Me.Result))
                .Add(New ParameterSQL("UnitMeasure", Me.UnitMeasure))
                .Add(New ParameterSQL("NormalRange", Me.NormalRange))
                .Add(New ParameterSQL("ResultFlagID", Me.ResultFlagID))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("LabTechnologist", Me.LabTechnologist))
                .Add(New ParameterSQL("EntryModeID", Me.EntryModeID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateLabResults")

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", Me.SpecimenNo))
                .Add(New ParameterSQL("TestCode", Me.TestCode))
                .Add(New ParameterSQL("TestDateTime", Me.TestDateTime))
                .Add(New ParameterSQL("Result", Me.Result))
                .Add(New ParameterSQL("UnitMeasure", Me.UnitMeasure))
                .Add(New ParameterSQL("NormalRange", Me.NormalRange))
                .Add(New ParameterSQL("ResultFlagID", Me.ResultFlagID))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("LabTechnologist", Me.LabTechnologist))
                .Add(New ParameterSQL("EntryModeID", Me.EntryModeID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trial
            Me.SetLogObject("LabResults")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "SpecimenNo = '" + Me.SpecimenNo + "' and TestCode = '" + Me.TestCode + "'"
            Dim errorPart As String = "Specimen No: " + Me.SpecimenNo + " and Test Code: " + Me.TestCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "LabResults"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trial
            Me.SetLogObject("LabResults")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets all lab results for supplied specimen no, test code and visit no
        ''' </summary>
        ''' <param name="specimenNo"></param>
        ''' <param name="testCode"></param>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Private Function GetLabResults(specimenNo As String, testCode As String, visitNo As String) As DataSet

            If (specimenNo <> "" OrElse specimenNo <> String.Empty) And
                (testCode = "" OrElse testCode = String.Empty) And
                (visitNo = "" OrElse visitNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("SpecimenNo", specimenNo))
                    .Add(New ParameterSQL("TestCode", Nothing))
                    .Add(New ParameterSQL("VisitNo", Nothing))
                End With

            ElseIf (specimenNo <> "" OrElse specimenNo <> String.Empty) And
                (testCode <> "" OrElse testCode <> String.Empty) And
                (visitNo = "" OrElse visitNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("SpecimenNo", specimenNo))
                    .Add(New ParameterSQL("TestCode", testCode))
                    .Add(New ParameterSQL("VisitNo", Nothing))
                End With

            ElseIf (specimenNo = "" OrElse specimenNo = String.Empty) And
                (testCode = "" OrElse testCode = String.Empty) And
                (visitNo <> "" OrElse visitNo <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("SpecimenNo", Nothing))
                    .Add(New ParameterSQL("TestCode", Nothing))
                    .Add(New ParameterSQL("VisitNo", visitNo))
                End With

            ElseIf (specimenNo = "" OrElse specimenNo = String.Empty) And
                (testCode = "" OrElse testCode = String.Empty) And
                (visitNo = "" OrElse visitNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("SpecimenNo", Nothing))
                    .Add(New ParameterSQL("TestCode", Nothing))
                    .Add(New ParameterSQL("VisitNo", Nothing))
                End With

            End If

            Return Me.Load("uspGetLabResults", "LabResults", Parameters)

        End Function

        ''' <summary>
        ''' Gets lab results for supplied specimen no
        ''' </summary>
        ''' <param name="specimenNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetLabResults(specimenNo As String) As DataSet
            Return GetLabResults(specimenNo, String.Empty, String.Empty)
        End Function

        ''' <summary>
        ''' Gets lab tests for supplied specimen no and test code
        ''' </summary>
        ''' <param name="specimenNo"></param>
        ''' <param name="testCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetLabResults(specimenNo As String, testCode As String) As DataSet
            Return GetLabResults(specimenNo, testCode, String.Empty)
        End Function

        Public Function GetLabResultsByVisitNo(visitNo As String) As DataSet
            Return GetLabResults(String.Empty, String.Empty, visitNo)
        End Function

        ''' <summary>
        ''' Returns lab results for aparticular patient no
        ''' </summary>
        ''' <param name="patientNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetLabResultsByPatientNo(patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetLabResultsByPatientNo", "LabResults", Parameters)

        End Function

        ''' <summary>
        ''' Gets lab results that are done for the supplied period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetDoneLabResults(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetDoneLabResults", "LabResults", Parameters)

        End Function


        Private Function GetUnApprovedLabResults(specimenNo As String, testCode As String, visitNo As String) As DataSet

            If (specimenNo <> "" OrElse specimenNo <> String.Empty) And
                (testCode = "" OrElse testCode = String.Empty) And
                (visitNo = "" OrElse visitNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("SpecimenNo", specimenNo))
                    .Add(New ParameterSQL("TestCode", Nothing))
                    .Add(New ParameterSQL("VisitNo", Nothing))
                End With

            ElseIf (specimenNo <> "" OrElse specimenNo <> String.Empty) And
                (testCode <> "" OrElse testCode <> String.Empty) And
                (visitNo = "" OrElse visitNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("SpecimenNo", specimenNo))
                    .Add(New ParameterSQL("TestCode", testCode))
                    .Add(New ParameterSQL("VisitNo", Nothing))
                End With

            ElseIf (specimenNo = "" OrElse specimenNo = String.Empty) And
                (testCode = "" OrElse testCode = String.Empty) And
                (visitNo <> "" OrElse visitNo <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("SpecimenNo", Nothing))
                    .Add(New ParameterSQL("TestCode", Nothing))
                    .Add(New ParameterSQL("VisitNo", visitNo))
                End With

            ElseIf (specimenNo = "" OrElse specimenNo = String.Empty) And
                (testCode = "" OrElse testCode = String.Empty) And
                (visitNo = "" OrElse visitNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("SpecimenNo", Nothing))
                    .Add(New ParameterSQL("TestCode", Nothing))
                    .Add(New ParameterSQL("VisitNo", Nothing))
                End With

            End If

            Return Me.Load("UspGetUnApprovedLabResults", "LabResults", Parameters)

        End Function

        ''' <summary>
        ''' Gets lab un approved results for supplied specimen no
        ''' </summary>
        ''' <param name="specimenNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetUnApprovedLabResults(specimenNo As String) As DataSet
            Return GetUnApprovedLabResults(specimenNo, String.Empty, String.Empty)
        End Function


        ''' <summary>
        ''' Gets lab results that are done and up approved for the supplied period and Status
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 

        Public Function GetUnApprovedDoneLabResults(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetUnApprovedDoneLabResults", "LabResults", Parameters)

        End Function

        Public Function GetDoneLabResultsStatus(approvedStatusID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ApprovedStatusID", approvedStatusID))
            End With

            Return Me.Load("uspGetDoneLabResultsStatus", "LabResults", Parameters)

        End Function

        Public Function GetPendingLabRequestsDetails(specimenNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", specimenNo))
            End With

            Return Me.Load("uspGetPendingLabRequestsDetails", "LabRequestDetails", Parameters)

        End Function

        ''' <summary>
        ''' Gets daily Lab Results for self requests
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDoneSelfRequestLabResults(visitNo As String) As DataSet
            If (visitNo <> "" OrElse visitNo <> String.Empty) Then
                Return Me.Load("uspGetDoneSelfRequestLabResults", "LabResults", Parameters)
            Else
                Return Me.Load("uspGetDoneSelfRequestLabResults", "LabResults")
            End If
        End Function

        Public Function GetLabTestsDone(searchAgeBy As String, startDate As Date, endDate As Date, startAge As Short, endAge As Short) As DataSet

            With Parameters
                .Add(New ParameterSQL("SearchAgeBy", searchAgeBy))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("StartAge", startAge))
                .Add(New ParameterSQL("EndAge", endAge))
            End With

            Return Me.Load("uspGetLabTestsDone", "Reports", Parameters)

        End Function

        Public Function GetLabTestsResultsDone(searchAgeBy As String, startDate As Date, endDate As Date, startAge As Short, endAge As Short) As DataSet

            With Parameters
                .Add(New ParameterSQL("SearchAgeBy", searchAgeBy))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("StartAge", startAge))
                .Add(New ParameterSQL("EndAge", endAge))
            End With

            Return Me.Load("uspGetLabTestsResultsDone", "Reports", Parameters)

        End Function

        Public Function GetLabTestsDoneStatistics(searchAgeBy As String, startDate As Date, endDate As Date, startAge As Short, endAge As Short) As DataSet

            With Parameters
                .Add(New ParameterSQL("SearchAgeBy", searchAgeBy))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("StartAge", startAge))
                .Add(New ParameterSQL("EndAge", endAge))
            End With

            Return Me.Load("uspGetLabTestsDoneStatistics", "Reports", Parameters)

        End Function

        Public Function GetLabTestsResultsEXTDone(searchAgeBy As String, startDate As Date, endDate As Date, startAge As Short, endAge As Short) As DataSet

            With Parameters
                .Add(New ParameterSQL("SearchAgeBy", searchAgeBy))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("StartAge", startAge))
                .Add(New ParameterSQL("EndAge", endAge))
            End With

            Return Me.Load("uspGetLabTestsResultsEXTDone", "Reports", Parameters)

        End Function

        Public Function GetCountUnApprovedLabResults() As Integer

            Dim records As Integer = 0

            With Parameters
                .Add(New ParameterSQL("Records", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetCountUnApprovedLabResults", Parameters)

            If Not Me.ReadData Is Nothing Then
                If Not IsDBNull(Me.ReadData("Records")) Then
                    records = CInt(Me.ReadData("Records"))
                Else : records = 0
                End If
            Else : records = 0
            End If

            Return records

        End Function


#End Region

    End Class

    Public Class LabResultsEXT : Inherits DBConnect

#Region " Fields "

        Private m_SpecimenNo As String
        Private m_TestCode As String
        Private m_SubTestCode As String
        Private m_Result As String
        Private m_UnitMeasure As String
        Private m_NormalRange As String
        Private m_ResultFlagID As String
        Private m_Report As String

#End Region

#Region " Properties "

        Public Property SpecimenNo() As String
            Get
                Return m_SpecimenNo
            End Get
            Set(value As String)
                m_SpecimenNo = value
            End Set
        End Property

        Public Property TestCode() As String
            Get
                Return m_TestCode
            End Get
            Set(Value As String)
                m_TestCode = Value
            End Set
        End Property

        Public Property SubTestCode() As String
            Get
                Return m_SubTestCode
            End Get
            Set(value As String)
                m_SubTestCode = value
            End Set
        End Property

        Public Property Result() As String
            Get
                Return m_Result
            End Get
            Set(Value As String)
                m_Result = Value
            End Set
        End Property

        Public Property UnitMeasure() As String
            Get
                Return m_UnitMeasure
            End Get
            Set(Value As String)
                m_UnitMeasure = Value
            End Set
        End Property

        Public Property NormalRange() As String
            Get
                Return m_NormalRange
            End Get
            Set(Value As String)
                m_NormalRange = Value
            End Set
        End Property

        Public Property ResultFlagID() As String
            Get
                Return m_ResultFlagID
            End Get
            Set(Value As String)
                m_ResultFlagID = Value
            End Set
        End Property

        Public Property Report() As String
            Get
                Return m_Report
            End Get
            Set(value As String)
                m_Report = value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditLabResultsEXT")

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", Me.SpecimenNo))
                .Add(New ParameterSQL("TestCode", Me.TestCode))
                .Add(New ParameterSQL("SubTestCode", Me.SubTestCode))
                .Add(New ParameterSQL("Result", Me.Result))
                .Add(New ParameterSQL("UnitMeasure", Me.UnitMeasure))
                .Add(New ParameterSQL("NormalRange", Me.NormalRange))
                .Add(New ParameterSQL("ResultFlagID", Me.ResultFlagID))
                .Add(New ParameterSQL("Report", Me.Report))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "SpecimenNo = '" + Me.SpecimenNo + "' and TestCode = '" + Me.TestCode + "' and SubTestCode = '" + Me.SubTestCode + "'"
            Dim errorPart As String = "Specimen No: " + Me.SpecimenNo + " and Test Code: " + Me.TestCode + " and Sub Test Code: " + Me.SubTestCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "LabResultsEXT"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trial
            Me.SetLogObject("LabResultsEXT")

            Return Parameters

        End Function

        Public Function GetLabResultsEXT(specimenNo As String, testCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", specimenNo))
                .Add(New ParameterSQL("TestCode", testCode))
            End With

            Return Me.Load("uspGetLabResultsEXT", "LabResultsEXT", Parameters)

        End Function

#End Region

    End Class


    Public Class RejectedSpecimens : Inherits DBConnect

#Region " Fields "

        Private m_SpecimenNo As String
        Private m_VisitNo As String
        Private m_RejectectionReasonID As String
        Private m_RejectionDate As Date
        Private m_RejectedAt As String
        Private m_RejectedBy As String
        Private m_IsReAccepted As Boolean
        Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property SpecimenNo() As String
            Get
                Return m_SpecimenNo
            End Get
            Set(ByVal Value As String)
                m_SpecimenNo = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property RejectectionReasonID() As String
            Get
                Return m_RejectectionReasonID
            End Get
            Set(ByVal Value As String)
                m_RejectectionReasonID = Value
            End Set
        End Property

        Public Property RejectionDate() As Date
            Get
                Return m_RejectionDate
            End Get
            Set(ByVal Value As Date)
                m_RejectionDate = Value
            End Set
        End Property

        Public Property RejectedAt() As String
            Get
                Return m_RejectedAt
            End Get
            Set(ByVal Value As String)
                m_RejectedAt = Value
            End Set
        End Property

        Public Property RejectedBy() As String
            Get
                Return m_RejectedBy
            End Get
            Set(ByVal Value As String)
                m_RejectedBy = Value
            End Set
        End Property

        Public Property IsReAccepted() As Boolean
            Get
                Return m_IsReAccepted
            End Get
            Set(ByVal Value As Boolean)
                m_IsReAccepted = Value
            End Set
        End Property

        Public Property RecordDateTime() As Date
            Get
                Return m_RecordDateTime
            End Get
            Set(ByVal Value As Date)
                m_RecordDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertRejectedSpecimens")

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", Me.SpecimenNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("RejectectionReasonID", Me.RejectectionReasonID))
                .Add(New ParameterSQL("RejectionDate", Me.RejectionDate))
                .Add(New ParameterSQL("RejectedAt", Me.RejectedAt))
                .Add(New ParameterSQL("RejectedBy", Me.RejectedBy))
                .Add(New ParameterSQL("IsReAccepted", Me.IsReAccepted))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateRejectedSpecimens")

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", Me.SpecimenNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("RejectectionReasonID", Me.RejectectionReasonID))
                .Add(New ParameterSQL("RejectionDate", Me.RejectionDate))
                .Add(New ParameterSQL("RejectedAt", Me.RejectedAt))
                .Add(New ParameterSQL("RejectedBy", Me.RejectedBy))
                .Add(New ParameterSQL("IsReAccepted", Me.IsReAccepted))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            'For Audit Trail
            Me.SetLogObject("RejectedSpecimens")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "SpecimenNo = '" + Me.SpecimenNo + "'"
            Dim errorPart As String = "Specimen No: " + Me.SpecimenNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "RejectedSpecimens"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("RejectedSpecimens")

            Return Parameters

        End Function

        Public Function GetRejectedSpecimens(ByVal specimenNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", specimenNo))
            End With

            Return Me.Load("uspGetRejectedSpecimens", "RejectedSpecimens", Parameters)

        End Function

#End Region



    End Class


    Public Class LabTestsEXTPossibleResults : Inherits DBConnect

#Region " Fields "

        Private m_TestCode As String
        Private m_SubTestCode As String
        Private m_PossibleResults As String

#End Region

#Region " Properties "

        Public Property TestCode() As String
            Get
                Return m_TestCode
            End Get
            Set(ByVal Value As String)
                m_TestCode = Value
            End Set
        End Property

        Public Property SubTestCode() As String
            Get
                Return m_SubTestCode
            End Get
            Set(ByVal Value As String)
                m_SubTestCode = Value
            End Set
        End Property

        Public Property PossibleResults() As String
            Get
                Return m_PossibleResults
            End Get
            Set(ByVal Value As String)
                m_PossibleResults = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertLabTestsEXTPossibleResults")

            With Parameters
                .Add(New ParameterSQL("TestCode", Me.TestCode))
                .Add(New ParameterSQL("SubTestCode", Me.SubTestCode))
                .Add(New ParameterSQL("PossibleResults", Me.PossibleResults))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateLabTestsEXTPossibleResults")

            With Parameters
                .Add(New ParameterSQL("TestCode", Me.TestCode))
                .Add(New ParameterSQL("SubTestCode", Me.SubTestCode))
                .Add(New ParameterSQL("PossibleResults", Me.PossibleResults))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("LabTestsEXTPossibleResults")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "TestCode = '" + Me.TestCode + "' and SubTestCode = '" + Me.SubTestCode + "' and PossibleResults = '" + Me.PossibleResults + "'"
            Dim errorPart As String = "TestCode: " + Me.TestCode + " and SubTestCode: " + Me.SubTestCode + " and PossibleResults: " + Me.PossibleResults

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "LabTestsEXTPossibleResults"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("LabTestsEXTPossibleResults")

            Return Parameters

        End Function

        Public Function GetLabTestsEXTPossibleResults(ByVal testCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("TestCode", testCode))
           
            End With

            Return Me.Load("uspGetLabTestsEXTPossibleResults", "LabTestsEXTPossibleResults", Parameters)

        End Function

#End Region



    End Class


    Public Class ApprovedLabResults : Inherits DBConnect

#Region " Fields "

        Private m_SpecimenNo As String
        Private m_TestCode As String
        Private m_TestName As String

#End Region

#Region " Properties "

        Public Property SpecimenNo() As String
            Get
                Return m_SpecimenNo
            End Get
            Set(ByVal Value As String)
                m_SpecimenNo = Value
            End Set
        End Property

        Public Property TestCode() As String
            Get
                Return m_TestCode
            End Get
            Set(ByVal Value As String)
                m_TestCode = Value
            End Set
        End Property

        Public Property TestName() As String
            Get
                Return m_TestName
            End Get
            Set(ByVal Value As String)
                m_TestName = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertApprovedLabResults")

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", Me.SpecimenNo))
                .Add(New ParameterSQL("TestCode", Me.TestCode))
                .Add(New ParameterSQL("TestName", Me.TestName))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "SpecimenNo = '" + Me.SpecimenNo + "' and TestCode = '" + Me.TestCode + "'"
            Dim errorPart As String = "SpecimenNo: " + Me.SpecimenNo + " and TestCode: " + Me.TestCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ApprovedLabResults"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ApprovedLabResults")

            Return Parameters

        End Function

        Public Function GetApprovedLabResults(ByVal specimenNo As String, ByVal testCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("SpecimenNo", specimenNo))
                .Add(New ParameterSQL("TestCode", testCode))
            End With

            Return Me.Load("uspGetApprovedLabResults", "ApprovedLabResults", Parameters)

        End Function

#End Region



    End Class

    Public Class RadiologyReports : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_ExamDateTime As Date
        Private m_Indication As String
        Private m_Report As String
        Private m_Conclusion As String
        Private m_Radiologist As String
        Private m_RadiologyTitleID As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ExamDateTime() As Date
            Get
                Return m_ExamDateTime
            End Get
            Set(Value As Date)
                m_ExamDateTime = Value
            End Set
        End Property

        Public Property Indication() As String
            Get
                Return m_Indication
            End Get
            Set(Value As String)
                m_Indication = Value
            End Set
        End Property

        Public Property Report() As String
            Get
                Return m_Report
            End Get
            Set(Value As String)
                m_Report = Value
            End Set
        End Property

        Public Property Conclusion() As String
            Get
                Return m_Conclusion
            End Get
            Set(Value As String)
                m_Conclusion = Value
            End Set
        End Property

        Public Property Radiologist() As String
            Get
                Return m_Radiologist
            End Get
            Set(Value As String)
                m_Radiologist = Value
            End Set
        End Property

        Public Property RadiologyTitleID() As String
            Get
                Return m_RadiologyTitleID
            End Get
            Set(Value As String)
                m_RadiologyTitleID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertRadiologyReports")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ExamDateTime", Me.ExamDateTime))
                .Add(New ParameterSQL("Indication", Me.Indication))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("Conclusion", Me.Conclusion))
                .Add(New ParameterSQL("Radiologist", Me.Radiologist))
                .Add(New ParameterSQL("RadiologyTitleID", Me.RadiologyTitleID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateRadiologyReports")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ExamDateTime", Me.ExamDateTime))
                .Add(New ParameterSQL("Indication", Me.Indication))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("Conclusion", Me.Conclusion))
                .Add(New ParameterSQL("Radiologist", Me.Radiologist))
                .Add(New ParameterSQL("RadiologyTitleID", Me.RadiologyTitleID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("RadiologyReports")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "RadiologyReports"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("RadiologyReports")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets the radiology reports correponding to the supplied visitno, itemcode and itemcategory id.
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <param name="itemCode"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetRadiologyReports(visitNo As String, itemCode As String, itemCategoryID As String) As DataSet

            If (visitNo <> "" OrElse visitNo <> String.Empty) And
               (itemCode = "" OrElse itemCode = String.Empty) And
               (itemCategoryID = "" OrElse itemCategoryID = String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With

            ElseIf (visitNo <> "" OrElse visitNo <> String.Empty) And
           (itemCode <> "" OrElse itemCode <> String.Empty) And
           (itemCategoryID <> "" OrElse itemCategoryID <> String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With

            End If

            Return Me.Load("uspGetRadiologyReports", "RadiologyReports", Parameters)

        End Function

        ''' <summary>
        ''' Returns radiology reports corresponding to the supplied visit number
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetRadiologyReports(visitNo As String) As DataSet
            Return GetRadiologyReports(visitNo, String.Empty, String.Empty)
        End Function

        ''' <summary>
        ''' Gets daily radiology reports for self requests
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetSelfRequestRadiologyReports(visitNo As String) As DataSet
            If (visitNo <> "" OrElse visitNo <> String.Empty) Then
                Return Me.Load("uspGetSelfRequestRadiologyReports", "RadiologyReports", Parameters)
            Else
                Return Me.Load("uspGetSelfRequestRadiologyReports", "RadiologyReports")
            End If
        End Function

#End Region

    End Class

    Public Class PathologyReports : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_ReportTypeID As String
        Private m_ExamDateTime As Date
        Private m_Indication As String
        Private m_Diagnosis As String
        Private m_Macroscopic As String
        Private m_Microscopic As String
        Private m_Pathologist As String
        Private m_PathologyTitleID As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ReportTypeID() As String
            Get
                Return m_ReportTypeID
            End Get
            Set(Value As String)
                m_ReportTypeID = Value
            End Set
        End Property

        Public Property ExamDateTime() As Date
            Get
                Return m_ExamDateTime
            End Get
            Set(Value As Date)
                m_ExamDateTime = Value
            End Set
        End Property

        Public Property Indication() As String
            Get
                Return m_Indication
            End Get
            Set(Value As String)
                m_Indication = Value
            End Set
        End Property

        Public Property Diagnosis() As String
            Get
                Return m_Diagnosis
            End Get
            Set(Value As String)
                m_Diagnosis = Value
            End Set
        End Property

        Public Property Macroscopic() As String
            Get
                Return m_Macroscopic
            End Get
            Set(ByVal Value As String)
                m_Macroscopic = Value
            End Set
        End Property

        Public Property Microscopic() As String
            Get
                Return m_Microscopic
            End Get
            Set(ByVal Value As String)
                m_Microscopic = Value
            End Set
        End Property


        Public Property Pathologist() As String
            Get
                Return m_Pathologist
            End Get
            Set(Value As String)
                m_Pathologist = Value
            End Set
        End Property

        Public Property PathologyTitleID() As String
            Get
                Return m_PathologyTitleID
            End Get
            Set(Value As String)
                m_PathologyTitleID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPathologyReports")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReportTypeID", Me.ReportTypeID))
                .Add(New ParameterSQL("ExamDateTime", Me.ExamDateTime))
                .Add(New ParameterSQL("Indication", Me.Indication))
                .Add(New ParameterSQL("Diagnosis", Me.Diagnosis))
                .Add(New ParameterSQL("Microscopic ", Me.Microscopic))
                .Add(New ParameterSQL("Macroscopic", Me.Macroscopic))
                .Add(New ParameterSQL("Pathologist", Me.Pathologist))
                .Add(New ParameterSQL("PathologyTitleID", Me.PathologyTitleID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePathologyReports")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReportTypeID", Me.ReportTypeID))
                .Add(New ParameterSQL("ExamDateTime", Me.ExamDateTime))
                .Add(New ParameterSQL("Indication", Me.Indication))
                .Add(New ParameterSQL("Diagnosis", Me.Diagnosis))
                .Add(New ParameterSQL("Microscopic ", Me.Microscopic))
                .Add(New ParameterSQL("Macroscopic", Me.Macroscopic))
                .Add(New ParameterSQL("Pathologist", Me.Pathologist))
                .Add(New ParameterSQL("PathologyTitleID", Me.PathologyTitleID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("PathologyReports")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "VisitNo: " + Me.VisitNo + " and ItemCode: " + Me.ItemCode + " and ItemCategoryID: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PathologyReports"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PathologyReports")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets the pathology reports correponding to the supplied visitno, itemcode and itemcategory id.
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <param name="itemCode"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetPathologyReports(visitNo As String, itemCode As String, itemCategoryID As String) As DataSet

            If (visitNo <> "" OrElse visitNo <> String.Empty) And
               (itemCode = "" OrElse itemCode = String.Empty) And
               (itemCategoryID = "" OrElse itemCategoryID = String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With

            ElseIf (visitNo <> "" OrElse visitNo <> String.Empty) And
           (itemCode <> "" OrElse itemCode <> String.Empty) And
           (itemCategoryID <> "" OrElse itemCategoryID <> String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With

            End If

            Return Me.Load("uspGetPathologyReports", "PathologyReports", Parameters)

        End Function

        ''' <summary>
        ''' Returns pathology reports corresponding to the supplied visit number
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPathologyReports(visitNo As String) As DataSet
            Return GetPathologyReports(visitNo, String.Empty, String.Empty)
        End Function

#End Region

    End Class


    Public Class IPDPathologyReports : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_ReportTypeID As String
        Private m_ExamDateTime As Date
        Private m_Indication As String
        Private m_Diagnosis As String
        Private m_Macroscopic As String
        Private m_Microscopic As String
        Private m_Pathologist As String
        Private m_PathologyTitleID As String

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(ByVal Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ReportTypeID() As String
            Get
                Return m_ReportTypeID
            End Get
            Set(ByVal Value As String)
                m_ReportTypeID = Value
            End Set
        End Property

        Public Property ExamDateTime() As Date
            Get
                Return m_ExamDateTime
            End Get
            Set(ByVal Value As Date)
                m_ExamDateTime = Value
            End Set
        End Property

        Public Property Indication() As String
            Get
                Return m_Indication
            End Get
            Set(ByVal Value As String)
                m_Indication = Value
            End Set
        End Property

        Public Property Diagnosis() As String
            Get
                Return m_Diagnosis
            End Get
            Set(ByVal Value As String)
                m_Diagnosis = Value
            End Set
        End Property

        Public Property Macroscopic() As String
            Get
                Return m_Macroscopic
            End Get
            Set(ByVal Value As String)
                m_Macroscopic = Value
            End Set
        End Property

        Public Property Microscopic() As String
            Get
                Return m_Microscopic
            End Get
            Set(ByVal Value As String)
                m_Microscopic = Value
            End Set
        End Property

        Public Property Pathologist() As String
            Get
                Return m_Pathologist
            End Get
            Set(ByVal Value As String)
                m_Pathologist = Value
            End Set
        End Property

        Public Property PathologyTitleID() As String
            Get
                Return m_PathologyTitleID
            End Get
            Set(ByVal Value As String)
                m_PathologyTitleID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertIPDPathologyReports")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReportTypeID", Me.ReportTypeID))
                .Add(New ParameterSQL("ExamDateTime", Me.ExamDateTime))
                .Add(New ParameterSQL("Indication", Me.Indication))
                .Add(New ParameterSQL("Diagnosis", Me.Diagnosis))
                .Add(New ParameterSQL("Microscopic ", Me.Microscopic))
                .Add(New ParameterSQL("Macroscopic", Me.Macroscopic))
                .Add(New ParameterSQL("Pathologist", Me.Pathologist))
                .Add(New ParameterSQL("PathologyTitleID", Me.PathologyTitleID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDPathologyReports")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReportTypeID", Me.ReportTypeID))
                .Add(New ParameterSQL("ExamDateTime", Me.ExamDateTime))
                .Add(New ParameterSQL("Indication", Me.Indication))
                .Add(New ParameterSQL("Diagnosis", Me.Diagnosis))
                .Add(New ParameterSQL("Microscopic ", Me.Microscopic))
                .Add(New ParameterSQL("Macroscopic", Me.Macroscopic))
                .Add(New ParameterSQL("Pathologist", Me.Pathologist))
                .Add(New ParameterSQL("PathologyTitleID", Me.PathologyTitleID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDPathologyReports")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RoundNo = '" + Me.RoundNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "RoundNo: " + Me.RoundNo + " and ItemCode: " + Me.ItemCode + " and ItemCategoryID: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDPathologyReports"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDPathologyReports")

            Return Parameters

        End Function

   Public Function GetIPDPathologyReports(roundNo As String, itemCode As String, itemCategoryID As String) As DataSet

            If (roundNo <> "" OrElse roundNo <> String.Empty) And
               (itemCode = "" OrElse itemCode = String.Empty) And
               (itemCategoryID = "" OrElse itemCategoryID = String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With

            ElseIf (roundNo <> "" OrElse roundNo <> String.Empty) And
           (itemCode <> "" OrElse itemCode <> String.Empty) And
           (itemCategoryID <> "" OrElse itemCategoryID <> String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With

            End If

            Return Me.Load("uspGetIPDPathologyReports", "IPDPathologyReports", Parameters)

        End Function

        ''' <summary>
        ''' Returns pathology reports corresponding to the supplied visit number
        ''' </summary>
        ''' <param name="roundNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDPathologyReports(roundNo As String) As DataSet
            Return GetIPDPathologyReports(roundNo, String.Empty, String.Empty)
        End Function

#End Region

    End Class

    Public Class AllImages : Inherits DBConnect

#Region " Fields "

        Private m_ReferenceNo As String
        Private m_Details As String
        Private m_Age As String
        Private m_GenderID As String
        Private m_Image As Byte()
        Private m_RequestedBy As String
        Private m_Category As String
        Private m_Description As String
        Private m_StudyID As String
        Private m_ProcessedBy As String
        Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property ReferenceNo() As String
            Get
                Return m_ReferenceNo
            End Get
            Set(ByVal Value As String)
                m_ReferenceNo = Value
            End Set
        End Property

        Public Property Details() As String
            Get
                Return m_Details
            End Get
            Set(ByVal Value As String)
                m_Details = Value
            End Set
        End Property

        Public Property Age() As String
            Get
                Return m_Age
            End Get
            Set(ByVal Value As String)
                m_Age = Value
            End Set
        End Property

        Public Property GenderID() As String
            Get
                Return m_GenderID
            End Get
            Set(ByVal Value As String)
                m_GenderID = Value
            End Set
        End Property

        Public Property Image() As Byte()
            Get
                Return m_Image
            End Get
            Set(ByVal Value As Byte())
                m_Image = Value
            End Set
        End Property

        Public Property RequestedBy() As String
            Get
                Return m_RequestedBy
            End Get
            Set(ByVal Value As String)
                m_RequestedBy = Value
            End Set
        End Property

        Public Property Category() As String
            Get
                Return m_Category
            End Get
            Set(ByVal Value As String)
                m_Category = Value
            End Set
        End Property

        Public Property Description() As String
            Get
                Return m_Description
            End Get
            Set(ByVal Value As String)
                m_Description = Value
            End Set
        End Property

        Public Property StudyID() As String
            Get
                Return m_StudyID
            End Get
            Set(ByVal Value As String)
                m_StudyID = Value
            End Set
        End Property

        Public Property ProcessedBy() As String
            Get
                Return m_ProcessedBy
            End Get
            Set(ByVal Value As String)
                m_ProcessedBy = Value
            End Set
        End Property

        Public Property RecordDateTime() As Date
            Get
                Return m_RecordDateTime
            End Get
            Set(ByVal Value As Date)
                m_RecordDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertAllImages")

            With Parameters
                .Add(New ParameterSQL("ReferenceNo", Me.ReferenceNo))
                .Add(New ParameterSQL("Details", Me.Details))
                .Add(New ParameterSQL("Age", Me.Age))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("Image", Me.Image))
                .Add(New ParameterSQL("RequestedBy", Me.RequestedBy))
                .Add(New ParameterSQL("Category", Me.Category))
                .Add(New ParameterSQL("Description", Me.Description))
                .Add(New ParameterSQL("StudyID", Me.StudyID))
                .Add(New ParameterSQL("ProcessedBy", Me.ProcessedBy))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateAllImages")

            With Parameters
                .Add(New ParameterSQL("ReferenceNo", Me.ReferenceNo))
                .Add(New ParameterSQL("Details", Me.Details))
                .Add(New ParameterSQL("Age", Me.Age))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("Image", Me.Image))
                .Add(New ParameterSQL("RequestedBy", Me.RequestedBy))
                .Add(New ParameterSQL("Category", Me.Category))
                .Add(New ParameterSQL("Description", Me.Description))
                .Add(New ParameterSQL("StudyID", Me.StudyID))
                .Add(New ParameterSQL("ProcessedBy", Me.ProcessedBy))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            'For Audit Trail
            Me.SetLogObject("AllImages")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ReferenceNo = '" + Me.ReferenceNo + "' and RecordDateTime = '" + Me.RecordDateTime.ToString() + "'"
            Dim errorPart As String = "ReferenceNo: " + Me.ReferenceNo + " and RecordDateTime: " + Me.RecordDateTime.ToString()

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "AllImages"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("AllImages")

            Return Parameters

        End Function

        Public Function GetAllImages(ByVal referenceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ReferenceNo", referenceNo))
            End With

            Return Me.Load("uspGetAllImages", "AllImages", Parameters)

        End Function

#End Region



    End Class

    Public Class PathologyImages : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ImageName As String
        Private m_PathologyImage As Byte()

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ImageName() As String
            Get
                Return m_ImageName
            End Get

            Set(value As String)
                m_ImageName = value
            End Set
        End Property

        Public Property PathologyImage() As Byte()
            Get
                Return m_PathologyImage
            End Get
            Set(Value As Byte())
                m_PathologyImage = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPathologyImages")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ImageName", Me.ImageName))
                .Add(New ParameterSQL("PathologyImage", Me.PathologyImage))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePathologyImages")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ImageName", Me.ImageName))
                .Add(New ParameterSQL("PathologyImage", Me.PathologyImage))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("PathologyImages")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and ImageName = '" + Me.ImageName + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo + " and Image Name: " + Me.ImageName

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PathologyImages"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PathologyImages")

            Return Parameters
        End Function

        Public Function GetPathologyImages(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetPathologyImages", "PathologyImages", Parameters)

        End Function

#End Region

    End Class

    Public Class ResearchRoutingForm : Inherits DBConnect

#Region " Fields "

        Private m_UCIID As String
        Private m_PatientNo As String
        Private m_FirstName As String
        Private m_LastName As String
        Private m_OtherName As String
        Private m_ReferalInitials As String
        Private m_GenderID As String
        Private m_BirthDate As Date
        Private m_VillageCode As String
        Private m_ReferralDate As Date
        Private m_ReferralStudyCodeID As String
        Private m_ReferralStudyName As String
        Private m_Diagnosis As String
        Private m_HealthUnitCode As String
        Private m_ReferredBy As String
        Private m_PatientScreenedBy As String
        Private m_ReferralInitials As String
        Private m_EligibleForScreeningID As String
        Private m_ExclusionReason As String
        Private m_PatientReferedTo As String
        Private m_ReferredDate As Date
        Private m_SCRNo As String
        Private m_PID As String
        Private m_SID As String

#End Region

#Region " Properties "

        Public Property UCIID() As String
            Get
                Return m_UCIID
            End Get
            Set(Value As String)
                m_UCIID = Value
            End Set
        End Property

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(Value As String)
                m_PatientNo = Value
            End Set
        End Property


        Public Property FirstName() As String
            Get
                Return m_FirstName
            End Get
            Set(Value As String)
                m_FirstName = Value
            End Set
        End Property

        Public Property LastName() As String
            Get
                Return m_LastName
            End Get
            Set(Value As String)
                m_LastName = Value
            End Set
        End Property

        Public Property OtherName() As String
            Get
                Return m_OtherName
            End Get
            Set(Value As String)
                m_OtherName = Value
            End Set
        End Property

        Public Property ReferalInitials() As String
            Get
                Return m_ReferalInitials
            End Get
            Set(Value As String)
                m_ReferalInitials = Value
            End Set
        End Property

        Public Property GenderID() As String
            Get
                Return m_GenderID
            End Get
            Set(Value As String)
                m_GenderID = Value
            End Set
        End Property

        Public Property BirthDate() As Date
            Get
                Return m_BirthDate
            End Get
            Set(Value As Date)
                m_BirthDate = Value
            End Set
        End Property

        Public Property VillageCode() As String
            Get
                Return m_VillageCode
            End Get
            Set(Value As String)
                m_VillageCode = Value
            End Set
        End Property

        Public Property ReferralDate() As Date
            Get
                Return m_ReferralDate
            End Get
            Set(Value As Date)
                m_ReferralDate = Value
            End Set
        End Property

        Public Property ReferralStudyCodeID() As String
            Get
                Return m_ReferralStudyCodeID
            End Get
            Set(Value As String)
                m_ReferralStudyCodeID = Value
            End Set
        End Property

        Public Property ReferralStudyName() As String
            Get
                Return m_ReferralStudyName
            End Get
            Set(Value As String)
                m_ReferralStudyName = Value
            End Set
        End Property

        Public Property Diagnosis() As String
            Get
                Return m_Diagnosis
            End Get
            Set(Value As String)
                m_Diagnosis = Value
            End Set
        End Property

        Public Property HealthUnitCode() As String
            Get
                Return m_HealthUnitCode
            End Get
            Set(Value As String)
                m_HealthUnitCode = Value
            End Set
        End Property

        Public Property ReferredBy() As String
            Get
                Return m_ReferredBy
            End Get
            Set(Value As String)
                m_ReferredBy = Value
            End Set
        End Property

        Public Property PatientScreenedBy() As String
            Get
                Return m_PatientScreenedBy
            End Get
            Set(Value As String)
                m_PatientScreenedBy = Value
            End Set
        End Property

        Public Property ReferralInitials() As String
            Get
                Return m_ReferralInitials
            End Get
            Set(Value As String)
                m_ReferralInitials = Value
            End Set
        End Property

        Public Property EligibleForScreeningID() As String
            Get
                Return m_EligibleForScreeningID
            End Get
            Set(Value As String)
                m_EligibleForScreeningID = Value
            End Set
        End Property

        Public Property ExclusionReason() As String
            Get
                Return m_ExclusionReason
            End Get
            Set(Value As String)
                m_ExclusionReason = Value
            End Set
        End Property

        Public Property PatientReferedTo() As String
            Get
                Return m_PatientReferedTo
            End Get
            Set(Value As String)
                m_PatientReferedTo = Value
            End Set
        End Property

        Public Property ReferredDate() As Date
            Get
                Return m_ReferredDate
            End Get
            Set(Value As Date)
                m_ReferredDate = Value
            End Set
        End Property

        Public Property SCRNo() As String
            Get
                Return m_SCRNo
            End Get
            Set(Value As String)
                m_SCRNo = Value
            End Set
        End Property

        Public Property PID() As String
            Get
                Return m_PID
            End Get
            Set(Value As String)
                m_PID = Value
            End Set
        End Property

        Public Property SID() As String
            Get
                Return m_SID
            End Get
            Set(Value As String)
                m_SID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertResearchRoutingForm")

            With Parameters
                .Add(New ParameterSQL("UCIID", Me.UCIID))
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("FirstName", Me.FirstName))
                .Add(New ParameterSQL("LastName", Me.LastName))
                .Add(New ParameterSQL("OtherName", Me.OtherName))
                .Add(New ParameterSQL("ReferalInitials", Me.ReferalInitials))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("BirthDate", Me.BirthDate))
                .Add(New ParameterSQL("VillageCode", Me.VillageCode))
                .Add(New ParameterSQL("ReferralDate", Me.ReferralDate))
                .Add(New ParameterSQL("ReferralStudyCodeID", Me.ReferralStudyCodeID))
                .Add(New ParameterSQL("ReferralStudyName", Me.ReferralStudyName))
                .Add(New ParameterSQL("Diagnosis", Me.Diagnosis))
                .Add(New ParameterSQL("HealthUnitCode", Me.HealthUnitCode))
                .Add(New ParameterSQL("ReferredBy", Me.ReferredBy))
                .Add(New ParameterSQL("PatientScreenedBy", Me.PatientScreenedBy))
                .Add(New ParameterSQL("ReferralInitials", Me.ReferralInitials))
                .Add(New ParameterSQL("EligibleForScreeningID", Me.EligibleForScreeningID))
                .Add(New ParameterSQL("ExclusionReason", Me.ExclusionReason))
                .Add(New ParameterSQL("PatientReferedTo", Me.PatientReferedTo))
                .Add(New ParameterSQL("ReferredDate", Me.ReferredDate))
                .Add(New ParameterSQL("SCRNo", Me.SCRNo))
                .Add(New ParameterSQL("PID", Me.PID))
                .Add(New ParameterSQL("SID", Me.SID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateResearchRoutingForm")

            With Parameters
                .Add(New ParameterSQL("UCIID", Me.UCIID))
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("FirstName", Me.FirstName))
                .Add(New ParameterSQL("LastName", Me.LastName))
                .Add(New ParameterSQL("OtherName", Me.OtherName))
                .Add(New ParameterSQL("ReferalInitials", Me.ReferalInitials))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("BirthDate", Me.BirthDate))
                .Add(New ParameterSQL("VillageCode", Me.VillageCode))
                .Add(New ParameterSQL("ReferralDate", Me.ReferralDate))
                .Add(New ParameterSQL("ReferralStudyCodeID", Me.ReferralStudyCodeID))
                .Add(New ParameterSQL("ReferralStudyName", Me.ReferralStudyName))
                .Add(New ParameterSQL("Diagnosis", Me.Diagnosis))
                .Add(New ParameterSQL("HealthUnitCode", Me.HealthUnitCode))
                .Add(New ParameterSQL("ReferredBy", Me.ReferredBy))
                .Add(New ParameterSQL("PatientScreenedBy", Me.PatientScreenedBy))
                .Add(New ParameterSQL("ReferralInitials", Me.ReferralInitials))
                .Add(New ParameterSQL("EligibleForScreeningID", Me.EligibleForScreeningID))
                .Add(New ParameterSQL("ExclusionReason", Me.ExclusionReason))
                .Add(New ParameterSQL("PatientReferedTo", Me.PatientReferedTo))
                .Add(New ParameterSQL("ReferredDate", Me.ReferredDate))
                .Add(New ParameterSQL("SCRNo", Me.SCRNo))
                .Add(New ParameterSQL("PID", Me.PID))
                .Add(New ParameterSQL("SID", Me.SID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("ResearchRoutingForm")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "UCIID = '" + Me.UCIID + "'"
            Dim errorPart As String = "UCI ID: " + Me.UCIID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ResearchRoutingForm"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ResearchRoutingForm")

            Return Parameters

        End Function

        Public Function GetResearchRoutingForm(uCIID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("UCIID", uCIID))
            End With

            Return Me.Load("uspGetResearchRoutingForm", "ResearchRoutingForm", Parameters)

        End Function

        Public Function GetNextResearchRoutingFormID() As Integer

            With Parameters
                .Add(New ParameterSQL("UCINo", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextResearchRoutingFormID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("UCINo")) Then
                    Return CInt(Me.ReadData("UCINo"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function


        Public Function GetPeriodicResearchRoutingForm(startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet

            If startDate Is Nothing AndAlso endDate Is Nothing Then
                With Parameters
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            End If


            Return Me.Load("uspGetPeriodicResearchRoutingForm", "ResearchRoutingForm", Parameters)

        End Function

        Public Function GetPeriodicResearchRoutingForm() As DataSet

            Return Me.GetPeriodicResearchRoutingForm(Nothing, Nothing)

        End Function


#End Region

    End Class

    Public Class EnrollmentInformation : Inherits DBConnect

#Region " Fields "

        Private m_UCIID As String
        Private m_ReferralStudyCodeID As String
        Private m_EnrolledID As String
        Private m_CoEnrolledID As String
        Private m_CoEnrolledStudyCodeID As String
        Private m_CCInitials As String
        Private m_ExclusionReason As String
        Private m_EnrollmentDate As Date
        Private m_PatientReferred As String
        Private m_ReferredDate As Date

#End Region

#Region " Properties "

        Public Property UCIID() As String
            Get
                Return m_UCIID
            End Get
            Set(Value As String)
                m_UCIID = Value
            End Set
        End Property

        Public Property ReferralStudyCodeID() As String
            Get
                Return m_ReferralStudyCodeID
            End Get
            Set(Value As String)
                m_ReferralStudyCodeID = Value
            End Set
        End Property

        Public Property EnrolledID() As String
            Get
                Return m_EnrolledID
            End Get
            Set(Value As String)
                m_EnrolledID = Value
            End Set
        End Property

        Public Property CoEnrolledID() As String
            Get
                Return m_CoEnrolledID
            End Get
            Set(Value As String)
                m_CoEnrolledID = Value
            End Set
        End Property

        Public Property CoEnrolledStudyCodeID() As String
            Get
                Return m_CoEnrolledStudyCodeID
            End Get
            Set(Value As String)
                m_CoEnrolledStudyCodeID = Value
            End Set
        End Property

        Public Property CCInitials() As String
            Get
                Return m_CCInitials
            End Get
            Set(Value As String)
                m_CCInitials = Value
            End Set
        End Property

        Public Property ExclusionReason() As String
            Get
                Return m_ExclusionReason
            End Get
            Set(Value As String)
                m_ExclusionReason = Value
            End Set
        End Property

        Public Property EnrollmentDate() As Date
            Get
                Return m_EnrollmentDate
            End Get
            Set(Value As Date)
                m_EnrollmentDate = Value
            End Set
        End Property

        Public Property PatientReferred() As String
            Get
                Return m_PatientReferred
            End Get
            Set(Value As String)
                m_PatientReferred = Value
            End Set
        End Property

        Public Property ReferredDate() As Date
            Get
                Return m_ReferredDate
            End Get
            Set(Value As Date)
                m_ReferredDate = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertEnrollmentInformation")

            With Parameters
                .Add(New ParameterSQL("UCIID", Me.UCIID))
                .Add(New ParameterSQL("ReferralStudyCodeID", Me.ReferralStudyCodeID))
                .Add(New ParameterSQL("EnrolledID", Me.EnrolledID))
                .Add(New ParameterSQL("CoEnrolledID", Me.CoEnrolledID))
                .Add(New ParameterSQL("CoEnrolledStudyCodeID", Me.CoEnrolledStudyCodeID))
                .Add(New ParameterSQL("CCInitials", Me.CCInitials))
                .Add(New ParameterSQL("ExclusionReason", Me.ExclusionReason))
                .Add(New ParameterSQL("EnrollmentDate", Me.EnrollmentDate))
                .Add(New ParameterSQL("PatientReferred", Me.PatientReferred))
                .Add(New ParameterSQL("ReferredDate", Me.ReferredDate))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateEnrollmentInformation")

            With Parameters
                .Add(New ParameterSQL("UCIID", Me.UCIID))
                .Add(New ParameterSQL("ReferralStudyCodeID", Me.ReferralStudyCodeID))
                .Add(New ParameterSQL("EnrolledID", Me.EnrolledID))
                .Add(New ParameterSQL("CoEnrolledID", Me.CoEnrolledID))
                .Add(New ParameterSQL("CoEnrolledStudyCodeID", Me.CoEnrolledStudyCodeID))
                .Add(New ParameterSQL("CCInitials", Me.CCInitials))
                .Add(New ParameterSQL("ExclusionReason", Me.ExclusionReason))
                .Add(New ParameterSQL("EnrollmentDate", Me.EnrollmentDate))
                .Add(New ParameterSQL("PatientReferred", Me.PatientReferred))
                .Add(New ParameterSQL("ReferredDate", Me.ReferredDate))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("EnrollmentInformation")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "UCIID = '" + Me.UCIID + "' and ReferralStudyCodeID = '" + Me.ReferralStudyCodeID + "'"
            Dim errorPart As String = "UCIID: " + Me.UCIID + " and Referral Study Code: " + Me.ReferralStudyCodeID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "EnrollmentInformation"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("EnrollmentInformation")

            Return Parameters

        End Function

        Public Function GetEnrollmentInformation(uCIID As String, referralStudyCodeID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("UCIID", uCIID))
                .Add(New ParameterSQL("ReferralStudyCodeID", referralStudyCodeID))
            End With

            Return Me.Load("uspGetEnrollmentInformation", "EnrollmentInformation", Parameters)

        End Function

#End Region

    End Class

    Public Class DentalReports : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_ReportDate As Date
        Private m_Report As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ReportDate() As Date
            Get
                Return m_ReportDate
            End Get
            Set(Value As Date)
                m_ReportDate = Value
            End Set
        End Property

        Public Property Report() As String
            Get
                Return m_Report
            End Get
            Set(Value As String)
                m_Report = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertDentalReports")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReportDate", Me.ReportDate))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateDentalReports")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReportDate", Me.ReportDate))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("DentalReports")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "DentalReports"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("DentalReports")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets the dental reports correponding to the supplied visitno, itemcode and itemcategory id.
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <param name="itemCode"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDentalReports(visitNo As String, itemCode As String, itemCategoryID As String) As DataSet

            If (visitNo <> "" OrElse visitNo <> String.Empty) And
               (itemCode = "" OrElse itemCode = String.Empty) And
               (itemCategoryID = "" OrElse itemCategoryID = String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With

            ElseIf (visitNo <> "" OrElse visitNo <> String.Empty) And
           (itemCode <> "" OrElse itemCode <> String.Empty) And
           (itemCategoryID <> "" OrElse itemCategoryID <> String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With

            End If

            Return Me.Load("uspGetDentalReports", "DentalReports", Parameters)

        End Function

        ''' <summary>
        ''' Returns dental reports corresponding to the supplied visit number
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDentalReports(visitNo As String) As DataSet
            Return GetDentalReports(visitNo, String.Empty, String.Empty)
        End Function

#End Region

    End Class

    Public Class TheatreOperations : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_OperationDateTime As Date
        Private m_LeadSurgeon As String
        Private m_OtherSurgeon As String
        Private m_LeadAnaesthetist As String
        Private m_OtherAnaesthetist As String
        Private m_LeadNurse As String
        Private m_OtherNurse As String
        Private m_AnaesthesiaTypeID As String
        Private m_OperationClassID As String
        Private m_PreoperativeDiagnosis As String
        Private m_PlannedProcedures As String
        Private m_Report As String
        Private m_PostoperativeInstructions As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property OperationDateTime() As Date
            Get
                Return m_OperationDateTime
            End Get
            Set(Value As Date)
                m_OperationDateTime = Value
            End Set
        End Property

        Public Property LeadSurgeon() As String
            Get
                Return m_LeadSurgeon
            End Get
            Set(Value As String)
                m_LeadSurgeon = Value
            End Set
        End Property

        Public Property OtherSurgeon() As String
            Get
                Return m_OtherSurgeon
            End Get
            Set(Value As String)
                m_OtherSurgeon = Value
            End Set
        End Property

        Public Property LeadAnaesthetist() As String
            Get
                Return m_LeadAnaesthetist
            End Get
            Set(Value As String)
                m_LeadAnaesthetist = Value
            End Set
        End Property

        Public Property OtherAnaesthetist() As String
            Get
                Return m_OtherAnaesthetist
            End Get
            Set(Value As String)
                m_OtherAnaesthetist = Value
            End Set
        End Property

        Public Property LeadNurse() As String
            Get
                Return m_LeadNurse
            End Get
            Set(Value As String)
                m_LeadNurse = Value
            End Set
        End Property

        Public Property OtherNurse() As String
            Get
                Return m_OtherNurse
            End Get
            Set(Value As String)
                m_OtherNurse = Value
            End Set
        End Property

        Public Property AnaesthesiaTypeID() As String
            Get
                Return m_AnaesthesiaTypeID
            End Get
            Set(Value As String)
                m_AnaesthesiaTypeID = Value
            End Set
        End Property

        Public Property OperationClassID() As String
            Get
                Return m_OperationClassID
            End Get
            Set(Value As String)
                m_OperationClassID = Value
            End Set
        End Property

        Public Property PreoperativeDiagnosis() As String
            Get
                Return m_PreoperativeDiagnosis
            End Get
            Set(Value As String)
                m_PreoperativeDiagnosis = Value
            End Set
        End Property

        Public Property PlannedProcedures() As String
            Get
                Return m_PlannedProcedures
            End Get
            Set(Value As String)
                m_PlannedProcedures = Value
            End Set
        End Property

        Public Property Report() As String
            Get
                Return m_Report
            End Get
            Set(Value As String)
                m_Report = Value
            End Set
        End Property

        Public Property PostoperativeInstructions() As String
            Get
                Return m_PostoperativeInstructions
            End Get
            Set(Value As String)
                m_PostoperativeInstructions = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertTheatreOperations")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("OperationDateTime", Me.OperationDateTime))
                .Add(New ParameterSQL("LeadSurgeon", Me.LeadSurgeon))
                .Add(New ParameterSQL("OtherSurgeon", Me.OtherSurgeon))
                .Add(New ParameterSQL("LeadAnaesthetist", Me.LeadAnaesthetist))
                .Add(New ParameterSQL("OtherAnaesthetist", Me.OtherAnaesthetist))
                .Add(New ParameterSQL("LeadNurse", Me.LeadNurse))
                .Add(New ParameterSQL("OtherNurse", Me.OtherNurse))
                .Add(New ParameterSQL("AnaesthesiaTypeID", Me.AnaesthesiaTypeID))
                .Add(New ParameterSQL("OperationClassID", Me.OperationClassID))
                .Add(New ParameterSQL("PreoperativeDiagnosis", Me.PreoperativeDiagnosis))
                .Add(New ParameterSQL("PlannedProcedures", Me.PlannedProcedures))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("PostoperativeInstructions", Me.PostoperativeInstructions))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateTheatreOperations")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("OperationDateTime", Me.OperationDateTime))
                .Add(New ParameterSQL("LeadSurgeon", Me.LeadSurgeon))
                .Add(New ParameterSQL("OtherSurgeon", Me.OtherSurgeon))
                .Add(New ParameterSQL("LeadAnaesthetist", Me.LeadAnaesthetist))
                .Add(New ParameterSQL("OtherAnaesthetist", Me.OtherAnaesthetist))
                .Add(New ParameterSQL("LeadNurse", Me.LeadNurse))
                .Add(New ParameterSQL("OtherNurse", Me.OtherNurse))
                .Add(New ParameterSQL("AnaesthesiaTypeID", Me.AnaesthesiaTypeID))
                .Add(New ParameterSQL("OperationClassID", Me.OperationClassID))
                .Add(New ParameterSQL("PreoperativeDiagnosis", Me.PreoperativeDiagnosis))
                .Add(New ParameterSQL("PlannedProcedures", Me.PlannedProcedures))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("PostoperativeInstructions", Me.PostoperativeInstructions))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("TheatreOperations")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Me.SetCommand("uspDeleteTheatreOperations")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
            End With

            'For Audit Trial
            Me.SetLogObject("TheatreOperations")

            Return Parameters

        End Function

        Public Function GetTheatreOperations(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetTheatreOperations", "TheatreOperations", Parameters)

        End Function

#End Region

    End Class

    Public Class Appointments : Inherits DBConnect

#Region " Fields "

        Private m_PatientNo As String
        Private m_StartDate As Date
        Private m_AppointmentPrecisionID As String
        Private m_StartTime As String
        Private m_Duration As Integer
        Private m_EndDate As Date
        Private m_DoctorSpecialtyID As String
        Private m_StaffNo As String
        Private m_AppointmentDes As String
        Private m_AppointmentStatusID As String
        Private m_AppointmentCategoryID As String
        Private m_CommunityID As String

#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property StartDate() As Date
            Get
                Return m_StartDate
            End Get
            Set(value As Date)
                m_StartDate = value
            End Set
        End Property

        Public Property AppointmentPrecisionID() As String
            Get
                Return m_AppointmentPrecisionID
            End Get
            Set(value As String)
                m_AppointmentPrecisionID = value
            End Set
        End Property

        Public Property StartTime() As String
            Get
                Return m_StartTime
            End Get
            Set(value As String)
                m_StartTime = value
            End Set
        End Property

        Public Property Duration() As Integer
            Get
                Return m_Duration
            End Get
            Set(value As Integer)
                m_Duration = value
            End Set
        End Property

        Public Property EndDate() As Date
            Get
                Return m_EndDate
            End Get
            Set(value As Date)
                m_EndDate = value
            End Set
        End Property

        Public Property DoctorSpecialtyID() As String
            Get
                Return m_DoctorSpecialtyID
            End Get
            Set(Value As String)
                m_DoctorSpecialtyID = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(value As String)
                m_StaffNo = value
            End Set
        End Property

        Public Property AppointmentCategoryID() As String
            Get
                Return m_AppointmentCategoryID
            End Get
            Set(ByVal value As String)
                m_AppointmentCategoryID = value
            End Set
        End Property

        Public Property CommunityID() As String
            Get
                Return m_CommunityID
            End Get
            Set(ByVal value As String)
                m_CommunityID = value
            End Set
        End Property
        Public Property AppointmentDes() As String
            Get
                Return m_AppointmentDes
            End Get
            Set(Value As String)
                m_AppointmentDes = Value
            End Set
        End Property

        Public Property AppointmentStatusID() As String
            Get
                Return m_AppointmentStatusID
            End Get
            Set(value As String)
                m_AppointmentStatusID = value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyBase.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertAppointments")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("StartDate", Me.StartDate))
                .Add(New ParameterSQL("AppointmentPrecisionID", Me.AppointmentPrecisionID))
                .Add(New ParameterSQL("StartTime", Me.StartTime))
                .Add(New ParameterSQL("Duration", Me.Duration))
                .Add(New ParameterSQL("EndDate", Me.EndDate))
                .Add(New ParameterSQL("DoctorSpecialtyID", Me.DoctorSpecialtyID))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("AppointmentDes", Me.AppointmentDes))
                .Add(New ParameterSQL("CommunityID", Me.CommunityID))
                .Add(New ParameterSQL("AppointmentCategoryID", Me.AppointmentCategoryID))
                .Add(New ParameterSQL("AppointmentStatusID", Me.AppointmentStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateAppointments")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("StartDate", Me.StartDate))
                .Add(New ParameterSQL("AppointmentPrecisionID", Me.AppointmentPrecisionID))
                .Add(New ParameterSQL("StartTime", Me.StartTime))
                .Add(New ParameterSQL("Duration", Me.Duration))
                .Add(New ParameterSQL("EndDate", Me.EndDate))
                .Add(New ParameterSQL("DoctorSpecialtyID", Me.DoctorSpecialtyID))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("CommunityID", Me.CommunityID))
                .Add(New ParameterSQL("AppointmentCategoryID", Me.AppointmentCategoryID))
                .Add(New ParameterSQL("AppointmentDes", Me.AppointmentDes))
                .Add(New ParameterSQL("AppointmentStatusID", Me.AppointmentStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trial
            Me.SetLogObject("Appointments")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PatientNo = '" + Me.PatientNo + "' and StartDate = '" + FormatDate(Me.StartDate) + "'"
            Dim errorPart As String = "Patient No: " + Me.PatientNo + " and Start Date: " + Me.StartDate.ToString()

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Appointments"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trial
            Me.SetLogObject("Appointments")

            Return Parameters

        End Function

        Public Function GetAppointments(patientNo As String, startDate As Date) As DataSet

            If startDate <> Nothing Then
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("StartDate", startDate))
                End With

            ElseIf startDate = Nothing Then
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("StartDate", Nothing))
                End With
            End If

            Return Me.Load("uspGetAppointments", "Appointments", Parameters)

        End Function

        Public Function GetAppointments(patientNo As String) As DataSet
            Return Me.GetAppointments(patientNo, Nothing)
        End Function

        ''' <summary>
        ''' Get to visit today appointments for supplied staff login ID
        ''' </summary>
        ''' <param name="staffLoginID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetTodayAppointments(staffLoginID As String) As DataSet

            If Not String.IsNullOrEmpty(staffLoginID) Then
                With Parameters
                    .Add(New ParameterSQL("StaffLoginID", staffLoginID))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StaffLoginID", Nothing))
                End With
            End If

            Return Me.Load("uspGetTodayAppointments", "Appointments", Parameters)

        End Function

        ''' <summary>
        ''' Get all to visit today appointments 
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetTodayAppointments() As DataSet
            Return GetTodayAppointments(String.Empty)
        End Function

        Public Function GetAppointmentReports(startDateTime As Date, endDateTime As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))
            End With
            Return Me.Load("uspGetAppointmentsReport", "Appointments", Parameters)
        End Function

#End Region

    End Class


    Public Class Clients : Inherits DBConnect

#Region " Fields "

        Private m_ReferenceNo As String
        Private m_FirstName As String
        Private m_LastName As String
        Private m_MiddleName As String
        Private m_GenderID As String
        Private m_PhoneNo As String
        Private m_BirthDate As Date
        Private m_AppointmentDate As Date
        Private m_DoctorSpecialtyID As String
        Private m_StaffNo As String
        Private m_Description As String

#End Region

#Region " Properties "

        Public Property ReferenceNo() As String
            Get
                Return m_ReferenceNo
            End Get
            Set(ByVal Value As String)
                m_ReferenceNo = Value
            End Set
        End Property

        Public Property FirstName() As String
            Get
                Return m_FirstName
            End Get
            Set(ByVal Value As String)
                m_FirstName = Value
            End Set
        End Property

        Public Property LastName() As String
            Get
                Return m_LastName
            End Get
            Set(ByVal Value As String)
                m_LastName = Value
            End Set
        End Property

        Public Property MiddleName() As String
            Get
                Return m_MiddleName
            End Get
            Set(ByVal Value As String)
                m_MiddleName = Value
            End Set
        End Property

        Public Property GenderID() As String
            Get
                Return m_GenderID
            End Get
            Set(ByVal Value As String)
                m_GenderID = Value
            End Set
        End Property

        Public Property PhoneNo() As String
            Get
                Return m_PhoneNo
            End Get
            Set(ByVal Value As String)
                m_PhoneNo = Value
            End Set
        End Property

        Public Property BirthDate() As Date
            Get
                Return m_BirthDate
            End Get
            Set(ByVal Value As Date)
                m_BirthDate = Value
            End Set
        End Property

        Public Property AppointmentDate() As Date
            Get
                Return m_AppointmentDate
            End Get
            Set(ByVal Value As Date)
                m_AppointmentDate = Value
            End Set
        End Property

        Public Property DoctorSpecialtyID() As String
            Get
                Return m_DoctorSpecialtyID
            End Get
            Set(ByVal Value As String)
                m_DoctorSpecialtyID = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(ByVal Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property Description() As String
            Get
                Return m_Description
            End Get
            Set(ByVal Value As String)
                m_Description = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertClients")

            With Parameters
                .Add(New ParameterSQL("ReferenceNo", Me.ReferenceNo))
                .Add(New ParameterSQL("FirstName", Me.FirstName))
                .Add(New ParameterSQL("LastName", Me.LastName))
                .Add(New ParameterSQL("MiddleName", Me.MiddleName))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("PhoneNo", Me.PhoneNo))
                .Add(New ParameterSQL("BirthDate", Me.BirthDate))
                .Add(New ParameterSQL("AppointmentDate", Me.AppointmentDate))
                .Add(New ParameterSQL("DoctorSpecialtyID", Me.DoctorSpecialtyID))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("Description", Me.Description))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateClients")

            With Parameters
                .Add(New ParameterSQL("ReferenceNo", Me.ReferenceNo))
                .Add(New ParameterSQL("FirstName", Me.FirstName))
                .Add(New ParameterSQL("LastName", Me.LastName))
                .Add(New ParameterSQL("MiddleName", Me.MiddleName))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("PhoneNo", Me.PhoneNo))
                .Add(New ParameterSQL("BirthDate", Me.BirthDate))
                .Add(New ParameterSQL("AppointmentDate", Me.AppointmentDate))
                .Add(New ParameterSQL("DoctorSpecialtyID", Me.DoctorSpecialtyID))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("Description", Me.Description))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("Clients")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ReferenceNo = '" + Me.ReferenceNo + "'"
            Dim errorPart As String = "ReferenceNo: " + Me.ReferenceNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Clients"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Clients")

            Return Parameters

        End Function

        Public Function GetClients(ByVal referenceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ReferenceNo", referenceNo))
            End With

            Return Me.Load("uspGetClients", "Clients", Parameters)

        End Function

        Public Function GetNextClientsReferenceNo() As Integer

            With Parameters
                .Add(New ParameterSQL("ReferenceID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextClientsReferenceNo", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("ReferenceID")) Then
                    Return CInt(Me.ReadData("ReferenceID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

        Public Function GetClientsByDate(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetClientsByDate", "Clients", Parameters)

        End Function



#End Region



    End Class

    Public Class ExtraBills : Inherits DBConnect

#Region " Fields "

        Private m_ExtraBillNo As String
        Private m_VisitNo As String
        Private m_ExtraBillDate As Date
        Private m_VisitTypeID As String
        Private m_StaffNo As String

#End Region

#Region " Properties "

        Public Property ExtraBillNo() As String
            Get
                Return m_ExtraBillNo
            End Get
            Set(Value As String)
                m_ExtraBillNo = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ExtraBillDate() As Date
            Get
                Return m_ExtraBillDate
            End Get
            Set(Value As Date)
                m_ExtraBillDate = Value
            End Set
        End Property

        Public Property VisitTypeID() As String
            Get
                Return m_VisitTypeID
            End Get
            Set(Value As String)
                m_VisitTypeID = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(Value As String)
                m_StaffNo = Value
            End Set
        End Property
#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertExtraBills")

            With Parameters
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ExtraBillDate", Me.ExtraBillDate))
                .Add(New ParameterSQL("VisitTypeID", Me.VisitTypeID))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateExtraBills")

            With Parameters
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ExtraBillDate", Me.ExtraBillDate))
                .Add(New ParameterSQL("VisitTypeID", Me.VisitTypeID))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("ExtraBills")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ExtraBillNo = '" + Me.ExtraBillNo + "'"
            Dim errorPart As String = "Extra Bill No: " + Me.ExtraBillNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ExtraBills"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ExtraBills")

            Return Parameters

        End Function

        Public Function GetExtraBills(extraBillNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ExtraBillNo", extraBillNo))
            End With

            Return Me.Load("uspGetExtraBills", "ExtraBills", Parameters)

        End Function

        ''' <summary>
        ''' Returns all periodic extra bills as per specified bill period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicExtraBills(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetPeriodicExtraBills", "ExtraBills", Parameters)

        End Function

        ''' <summary>
        ''' Returns ExtraBills for aparticular Visit No
        ''' </summary>
        ''' <param name="VisitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetExtraBillsByVisitNo(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetExtraBillsByVisitNo", "ExtraBills", Parameters)

        End Function

        Public Function IsBillsExtraBillDateSaved(visitNo As String, extraBillDate As Date) As Boolean

            Dim records As Integer

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("ExtraBillDate", extraBillDate))
                .Add(New ParameterSQL("Records", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspCountBillsExtraBillDate", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("Records")) Then
                    records = 0
                Else : records = CInt(Me.ReadData("Records"))
                End If
            End If

            Return records > 0

        End Function

        Public Function IsAdmissionBillDateSaved(visitNo As String, extraBillDate As Date) As Boolean

            Dim records As Integer

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("ExtraBillDate", extraBillDate))
                .Add(New ParameterSQL("Records", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspCountAdmissionBillDate", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("Records")) Then
                    records = 0
                Else : records = CInt(Me.ReadData("Records"))
                End If
            End If

            Return records > 0

        End Function

        ''' <summary>
        ''' Gets the next extra bill ID for the supplied Visit No
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNextExtraBillID(visitNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("ExtraBillID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextExtraBillID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("ExtraBillID")) Then
                    Return CInt(Me.ReadData("ExtraBillID"))
                Else : Return 1
                End If

            End If

        End Function

        ''' <summary>
        ''' Gets extra bill No for the supplied Patient No and extra bill date
        ''' </summary>
        ''' <param name="patientNo"></param>
        ''' <param name="ExtraBillDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetExtraBillNo(patientNo As String, extraBillDate As Nullable(Of Date)) As String

            Dim oAppData As New SyncSoft.Common.Classes.AppData()

            If IsNothing(extraBillDate) OrElse CDate(extraBillDate).Equals(oAppData.NullDateValue) Then
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("ExtraBillDate", SqlDbType.SmallDateTime))
                    .Add(New ParameterSQL("ExtraBillNo", SqlDbType.VarChar, 20))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("ExtraBillDate", extraBillDate))
                    .Add(New ParameterSQL("ExtraBillNo", SqlDbType.VarChar, 20))
                End With
            End If

            Me.ReadData = Me.Read("uspGetExtraBillNo", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("ExtraBillNo")) Then
                    Return CStr(Me.ReadData("ExtraBillNo"))
                Else : Return String.Empty
                End If

            Else : Return Nothing
            End If

        End Function

        ''' <summary>
        ''' Gets the latest extra bill No for the supplied Patient No
        ''' </summary>
        ''' <param name="patientNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetExtraBillNo(patientNo As String) As String
            Return Me.GetExtraBillNo(patientNo, Nothing)
        End Function

#End Region

    End Class

    Public Class ExtraBillsEXT : Inherits DBConnect

#Region " Fields "

        Private m_ExtraBillNo As String
        Private m_RoundNo As String

#End Region

#Region " Properties "

        Public Property ExtraBillNo() As String
            Get
                Return m_ExtraBillNo
            End Get
            Set(Value As String)
                m_ExtraBillNo = Value
            End Set
        End Property

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertExtraBillsEXT")

            With Parameters
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateExtraBillsEXT")

            With Parameters
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
            End With

            'For Audit Trail
            Me.SetLogObject("ExtraBillsEXT")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ExtraBillNo = '" + Me.ExtraBillNo + "'"
            Dim errorPart As String = "Extra Bill No: " + Me.ExtraBillNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ExtraBillsEXT"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ExtraBillsEXT")

            Return Parameters

        End Function

        Public Function GetExtraBillsEXT(extraBillNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ExtraBillNo", extraBillNo))
            End With

            Return Me.Load("uspGetExtraBillsEXT", "ExtraBillsEXT", Parameters)

        End Function

        Public Function GetExtraBillsEXTExtraBillNo(roundNo As String) As String

            Try

                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("ExtraBillNo", SqlDbType.VarChar, 20))
                End With

                Me.ReadData = Me.Read("uspGetExtraBillsEXTExtraBillNo", Parameters)

                If Me.ReadData IsNot Nothing Then

                    If Not IsDBNull(Me.ReadData("ExtraBillNo")) Then
                        Me.ExtraBillNo = CStr(Me.ReadData("ExtraBillNo"))
                    Else : Me.ExtraBillNo = String.Empty
                    End If

                    Return Me.ExtraBillNo
                Else : Return String.Empty
                End If

            Catch ex As Exception
                Throw ex

            End Try

        End Function

#End Region

    End Class


    Public Class ExtraBillItems : Inherits DBConnect

#Region " Fields "

        Private m_ExtraBillNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_InvoiceNo As String
        Private m_Quantity As Integer
        Private m_UnitPrice As Decimal
        Private m_Notes As String
        Private m_LastUpdate As Date
        Private m_PayStatusID As String
        Private m_EntryModeID As String

#End Region

#Region " Properties "

        Public Property ExtraBillNo() As String
            Get
                Return m_ExtraBillNo
            End Get
            Set(Value As String)
                m_ExtraBillNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property InvoiceNo() As String
            Get
                Return m_InvoiceNo
            End Get
            Set(Value As String)
                m_InvoiceNo = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

        Public Property LastUpdate() As Date
            Get
                Return m_LastUpdate
            End Get
            Set(Value As Date)
                m_LastUpdate = Value
            End Set
        End Property

        Public Property PayStatusID() As String
            Get
                Return m_PayStatusID
            End Get
            Set(Value As String)
                m_PayStatusID = Value
            End Set
        End Property

        Public Property EntryModeID() As String
            Get
                Return m_EntryModeID
            End Get
            Set(Value As String)
                m_EntryModeID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditExtraBillItems")

            With Parameters
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LastUpdate", Me.LastUpdate))
                .Add(New ParameterSQL("PayStatusID", Me.PayStatusID))
                .Add(New ParameterSQL("EntryModeID", Me.EntryModeID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                'Monitoring Fields
                .Add(New ParameterSQL("CreatorLoginID", Me.LoginID))
                .Add(New ParameterSQL("CreatorClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateExtraBillItems")

            With Parameters
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("LastUpdate", Me.LastUpdate))
                .Add(New ParameterSQL("PayStatusID", Me.PayStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trial
            Me.SetLogObject("ExtraBillItems")

            Return Parameters

        End Function



        Private Function GetExtraBillItems(extraBillNo As String, itemCategoryID As String, visitNo As String,
                                          payStatusID As String, billAccount As String) As DataSet

            If Not String.IsNullOrEmpty(extraBillNo) AndAlso Not String.IsNullOrEmpty(itemCategoryID) AndAlso
                String.IsNullOrEmpty(visitNo) AndAlso String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(billAccount) Then

                With Parameters
                    .Add(New ParameterSQL("ExtraBillNo", extraBillNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("VisitNo", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillAccount", Nothing))
                End With

            ElseIf String.IsNullOrEmpty(extraBillNo) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso
                Not String.IsNullOrEmpty(visitNo) AndAlso Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(billAccount) Then

                With Parameters
                    .Add(New ParameterSQL("ExtraBillNo", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillAccount", billAccount))
                End With

            End If

            Return Me.Load("uspGetExtraBillItems", "ExtraBillItems", Parameters)

        End Function

        Public Function GetExtraBillItems(extraBillNo As String, itemCategoryID As String) As DataSet
            Return Me.GetExtraBillItems(extraBillNo, itemCategoryID, String.Empty, String.Empty, String.Empty)
        End Function

        Public Function GetExtraBillItems(visitNo As String, payStatusID As String, billAccount As String) As DataSet
            Return Me.GetExtraBillItems(String.Empty, String.Empty, visitNo, payStatusID, billAccount)
        End Function

        ''' <summary>
        ''' Gets extra bill items to be returned
        ''' </summary>
        ''' <param name="extraBillNo"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetToReturnExtraBillItems(extraBillNo As String, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ExtraBillNo", extraBillNo))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetToReturnExtraBillItems", "ExtraBillItems", Parameters)

        End Function

        ''' <summary>
        ''' Gets the not paid for Co-Pay Extra Bill Items
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNotPaidExtraBillItemsCASH(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetNotPaidExtraBillItemsCASH", "ExtraBillItems", Parameters)

        End Function

        ''' <summary>
        ''' Returns all not paid extra bill items for the specified period and supplied company
        ''' </summary>
        ''' <param name="billModesID"></param>
        ''' <param name="billNo"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <param name="companyNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNotPaidExtraBillItems(billModesID As String, billNo As String,
                                        startDate As Nullable(Of Date), endDate As Nullable(Of Date),
                                        companyNo As String) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) And Not String.IsNullOrEmpty(companyNo) Then
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With

            ElseIf (startDate IsNot Nothing) And (endDate IsNot Nothing) And String.IsNullOrEmpty(companyNo) Then
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With

            ElseIf (startDate Is Nothing) And (endDate Is Nothing) And Not String.IsNullOrEmpty(companyNo) Then
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetNotPaidExtraBillItems", "ExtraBillItems", Parameters)

        End Function

        ''' <summary>
        ''' Returns all not paid extra bill items for the specified
        ''' </summary>
        ''' <param name="billModesID"></param>
        ''' <param name="billNo"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNotPaidExtraBillItems(billModesID As String, billNo As String,
                                        startDate As Nullable(Of Date),
                                        endDate As Nullable(Of Date)) As DataSet
            Return GetNotPaidExtraBillItems(billModesID, billNo, startDate, endDate, String.Empty)
        End Function

        ''' <summary>
        ''' Returns all not paid Extra Bill Items for a specified company
        ''' </summary>
        ''' <param name="billModesID"></param>
        ''' <param name="billNo"></param>
        ''' <param name="companyNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNotPaidExtraBillItems(billModesID As String, billNo As String, companyNo As String) As DataSet
            Return GetNotPaidExtraBillItems(billModesID, billNo, Nothing, Nothing, companyNo)
        End Function

        ''' <summary>
        ''' Returns all not paid extra bill items
        ''' </summary>
        ''' <param name="billModesID"></param>
        ''' <param name="billNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNotPaidExtraBillItems(billModesID As String, billNo As String) As DataSet
            Return GetNotPaidExtraBillItems(billModesID, billNo, Nothing, Nothing, String.Empty)
        End Function

        ''' <summary>
        ''' Gets the not paid for as per supplied visit no
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNotPaidExtraBillItemsByVisitNo(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetNotPaidExtraBillItemsByVisitNo", "ExtraBillItems", Parameters)

        End Function

        ''' <summary>
        ''' Gets all Extra Bill Items for the supplied Visit No and Pay Status ID
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <param name="payStatusID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetExtraBillItemsByVisitNo(visitNo As String, payStatusID As String) As DataSet

            If Not String.IsNullOrEmpty(payStatusID) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                End With
            End If

            Return Me.Load("uspGetExtraBillItemsByVisitNo", "ExtraBillItems", Parameters)

        End Function

        ''' <summary>
        ''' Gets all Extra Bill Items for the supplied Visit No
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetExtraBillItemsByVisitNo(visitNo As String) As DataSet
            Return GetExtraBillItemsByVisitNo(visitNo, String.Empty)
        End Function

        ''' <summary>
        ''' returns unique extra bill items
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetUniqueExtraBillItems(visitNo As String, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetUniqueExtraBillItems", "ExtraBillItems", Parameters)

        End Function

        ''' <summary>
        ''' returns unique drug extra bill items
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetUniqueDrugExtraBillItems(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetUniqueDrugExtraBillItems", "ExtraBillItems", Parameters)

        End Function

        Public Function GetIPDSagePastelReport(startDateTime As Date, endDateTime As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))
            End With
            Return Me.Load("uspGetIPDSagePastelReport", "ExtraBillItems", Parameters)

        End Function

        Public Function GetIPDSales(startDateTime As Nullable(Of Date), endDateTime As Nullable(Of Date),
                                 branchID As String, ItemCategoryID As String, itemCode As String, billModesID As String,
                                 payStatusID As String, loginID As String) As DataSet

            '------------------------------------------------------------All selected---------------------------------------------------------------
            If Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '--only five Items Selected (only one Not selected)-------------------------------------------------------------------------------

                '------------------------------------------------------------only BranchID Not selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                ' ------------------------------------------------------------only ItemCategoryID Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only ItemCode---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
               String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------------------------------------------only BillMode null---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only PayStatus null---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
               String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------------------------------------------Only LoginID null---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With


                '--only five Items Selected (only one Not selected) End---------------------------------------------------------------------------
                '---------------------------------------------------------------------------------------------------------------------------------

                '--only four Items Selected (only two Not selected) ---------------------------------------------------------------------------
                '---------------------------------------------------------------------------------------------------------------------------------
                '------------------------------------------------------------BranchID And ItemCategory Not selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only BranchID And ItemCode Not selected-------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------------------------------------------Only BranchID And BillMode Not selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only BranchID And PayStatus---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only Branch And LoginID Not selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '------------------------------------------------------------Only ItemCategory And ItemCode Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
               String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
               Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------------------------------------------Only ItemCategory And BillMode Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
               Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
               Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only ItemCategory And PayStatus Not sected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
               String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only ItemCategory And LoginID Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '------------------------------------------------------------only ItemCode And BillMode Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
               String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only ItemCode And PayStatus Not selected--------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
               String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '-----------------------------------------------------------Only ItemCode And LoginID Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '------------------------------------------------------------Only BillMode And PayStatus Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only BillMode And Login------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '---------------------------------------------------------PayStatus And LoginID Not selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '--only four Items Selected (only two Not selected)End ---------------------------------------------------------------------------
                '---------------------------------------------------------------------------------------------------------------------------------

                '--only 3 Items Selected (only 3 Not selected) ---------------------------------------------------------------------------
                '-------------------------------------------------------------------------------------------------------------------------
                '-----------------------------------------------------------Branch And ItemCategory And ItemCode selected-----------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With


                '---------------------------------------------------BranchID And ItemCategory BillMode selected-------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                  String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '--------------------------------------------------------BranchID And ItemCategory And PayStatus---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '-------------------------------------------------------Only BranchID  And ItemCategory And LoginID -----------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------BranchID And ItemCode And BillMode  selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '------------------------------------------------------------BranchID, ItemCode And PayStatus---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only BranchID,ItemCode And Login selected--------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only BranchID, BillMode And PayStatus selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '------------------------------------------------------------Only BranchID, BillModes, LoginID selected--------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
               String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '-----------------------------------------------------Only BranchID, PayMode And Login selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With


                '------------------------------------------------------------Only ItemCategory, ItemCode And BillMode selected-------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                  String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '-------------------------------------------------Only ItemCategory, ItemCode And PayStatus selected------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '-------------------------------------------------------Only ItemCategory, ItemCode And LoginID---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------------------------------------------Only ItemCategory, BillMode And PayStatus selected--------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '---------------------------------------------------------Only ItemCategory, BillMode And LoginID selected--------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '------------------------------------------------------------Only ItemCategory, PayStatus And Login selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                  String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------------------------------------------Only ItemCode, BillMode And PayStatus selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '--------------------------------------------------------Only ItemCode, BillMode And LoginID selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '---------------------------------------------------------Only ItemCode, PayStatus And LoginID selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '---------------------------------------------------------Only Billmode, PayStatus And LoginID selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '--only 3 Items Selected (only 3 Not selected) End---------------------------------------------------------------------------
                '---------------------------------------------------------------------------------------------------------------------------------

                '--only 2 Items Selected (only 4 Not selected) ---------------------------------------------------------------------------
                '-----------------------------------------------------------------------------------------------------------------------------
                '------------------------------------------------------------On BranchID And ItemCategory selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                          String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                          String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '-----------------------------------------------------Only BranchID And ItemCode selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '-----------------------------------------------------------Only BranchID And BillMode selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '--------------------------------------------------------Only BranchID And PayStatus selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                   String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                  Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '----------------------------------------------------------Only BranchID And LoginID selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '----------------------------------------------------------Only ItemCategory And ItemCode selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only ItemCategory And BillMode selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only ItemCategory And PayStatus selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only ItemCategory And LoginID selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                  String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                  String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------------------------------------------Only ItemCode And BillMode selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
               String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '----------------------------------------------------------Only ItemCode And PayStatus selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only ItemCode And LoginID selected---------------------------------------------------------------

            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '----------------------------------------------------------Only BillModes And PayStatus selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only BillMode And LoginID selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '----------------------------------------------------------Only PayStatus And LoginID---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '--only 2 Items Selected (only 4 Not selected) End---------------------------------------------------------------------------
                '---------------------------------------------------------------------------------------------------------------------------------

                '--only 1 Items Selected (only 5 Not selected) ---------------------------------------------------------------------------
                '---------------------------------------------------------------------------------------------------------------------------------

                '-----------------------------------------------------------Only BranchID selected--------------------------------------------------------------

            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only ItemCategory selected---------------------------------------------------------------
            ElseIf Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso
                String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
               String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '------------------------------------------------------------Only ItemCode selected--------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                Not String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With
                '------------------------------------------------------------Only BillMode selected---------------------------------------------------------------
            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
               String.IsNullOrEmpty(itemCode) AndAlso Not String.IsNullOrEmpty(billModesID) AndAlso
                String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '-----------------------------------------------------------Only PayStatus selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                 String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                Not String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------------------------------------------Only LoginID selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                  String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso Not String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
                '--only 1 Items Selected (only 5 Not selected) End----------------------------------------------------------------------------------------
                '-----------------------------------------------------------------------------------------------------------------------------------------

                '---------------------------------------------------------------------------------------------------------------------------------------------
                '------------------------------------------------------------nothing Is selected---------------------------------------------------------------

            ElseIf String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso
                  String.IsNullOrEmpty(itemCode) AndAlso String.IsNullOrEmpty(billModesID) AndAlso
                 String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(loginID) Then


                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With


            End If

            Return Me.Load("uspGetIPDSales", "ExtraBillItems", Parameters)

        End Function

        Public Function GetIPDInvoiceCategorization(startDateTime As Date, endDateTime As Date, ExcludePaidFor As Boolean, patientNo As String, billNo As String) As DataSet

            '-----------------------Only PatientNo---------------------------------------
            If String.IsNullOrEmpty(patientNo) AndAlso Not String.IsNullOrEmpty(billNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ExcludePaidFor", ExcludePaidFor))
                    .Add(New ParameterSQL("PatientNo", Nothing))
                    .Add(New ParameterSQL("BillNo", billNo))

                End With

                '------------------------only biiNo Not null---------------------------------------
            ElseIf Not String.IsNullOrEmpty(patientNo) AndAlso String.IsNullOrEmpty(billNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ExcludePaidFor", ExcludePaidFor))
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("BillNo", Nothing))

                End With

                '------------------------All null---------------------------------------
            ElseIf String.IsNullOrEmpty(patientNo) AndAlso String.IsNullOrEmpty(billNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ExcludePaidFor", ExcludePaidFor))
                    .Add(New ParameterSQL("PatientNo", Nothing))
                    .Add(New ParameterSQL("BillNo", Nothing))

                End With

            End If
            Return Me.Load("uspGetIPDInvoiceCategorization", "ExtraBillItems", Parameters)
        End Function

        Public Function GetInvoicedNotPaidExtraBillItems(billModesID As String, billNo As String,
                                      startDate As Nullable(Of Date), endDate As Nullable(Of Date),
                                      companyNo As String) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) And Not String.IsNullOrEmpty(companyNo) Then
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With

            ElseIf (startDate IsNot Nothing) And (endDate IsNot Nothing) And String.IsNullOrEmpty(companyNo) Then
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With

            ElseIf (startDate Is Nothing) And (endDate Is Nothing) And Not String.IsNullOrEmpty(companyNo) Then
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetInvoicedNotPaidExtraBillItems", "ExtraBillItems", Parameters)

        End Function


        Public Function GetInvoicedNotPaidExtraBillItems(billModesID As String, billNo As String, companyNo As String) As DataSet
            Return GetInvoicedNotPaidExtraBillItems(billModesID, billNo, Nothing, Nothing, companyNo)
        End Function

        Public Function GetVisitExtraBillItemsByInvoiceStatus(invoiceNo As String, invoiced As Boolean) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", invoiceNo))
                .Add(New ParameterSQL("InvoiceStatus", invoiced))

            End With

            Return Me.Load("uspGetVisitExtraBillItemsByInvoiceStatus", "ExtraBillItems", Parameters)

        End Function

        Public Function GetExtraBillItemsByExtraBillNo(extraBillNo As String, itemCategoryID As String) As DataSet

            If String.IsNullOrEmpty(itemCategoryID) Then
                With Parameters
                    .Add(New ParameterSQL("ExtraBillNo", extraBillNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))

                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ExtraBillNo", extraBillNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))

                End With
            End If


            Return Me.Load("uspGetExtraBillItemsByExtraBillNo", "ExtraBillItems", Parameters)

        End Function

        Public Function GetExtraBillItemsByExtraBillNo(extraBillNo As String) As DataSet


            Return Me.GetExtraBillItemsByExtraBillNo(extraBillNo, Nothing)

        End Function

        Public Function GetPeriodicExtraBillItemsByBillToCustomerNo(billNo As String, billModesID As String, startDate As Date, endDate As Date) As DataSet

            '------------------------------------------------------------------------------

            With Parameters
                .Add(New ParameterSQL("BillNo", billNo))
                .Add(New ParameterSQL("BillModesID", billModesID))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With


            Return Me.Load("uspGetPeriodicExtraBillItemsByBillToCustomerNo", "ExtraBillItems", Parameters)
        End Function


#End Region

    End Class

    Public Class ExtraBillItemsCASH : Inherits DBConnect

#Region " Fields "

        Private m_ExtraBillNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_CashAmount As Decimal
        Private m_CashPayStatusID As String

#End Region

#Region " Properties "

        Public Property ExtraBillNo() As String
            Get
                Return m_ExtraBillNo
            End Get
            Set(Value As String)
                m_ExtraBillNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property



        Public Property CashAmount() As Decimal
            Get
                Return m_CashAmount
            End Get
            Set(Value As Decimal)
                m_CashAmount = Value
            End Set
        End Property

        Public Property CashPayStatusID() As String
            Get
                Return m_CashPayStatusID
            End Get
            Set(Value As String)
                m_CashPayStatusID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditExtraBillItemsCASH")

            With Parameters
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("CashAmount", Me.CashAmount))
                .Add(New ParameterSQL("CashPayStatusID", Me.CashPayStatusID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateExtraBillItemsCASH")

            With Parameters
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
            End With

            'For Audit Trial
            Me.SetLogObject("ExtraBillItemsCASH")

            Return Parameters

        End Function




        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ExtraBillNo = '" + Me.ExtraBillNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Extra Bill No: " + Me.ExtraBillNo + " and Item Code: " + Me.ItemCode + " and Item Category ID: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ExtraBillItemsCASH"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ExtraBillItemsCASH")

            Return Parameters

        End Function

        Public Function GetExtraBillItemsCASH(extraBillNo As String, itemCode As String, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ExtraBillNo", extraBillNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetExtraBillItemsCASH", "ExtraBillItemsCASH", Parameters)

        End Function

#End Region

    End Class


    Public Class INTExtraBills : Inherits DBConnect

#Region " Fields "

#End Region

#Region " Auto-Implemented Properties "

        Public Property AgentNo As String
        Public Property ExtraBillNo As String
        Public Property SyncStatus As Boolean

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditINTExtraBills")

            With Parameters
                .Add(New ParameterSQL("AgentNo", Me.AgentNo))
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("SyncStatus", Me.SyncStatus))
            End With

            Return Parameters

        End Function



        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "AgentNo = '" + Me.AgentNo + "' and ExtraBillNo = '" + Me.ExtraBillNo + "'"
            Dim errorPart As String = "Agent No: " + Me.AgentNo + " and Extra Bill No: " + Me.ExtraBillNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "INTExtraBills"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("INTExtraBills")

            Return Parameters

        End Function

        Public Function GetINTExtraBills(ByVal agentNo As String, ByVal extraBillNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AgentNo", agentNo))
                .Add(New ParameterSQL("ExtraBillNo", extraBillNo))
            End With

            Return Me.Load("uspGetINTExtraBills", "INTExtraBills", Parameters)

        End Function

#End Region



    End Class


    Public Class INTExtraBillItems : Inherits DBConnect

#Region " Fields "

#End Region

#Region " Auto-Implemented Properties "
        Public Property AgentNo As String
        Public Property ExtraBillNo As String
        Public Property ItemCategoryID As String
        Public Property ItemCode As String
        Public Property SyncStatus As Boolean

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditINTExtraBillItems")

            With Parameters
                .Add(New ParameterSQL("AgentNo", Me.AgentNo))
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("SyncStatus", Me.SyncStatus))

            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "AgentNo = '" + Me.AgentNo + "' and ExtraBillNo = '" + Me.ExtraBillNo + "' and ItemCategoryID = '" + Me.ItemCategoryID + "' and ItemCode = '" + Me.ItemCode + "'"
            Dim errorPart As String = "AgentNo = '" + Me.AgentNo + "' and Extra Bill No: " + Me.ExtraBillNo + " and Item Category: " + Me.ItemCategoryID + " and Item Code: " + Me.ItemCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "INTExtraBillItems"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("INTExtraBillItems")

            Return Parameters

        End Function

        Public Function GetINTExtraBillItems(agentNo As String, ByVal extraBillNo As String, ByVal itemCategoryID As String, ByVal itemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AgentNo", agentNo))
                .Add(New ParameterSQL("ExtraBillNo", extraBillNo))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("ItemCode", itemCode))
            End With

            Return Me.Load("uspGetINTExtraBillItems", "INTExtraBillItems", Parameters)

        End Function



        Public Function GetINTExtraBillItemsBySyncStatus(agentNo As String, visitNo As String, syncStatus As Boolean) As DataSet


            With Parameters
                .Add(New ParameterSQL("AgentNo", agentNo))
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("SyncStatus", syncStatus))

            End With

            Return Me.Load("uspGetINTExtraBillItemsBySyncStatus", "INTExtraBillItems", Parameters)

        End Function


#End Region



    End Class

    
    Public Class BillAdjustments : Inherits DBConnect

#Region " Fields "

        Private m_AdjustmentNo As String
        Private m_BillNo As String
        Private m_AdjustmentDate As Date
        Private m_VisitTypeID As String
        Private m_AdjustmentTypeID As String

#End Region

#Region " Properties "

        Public Property AdjustmentNo() As String
            Get
                Return m_AdjustmentNo
            End Get
            Set(ByVal Value As String)
                m_AdjustmentNo = Value
            End Set
        End Property

        Public Property BillNo() As String
            Get
                Return m_BillNo
            End Get
            Set(ByVal Value As String)
                m_BillNo = Value
            End Set
        End Property

        Public Property AdjustmentDate() As Date
            Get
                Return m_AdjustmentDate
            End Get
            Set(ByVal Value As Date)
                m_AdjustmentDate = Value
            End Set
        End Property

        Public Property VisitTypeID() As String
            Get
                Return m_VisitTypeID
            End Get
            Set(ByVal Value As String)
                m_VisitTypeID = Value
            End Set
        End Property

        Public Property AdjustmenTypeID() As String
            Get
                Return m_AdjustmentTypeID
            End Get
            Set(ByVal Value As String)
                m_AdjustmentTypeID = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertBillAdjustments")

            With Parameters
                .Add(New ParameterSQL("AdjustmentNo", Me.AdjustmentNo))
                .Add(New ParameterSQL("BillNo", Me.BillNo))
                .Add(New ParameterSQL("AdjustmentDate", Me.AdjustmentDate))
                .Add(New ParameterSQL("VisitTypeID", Me.VisitTypeID))
                .Add(New ParameterSQL("AdjustmentTypeID", Me.AdjustmentypeID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function



        Public Function GetBillAdjustments(ByVal AdjustmentNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AdjustmentNo", AdjustmentNo))
            End With

            Return Me.Load("uspGetBillAdjustments", "BillAdjustments", Parameters)

        End Function


        Public Function GetNextBillAdjustmentID(BillNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("BillNo", BillNo))
                .Add(New ParameterSQL("AdjustmentID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextBillAdjustmentID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("AdjustmentID")) Then
                    Return CInt(Me.ReadData("AdjustmentID"))
                Else : Return 1
                End If

            End If
        End Function


#End Region



    End Class



    Public Class ItemAdjustments : Inherits DBConnect

#Region " Fields "
        Private m_AdjustmentNo As String
        Private m_VisitNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Quantity As Integer
        Private m_EntryLevelID As String
        Private m_Notes As String
        Private m_Amount As Decimal
        Private m_NewPrice As Decimal
        Private m_Acknowledgeable As Boolean
        Private m_IsAcknowledged As Boolean

#End Region

#Region " Properties "

        Public Property AdjustmentNo() As String
            Get
                Return m_AdjustmentNo
            End Get
            Set(ByVal Value As String)
                m_AdjustmentNo = Value
            End Set
        End Property


        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property


        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(ByVal Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property EntryLevelID() As String
            Get
                Return m_EntryLevelID
            End Get
            Set(ByVal Value As String)
                m_EntryLevelID = Value
            End Set
        End Property


        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property


        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

        Public Property NewPrice() As Decimal
            Get
                Return m_NewPrice
            End Get
            Set(ByVal Value As Decimal)
                m_NewPrice = Value
            End Set
        End Property


        Public Property Acknowledgeable() As Boolean
            Get
                Return m_Acknowledgeable
            End Get
            Set(ByVal Value As Boolean)
                m_Acknowledgeable = Value
            End Set
        End Property

        Public Property IsAcknowledged() As Boolean
            Get
                Return m_IsAcknowledged
            End Get
            Set(ByVal Value As Boolean)
                m_IsAcknowledged = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditItemAdjustments")

            With Parameters
                .Add(New ParameterSQL("AdjustmentNo", Me.AdjustmentNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("EntryLevelID", Me.EntryLevelID))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("NewPrice", Me.NewPrice))
                .Add(New ParameterSQL("Acknowledgeable", Me.Acknowledgeable))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function


      
        Public Function GetItemAdjustments(ByVal AdjustmentNo As String, ByVal visitNo As String, ByVal itemCode As String, ByVal itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AdjustmentNo", AdjustmentNo))
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetItemAdjustments", "ItemAdjustments", Parameters)

        End Function

        ''' <summary>
        ''' Gets all pending Returned Extra Bill Items for the supplied Visit No, ItemCategory and Days
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPendingItemAdjustments(VisitNo As String, ItemCategoryID As String, InventoryAlertDays As Integer) As DataSet
            If (Not String.IsNullOrEmpty(VisitNo) And Not String.IsNullOrEmpty(ItemCategoryID) And Not (InventoryAlertDays = Nothing)) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", VisitNo))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("InventoryAlertDays", InventoryAlertDays))
                End With
            ElseIf (String.IsNullOrEmpty(VisitNo) And Not String.IsNullOrEmpty(ItemCategoryID) And Not (InventoryAlertDays = Nothing)) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", String.Empty))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("InventoryAlertDays", InventoryAlertDays))
                End With
            ElseIf (Not String.IsNullOrEmpty(VisitNo) And Not String.IsNullOrEmpty(ItemCategoryID) And (InventoryAlertDays = Nothing)) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", VisitNo))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("InventoryAlertDays", InventoryAlertDays))
                End With
            End If

            Return Me.Load("uspGetPendingItemAdjustments", "PendingItemAdjustments", Parameters)
        End Function

        ''' <summary>
        ''' Gets all periodic pending Returned Items for the supplied Extrabill No, ItemCategory and Days
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicPendingItemAdjustments(startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet
            If (startDate IsNot Nothing) And (endDate IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If
            Return Me.Load("uspGetPeriodicPendingItemAdjustments", "PeriodicPendingItemAdjustments", Parameters)
        End Function


        ''' <summary>
        ''' Gets all pending Returned Item Details for the supplied Visit No and item Code
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPendingItemAdjustmentsDetails(LocationID As String, VisitNo As String, ItemCode As String) As DataSet
            If (String.IsNullOrEmpty(LocationID)) Then

                With Parameters
                    .Add(New ParameterSQL("LocationID", String.Empty))
                    .Add(New ParameterSQL("VisitNo", VisitNo))
                    .Add(New ParameterSQL("ItemCode", ItemCode))
                End With

            ElseIf (Not String.IsNullOrEmpty(LocationID)) Then

                With Parameters
                    .Add(New ParameterSQL("LocationID", LocationID))
                    .Add(New ParameterSQL("VisitNo", VisitNo))
                    .Add(New ParameterSQL("ItemCode", ItemCode))
                End With
            End If
            Return Me.Load("uspGetPendingItemAdjustmentsDetails", "PendingItemAdjustmentsDetails", Parameters)

        End Function

        ''' <summary>
        ''' updates pending Returned Items for the supplied Visit No, item Code, item Category, quantity
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Protected Overrides Function UpdateData() As ArrayList


            Try
                With Parameters
                    .Add(New ParameterSQL("AdjustmentNo", AdjustmentNo))
                    .Add(New ParameterSQL("VisitNo", VisitNo))
                    .Add(New ParameterSQL("ItemCode", ItemCode))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                End With

                Me.ReadData = Me.Read("uspUpdatePendingItemAdjustments", Parameters)

                Return Parameters
            Catch ex As Exception
                Throw ex

            End Try

        End Function


        Public Function GetPeriodicToAcknowledgeItemAdjustments(startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet
            If (startDate IsNot Nothing) And (endDate IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If
            Return Me.Load("uspGetPeriodicToAcknowledgeItemAdjustments", "ItemAdjustments", Parameters)
        End Function


        Public Function GetPeriodicToAcknowledgeItemAdjustments() As DataSet

            Return Me.GetPeriodicToAcknowledgeItemAdjustments(Nothing, Nothing)
        End Function


        Public Function GetVisitToAcknowkedgeItemAdjustments(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetVisitToAcknowkedgeItemAdjustments", "ItemAdjustments", Parameters)
        End Function


#End Region

    End Class


    Public Class ExtraBillItemAdjustments : Inherits DBConnect

#Region " Fields "
        Private m_AdjustmentNo As String
        Private m_ExtraBillNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Quantity As Integer
        Private m_Amount As Decimal
        Private m_NewPrice As Decimal
        Private m_Acknowledgeable As Boolean
        Private m_EntryLevelID As String
        Private m_Notes As String
        Private m_InventoryAlertDays As Integer
        Private m_LocationID As String

#End Region

#Region " Properties "

        Public Property AdjustmentNo() As String
            Get
                Return m_AdjustmentNo
            End Get
            Set(ByVal Value As String)
                m_AdjustmentNo = Value
            End Set
        End Property


        Public Property ExtraBillNo() As String
            Get
                Return m_ExtraBillNo
            End Get
            Set(Value As String)
                m_ExtraBillNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property



        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(Value As Integer)
                m_Quantity = Value
            End Set
        End Property


        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

        Public Property NewPrice() As Decimal
            Get
                Return m_NewPrice
            End Get
            Set(ByVal Value As Decimal)
                m_NewPrice = Value
            End Set
        End Property


        Public Property Acknowledgeable() As Boolean
            Get
                Return m_Acknowledgeable
            End Get
            Set(ByVal Value As Boolean)
                m_Acknowledgeable = Value
            End Set
        End Property


        Public Property EntryLevelID() As String
            Get
                Return m_EntryLevelID
            End Get
            Set(ByVal Value As String)
                m_EntryLevelID = Value
            End Set
        End Property


        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property


        Public Property InventoryAlertDays() As Integer
            Get
                Return m_InventoryAlertDays
            End Get
            Set(Value As Integer)
                m_InventoryAlertDays = Value
            End Set
        End Property

        Public Property LocationID() As String
            Get
                Return m_LocationID
            End Get
            Set(Value As String)
                m_LocationID = Value
            End Set
        End Property
#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditExtraBillItemAdjustments")

            With Parameters
                .Add(New ParameterSQL("AdjustmentNo", Me.AdjustmentNo))
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("NewPrice", Me.NewPrice))
                .Add(New ParameterSQL("Acknowledgeable", Me.Acknowledgeable))
                .Add(New ParameterSQL("EntryLevelID", Me.EntryLevelID))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function


        Protected Overrides Function UpdateData() As ArrayList


            Try
                With Parameters
                    .Add(New ParameterSQL("AdjustmentNo", AdjustmentNo))
                    .Add(New ParameterSQL("ExtraBillNo", ExtraBillNo))
                    .Add(New ParameterSQL("ItemCode", ItemCode))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                End With

                Me.ReadData = Me.Read("uspUpdatePendingExtraBillItemAdjustments", Parameters)

                Return Parameters
            Catch ex As Exception
                Throw ex

            End Try

        End Function

        ' ''' <summary>
        ' ''' Gets all Returned Extra Bill Items for the supplied Visit No and pay status
        ' ''' </summary>
        ' ''' <param name="visitNo"></param>
        ' ''' <param name="payStatusID"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        Public Function GetExtraBillItemAdjustmentsByVisitNo(visitNo As String, payStatusID As String) As DataSet

            If Not String.IsNullOrEmpty(payStatusID) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                End With
            End If

            Return Me.Load("uspGetExtraBillItemAdjustmentsByVisitNo", "ExtraBillItemAdjustments", Parameters)

        End Function

        ' ''' <summary>
        ' ''' Gets all Returned Extra Bill Items for the supplied Visit No
        ' ''' </summary>
        ' ''' <param name="visitNo"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        Public Function GetExtraBillItemAdjustmentsByVisitNo(visitNo As String) As DataSet
            Return GetExtraBillItemAdjustmentsByVisitNo(visitNo, String.Empty)
        End Function


        Public Function GetPeriodicToAckwnoledgeExtraBillItems(startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet
            If startDate Is Nothing AndAlso endDate Is Nothing Then
                With Parameters
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            Else
                With Parameters

                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            End If
            Return Me.Load("uspGetPeriodicToAckwnoledgeExtraBillItems", "ExtraBillItemAdjustments", Parameters)
        End Function


        Public Function GetPeriodicToAckwnoledgeExtraBillItems() As DataSet
            Return Me.GetPeriodicToAckwnoledgeExtraBillItems(Nothing, Nothing)
        End Function


        Public Function GetExtraBillToAckwnoledgeExtraBillItems(ExtraBillNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ExtraBillNo", ExtraBillNo))
            End With

            Return Me.Load("uspGetExtraBillToAckwnoledgeExtraBillItems", "ExtraBillItemAdjustments", Parameters)

        End Function





#End Region

    End Class

    Public Class PendingBillItems : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "


        Public Function GetPendingBillItems(VisitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", VisitNo))
            End With

            Return Me.Load("uspGetNotDoneorOfferedIPDItems", "PendingBillItems", Parameters)

        End Function


        Public Function GetNotPaidNotDoneOrOfferedPendingBillItems(VisitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", VisitNo))
            End With

            Return Me.Load("uspGetNotPaidNotDoneOrOfferedIPDItems", "NotPaidNotDoneOrOfferedPendingBillItems", Parameters)

        End Function

#End Region

    End Class


    Public Class PaymentExtraBillItems : Inherits DBConnect

#Region " Fields "

        Private m_ReceiptNo As String
        Private m_ExtraBillNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Quantity As Integer
        Private m_UnitPrice As Decimal
        Private m_Discount As Decimal
        Private m_Amount As Decimal

#End Region

#Region " Properties "

        Public Property ReceiptNo() As String
            Get
                Return m_ReceiptNo
            End Get
            Set(Value As String)
                m_ReceiptNo = Value
            End Set
        End Property

        Public Property ExtraBillNo() As String
            Get
                Return m_ExtraBillNo
            End Get
            Set(Value As String)
                m_ExtraBillNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(value As Integer)
                m_Quantity = value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property Discount() As Decimal
            Get
                Return m_Discount
            End Get
            Set(value As Decimal)
                m_Discount = value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(Value As Decimal)
                m_Amount = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPaymentExtraBillItems")

            With Parameters
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("Discount", Me.Discount))
                .Add(New ParameterSQL("Amount", Me.Amount))
            End With

            Return Parameters

        End Function


        Public Function GetPaymentExtraBillItems(receiptNo As String, itemCategoryID As String) As DataSet

            If String.IsNullOrEmpty(itemCategoryID) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", receiptNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With


            Else
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", receiptNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))

                End With

            End If

            Return Me.Load("uspGetPaymentExtraBillItems", "PaymentExtraBillItems", Parameters)

        End Function


        Public Function GetPaymentExtraBillItems(receiptNo As String) As DataSet
            Return Me.GetPaymentExtraBillItems(receiptNo, Nothing)

        End Function


        Public Function GetVisitPaymentExtraBillItems(receiptNo As String, visitNo As String, itemCategoryID As String) As DataSet

            If String.IsNullOrEmpty(itemCategoryID) Then
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", receiptNo))
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With


            Else
                With Parameters
                    .Add(New ParameterSQL("ReceiptNo", receiptNo))
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))

                End With

            End If

            Return Me.Load("uspGetVisitPaymentExtraBillItems", "PaymentExtraBillItems", Parameters)

        End Function

        Public Function GetVisitPaymentExtraBillItems(receiptNo As String, visitNo As String) As DataSet


            Return Me.GetVisitPaymentExtraBillItems(receiptNo, visitNo, String.Empty)

        End Function

#End Region

    End Class

    Public Class Claims : Inherits DBConnect

#Region " Fields "

        Private m_ClaimNo As String
        Private m_MedicalCardNo As String
        Private m_PatientNo As String
        Private m_VisitDate As Date
        Private m_VisitTime As String
        Private m_HealthUnitCode As String
        Private m_PrimaryDoctor As String
        Private m_ClaimStatusID As String
        Private m_ClaimEntryID As String

#End Region

#Region " Properties "

        Public Property ClaimNo() As String
            Get
                Return m_ClaimNo
            End Get
            Set(Value As String)
                m_ClaimNo = Value
            End Set
        End Property

        Public Property MedicalCardNo() As String
            Get
                Return m_MedicalCardNo
            End Get
            Set(Value As String)
                m_MedicalCardNo = Value
            End Set
        End Property

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property VisitDate() As Date
            Get
                Return m_VisitDate
            End Get
            Set(Value As Date)
                m_VisitDate = Value
            End Set
        End Property

        Public Property VisitTime() As String
            Get
                Return m_VisitTime
            End Get
            Set(Value As String)
                m_VisitTime = Value
            End Set
        End Property

        Public Property HealthUnitCode() As String
            Get
                Return m_HealthUnitCode
            End Get
            Set(Value As String)
                m_HealthUnitCode = Value
            End Set
        End Property

        Public Property PrimaryDoctor() As String
            Get
                Return m_PrimaryDoctor
            End Get
            Set(Value As String)
                m_PrimaryDoctor = Value
            End Set
        End Property

        Public Property ClaimStatusID() As String
            Get
                Return m_ClaimStatusID
            End Get
            Set(Value As String)
                m_ClaimStatusID = Value
            End Set
        End Property

        Public Property ClaimEntryID() As String
            Get
                Return m_ClaimEntryID
            End Get
            Set(Value As String)
                m_ClaimEntryID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertClaims")

            With Parameters
                .Add(New ParameterSQL("ClaimNo", Me.ClaimNo))
                .Add(New ParameterSQL("MedicalCardNo", Me.MedicalCardNo))
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("VisitDate", Me.VisitDate))
                .Add(New ParameterSQL("VisitTime", Me.VisitTime))
                .Add(New ParameterSQL("HealthUnitCode", Me.HealthUnitCode))
                .Add(New ParameterSQL("PrimaryDoctor", Me.PrimaryDoctor))
                .Add(New ParameterSQL("ClaimStatusID", Me.ClaimStatusID))
                .Add(New ParameterSQL("ClaimEntryID", Me.ClaimEntryID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateClaims")

            With Parameters
                .Add(New ParameterSQL("ClaimNo", Me.ClaimNo))
                .Add(New ParameterSQL("MedicalCardNo", Me.MedicalCardNo))
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("VisitDate", Me.VisitDate))
                .Add(New ParameterSQL("VisitTime", Me.VisitTime))
                .Add(New ParameterSQL("HealthUnitCode", Me.HealthUnitCode))
                .Add(New ParameterSQL("PrimaryDoctor", Me.PrimaryDoctor))
                .Add(New ParameterSQL("ClaimStatusID", Me.ClaimStatusID))
                .Add(New ParameterSQL("ClaimEntryID", Me.ClaimEntryID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("Claims")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ClaimNo = '" + Me.ClaimNo + "'"
            Dim errorPart As String = "Claim No: " + Me.ClaimNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Claims"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Claims")

            Return Parameters

        End Function

        Public Function GetClaims(claimNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ClaimNo", claimNo))
            End With

            Return Me.Load("uspGetClaims", "Claims", Parameters)

        End Function

        ''' <summary>
        ''' Returns all periodic claims as per specified visit period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicClaims(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetPeriodicClaims", "Claims", Parameters)

        End Function

        ''' <summary>
        ''' Returns all Waiting periodic claims as per specified visit period
        ''' </summary>
        ''' <param name="claimPaymentsAlertDays"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetWaitingPeriodicClaims(claimPaymentsAlertDays As Integer) As DataSet

            With Parameters
                .Add(New ParameterSQL("ClaimPaymentsAlertDays", claimPaymentsAlertDays))
            End With

            Return Me.Load("uspGetWaitingPeriodicClaims", "WaitingPeriodicClaims", Parameters)

        End Function


        ''' <summary>
        ''' Returns Claims for aparticular Medical Card No
        ''' </summary>
        ''' <param name="medicalCardNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetClaimsByMedicalCardNo(medicalCardNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
            End With

            Return Me.Load("uspGetClaimsByMedicalCardNo", "Claims", Parameters)

        End Function

        Public Function GetClaimNo(medicalCardNo As String, visitDate As Nullable(Of Date)) As String

            Dim oAppData As New SyncSoft.Common.Classes.AppData()

            If IsNothing(visitDate) OrElse CDate(visitDate).Equals(oAppData.NullDateValue) Then
                With Parameters
                    .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
                    .Add(New ParameterSQL("VisitDate", SqlDbType.SmallDateTime))
                    .Add(New ParameterSQL("ClaimNo", SqlDbType.VarChar, 20))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
                    .Add(New ParameterSQL("VisitDate", visitDate))
                    .Add(New ParameterSQL("ClaimNo", SqlDbType.VarChar, 20))
                End With
            End If

            Me.ReadData = Me.Read("uspGetClaimNo", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("ClaimNo")) Then
                    Return CStr(Me.ReadData("ClaimNo"))
                Else : Return String.Empty
                End If

            Else : Return Nothing
            End If

        End Function

        Public Function GetClaimNo(medicalCardNo As String) As String
            Return Me.GetClaimNo(medicalCardNo, Nothing)
        End Function

        Public Function IsClaimDateSaved(medicalCardNo As String, visitDate As Date) As Boolean

            Dim records As Integer

            With Parameters
                .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
                .Add(New ParameterSQL("VisitDate", visitDate))
                .Add(New ParameterSQL("Records", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspCountMemberVisitDate", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("Records")) Then
                    records = 0
                Else : records = CInt(Me.ReadData("Records"))
                End If
            End If

            Return records > 0

        End Function

        Public Function GetNextClaimID(medicalCardNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
                .Add(New ParameterSQL("ClaimID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextClaimID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("ClaimID")) Then
                    Return CInt(Me.ReadData("ClaimID"))
                Else : Return 1
                End If

            End If

        End Function

        ''' <summary>
        ''' Get Member Premium Balance
        ''' </summary>
        ''' <param name="CompanyNo"></param>
        ''' <param name="PatientNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 

        Public Function GetMemberPremiumBalance(PatientNo As String, companyNo As String) As Decimal

            With Parameters
                .Add(New ParameterSQL("PatientNo", PatientNo))
                .Add(New ParameterSQL("CompanyNo", companyNo))
                .Add(New ParameterSQL("RemainingBalance", SqlDbType.Money))
            End With

            Me.ReadData = Read("uspGetTotalMemberPremiumBalance", Parameters)

            If Not Me.ReadData Is Nothing Then

                If IsDBNull(Me.ReadData("RemainingBalance")) Then
                    Return 0
                Else : Return CDec(Me.ReadData("RemainingBalance"))
                End If

            End If

        End Function
#End Region

    End Class

    Public Class ClaimsEXT : Inherits DBConnect

#Region " Fields "

        Private m_ClaimNo As String
        Private m_VisitNo As String

#End Region

#Region " Properties "

        Public Property ClaimNo() As String
            Get
                Return m_ClaimNo
            End Get
            Set(Value As String)
                m_ClaimNo = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertClaimsEXT")

            With Parameters
                .Add(New ParameterSQL("ClaimNo", Me.ClaimNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateClaimsEXT")

            With Parameters
                .Add(New ParameterSQL("ClaimNo", Me.ClaimNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
            End With

            'For Audit Trail
            Me.SetLogObject("ClaimsEXT")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ClaimNo = '" + Me.ClaimNo + "'"
            Dim errorPart As String = "Claim No: " + Me.ClaimNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ClaimsEXT"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ClaimsEXT")

            Return Parameters

        End Function

        Public Function GetClaimsEXT(claimNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ClaimNo", claimNo))
            End With

            Return Me.Load("uspGetClaimsEXT", "ClaimsEXT", Parameters)

        End Function

        Public Function GetClaimsEXTClaimNo(visitNo As String) As String

            Try

                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ClaimNo", SqlDbType.VarChar, 20))
                End With

                Me.ReadData = Me.Read("uspGetClaimsEXTClaimNo", Parameters)

                If Me.ReadData IsNot Nothing Then

                    If Not IsDBNull(Me.ReadData("ClaimNo")) Then
                        Me.ClaimNo = CStr(Me.ReadData("ClaimNo"))
                    Else : Me.ClaimNo = String.Empty
                    End If

                    Return Me.ClaimNo
                Else : Return String.Empty
                End If

            Catch ex As Exception
                Throw ex

            End Try

        End Function

#End Region

    End Class

    Public Class ClaimDiagnosis : Inherits DBConnect

#Region " Fields "

        Private m_ClaimNo As String
        Private m_DiseaseCode As String

#End Region

#Region " Properties "

        Public Property ClaimNo() As String
            Get
                Return m_ClaimNo
            End Get
            Set(Value As String)
                m_ClaimNo = Value
            End Set
        End Property

        Public Property DiseaseCode() As String
            Get
                Return m_DiseaseCode
            End Get
            Set(Value As String)
                m_DiseaseCode = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditClaimDiagnosis")

            With Parameters
                .Add(New ParameterSQL("ClaimNo", Me.ClaimNo))
                .Add(New ParameterSQL("DiseaseCode", Me.DiseaseCode))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "ClaimNo = '" + Me.ClaimNo + "' and DiseaseCode = '" + Me.DiseaseCode + "'"
            errorPart = "Claim No: " + Me.ClaimNo + " and Disease Code: " + Me.DiseaseCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ClaimDiagnosis"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ClaimDiagnosis")

            Return Parameters

        End Function

        Public Function GetClaimDiagnosis(claimNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ClaimNo", claimNo))
            End With

            Return Me.Load("uspGetClaimDiagnosis", "ClaimDiagnosis", Parameters)

        End Function

#End Region

    End Class

    Public Class ClaimDetails : Inherits DBConnect

#Region " Fields "

        Private m_ClaimNo As String
        Private m_ItemName As String
        Private m_BenefitCode As String
        Private m_Quantity As Integer
        Private m_UnitPrice As Decimal
        Private m_Adjustment As Decimal
        Private m_Amount As Decimal
        Private m_Notes As String
        Private m_LimitAmount As Decimal
        Private m_ConsumedAmount As Decimal
        Private m_LimitBalance As Decimal

#End Region

#Region " Properties "

        Public Property ClaimNo() As String
            Get
                Return m_ClaimNo
            End Get
            Set(Value As String)
                m_ClaimNo = Value
            End Set
        End Property

        Public Property ItemName() As String
            Get
                Return m_ItemName
            End Get
            Set(Value As String)
                m_ItemName = Value
            End Set
        End Property

        Public Property BenefitCode() As String
            Get
                Return m_BenefitCode
            End Get
            Set(Value As String)
                m_BenefitCode = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property Adjustment() As Decimal
            Get
                Return m_Adjustment
            End Get
            Set(Value As Decimal)
                m_Adjustment = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(Value As Decimal)
                m_Amount = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

        Public Property LimitAmount() As Decimal
            Get
                Return m_LimitAmount
            End Get
            Set(Value As Decimal)
                m_LimitAmount = Value
            End Set
        End Property

        Public Property ConsumedAmount() As Decimal
            Get
                Return m_ConsumedAmount
            End Get
            Set(Value As Decimal)
                m_ConsumedAmount = Value
            End Set
        End Property

        Public Property LimitBalance() As Decimal
            Get
                Return m_LimitBalance
            End Get
            Set(Value As Decimal)
                m_LimitBalance = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditClaimDetails")

            With Parameters
                .Add(New ParameterSQL("ClaimNo", Me.ClaimNo))
                .Add(New ParameterSQL("ItemName", Me.ItemName))
                .Add(New ParameterSQL("BenefitCode", Me.BenefitCode))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("Adjustment", Me.Adjustment))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LimitAmount", Me.LimitAmount))
                .Add(New ParameterSQL("ConsumedAmount", Me.ConsumedAmount))
                .Add(New ParameterSQL("LimitBalance", Me.LimitBalance))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ClaimNo = '" + Me.ClaimNo + "' and ItemName = '" + Me.ItemName + "'"
            Dim errorPart As String = "Claim No: " + Me.ClaimNo + " and Item Name: " + Me.ItemName

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ClaimDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ClaimDetails")

            Return Parameters

        End Function

        Public Function GetClaimDetails(claimNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ClaimNo", claimNo))
            End With

            Return Me.Load("uspGetClaimDetails", "ClaimDetails", Parameters)

        End Function

        ''' <summary>
        ''' Gets Policy Consumed Amount
        ''' </summary>
        ''' <param name="medicalCardNo"></param>
        ''' <param name="benefitCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetPolicyConsumedAmount(medicalCardNo As String, benefitCode As String) As Decimal

            With Parameters
                .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
                .Add(New ParameterSQL("BenefitCode", benefitCode))
                .Add(New ParameterSQL("PolicyConsumedAmount", SqlDbType.Money))
            End With

            Me.ReadData = Read("uspGetPolicyConsumedAmount", Parameters)

            If Not Me.ReadData Is Nothing Then

                If IsDBNull(Me.ReadData("PolicyConsumedAmount")) Then
                    Return 0
                Else : Return CDec(Me.ReadData("PolicyConsumedAmount"))
                End If

            End If

        End Function

#End Region

    End Class

    Public Class ClaimPayments : Inherits DBConnect

#Region " Fields "

        Private m_ClaimNo As String
        Private m_PayStatusID As String
        Private m_PaymentDateTime As Date

#End Region

#Region " Properties "

        Public Property ClaimNo() As String
            Get
                Return m_ClaimNo
            End Get
            Set(ByVal Value As String)
                m_ClaimNo = Value
            End Set
        End Property

        Public Property PayStatusID() As String
            Get
                Return m_PayStatusID
            End Get
            Set(ByVal Value As String)
                m_PayStatusID = Value
            End Set
        End Property

        Public Property PaymentDateTime() As DateTime
            Get
                Return m_PaymentDateTime
            End Get
            Set(ByVal Value As DateTime)
                m_PaymentDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertClaimPayments")

            With Parameters
                .Add(New ParameterSQL("ClaimNo", Me.ClaimNo))
                .Add(New ParameterSQL("PayStatusID", Me.PayStatusID))
                .Add(New ParameterSQL("PaymentDateTime", Me.PaymentDateTime))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateClaimPayments")

            With Parameters
                .Add(New ParameterSQL("ClaimNo", Me.ClaimNo))
                .Add(New ParameterSQL("PayStatusID", Me.PayStatusID))
                .Add(New ParameterSQL("PaymentDateTime", Me.PaymentDateTime))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("ClaimPayments")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ClaimNo = '" + Me.ClaimNo + "'"
            Dim errorPart As String = "Claim No: " + Me.ClaimNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ClaimPayments"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ClaimPayments")

            Return Parameters

        End Function

        Public Function GetClaimPayments(ByVal claimNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ClaimNo", claimNo))
            End With

            Return Me.Load("uspGetClaimPayments", "ClaimPayments", Parameters)

        End Function

        ''' <summary>
        ''' Returns all periodic Claims Per Insurance Per HealthUnit Per Company Per Medical CardNo as per specified visit period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <param name="InsuranceNo"></param>
        ''' <param name="HealthUnitCode"></param>
        ''' <param name="CompanyNo"></param>
        ''' <param name="MedicalCardNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicClaimsPerInsurancePerHealthUnitPerCompanyPerMedicalCardNo(ByVal startDate As Date, ByVal endDate As Date, ByVal insuranceNo As String, ByVal healthUnitCode As String, ByVal companyNo As String, ByVal medicalCardNo As String) As DataSet
            If Not String.IsNullOrEmpty(medicalCardNo) Then
                If Not String.IsNullOrEmpty(companyNo) Then
                    With Parameters
                        .Add(New ParameterSQL("startDate", startDate))
                        .Add(New ParameterSQL("endDate", endDate))
                        .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                        .Add(New ParameterSQL("HealthUnitCode", healthUnitCode))
                        .Add(New ParameterSQL("CompanyNo", companyNo))
                        .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
                    End With
                Else
                    With Parameters
                        .Add(New ParameterSQL("startDate", startDate))
                        .Add(New ParameterSQL("endDate", endDate))
                        .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                        .Add(New ParameterSQL("HealthUnitCode", healthUnitCode))
                        .Add(New ParameterSQL("CompanyNo", Nothing))
                        .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
                    End With
                End If
            Else
                If Not String.IsNullOrEmpty(companyNo) Then
                    With Parameters
                        .Add(New ParameterSQL("startDate", startDate))
                        .Add(New ParameterSQL("endDate", endDate))
                        .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                        .Add(New ParameterSQL("HealthUnitCode", healthUnitCode))
                        .Add(New ParameterSQL("CompanyNo", companyNo))
                        .Add(New ParameterSQL("MedicalCardNo", Nothing))
                    End With
                Else
                    If String.IsNullOrEmpty(healthUnitCode) Then
                        With Parameters
                            .Add(New ParameterSQL("startDate", startDate))
                            .Add(New ParameterSQL("endDate", endDate))
                            .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                            .Add(New ParameterSQL("HealthUnitCode", Nothing))
                            .Add(New ParameterSQL("CompanyNo", Nothing))
                            .Add(New ParameterSQL("MedicalCardNo", Nothing))
                        End With
                    Else
                        With Parameters
                            .Add(New ParameterSQL("startDate", startDate))
                            .Add(New ParameterSQL("endDate", endDate))
                            .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                            .Add(New ParameterSQL("HealthUnitCode", healthUnitCode))
                            .Add(New ParameterSQL("CompanyNo", Nothing))
                            .Add(New ParameterSQL("MedicalCardNo", Nothing))
                        End With
                    End If

                End If
            End If
            Return Me.Load("uspGetPeriodicClaimsPerInsurancePerHealthUnitPerCompanyPerMedicalCardNo", "PeriodicClaimsPerInsurancePerHealthUnitPerCompanyPerMedicalCardNo", Parameters)

        End Function

        ''' <summary>
        ''' Returns Medical CardNo Per Insurance Per HealthUnit Per Company as per specified visit period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <param name="InsuranceNo"></param>
        ''' <param name="HealthUnitCode"></param>
        ''' <param name="CompanyNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetMedicalCardNoPerInsurancePerHealthUnitPerCompany(ByVal startDate As Date, ByVal endDate As Date, ByVal insuranceNo As String, ByVal healthUnitCode As String, ByVal companyNo As String) As DataSet
            If Not String.IsNullOrEmpty(companyNo) Then
                With Parameters
                    .Add(New ParameterSQL("startDate", startDate))
                    .Add(New ParameterSQL("endDate", endDate))
                    .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                    .Add(New ParameterSQL("HealthUnitCode", healthUnitCode))
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("startDate", startDate))
                    .Add(New ParameterSQL("endDate", endDate))
                    .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                    .Add(New ParameterSQL("HealthUnitCode", healthUnitCode))
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With
            End If
            Return Me.Load("uspGetMedicalCardNoPerInsurancePerHealthUnitPerCompany", "MedicalCardNoPerInsurancePerHealthUnitPerCompany", Parameters)

        End Function

        Public Function GetPeriodicClaimsPerClaimNo(ByVal claimNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ClaimNo", claimNo))
            End With

            Return Me.Load("uspGetPeriodicClaimsPerClaimNo", "PeriodicClaimsPerClaimNo", Parameters)

        End Function

#End Region

    End Class

    Public Class PatientAllergies : Inherits DBConnect

#Region " Fields "

        Private m_PatientNo As String
        Private m_AllergyNo As String
        Private m_Reaction As String

#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property AllergyNo() As String
            Get
                Return m_AllergyNo
            End Get
            Set(Value As String)
                m_AllergyNo = Value
            End Set
        End Property

        Public Property Reaction() As String
            Get
                Return m_Reaction
            End Get
            Set(Value As String)
                m_Reaction = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditPatientAllergies")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("AllergyNo", Me.AllergyNo))
                .Add(New ParameterSQL("Reaction", Me.Reaction))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PatientNo = '" + Me.PatientNo + "' and AllergyNo = '" + Me.AllergyNo + "'"
            Dim errorPart As String = "Patient No: " + Me.PatientNo + " and Allergy No: " + Me.AllergyNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PatientAllergies"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PatientAllergies")

            Return Parameters

        End Function

        Public Function GetPatientAllergies(patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetPatientAllergies", "PatientAllergies", Parameters)

        End Function

#End Region

    End Class

    Public Class Diagnosis : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_DiseaseCode As String
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property DiseaseCode() As String
            Get
                Return m_DiseaseCode
            End Get
            Set(Value As String)
                m_DiseaseCode = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditDiagnosis")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("DiseaseCode", Me.DiseaseCode))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "VisitNo = '" + Me.VisitNo + "' and DiseaseCode = '" + Me.DiseaseCode + "'"
            errorPart = "Visit No: " + Me.VisitNo + " and Diagnosis: " + Me.DiseaseCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Diagnosis"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Diagnosis")

            Return Parameters

        End Function

        Public Function GetDiagnosis(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetDiagnosis", "Diagnosis", Parameters)

        End Function

        ''' <summary>
        ''' Gets periodic diagnosis of a patient using patients number, start and end dates
        ''' </summary>
        ''' <param name="PatientNo"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGeneralDeathDiagnosis(PatientNo As String, startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet

            If (startDate Is Nothing) OrElse (endDate Is Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("PatientNo", PatientNo))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            Else

                With (Parameters)
                    .Add(New ParameterSQL("PatientNo", PatientNo))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            End If

            Return Me.Load("uspGetDeathGeneralDiagnosis", "Diagnosis", Parameters)
        End Function

        ''' <summary>
        ''' Gets all diagnosis of a patient using patients number only
        ''' </summary>
        ''' <param name="PatientNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGeneralDeathDiagnosis(PatientNo As String) As DataSet
            Return GetGeneralDeathDiagnosis(PatientNo, Nothing, Nothing)
        End Function

#End Region

    End Class

    Public Class Admissions : Inherits DBConnect

#Region " Fields "

        Private m_AdmissionNo As String
        Private m_VisitNo As String
        Private m_StaffNo As String
        Private m_BedNo As String
        Private m_AdmissionDateTime As Date
        Private m_BillModesID As String
        Private m_BillNo As String
        Private m_InsuranceNo As String
        Private m_AssociatedBillNo As String
        Private m_MemberCardNo As String
        Private m_MainMemberName As String
        Private m_ClaimReferenceNo As String
        Private m_CoPayTypeID As String
        Private m_CoPayPercent As Single
        Private m_CoPayValue As Decimal
        Private m_AdmissionNotes As String
        Private m_ChartNumber As String
        Private m_AdmissionStatusID As String
        Private m_ServiceCode As String
        Private m_ProvisionalDiagnosis As String
        Private m_SmartCardApplicable As Boolean
        Private m_AccessCashServices As Nullable(Of Boolean)
#End Region

#Region " Properties "

        Public Property AdmissionNo() As String
            Get
                Return m_AdmissionNo
            End Get
            Set(Value As String)
                m_AdmissionNo = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property BedNo() As String
            Get
                Return m_BedNo
            End Get
            Set(Value As String)
                m_BedNo = Value
            End Set
        End Property

        Public Property AdmissionDateTime() As Date
            Get
                Return m_AdmissionDateTime
            End Get
            Set(Value As Date)
                m_AdmissionDateTime = Value
            End Set
        End Property

        Public Property BillModesID() As String
            Get
                Return m_BillModesID
            End Get
            Set(Value As String)
                m_BillModesID = Value
            End Set
        End Property

        Public Property BillNo() As String
            Get
                Return m_BillNo
            End Get
            Set(value As String)
                m_BillNo = value
            End Set
        End Property

        Public Property InsuranceNo() As String
            Get
                Return m_InsuranceNo
            End Get
            Set(Value As String)
                m_InsuranceNo = Value
            End Set
        End Property

        Public Property AssociatedBillNo() As String
            Get
                Return m_AssociatedBillNo
            End Get
            Set(Value As String)
                m_AssociatedBillNo = Value
            End Set
        End Property

        Public Property MemberCardNo() As String
            Get
                Return m_MemberCardNo
            End Get
            Set(Value As String)
                m_MemberCardNo = Value
            End Set
        End Property

        Public Property MainMemberName() As String
            Get
                Return m_MainMemberName
            End Get
            Set(Value As String)
                m_MainMemberName = Value
            End Set
        End Property

        Public Property ClaimReferenceNo() As String
            Get
                Return m_ClaimReferenceNo
            End Get
            Set(Value As String)
                m_ClaimReferenceNo = Value
            End Set
        End Property

        Public Property CoPayTypeID() As String
            Get
                Return m_CoPayTypeID
            End Get
            Set(Value As String)
                m_CoPayTypeID = Value
            End Set
        End Property

        Public Property CoPayPercent() As Single
            Get
                Return m_CoPayPercent
            End Get
            Set(Value As Single)
                m_CoPayPercent = Value
            End Set
        End Property

        Public Property CoPayValue() As Decimal
            Get
                Return m_CoPayValue
            End Get
            Set(Value As Decimal)
                m_CoPayValue = Value
            End Set
        End Property

        Public Property AdmissionNotes() As String
            Get
                Return m_AdmissionNotes
            End Get
            Set(Value As String)
                m_AdmissionNotes = Value
            End Set
        End Property

        Public Property ChartNumber() As String
            Get
                Return m_ChartNumber
            End Get
            Set(Value As String)
                m_ChartNumber = Value
            End Set
        End Property

        Public Property AdmissionStatusID() As String
            Get
                Return m_AdmissionStatusID
            End Get
            Set(Value As String)
                m_AdmissionStatusID = Value
            End Set
        End Property

        Public Property ServiceCode() As String
            Get
                Return m_ServiceCode
            End Get
            Set(Value As String)
                m_ServiceCode = Value
            End Set
        End Property

         Public Property ProvisionalDiagnosis() As String
            Get
                Return m_ProvisionalDiagnosis
            End Get
            Set(Value As String)
                m_ProvisionalDiagnosis = Value
            End Set
        End Property

        Public Property AccessCashServices() As Nullable(Of Boolean)
            Get
                Return m_AccessCashServices
            End Get
            Set(Value As Nullable(Of Boolean))
                m_AccessCashServices = Value
            End Set
        End Property

        Public Property SmartCardApplicable() As Boolean
            Get
                Return m_SmartCardApplicable
            End Get
            Set(Value As Boolean)
                m_SmartCardApplicable = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertAdmissions")

            With Parameters
                .Add(New ParameterSQL("AdmissionNo", Me.AdmissionNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("BedNo", Me.BedNo))
                .Add(New ParameterSQL("AdmissionDateTime", Me.AdmissionDateTime))
                .Add(New ParameterSQL("ServiceCode", Me.ServiceCode))
                .Add(New ParameterSQL("BillModesID", Me.BillModesID))
                .Add(New ParameterSQL("BillNo", Me.BillNo))
                .Add(New ParameterSQL("InsuranceNo", Me.InsuranceNo))
                .Add(New ParameterSQL("AssociatedBillNo", Me.AssociatedBillNo))
                .Add(New ParameterSQL("MemberCardNo", Me.MemberCardNo))
                .Add(New ParameterSQL("MainMemberName", Me.MainMemberName))
                .Add(New ParameterSQL("ClaimReferenceNo", Me.ClaimReferenceNo))
                .Add(New ParameterSQL("ProvisionalDiagnosis", Me.ProvisionalDiagnosis))
                .Add(New ParameterSQL("AccessCashServices", Me.AccessCashServices))
                .Add(New ParameterSQL("SmartCardApplicable", Me.SmartCardApplicable))
                .Add(New ParameterSQL("CoPayTypeID", Me.CoPayTypeID))
                .Add(New ParameterSQL("CoPayPercent", Me.CoPayPercent))
                .Add(New ParameterSQL("CoPayValue", Me.CoPayValue))
                .Add(New ParameterSQL("AdmissionNotes", Me.AdmissionNotes))
                .Add(New ParameterSQL("AdmissionStatusID", Me.AdmissionStatusID))
                .Add(New ParameterSQL("ChartNumber", Me.ChartNumber))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateAdmissions")

            With Parameters
                .Add(New ParameterSQL("AdmissionNo", Me.AdmissionNo))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("BedNo", Me.BedNo))
                .Add(New ParameterSQL("AdmissionDateTime", Me.AdmissionDateTime))
                .Add(New ParameterSQL("ServiceCode", Me.ServiceCode))
                .Add(New ParameterSQL("BillModesID", Me.BillModesID))
                .Add(New ParameterSQL("BillNo", Me.BillNo))
                .Add(New ParameterSQL("InsuranceNo", Me.InsuranceNo))
                .Add(New ParameterSQL("AssociatedBillNo", Me.AssociatedBillNo))
                .Add(New ParameterSQL("MemberCardNo", Me.MemberCardNo))
                .Add(New ParameterSQL("MainMemberName", Me.MainMemberName))
                .Add(New ParameterSQL("ClaimReferenceNo", Me.ClaimReferenceNo))
                .Add(New ParameterSQL("ProvisionalDiagnosis", Me.ProvisionalDiagnosis))
                .Add(New ParameterSQL("CoPayTypeID", Me.CoPayTypeID))
                .Add(New ParameterSQL("CoPayPercent", Me.CoPayPercent))
                .Add(New ParameterSQL("CoPayValue", Me.CoPayValue))
                .Add(New ParameterSQL("AccessCashServices", Me.AccessCashServices))
                .Add(New ParameterSQL("SmartCardApplicable", Me.SmartCardApplicable))
                .Add(New ParameterSQL("AdmissionNotes", Me.AdmissionNotes))
                .Add(New ParameterSQL("AdmissionStatusID", Me.AdmissionStatusID))
                .Add(New ParameterSQL("ChartNumber", Me.ChartNumber))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("Admissions")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "AdmissionNo = '" + Me.AdmissionNo + "'"
            Dim errorPart As String = "Admission No: " + Me.AdmissionNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Admissions"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Admissions")

            Return Parameters

        End Function

        Public Function GetAdmissions(admissionNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AdmissionNo", admissionNo))
            End With

            Return Me.Load("uspGetAdmissions", "Admissions", Parameters)

        End Function

        ''' <summary>
        ''' Gets In Ward Admissions for the supplied period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInWardAdmissions(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetInWardAdmissions", "Admissions", Parameters)

        End Function

        ''' <summary>
        ''' Gets the next Admission ID for the supplied Visit No
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNextAdmissionID(visitNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("AdmissionID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextAdmissionID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("AdmissionID")) Then
                    Return CInt(Me.ReadData("AdmissionID"))
                Else : Return 1
                End If

            End If

        End Function

        ''' <summary>
        ''' Gets the Next Custom Admission ID for the supplied Visit No
        ''' </summary>
        ''' <param name="wardInitial"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNextCustomAdmissionID(wardInitial As String) As Integer

            With Parameters
                .Add(New ParameterSQL("WardInitial", WardInitial))
                .Add(New ParameterSQL("AdmissionID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextCustomAdmissionID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("AdmissionID")) Then
                    Return CInt(Me.ReadData("AdmissionID"))
                Else : Return 1
                End If

            End If

        End Function

        ''' <summary>
        ''' Gets Admission No for the supplied Patient No and Visit Date
        ''' </summary>
        ''' <param name="patientNo"></param>
        ''' <param name="visitDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetAdmissionNo(patientNo As String, visitDate As Nullable(Of Date)) As String

            Dim oAppData As New SyncSoft.Common.Classes.AppData()

            If IsNothing(visitDate) OrElse CDate(visitDate).Equals(oAppData.NullDateValue) Then
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("VisitDate", SqlDbType.SmallDateTime))
                    .Add(New ParameterSQL("AdmissionNo", SqlDbType.VarChar, 20))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("VisitDate", visitDate))
                    .Add(New ParameterSQL("AdmissionNo", SqlDbType.VarChar, 20))
                End With
            End If

            Me.ReadData = Me.Read("uspGetAdmissionNo", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("AdmissionNo")) Then
                    Return CStr(Me.ReadData("AdmissionNo"))
                Else : Return String.Empty
                End If

            Else : Return Nothing
            End If

        End Function

        ''' <summary>
        ''' Gets the latest Admission No for the supplied Patient No
        ''' </summary>
        ''' <param name="patientNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetAdmissionNo(patientNo As String) As String
            Return Me.GetAdmissionNo(patientNo, Nothing)
        End Function

        ''' <summary>
        ''' Gets Ward Initial for the supplied Ward Name
        ''' </summary>
        ''' <param name="wardName"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetWardInitial(wardName As String) As String

            With Parameters
                .Add(New ParameterSQL("WardName", wardName))
                .Add(New ParameterSQL("WardInitial", SqlDbType.VarChar, 1))
            End With

            Me.ReadData = Me.Read("uspGetWardInitial", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("WardInitial")) Then
                    Return CStr(Me.ReadData("WardInitial"))
                Else : Return String.Empty
                End If

            Else : Return Nothing
            End If

        End Function

        Public Function GetTodaysAdmissions() As DataSet
            Return Me.Load("uspGetTodaysAdmissions", "Admissions", Parameters)
        End Function

        Public Function GetOverStayedAdmissions(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))

            End With

            Return Me.Load("uspGetOverStayedAdmissions", "Admissions", Parameters)

        End Function


        Public Function GetOverStayedAdmissions() As DataSet


            Return Me.Load("uspGetOverStayedAdmissions", "Admissions", Parameters)

        End Function

        Public Function GetcountOverStayedAdmission() As DataSet
            Return Me.Load("uspGetcountOverStayedAdmission", "Admissions", Parameters)
        End Function

#End Region

    End Class

    Public Class IPDDoctor : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_AdmissionNo As String
        Private m_StaffNo As String
        Private m_RoundDateTime As Date

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property AdmissionNo() As String
            Get
                Return m_AdmissionNo
            End Get
            Set(Value As String)
                m_AdmissionNo = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property RoundDateTime() As Date
            Get
                Return m_RoundDateTime
            End Get
            Set(Value As Date)
                m_RoundDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertIPDDoctor")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("AdmissionNo", Me.AdmissionNo))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("RoundDateTime", Me.RoundDateTime))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDDoctor")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("AdmissionNo", Me.AdmissionNo))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("RoundDateTime", Me.RoundDateTime))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDDoctor")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RoundNo = '" + Me.RoundNo + "'"
            Dim errorPart As String = "Round No: " + Me.RoundNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDDoctor"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDDoctor")

            Return Parameters

        End Function

        Private Function GetIPDDoctor(roundNo As String, admissionNo As String) As DataSet

            If (roundNo <> "" OrElse roundNo <> String.Empty) And
                (admissionNo = "" OrElse admissionNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("AdmissionNo", Nothing))
                End With

            ElseIf (roundNo = "" OrElse roundNo = String.Empty) And
                    (admissionNo <> "" OrElse admissionNo <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("RoundNo", Nothing))
                    .Add(New ParameterSQL("AdmissionNo", admissionNo))
                End With

            ElseIf (roundNo = "" OrElse roundNo = String.Empty) And
                    (admissionNo = "" OrElse admissionNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("RoundNo", Nothing))
                    .Add(New ParameterSQL("AdmissionNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetIPDDoctor", "IPDDoctor", Parameters)

        End Function

        ''' <summary>
        ''' Returns IPDDoctor for aspecified roundNo
        ''' </summary>
        ''' <param name="roundNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDDoctor(roundNo As String) As DataSet
            Return GetIPDDoctor(roundNo, String.Empty)
        End Function

        ''' <summary>
        ''' Returns IPDDoctor for aspecified admission no
        ''' </summary>
        ''' <param name="admissionNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDDoctorByAdmissionNo(admissionNo As String) As DataSet
            Return GetIPDDoctor(String.Empty, admissionNo)
        End Function

        ''' <summary>
        ''' Returns all IPDDoctor
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDDoctor() As DataSet
            Return GetIPDDoctor(String.Empty, String.Empty)
        End Function

        ''' <summary>
        ''' Returns IPDDoctor for aparticular admission no
        ''' </summary>
        ''' <param name="admissionNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDDoctorByAdmissionNoNavigate(admissionNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AdmissionNo", admissionNo))
            End With

            Return Me.Load("uspGetIPDDoctorByAdmissionNo", "IPDDoctor", Parameters)

        End Function

        ''' <summary>
        ''' Gets IPD Doctor Rounds for the supplied period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDDoctorRounds(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetIPDDoctorRounds", "IPDDoctor", Parameters)

        End Function

        Public Function IsIPDDoctorSaved() As Boolean

            Dim noIPDDoctor As Short

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("NoIPDDoctor", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspCountIPDDoctor", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("NoIPDDoctor")) Then
                    noIPDDoctor = 0
                Else : noIPDDoctor = CShort(Me.ReadData("NoIPDDoctor"))
                End If
            End If

            Return noIPDDoctor > 0

        End Function

        Public Function GetNextRoundID(admissionNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("AdmissionNo", admissionNo))
                .Add(New ParameterSQL("RoundID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextRoundID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("RoundID")) Then
                    Return CInt(Me.ReadData("RoundID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function GetRoundNo(admissionNo As String, roundDateTime As Nullable(Of Date)) As String

            Dim oAppData As New SyncSoft.Common.Classes.AppData()

            If IsNothing(roundDateTime) OrElse CDate(roundDateTime).Equals(oAppData.NullDateValue) Then
                With Parameters
                    .Add(New ParameterSQL("AdmissionNo", admissionNo))
                    .Add(New ParameterSQL("RoundDateTime", SqlDbType.SmallDateTime))
                    .Add(New ParameterSQL("RoundNo", SqlDbType.VarChar, 20))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("AdmissionNo", admissionNo))
                    .Add(New ParameterSQL("RoundDateTime", roundDateTime))
                    .Add(New ParameterSQL("RoundNo", SqlDbType.VarChar, 20))
                End With
            End If

            Me.ReadData = Me.Read("uspGetRoundNo", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("RoundNo")) Then
                    Return CStr(Me.ReadData("RoundNo"))
                Else : Return String.Empty
                End If

            Else : Return Nothing
            End If

        End Function

        Public Function GetRoundNo(admissionNo As String) As String
            Return Me.GetRoundNo(admissionNo, Nothing)
        End Function

#End Region

    End Class

    Public Class IPDVisionAssessment : Inherits DBConnect

#Region " Fields "

        Private m_AdmissionNo As String
        Private m_VARoundNo As String
        Private m_RoundDateTime As Date
        Private m_EyeTestID As String
        Private m_VisualAcuityRightID As String
        Private m_VisualAcuityRightExtID As String
        Private m_VisualAcuityLeftID As String
        Private m_VisualAcuityLeftExtID As String
        Private m_PreferentialLookingRightID As String
        Private m_PreferentialLookingLeftID As String
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property AdmissionNo() As String
            Get
                Return m_AdmissionNo
            End Get
            Set(ByVal Value As String)
                m_AdmissionNo = Value
            End Set
        End Property

        Public Property VARoundNo() As String
            Get
                Return m_VARoundNo
            End Get
            Set(ByVal Value As String)
                m_VARoundNo = Value
            End Set
        End Property

        Public Property RoundDateTime() As Date
            Get
                Return m_RoundDateTime
            End Get
            Set(ByVal Value As Date)
                m_RoundDateTime = Value
            End Set
        End Property

        Public Property EyeTestID() As String
            Get
                Return m_EyeTestID
            End Get
            Set(ByVal Value As String)
                m_EyeTestID = Value
            End Set
        End Property

        Public Property VisualAcuityRightID() As String
            Get
                Return m_VisualAcuityRightID
            End Get
            Set(ByVal Value As String)
                m_VisualAcuityRightID = Value
            End Set
        End Property

        Public Property VisualAcuityRightExtID() As String
            Get
                Return m_VisualAcuityRightExtID
            End Get
            Set(ByVal Value As String)
                m_VisualAcuityRightExtID = Value
            End Set
        End Property

        Public Property VisualAcuityLeftID() As String
            Get
                Return m_VisualAcuityLeftID
            End Get
            Set(ByVal Value As String)
                m_VisualAcuityLeftID = Value
            End Set
        End Property

        Public Property VisualAcuityLeftExtID() As String
            Get
                Return m_VisualAcuityLeftExtID
            End Get
            Set(ByVal Value As String)
                m_VisualAcuityLeftExtID = Value
            End Set
        End Property


        Public Property PreferentialLookingRightID() As String
            Get
                Return m_PreferentialLookingRightID
            End Get
            Set(ByVal Value As String)
                m_PreferentialLookingRightID = Value
            End Set
        End Property

        Public Property PreferentialLookingLeftID() As String
            Get
                Return m_PreferentialLookingLeftID
            End Get
            Set(ByVal Value As String)
                m_PreferentialLookingLeftID = Value
            End Set
        End Property


        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertIPDVisionAssessment")

            With Parameters
                .Add(New ParameterSQL("AdmissionNo", Me.AdmissionNo))
                .Add(New ParameterSQL("VARoundNo", Me.VARoundNo))
                .Add(New ParameterSQL("RoundDateTime", Me.RoundDateTime))
                .Add(New ParameterSQL("EyeTestID", Me.EyeTestID))
                .Add(New ParameterSQL("VisualAcuityRightID", Me.VisualAcuityRightID))
                .Add(New ParameterSQL("VisualAcuityRightExtID", Me.VisualAcuityRightExtID))
                .Add(New ParameterSQL("VisualAcuityLeftID", Me.VisualAcuityLeftID))
                .Add(New ParameterSQL("VisualAcuityLeftExtID", Me.VisualAcuityLeftExtID))
                .Add(New ParameterSQL("PreferentialLookingRightID", Me.PreferentialLookingRightID))
                .Add(New ParameterSQL("PreferentialLookingLeftID", Me.PreferentialLookingLeftID))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDVisionAssessment")

            With Parameters
                .Add(New ParameterSQL("AdmissionNo", Me.AdmissionNo))
                .Add(New ParameterSQL("VARoundNo", Me.VARoundNo))
                .Add(New ParameterSQL("RoundDateTime", Me.RoundDateTime))
                .Add(New ParameterSQL("EyeTestID", Me.EyeTestID))
                .Add(New ParameterSQL("VisualAcuityRightID", Me.VisualAcuityRightID))
                .Add(New ParameterSQL("VisualAcuityRightExtID", Me.VisualAcuityRightExtID))
                .Add(New ParameterSQL("VisualAcuityLeftID", Me.VisualAcuityLeftID))
                .Add(New ParameterSQL("VisualAcuityLeftExtID", Me.VisualAcuityLeftExtID))
                .Add(New ParameterSQL("PreferentialLookingRightID", Me.PreferentialLookingRightID))
                .Add(New ParameterSQL("PreferentialLookingLeftID", Me.PreferentialLookingLeftID))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDVisionAssessment")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VARoundNo = '" + Me.VARoundNo + "' and EyeTestID = '" + Me.EyeTestID + "'"
            Dim errorPart As String = "VARoundNo: " + Me.VARoundNo + " and EyeTest: " + Me.EyeTestID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDVisionAssessment"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDVisionAssessment")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets a IPD vision assessment for supplied vARRoundno and eye test id
        ''' </summary>
        ''' <param name="vARoundNo"></param>
        ''' <param name="eyeTestID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDVisionAssessment(ByVal vARoundNo As String, ByVal eyeTestID As String) As DataSet

            If Not String.IsNullOrEmpty(eyeTestID) Then
                With Parameters
                    .Add(New ParameterSQL("vARoundNo", vARoundNo))
                    .Add(New ParameterSQL("EyeTestID", eyeTestID))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("vARoundNo", vARoundNo))
                    .Add(New ParameterSQL("EyeTestID", Nothing))
                End With

            End If

            Return Me.Load("uspGetIPDVisionAssessment", "IPDVisionAssessment", Parameters)

        End Function

        ''' <summary>
        ''' Gets all vision assessment for supplied VARoundno
        ''' </summary>
        ''' <param name="vARoundNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDVisionAssessment(ByVal vARoundNo As String) As DataSet
            Return GetIPDVisionAssessment(vARoundNo, String.Empty)
        End Function


        ''' <summary>
        ''' Gets a IPD vision assessment for supplied On admissionNo
        ''' </summary>
        ''' <param name="admissionNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDVisionAssessmentWithAdmissionNo(ByVal admissionNo As String, ByVal vARoundNo As String) As DataSet

            If Not String.IsNullOrEmpty(admissionNo) Then
                With Parameters
                    .Add(New ParameterSQL("admissionNo", admissionNo))
                End With
            End If

            Return Me.Load("uspGetIPDVisionAssessmentWithAdmissionNo", "IPDVisionAssessment", Parameters)

        End Function

        ''' <summary>
        ''' Gets all vision assessment for supplied AdmissionNo
        ''' </summary>
        ''' <param name="admissionNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDVisionAssessmentWithAdmissionNo(ByVal admissionNo As String) As DataSet
            Return GetIPDVisionAssessmentWithAdmissionNo(admissionNo, String.Empty)
        End Function

        Public Function GetNextVARoundID(ByVal admissionNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("AdmissionNo", admissionNo))
                .Add(New ParameterSQL("VARoundID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextVARoundID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("VARoundID")) Then
                    Return CInt(Me.ReadData("VARoundID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function GetVARoundNo(ByVal admissionNo As String, ByVal roundDateTime As Nullable(Of Date)) As String

            Dim oAppData As New SyncSoft.Common.Classes.AppData()

            If IsNothing(roundDateTime) OrElse CDate(roundDateTime).Equals(oAppData.NullDateValue) Then
                With Parameters
                    .Add(New ParameterSQL("AdmissionNo", admissionNo))
                    .Add(New ParameterSQL("RoundDateTime", SqlDbType.SmallDateTime))
                    .Add(New ParameterSQL("VARoundNo", SqlDbType.VarChar, 20))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("AdmissionNo", admissionNo))
                    .Add(New ParameterSQL("RoundDateTime", roundDateTime))
                    .Add(New ParameterSQL("VARoundNo", SqlDbType.VarChar, 20))
                End With
            End If

            Me.ReadData = Me.Read("uspGetVARoundNo", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("VARoundNo")) Then
                    Return CStr(Me.ReadData("VARoundNo"))
                Else : Return String.Empty
                End If

            Else : Return Nothing
            End If

        End Function

        Public Function GetVARoundNo(ByVal admissionNo As String) As String
            Return Me.GetVARoundNo(admissionNo, Nothing)
        End Function


#End Region

    End Class

    Public Class IPDClinicalFindings : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_Weight As Nullable(Of Single)
        Private m_Temperature As Nullable(Of Single)
        Private m_Height As Nullable(Of Single)
        Private m_Pulse As Nullable(Of Short)
        Private m_BloodPressure As String
        Private m_HeadCircum As Nullable(Of Single)
        Private m_BodySurfaceArea As Nullable(Of Single)
        Private m_History As String
        Private m_ClinicalNotes As String
        Private m_Respiratory As String
        Private m_GeneralAppearance As String
        Private m_CVS As String
        Private m_Abdomen As String
        Private m_CNS As String
        Private m_MuscularSkeletal As String
        Private m_PsychologicalStatus As String
        Private m_ClinicalDiagnosis As String
        Private m_ClinicalImage As Byte()
        Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property Weight() As Nullable(Of Single)
            Get
                Return m_Weight
            End Get
            Set(Value As Nullable(Of Single))
                m_Weight = Value
            End Set
        End Property

        Public Property Temperature() As Nullable(Of Single)
            Get
                Return m_Temperature
            End Get
            Set(Value As Nullable(Of Single))
                m_Temperature = Value
            End Set
        End Property

        Public Property Height() As Nullable(Of Single)
            Get
                Return m_Height
            End Get
            Set(Value As Nullable(Of Single))
                m_Height = Value
            End Set
        End Property

        Public Property Pulse() As Nullable(Of Short)
            Get
                Return m_Pulse
            End Get
            Set(Value As Nullable(Of Short))
                m_Pulse = Value
            End Set
        End Property

        Public Property BloodPressure() As String
            Get
                Return m_BloodPressure
            End Get
            Set(Value As String)
                m_BloodPressure = Value
            End Set
        End Property

        Public Property HeadCircum() As Nullable(Of Single)
            Get
                Return m_HeadCircum
            End Get
            Set(Value As Nullable(Of Single))
                m_HeadCircum = Value
            End Set
        End Property

        Public Property BodySurfaceArea() As Nullable(Of Single)
            Get
                Return m_BodySurfaceArea
            End Get
            Set(Value As Nullable(Of Single))
                m_BodySurfaceArea = Value
            End Set
        End Property

        Public Property History() As String
            Get
                Return m_History
            End Get
            Set(Value As String)
                m_History = Value
            End Set
        End Property

        Public Property ClinicalNotes() As String
            Get
                Return m_ClinicalNotes
            End Get
            Set(Value As String)
                m_ClinicalNotes = Value
            End Set
        End Property

        Public Property Respiratory() As String
            Get
                Return m_Respiratory
            End Get
            Set(Value As String)
                m_Respiratory = Value
            End Set
        End Property

        Public Property GeneralAppearance() As String
            Get
                Return m_GeneralAppearance
            End Get
            Set(Value As String)
                m_GeneralAppearance = Value
            End Set
        End Property

        Public Property CVS() As String
            Get
                Return m_CVS
            End Get
            Set(Value As String)
                m_CVS = Value
            End Set
        End Property

        Public Property Abdomen() As String
            Get
                Return m_Abdomen
            End Get
            Set(Value As String)
                m_Abdomen = Value
            End Set
        End Property

        Public Property CNS() As String
            Get
                Return m_CNS
            End Get
            Set(Value As String)
                m_CNS = Value
            End Set
        End Property

        Public Property MuscularSkeletal() As String
            Get
                Return m_MuscularSkeletal
            End Get
            Set(Value As String)
                m_MuscularSkeletal = Value
            End Set
        End Property

        Public Property PsychologicalStatus() As String
            Get
                Return m_PsychologicalStatus
            End Get
            Set(Value As String)
                m_PsychologicalStatus = Value
            End Set
        End Property

        Public Property ClinicalDiagnosis() As String
            Get
                Return m_ClinicalDiagnosis
            End Get
            Set(Value As String)
                m_ClinicalDiagnosis = Value
            End Set
        End Property

        Public Property ClinicalImage() As Byte()
            Get
                Return m_ClinicalImage
            End Get
            Set(Value As Byte())
                m_ClinicalImage = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditIPDClinicalFindings")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("Weight", Me.Weight))
                .Add(New ParameterSQL("Temperature", Me.Temperature))
                .Add(New ParameterSQL("Height", Me.Height))
                .Add(New ParameterSQL("Pulse", Me.Pulse))
                .Add(New ParameterSQL("BloodPressure", Me.BloodPressure))
                .Add(New ParameterSQL("HeadCircum", Me.HeadCircum))
                .Add(New ParameterSQL("BodySurfaceArea", Me.BodySurfaceArea))
                .Add(New ParameterSQL("History", Me.History))
                .Add(New ParameterSQL("ClinicalNotes", Me.ClinicalNotes))
                .Add(New ParameterSQL("Respiratory", Me.Respiratory))
                .Add(New ParameterSQL("GeneralAppearance", Me.GeneralAppearance))
                .Add(New ParameterSQL("CVS", Me.CVS))
                .Add(New ParameterSQL("Abdomen", Me.Abdomen))
                .Add(New ParameterSQL("CNS", Me.CNS))
                .Add(New ParameterSQL("MuscularSkeletal", Me.MuscularSkeletal))
                .Add(New ParameterSQL("PsychologicalStatus", Me.PsychologicalStatus))
                .Add(New ParameterSQL("ClinicalDiagnosis", Me.ClinicalDiagnosis))
                .Add(New ParameterSQL("ClinicalImage", Me.ClinicalImage))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "RoundNo = '" + Me.RoundNo + "'"
            errorPart = "Round No: " + Me.RoundNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDClinicalFindings"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDClinicalFindings")

            Return Parameters

        End Function

        Public Function GetIPDClinicalFindings(roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
            End With

            Return Me.Load("uspGetIPDClinicalFindings", "IPDClinicalFindings", Parameters)

        End Function

#End Region

    End Class

    Public Class IPDNurse : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_NurseRoundNo As String
        Private m_Weight As Nullable(Of Single)
        Private m_Temperature As Nullable(Of Single)
        Private m_Height As Nullable(Of Single)
        Private m_Pulse As Nullable(Of Short)
        Private m_BloodPressure As String
        Private m_HeadCircum As Nullable(Of Single)
        Private m_BodySurfaceArea As Nullable(Of Single)
        Private m_RespirationRate As Nullable(Of Short)
        Private m_OxygenSaturation As Nullable(Of Single)
        Private m_HeartRate As Nullable(Of Short)
        Private m_Notes As String
        Private m_StaffNo As String
        Private m_OtherAttendingNurse As String
        Private m_NurseRoundDateTime As Date

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property NurseRoundNo() As String
            Get
                Return m_NurseRoundNo
            End Get
            Set(Value As String)
                m_NurseRoundNo = Value
            End Set
        End Property

        Public Property Weight() As Nullable(Of Single)
            Get
                Return m_Weight
            End Get
            Set(Value As Nullable(Of Single))
                m_Weight = Value
            End Set
        End Property

        Public Property Temperature() As Nullable(Of Single)
            Get
                Return m_Temperature
            End Get
            Set(Value As Nullable(Of Single))
                m_Temperature = Value
            End Set
        End Property

        Public Property Height() As Nullable(Of Single)
            Get
                Return m_Height
            End Get
            Set(Value As Nullable(Of Single))
                m_Height = Value
            End Set
        End Property

        Public Property Pulse() As Nullable(Of Short)
            Get
                Return m_Pulse
            End Get
            Set(Value As Nullable(Of Short))
                m_Pulse = Value
            End Set
        End Property

        Public Property BloodPressure() As String
            Get
                Return m_BloodPressure
            End Get
            Set(Value As String)
                m_BloodPressure = Value
            End Set
        End Property

        Public Property HeadCircum() As Nullable(Of Single)
            Get
                Return m_HeadCircum
            End Get
            Set(Value As Nullable(Of Single))
                m_HeadCircum = Value
            End Set
        End Property

        Public Property BodySurfaceArea() As Nullable(Of Single)
            Get
                Return m_BodySurfaceArea
            End Get
            Set(Value As Nullable(Of Single))
                m_BodySurfaceArea = Value
            End Set
        End Property

        Public Property RespirationRate() As Nullable(Of Short)
            Get
                Return m_RespirationRate
            End Get
            Set(Value As Nullable(Of Short))
                m_RespirationRate = Value
            End Set
        End Property

        Public Property OxygenSaturation() As Nullable(Of Single)
            Get
                Return m_OxygenSaturation
            End Get
            Set(Value As Nullable(Of Single))
                m_OxygenSaturation = Value
            End Set
        End Property

        Public Property HeartRate() As Nullable(Of Short)
            Get
                Return m_HeartRate
            End Get
            Set(Value As Nullable(Of Short))
                m_HeartRate = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property OtherAttendingNurse() As String
            Get
                Return m_OtherAttendingNurse
            End Get
            Set(Value As String)
                m_OtherAttendingNurse = Value
            End Set
        End Property

        Public Property NurseRoundDateTime() As Date
            Get
                Return m_NurseRoundDateTime
            End Get
            Set(Value As Date)
                m_NurseRoundDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditIPDNurse")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("NurseRoundNo", Me.NurseRoundNo))
                .Add(New ParameterSQL("Weight", Me.Weight))
                .Add(New ParameterSQL("Temperature", Me.Temperature))
                .Add(New ParameterSQL("Height", Me.Height))
                .Add(New ParameterSQL("Pulse", Me.Pulse))
                .Add(New ParameterSQL("BloodPressure", Me.BloodPressure))
                .Add(New ParameterSQL("HeadCircum", Me.HeadCircum))
                .Add(New ParameterSQL("BodySurfaceArea", Me.BodySurfaceArea))
                .Add(New ParameterSQL("RespirationRate", Me.RespirationRate))
                .Add(New ParameterSQL("OxygenSaturation", Me.OxygenSaturation))
                .Add(New ParameterSQL("HeartRate", Me.HeartRate))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("NurseRoundDateTime", Me.NurseRoundDateTime))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("OtherAttendingNurse", Me.OtherAttendingNurse))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "NurseRoundNo = '" + Me.NurseRoundNo + "'"
            errorPart = "Nurse Round No: " + Me.NurseRoundNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDNurse"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDNurse")

            Return Parameters

        End Function

        Public Function GetIPDNurse(NurseRoundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("NurseRoundNo", NurseRoundNo))
            End With

            Return Me.Load("uspGetIPDNurse", "IPDNurse", Parameters)

        End Function

        Public Function GetNextIPDNurseRoundID(RoundNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("RoundNo", RoundNo))
                .Add(New ParameterSQL("IPDNurseRoundID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextIPDNurseRoundID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("IPDNurseRoundID")) Then
                    Return CInt(Me.ReadData("IPDNurseRoundID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function GetNurseRoundNo(admissionNo As String, roundDateTime As Nullable(Of Date)) As String

            Dim oAppData As New SyncSoft.Common.Classes.AppData()

            If IsNothing(roundDateTime) OrElse CDate(roundDateTime).Equals(oAppData.NullDateValue) Then
                With Parameters
                    .Add(New ParameterSQL("AdmissionNo", admissionNo))
                    .Add(New ParameterSQL("RoundDateTime", SqlDbType.SmallDateTime))
                    .Add(New ParameterSQL("NurseRoundNo", SqlDbType.VarChar, 20))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("AdmissionNo", admissionNo))
                    .Add(New ParameterSQL("RoundDateTime", roundDateTime))
                    .Add(New ParameterSQL("NurseRoundNo", SqlDbType.VarChar, 20))
                End With
            End If

            Me.ReadData = Me.Read("uspGetNurseRoundNo", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("NurseRoundNo")) Then
                    Return CStr(Me.ReadData("NurseRoundNo"))
                Else : Return String.Empty
                End If

            Else : Return Nothing
            End If

        End Function

        Public Function GetNurseRoundNo(admissionNo As String) As String
            Return Me.GetNurseRoundNo(admissionNo, Nothing)
        End Function

        ''' <summary>
        ''' Returns IPDNurse for aparticular round no
        ''' </summary>
        ''' <param name="RoundNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDNurseByRoundNoNavigate(RoundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", RoundNo))
            End With

            Return Me.Load("uspGetIPDNurseByRoundNo", "IPDNurse", Parameters)

        End Function

        Public Function GetUnAttendedInWardAdmissions(ByVal IpdNurseAlertDays As Integer) As DataSet

            With Parameters
                .Add(New ParameterSQL("IpdNurseAlertDays", IpdNurseAlertDays))

            End With
            Return Me.Load("uspGetUnAttendedInWardAdmissions", "GetUnAttendedInWardAdmissions", Parameters)

        End Function

#End Region

    End Class

    Public Class IPDDrugAdministration : Inherits DBConnect

#Region " Fields "

        Private m_NurseRoundNo As String
        Private m_TakenDateTime As Date
        Private m_ItemCode As String
        Private m_itemCategoryID As String
        Private m_ItemName As String
        Private m_QuantityTaken As Integer
        Private m_StaffNo As String
        Private m_NurseNotes As String

#End Region

#Region " Properties "

        Public Property NurseRoundNo() As String
            Get
                Return m_NurseRoundNo
            End Get
            Set(ByVal Value As String)
                m_NurseRoundNo = Value
            End Set
        End Property

        Public Property TakenDateTime() As Date
            Get
                Return m_TakenDateTime
            End Get
            Set(ByVal Value As Date)
                m_TakenDateTime = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property itemCategoryID() As String
            Get
                Return m_itemCategoryID
            End Get
            Set(ByVal Value As String)
                m_itemCategoryID = Value
            End Set
        End Property

        Public Property ItemName() As String
            Get
                Return m_ItemName
            End Get
            Set(ByVal Value As String)
                m_ItemName = Value
            End Set
        End Property

        Public Property QuantityTaken() As Integer
            Get
                Return m_QuantityTaken
            End Get
            Set(ByVal Value As Integer)
                m_QuantityTaken = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(ByVal Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property NurseNotes() As String
            Get
                Return m_NurseNotes
            End Get
            Set(ByVal Value As String)
                m_NurseNotes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditIPDDrugAdministration")

            With Parameters
                .Add(New ParameterSQL("NurseRoundNo", Me.NurseRoundNo))
                .Add(New ParameterSQL("TakenDateTime", Me.TakenDateTime))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("itemCategoryID", Me.itemCategoryID))
                .Add(New ParameterSQL("ItemName", Me.ItemName))
                .Add(New ParameterSQL("QuantityTaken", Me.QuantityTaken))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("NurseNotes", Me.NurseNotes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

            Me.SetLogObject("IPDDrugAdministration")

            Return Parameters
        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "NurseRoundNo = '" + Me.NurseRoundNo + "'"
            Dim errorPart As String = "NurseRoundNo: " + Me.NurseRoundNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDDrugAdministration"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDDrugAdministration")

            Return Parameters

        End Function

        Public Function GetIPDDrugAdministration(ByVal nurseRoundNo As String, ByVal itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("NurseRoundNo", nurseRoundNo))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))

            End With

            Return Me.Load("uspGetIPDDrugAdministration", "IPDDrugAdministration", Parameters)

        End Function

        Public Function GetDrugAdministeredQuantity(roundNo As String, itemCode As String, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("roundNo", roundNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("itemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetSumIPDDrugsAdministered", "IPDDrugAdministration", Parameters)

        End Function

        Public Function GetIPDDrugAdministrationPerRound(roundNo As String, itemCategoryID As String, ItemCode As String) As DataSet
            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
                .Add(New ParameterSQL("itemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("ItemCode", ItemCode))
            End With


            Return Me.Load("uspGetIPDDrugAdministrationPerRound", "IPDItems", Parameters)

        End Function

        Public Function GetDrugsAdministedPerAdmission(ByVal admissionNo As String, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AdmissionNo", admissionNo))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))

            End With

            Return Me.Load("uspGetDrugsAdministedPerAdmission", "IPDDrugAdministration", Parameters)

        End Function

#End Region

    End Class

    Public Class IPDNurseFluids : Inherits DBConnect

#Region " Fields "

        Private m_NurseRoundNo As String
        Private m_TakenDateTime As Date
        Private m_FluidTypeID As String
        Private m_FluidCategoryID As String
        Private m_RouteID As String
        Private m_Quantity As Integer
        Private m_NurseNotes As String

#End Region

#Region " Properties "

        Public Property NurseRoundNo() As String
            Get
                Return m_NurseRoundNo
            End Get
            Set(ByVal Value As String)
                m_NurseRoundNo = Value
            End Set
        End Property

        Public Property TakenDateTime() As Date
            Get
                Return m_TakenDateTime
            End Get
            Set(ByVal Value As Date)
                m_TakenDateTime = Value
            End Set
        End Property

        Public Property FluidTypeID() As String
            Get
                Return m_FluidTypeID
            End Get
            Set(ByVal Value As String)
                m_FluidTypeID = Value
            End Set
        End Property

        Public Property FluidCategoryID() As String
            Get
                Return m_FluidCategoryID
            End Get
            Set(ByVal Value As String)
                m_FluidCategoryID = Value
            End Set
        End Property

        Public Property RouteID() As String
            Get
                Return m_RouteID
            End Get
            Set(ByVal Value As String)
                m_RouteID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(ByVal Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property NurseNotes() As String
            Get
                Return m_NurseNotes
            End Get
            Set(ByVal Value As String)
                m_NurseNotes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditIPDNurseFluids")

            With Parameters
                .Add(New ParameterSQL("NurseRoundNo", Me.NurseRoundNo))
                .Add(New ParameterSQL("TakenDateTime", Me.TakenDateTime))
                .Add(New ParameterSQL("FluidTypeID", Me.FluidTypeID))
                .Add(New ParameterSQL("FluidCategoryID", Me.FluidCategoryID))
                .Add(New ParameterSQL("RouteID", Me.RouteID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("NurseNotes", Me.NurseNotes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

            Me.SetLogObject("IPDNurseFluids")

            Return Parameters
        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "NurseRoundNo = '" + Me.NurseRoundNo + "'"
            Dim errorPart As String = "NurseRoundNo: " + Me.NurseRoundNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDNurseFluids"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDNurseFluids")

            Return Parameters

        End Function

        Public Function GetCategorizedIPDNurseFluids(ByVal RoundNo As String, ByVal FluidCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", RoundNo))
                .Add(New ParameterSQL("FluidCategoryID", FluidCategoryID))

            End With
            Return Me.Load("uspGetCategorizedIPDNurseFluids", "CategorizedIPDNurseFluids", Parameters)

        End Function

        Public Function GetIPDNurseFluids(ByVal nurseRoundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("NurseRoundNo", nurseRoundNo))

            End With
            Return Me.Load("uspGetIPDNurseFluids", "IPDNurseFluids", Parameters)

        End Function

        Public Function GetIPDNurseFluidsBalanceInputOutputTotals(ByVal roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))

            End With
            Return Me.Load("uspGetIPDNurseFluidsBalanceInputOutputTotals", "IPDNurseFluidsBalanceInputOutputTotals", Parameters)

        End Function

        Public Function GetFluidInTakeRouteItems() As DataSet

            Return Me.Load("uspGetFluidInTakeRouteItems", "FluidInTakeRouteItems")

        End Function

        Public Function GetFluidOutPutRouteItems() As DataSet

            Return Me.Load("uspGetFluidOutPutRouteItems", "FluidOutPutRouteItems")

        End Function

        Public Function FluidInBalances() As DataSet

            Return Me.Load("uspGetToCountFluidInBalances", "FluidInBalances")

        End Function

#End Region

    End Class

    Public Class IPDEyeAssessment : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_LeftPupil As String
        Private m_RightPupil As String
        Private m_LeftLidMargin As String
        Private m_RightLidMargin As String
        Private m_LeftConjuctiva As String
        Private m_RightConjuctiva As String
        Private m_LeftBulbarConjuctiva As String
        Private m_RightBulbarConjuctiva As String
        Private m_LeftCentralCornea As String
        Private m_RightCentralCornea As String
        Private m_LeftVerticalCornea As String
        Private m_RightVerticalCornea As String
        Private m_LeftAnteriorChamber As String
        Private m_RightAnteriorChamber As String
        Private m_LeftIrish As String
        Private m_RightIrish As String
        Private m_LeftAnteriorChamberAngle As String
        Private m_RightAnteriorChamberAngle As String
        Private m_LeftRetina As String
        Private m_RightRetina As String
        Private m_LeftMacular As String
        Private m_RightMacular As String
        Private m_LeftOpticDisc As String
        Private m_RightOpticDisc As String
        Private m_LeftIOP As String
        Private m_RightIOP As String
        Private m_LeftVitreous As String
        Private m_RightVitreous As String
        Private m_LeftLense As String
        Private m_RightLense As String
        Private m_EyeNotes As String
        Private m_LeftEyeBall As String
        Private m_RightEyeBall As String
        Private m_LeftOrbit As String
        Private m_RightOrbit As String

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property LeftPupil() As String
            Get
                Return m_LeftPupil
            End Get
            Set(Value As String)
                m_LeftPupil = Value
            End Set
        End Property

        Public Property RightPupil() As String
            Get
                Return m_RightPupil
            End Get
            Set(Value As String)
                m_RightPupil = Value
            End Set
        End Property

        Public Property LeftLidMargin() As String
            Get
                Return m_LeftLidMargin
            End Get
            Set(Value As String)
                m_LeftLidMargin = Value
            End Set
        End Property

        Public Property RightLidMargin() As String
            Get
                Return m_RightLidMargin
            End Get
            Set(Value As String)
                m_RightLidMargin = Value
            End Set
        End Property

        Public Property LeftConjuctiva() As String
            Get
                Return m_LeftConjuctiva
            End Get
            Set(Value As String)
                m_LeftConjuctiva = Value
            End Set
        End Property

        Public Property RightConjuctiva() As String
            Get
                Return m_RightConjuctiva
            End Get
            Set(Value As String)
                m_RightConjuctiva = Value
            End Set
        End Property

        Public Property LeftBulbarConjuctiva() As String
            Get
                Return m_LeftBulbarConjuctiva
            End Get
            Set(Value As String)
                m_LeftBulbarConjuctiva = Value
            End Set
        End Property

        Public Property RightBulbarConjuctiva() As String
            Get
                Return m_RightBulbarConjuctiva
            End Get
            Set(Value As String)
                m_RightBulbarConjuctiva = Value
            End Set
        End Property

        Public Property LeftCentralCornea() As String
            Get
                Return m_LeftCentralCornea
            End Get
            Set(Value As String)
                m_LeftCentralCornea = Value
            End Set
        End Property

        Public Property RightCentralCornea() As String
            Get
                Return m_RightCentralCornea
            End Get
            Set(Value As String)
                m_RightCentralCornea = Value
            End Set
        End Property

        Public Property LeftVerticalCornea() As String
            Get
                Return m_LeftVerticalCornea
            End Get
            Set(Value As String)
                m_LeftVerticalCornea = Value
            End Set
        End Property

        Public Property RightVerticalCornea() As String
            Get
                Return m_RightVerticalCornea
            End Get
            Set(Value As String)
                m_RightVerticalCornea = Value
            End Set
        End Property

        Public Property LeftAnteriorChamber() As String
            Get
                Return m_LeftAnteriorChamber
            End Get
            Set(Value As String)
                m_LeftAnteriorChamber = Value
            End Set
        End Property

        Public Property RightAnteriorChamber() As String
            Get
                Return m_RightAnteriorChamber
            End Get
            Set(Value As String)
                m_RightAnteriorChamber = Value
            End Set
        End Property

        Public Property LeftIrish() As String
            Get
                Return m_LeftIrish
            End Get
            Set(Value As String)
                m_LeftIrish = Value
            End Set
        End Property

        Public Property RightIrish() As String
            Get
                Return m_RightIrish
            End Get
            Set(Value As String)
                m_RightIrish = Value
            End Set
        End Property

        Public Property LeftAnteriorChamberAngle() As String
            Get
                Return m_LeftAnteriorChamberAngle
            End Get
            Set(Value As String)
                m_LeftAnteriorChamberAngle = Value
            End Set
        End Property

        Public Property RightAnteriorChamberAngle() As String
            Get
                Return m_RightAnteriorChamberAngle
            End Get
            Set(Value As String)
                m_RightAnteriorChamberAngle = Value
            End Set
        End Property

        Public Property LeftRetina() As String
            Get
                Return m_LeftRetina
            End Get
            Set(Value As String)
                m_LeftRetina = Value
            End Set
        End Property

        Public Property RightRetina() As String
            Get
                Return m_RightRetina
            End Get
            Set(Value As String)
                m_RightRetina = Value
            End Set
        End Property

        Public Property LeftMacular() As String
            Get
                Return m_LeftMacular
            End Get
            Set(Value As String)
                m_LeftMacular = Value
            End Set
        End Property

        Public Property RightMacular() As String
            Get
                Return m_RightMacular
            End Get
            Set(Value As String)
                m_RightMacular = Value
            End Set
        End Property

        Public Property LeftOpticDisc() As String
            Get
                Return m_LeftOpticDisc
            End Get
            Set(Value As String)
                m_LeftOpticDisc = Value
            End Set
        End Property

        Public Property RightOpticDisc() As String
            Get
                Return m_RightOpticDisc
            End Get
            Set(Value As String)
                m_RightOpticDisc = Value
            End Set
        End Property

        Public Property LeftIOP() As String
            Get
                Return m_LeftIOP
            End Get
            Set(Value As String)
                m_LeftIOP = Value
            End Set
        End Property

        Public Property RightIOP() As String
            Get
                Return m_RightIOP
            End Get
            Set(Value As String)
                m_RightIOP = Value
            End Set
        End Property

        Public Property LeftVitreous() As String
            Get
                Return m_LeftVitreous
            End Get
            Set(Value As String)
                m_LeftVitreous = Value
            End Set
        End Property

        Public Property RightVitreous() As String
            Get
                Return m_RightVitreous
            End Get
            Set(Value As String)
                m_RightVitreous = Value
            End Set
        End Property

        Public Property LeftLense() As String
            Get
                Return m_LeftLense
            End Get
            Set(Value As String)
                m_LeftLense = Value
            End Set
        End Property

        Public Property RightLense() As String
            Get
                Return m_RightLense
            End Get
            Set(Value As String)
                m_RightLense = Value
            End Set
        End Property

        Public Property EyeNotes() As String
            Get
                Return m_EyeNotes
            End Get
            Set(Value As String)
                m_EyeNotes = Value
            End Set
        End Property

        Public Property LeftEyeBall() As String
            Get
                Return m_LeftEyeBall
            End Get
            Set(Value As String)
                m_LeftEyeBall = Value
            End Set
        End Property

        Public Property RightEyeBall() As String
            Get
                Return m_RightEyeBall
            End Get
            Set(Value As String)
                m_RightEyeBall = Value
            End Set
        End Property

        Public Property LeftOrbit() As String
            Get
                Return m_LeftOrbit
            End Get
            Set(Value As String)
                m_LeftOrbit = Value
            End Set
        End Property

        Public Property RightOrbit() As String
            Get
                Return m_RightOrbit
            End Get
            Set(Value As String)
                m_RightOrbit = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditIPDEyeAssessment")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("LeftPupil", Me.LeftPupil))
                .Add(New ParameterSQL("RightPupil", Me.RightPupil))
                .Add(New ParameterSQL("LeftLidMargin", Me.LeftLidMargin))
                .Add(New ParameterSQL("RightLidMargin", Me.RightLidMargin))
                .Add(New ParameterSQL("LeftConjuctiva", Me.LeftConjuctiva))
                .Add(New ParameterSQL("RightConjuctiva", Me.RightConjuctiva))
                .Add(New ParameterSQL("LeftBulbarConjuctiva", Me.LeftBulbarConjuctiva))
                .Add(New ParameterSQL("RightBulbarConjuctiva", Me.RightBulbarConjuctiva))
                .Add(New ParameterSQL("LeftCentralCornea", Me.LeftCentralCornea))
                .Add(New ParameterSQL("RightCentralCornea", Me.RightCentralCornea))
                .Add(New ParameterSQL("LeftVerticalCornea", Me.LeftVerticalCornea))
                .Add(New ParameterSQL("RightVerticalCornea", Me.RightVerticalCornea))
                .Add(New ParameterSQL("LeftAnteriorChamber", Me.LeftAnteriorChamber))
                .Add(New ParameterSQL("RightAnteriorChamber", Me.RightAnteriorChamber))
                .Add(New ParameterSQL("LeftIrish", Me.LeftIrish))
                .Add(New ParameterSQL("RightIrish", Me.RightIrish))
                .Add(New ParameterSQL("LeftAnteriorChamberAngle", Me.LeftAnteriorChamberAngle))
                .Add(New ParameterSQL("RightAnteriorChamberAngle", Me.RightAnteriorChamberAngle))
                .Add(New ParameterSQL("LeftRetina", Me.LeftRetina))
                .Add(New ParameterSQL("RightRetina", Me.RightRetina))
                .Add(New ParameterSQL("LeftMacular", Me.LeftMacular))
                .Add(New ParameterSQL("RightMacular", Me.RightMacular))
                .Add(New ParameterSQL("LeftOpticDisc", Me.LeftOpticDisc))
                .Add(New ParameterSQL("RightOpticDisc", Me.RightOpticDisc))
                .Add(New ParameterSQL("LeftIOP", Me.LeftIOP))
                .Add(New ParameterSQL("RightIOP", Me.RightIOP))
                .Add(New ParameterSQL("LeftVitreous", Me.LeftVitreous))
                .Add(New ParameterSQL("RightVitreous", Me.RightVitreous))
                .Add(New ParameterSQL("LeftLense", Me.LeftLense))
                .Add(New ParameterSQL("RightLense", Me.RightLense))
                .Add(New ParameterSQL("EyeNotes", Me.EyeNotes))
                .Add(New ParameterSQL("LeftEyeBall", Me.LeftEyeBall))
                .Add(New ParameterSQL("RightEyeBall", Me.RightEyeBall))
                .Add(New ParameterSQL("LeftOrbit", Me.LeftOrbit))
                .Add(New ParameterSQL("RightOrbit", Me.RightOrbit))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RoundNo = '" + Me.RoundNo + "'"
            Dim errorPart As String = "RoundNo: " + Me.RoundNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDEyeAssessment"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDEyeAssessment")

            Return Parameters

        End Function

        Public Function GetIPDEyeAssessment(RoundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", RoundNo))
            End With

            Return Me.Load("uspGetIPDEyeAssessment", "IPDEyeAssessment", Parameters)

        End Function

#End Region

    End Class

    Public Class IPDItems : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Quantity As Integer
        Private m_UnitPrice As Decimal
        Private m_ItemDetails As String
        Private m_LastUpdate As Date
        Private m_ItemStatusID As String
        Private m_PayStatusID As String

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(value As Integer)
                m_Quantity = value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property ItemDetails() As String
            Get
                Return m_ItemDetails
            End Get
            Set(value As String)
                m_ItemDetails = value
            End Set
        End Property

        Public Property LastUpdate() As Date
            Get
                Return m_LastUpdate
            End Get
            Set(value As Date)
                m_LastUpdate = value
            End Set
        End Property

        Public Property ItemStatusID() As String
            Get
                Return m_ItemStatusID
            End Get
            Set(Value As String)
                m_ItemStatusID = Value
            End Set
        End Property

        Public Property PayStatusID() As String
            Get
                Return m_PayStatusID
            End Get
            Set(Value As String)
                m_PayStatusID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertIPDItems")

            With Parameters

                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("ItemDetails", Me.ItemDetails))
                .Add(New ParameterSQL("LastUpdate", Me.LastUpdate))
                .Add(New ParameterSQL("ItemStatusID", Me.ItemStatusID))
                .Add(New ParameterSQL("PayStatusID", Me.PayStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                'Monitoring Fields
                .Add(New ParameterSQL("CreatorLoginID", Me.LoginID))
                .Add(New ParameterSQL("CreatorClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDItems")

            If Me.ItemStatusID = String.Empty OrElse Me.ItemStatusID Is Nothing Then
                With Parameters
                    .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                    .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                    .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                    .Add(New ParameterSQL("LastUpdate", Me.LastUpdate))
                    .Add(New ParameterSQL("PayStatusID", Me.PayStatusID))
                    .Add(New ParameterSQL("LoginID", Me.LoginID))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                    .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                    .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                    .Add(New ParameterSQL("LastUpdate", Me.LastUpdate))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("LoginID", Me.LoginID))
                    .Add(New ParameterSQL("ItemStatusID", Me.ItemStatusID))
                    .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                End With
            End If

            'For Audit Trial
            Me.SetLogObject("IPDItems")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Me.SetCommand("uspDeleteIPDItem")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
            End With

            'For Audit Trial
            Me.SetLogObject("IPDItems")

            Return Parameters

        End Function

        Public Function GetIPDItems(roundNo As String, itemCategory As String, itemStatus As String,
                                    payStatus As String, billAccount As String) As DataSet

            If (roundNo <> "" OrElse roundNo <> String.Empty) And
            (itemCategory = "" OrElse itemCategory = String.Empty) And
            (itemStatus = "" OrElse itemStatus = String.Empty) And
            (payStatus <> "" OrElse payStatus <> String.Empty) And
            (billAccount <> "" OrElse billAccount <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatus))
                    .Add(New ParameterSQL("BillAccount", billAccount))
                End With

            ElseIf (roundNo <> "" OrElse roundNo <> String.Empty) And
            (itemCategory <> "" OrElse itemCategory <> String.Empty) And
            (itemStatus = "" OrElse itemStatus = String.Empty) And
            (payStatus = "" OrElse payStatus = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategory))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillAccount", Nothing))
                End With

            ElseIf (roundNo <> "" OrElse roundNo <> String.Empty) And
            (itemCategory <> "" OrElse itemCategory <> String.Empty) And
            (itemStatus <> "" OrElse itemStatus <> String.Empty) And
            (payStatus = "" OrElse payStatus = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategory))
                    .Add(New ParameterSQL("ItemStatusID", itemStatus))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillAccount", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategory))
                    .Add(New ParameterSQL("ItemStatusID", itemStatus))
                    .Add(New ParameterSQL("PayStatusID", payStatus))
                    .Add(New ParameterSQL("BillAccount", Nothing))
                End With
            End If

            Return Me.Load("uspGetIPDItems", "IPDItems", Parameters)

        End Function

        Public Function GetIPDItems(roundNo As String, itemCategory As String) As DataSet
            Return Me.GetIPDItems(roundNo, itemCategory, String.Empty, String.Empty, String.Empty)
        End Function

        Public Function GetIPDItems(roundNo As String, itemCategory As String, itemStatus As String) As DataSet
            Return Me.GetIPDItems(roundNo, itemCategory, itemStatus, String.Empty, String.Empty)
        End Function

        Public Function GetIPDItems(roundNo As String, itemCategory As String, itemStatus As String, payStatus As String) As DataSet
            Return Me.GetIPDItems(roundNo, itemCategory, itemStatus, payStatus, String.Empty)
        End Function

        ''' <summary>
        ''' Gets dental IPD items corresponding to supplied round No and dental category
        ''' </summary>
        ''' <param name="roundNo"></param>
        ''' <param name="dentalCategory"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDentalIPDItems(roundNo As String, dentalCategory As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
                .Add(New ParameterSQL("DentalCategory", dentalCategory))
            End With

            Return Me.Load("uspGetDentalIPDItems", "IPDItems", Parameters)

        End Function

        ''' <summary>
        ''' Returns all not paid IPDItems for the specified period
        ''' </summary>
        ''' <param name="billAccount"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNotPaidIPDItems(billAccount As String, startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("BillAccount", billAccount))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("BillAccount", billAccount))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If

            Return Me.Load("uspGetNotPaidIPDItems", "IPDItems", Parameters)

        End Function

        ''' <summary>
        ''' Returns all not paid IPDItems
        ''' </summary>
        ''' <param name="billAccount"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNotPaidIPDItems(billAccount As String) As DataSet
            Return GetNotPaidIPDItems(billAccount, Nothing, Nothing)
        End Function

        ''' <summary>
        ''' Returns all IPDItems that are pending for the specified period
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPendingIPDItems(itemCategoryID As String, startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If

            Return Me.Load("uspGetPendingIPDItems", "IPDItems", Parameters)

        End Function

        ''' <summary>
        ''' Returns all IPDItems that are pending
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPendingIPDItems(itemCategoryID As String) As DataSet
            Return GetPendingIPDItems(itemCategoryID, Nothing, Nothing)
        End Function

        ''' <summary>
        ''' Returns all IPDItems that are processing for the specified period
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetProcessingIPDItems(itemCategoryID As String, startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If

            Return Me.Load("uspGetProcessingIPDItems", "IPDItems", Parameters)

        End Function

        ''' <summary>
        ''' Returns all IPDItems that are processing
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetProcessingIPDItems(itemCategoryID As String) As DataSet
            Return GetProcessingIPDItems(itemCategoryID, Nothing, Nothing)
        End Function


        ''' <summary>
        ''' Returns all IPDItems that are done for the specified period
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetDoneIPDItems(itemCategoryID As String, startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If

            Return Me.Load("uspGetDoneIPDItems", "IPDItems", Parameters)

        End Function

        ''' <summary>
        ''' Returns all IPDItems that are done
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDoneIPDItems(itemCategoryID As String) As DataSet
            Return GetDoneIPDItems(itemCategoryID, Nothing, Nothing)
        End Function

        ''' <summary>
        ''' Returns all IPDItems that by sent doctor for the specified period
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="staffLoginID"></param>
        ''' <param name="showOnlyPending"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDoctorIPDItems(itemCategoryID As String, staffLoginID As String, showOnlyPending As Boolean,
                                       startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StaffLoginID", staffLoginID))
                    .Add(New ParameterSQL("ShowOnlyPending", showOnlyPending))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("StaffLoginID", staffLoginID))
                    .Add(New ParameterSQL("ShowOnlyPending", showOnlyPending))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If

            Return Me.Load("uspGetDoctorIPDItems", "IPDItems", Parameters)

        End Function

        ''' <summary>
        ''' Returns all IPDItems that are sent by specified doctor
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="staffLoginID"></param>
        ''' <param name="showOnlyPending"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDoctorIPDItems(itemCategoryID As String, staffLoginID As String, showOnlyPending As Boolean) As DataSet
            Return GetDoctorIPDItems(itemCategoryID, staffLoginID, showOnlyPending, Nothing, Nothing)
        End Function

        Public Function GetIPDItem(roundNo As String, itemCode As String, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetIPDItem", "IPDItems", Parameters)

        End Function

        Public Function GetIPDItemsByRoundNo(roundNo As String, ByVal ItemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
                .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
            End With

            Return Me.Load("uspGetIPDItemsByRoundNo", "IPDItems", Parameters)

        End Function


        Public Function GetOperationalIPDItemsReport(startDateTime As Nullable(Of Date), endDateTime As Nullable(Of Date), itemCategoryID As String, itemStatusID As String, payStatusID As String, billModesID As String) As DataSet


            If (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(payStatusID) AndAlso (String.IsNullOrEmpty(itemCategoryID)) AndAlso (String.IsNullOrEmpty(itemStatusID)) AndAlso String.IsNullOrEmpty(billModesID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(payStatusID) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso (String.IsNullOrEmpty(itemStatusID)) AndAlso String.IsNullOrEmpty(billModesID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) AndAlso String.IsNullOrEmpty(billModesID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With


            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemStatusID) AndAlso String.IsNullOrEmpty(billModesID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With


            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemStatusID) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With


            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(payStatusID) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso String.IsNullOrEmpty(itemStatusID) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(payStatusID) AndAlso String.IsNullOrEmpty(billModesID) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso String.IsNullOrEmpty(billModesID) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso String.IsNullOrEmpty(itemStatusID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso String.IsNullOrEmpty(billModesID) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso String.IsNullOrEmpty(itemStatusID) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With


            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(payStatusID) AndAlso Not (String.IsNullOrEmpty(billModesID)) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) AndAlso Not (String.IsNullOrEmpty(itemCategoryID)) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemStatusID) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With
            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso String.IsNullOrEmpty(billModesID) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(payStatusID)) AndAlso (String.IsNullOrEmpty(billModesID)) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", payStatusID))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso (String.IsNullOrEmpty(payStatusID)) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso Not (String.IsNullOrEmpty(itemStatusID)) AndAlso Not (String.IsNullOrEmpty(billModesID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", itemStatusID))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemStatusID", Nothing))
                    .Add(New ParameterSQL("PayStatusID", Nothing))
                    .Add(New ParameterSQL("BillModesID", Nothing))
                End With
            End If

            Return Me.Load("uspGetOperationalIPDItemsReport", "Items", Parameters)

        End Function

        Public Function ClosePendingIPDItems() As Boolean


            With Parameters
                .Add(New ParameterSQL("Updated", SqlDbType.Bit))
            End With

            Me.ReadData = Read("uspClosePendingIPDItems", Parameters)
            Return True
        End Function


#End Region

    End Class

    Public Class IPDItemsEXT : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Dosage As String
        Private m_Duration As Integer
        Private m_DrQuantity As Integer
        Private m_Pharmacist As String
        Private m_LocationID As String

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property Dosage() As String
            Get
                Return m_Dosage
            End Get
            Set(Value As String)
                m_Dosage = Value
            End Set
        End Property

        Public Property Duration() As Integer
            Get
                Return m_Duration
            End Get
            Set(Value As Integer)
                m_Duration = Value
            End Set
        End Property

        Public Property DrQuantity() As Integer
            Get
                Return m_DrQuantity
            End Get
            Set(Value As Integer)
                m_DrQuantity = Value
            End Set
        End Property

        Public Property Pharmacist() As String
            Get
                Return m_Pharmacist
            End Get
            Set(Value As String)
                m_Pharmacist = Value
            End Set
        End Property

        Public Property LocationID() As String
            Get
                Return m_LocationID
            End Get
            Set(Value As String)
                m_LocationID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditIPDItemsEXT")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Dosage", Me.Dosage))
                .Add(New ParameterSQL("Duration", Me.Duration))
                .Add(New ParameterSQL("DrQuantity", Me.DrQuantity))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDItemsEXT")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Pharmacist", Me.Pharmacist))
                .Add(New ParameterSQL("LocationID", Me.LocationID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDItemsEXT")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RoundNo = '" + Me.RoundNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Visit No: " + Me.RoundNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDItemsEXT"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDItemsEXT")

            Return Parameters

        End Function

        Public Function GetIPDItemsEXT(roundNo As String, itemCode As String, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetIPDItemsEXT", "IPDItemsEXT", Parameters)

        End Function

#End Region

    End Class

    Public Class IPDDiagnosis : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_DiseaseCode As String
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property DiseaseCode() As String
            Get
                Return m_DiseaseCode
            End Get
            Set(Value As String)
                m_DiseaseCode = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditIPDDiagnosis")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("DiseaseCode", Me.DiseaseCode))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RoundNo = '" + Me.RoundNo + "' and DiseaseCode = '" + Me.DiseaseCode + "'"
            Dim errorPart As String = "Round No: " + Me.RoundNo + " and Diagnosis: " + Me.DiseaseCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDDiagnosis"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDDiagnosis")

            Return Parameters

        End Function

        Public Function GetIPDDiagnosis(roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
            End With

            Return Me.Load("uspGetIPDDiagnosis", "IPDDiagnosis", Parameters)

        End Function

        Public Function GetIPDUniqueDiagnosis(admissionNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AdmissionNo", admissionNo))
            End With

            Return Me.Load("uspGetIPDUniqueDiagnosis", "IPDDiagnosis", Parameters)

        End Function


        Public Function GetAdmissionDiagnosis(visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetAdmissionDiagnosis", "IPDDiagnosis", Parameters)

        End Function


#End Region

    End Class


    Public Class IPDCancerDiagnosis : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_DiseaseNo As String
        Private m_TopographicalNo As String
        Private m_BasisOfDiagnosisID As String
        Private m_CancerStageID As String
        Private m_Notes As String
        Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(ByVal Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property DiseaseNo() As String
            Get
                Return m_DiseaseNo
            End Get
            Set(ByVal Value As String)
                m_DiseaseNo = Value
            End Set
        End Property

        Public Property TopographicalNo() As String
            Get
                Return m_TopographicalNo
            End Get
            Set(ByVal Value As String)
                m_TopographicalNo = Value
            End Set
        End Property

        Public Property BasisOfDiagnosisID() As String
            Get
                Return m_BasisOfDiagnosisID
            End Get
            Set(ByVal Value As String)
                m_BasisOfDiagnosisID = Value
            End Set
        End Property

        Public Property CancerStageID() As String
            Get
                Return m_CancerStageID
            End Get
            Set(ByVal Value As String)
                m_CancerStageID = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

        Public Property RecordDateTime() As Date
            Get
                Return m_RecordDateTime
            End Get
            Set(ByVal Value As Date)
                m_RecordDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertIPDCancerDiagnosis")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("DiseaseNo", Me.DiseaseNo))
                .Add(New ParameterSQL("TopographicalNo", Me.TopographicalNo))
                .Add(New ParameterSQL("BasisOfDiagnosisID", Me.BasisOfDiagnosisID))
                .Add(New ParameterSQL("CancerStageID", Me.CancerStageID))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDCancerDiagnosis")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("DiseaseNo", Me.DiseaseNo))
                .Add(New ParameterSQL("TopographicalNo", Me.TopographicalNo))
                .Add(New ParameterSQL("BasisOfDiagnosisID", Me.BasisOfDiagnosisID))
                .Add(New ParameterSQL("CancerStageID", Me.CancerStageID))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDCancerDiagnosis")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RoundNo = '" + Me.RoundNo + "' and DiseaseNo = '" + Me.DiseaseNo + "'"
            Dim errorPart As String = "Round No: " + Me.RoundNo + " and Disease No: " + Me.DiseaseNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDCancerDiagnosis"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDCancerDiagnosis")

            Return Parameters

        End Function

        Public Function GetIPDCancerDiagnosis(ByVal roundNo As String, ByVal diseaseNo As String) As DataSet
            If Not String.IsNullOrEmpty(diseaseNo) Then
                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("DiseaseNo", diseaseNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("DiseaseNo", Nothing))
                End With
            End If



            Return Me.Load("uspGetIPDCancerDiagnosis", "IPDCancerDiagnosis", Parameters)

        End Function

#End Region



    End Class


    Public Class IPDRadiologyReports : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_ExamDateTime As Date
        Private m_Indication As String
        Private m_Report As String
        Private m_Conclusion As String
        Private m_Radiologist As String
        Private m_RadiologyTitleID As String

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ExamDateTime() As Date
            Get
                Return m_ExamDateTime
            End Get
            Set(Value As Date)
                m_ExamDateTime = Value
            End Set
        End Property

        Public Property Indication() As String
            Get
                Return m_Indication
            End Get
            Set(Value As String)
                m_Indication = Value
            End Set
        End Property

        Public Property Report() As String
            Get
                Return m_Report
            End Get
            Set(Value As String)
                m_Report = Value
            End Set
        End Property

        Public Property Conclusion() As String
            Get
                Return m_Conclusion
            End Get
            Set(Value As String)
                m_Conclusion = Value
            End Set
        End Property

        Public Property Radiologist() As String
            Get
                Return m_Radiologist
            End Get
            Set(Value As String)
                m_Radiologist = Value
            End Set
        End Property

        Public Property RadiologyTitleID() As String
            Get
                Return m_RadiologyTitleID
            End Get
            Set(Value As String)
                m_RadiologyTitleID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertIPDRadiologyReports")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ExamDateTime", Me.ExamDateTime))
                .Add(New ParameterSQL("Indication", Me.Indication))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("Conclusion", Me.Conclusion))
                .Add(New ParameterSQL("Radiologist", Me.Radiologist))
                .Add(New ParameterSQL("RadiologyTitleID", Me.RadiologyTitleID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDRadiologyReports")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ExamDateTime", Me.ExamDateTime))
                .Add(New ParameterSQL("Indication", Me.Indication))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("Conclusion", Me.Conclusion))
                .Add(New ParameterSQL("Radiologist", Me.Radiologist))
                .Add(New ParameterSQL("RadiologyTitleID", Me.RadiologyTitleID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDRadiologyReports")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RoundNo = '" + Me.RoundNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Round No: " + Me.RoundNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDRadiologyReports"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDRadiologyReports")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets the ipd radiology reports correponding to the supplied RoundNo, itemcode and itemcategory id.
        ''' </summary>
        ''' <param name="RoundNo"></param>
        ''' <param name="itemCode"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDRadiologyReports(roundNo As String, itemCode As String, itemCategoryID As String) As DataSet

            If (roundNo <> "" OrElse roundNo <> String.Empty) And
               (itemCode = "" OrElse itemCode = String.Empty) And
               (itemCategoryID = "" OrElse itemCategoryID = String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With

            ElseIf (roundNo <> "" OrElse roundNo <> String.Empty) And
           (itemCode <> "" OrElse itemCode <> String.Empty) And
           (itemCategoryID <> "" OrElse itemCategoryID <> String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With

            End If

            Return Me.Load("uspGetIPDRadiologyReports", "IPDRadiologyReports", Parameters)

        End Function

        ''' <summary>
        ''' Returns ipd radiology reports corresponding to the supplied round number
        ''' </summary>
        ''' <param name="RoundNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDRadiologyReports(roundNo As String) As DataSet
            Return GetIPDRadiologyReports(roundNo, String.Empty, String.Empty)
        End Function

#End Region

    End Class

    Public Class IPDDentalReports : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_ReportDate As Date
        Private m_Report As String

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ReportDate() As Date
            Get
                Return m_ReportDate
            End Get
            Set(Value As Date)
                m_ReportDate = Value
            End Set
        End Property

        Public Property Report() As String
            Get
                Return m_Report
            End Get
            Set(Value As String)
                m_Report = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertIPDDentalReports")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReportDate", Me.ReportDate))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDDentalReports")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ReportDate", Me.ReportDate))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDDentalReports")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RoundNo = '" + Me.RoundNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Round No: " + Me.RoundNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDDentalReports"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDDentalReports")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets the dental reports correponding to the supplied roundNo, itemcode and itemcategory id.
        ''' </summary>
        ''' <param name="roundNo"></param>
        ''' <param name="itemCode"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDDentalReports(roundNo As String, itemCode As String, itemCategoryID As String) As DataSet

            If (roundNo <> "" OrElse roundNo <> String.Empty) And
               (itemCode = "" OrElse itemCode = String.Empty) And
               (itemCategoryID = "" OrElse itemCategoryID = String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With

            ElseIf (roundNo <> "" OrElse roundNo <> String.Empty) And
           (itemCode <> "" OrElse itemCode <> String.Empty) And
           (itemCategoryID <> "" OrElse itemCategoryID <> String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With

            End If

            Return Me.Load("uspGetIPDDentalReports", "IPDDentalReports", Parameters)

        End Function

        ''' <summary>
        ''' Returns dental reports corresponding to the supplied roundno
        ''' </summary>
        ''' <param name="roundNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDDentalReports(roundNo As String) As DataSet
            Return GetIPDDentalReports(roundNo, String.Empty, String.Empty)
        End Function

#End Region

    End Class

    Public Class IPDTheatreOperations : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_OperationDateTime As Date
        Private m_LeadSurgeon As String
        Private m_OtherSurgeon As String
        Private m_LeadAnaesthetist As String
        Private m_OtherAnaesthetist As String
        Private m_LeadNurse As String
        Private m_OtherNurse As String
        Private m_AnaesthesiaTypeID As String
        Private m_OperationClassID As String
        Private m_PreoperativeDiagnosis As String
        Private m_PlannedProcedures As String
        Private m_Report As String
        Private m_PostoperativeInstructions As String

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property OperationDateTime() As Date
            Get
                Return m_OperationDateTime
            End Get
            Set(Value As Date)
                m_OperationDateTime = Value
            End Set
        End Property

        Public Property LeadSurgeon() As String
            Get
                Return m_LeadSurgeon
            End Get
            Set(Value As String)
                m_LeadSurgeon = Value
            End Set
        End Property

        Public Property OtherSurgeon() As String
            Get
                Return m_OtherSurgeon
            End Get
            Set(Value As String)
                m_OtherSurgeon = Value
            End Set
        End Property

        Public Property LeadAnaesthetist() As String
            Get
                Return m_LeadAnaesthetist
            End Get
            Set(Value As String)
                m_LeadAnaesthetist = Value
            End Set
        End Property

        Public Property OtherAnaesthetist() As String
            Get
                Return m_OtherAnaesthetist
            End Get
            Set(Value As String)
                m_OtherAnaesthetist = Value
            End Set
        End Property

        Public Property LeadNurse() As String
            Get
                Return m_LeadNurse
            End Get
            Set(Value As String)
                m_LeadNurse = Value
            End Set
        End Property

        Public Property OtherNurse() As String
            Get
                Return m_OtherNurse
            End Get
            Set(Value As String)
                m_OtherNurse = Value
            End Set
        End Property

        Public Property AnaesthesiaTypeID() As String
            Get
                Return m_AnaesthesiaTypeID
            End Get
            Set(Value As String)
                m_AnaesthesiaTypeID = Value
            End Set
        End Property

        Public Property OperationClassID() As String
            Get
                Return m_OperationClassID
            End Get
            Set(Value As String)
                m_OperationClassID = Value
            End Set
        End Property

        Public Property PreoperativeDiagnosis() As String
            Get
                Return m_PreoperativeDiagnosis
            End Get
            Set(Value As String)
                m_PreoperativeDiagnosis = Value
            End Set
        End Property

        Public Property PlannedProcedures() As String
            Get
                Return m_PlannedProcedures
            End Get
            Set(Value As String)
                m_PlannedProcedures = Value
            End Set
        End Property

        Public Property Report() As String
            Get
                Return m_Report
            End Get
            Set(Value As String)
                m_Report = Value
            End Set
        End Property

        Public Property PostoperativeInstructions() As String
            Get
                Return m_PostoperativeInstructions
            End Get
            Set(Value As String)
                m_PostoperativeInstructions = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertIPDTheatreOperations")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("OperationDateTime", Me.OperationDateTime))
                .Add(New ParameterSQL("LeadSurgeon", Me.LeadSurgeon))
                .Add(New ParameterSQL("OtherSurgeon", Me.OtherSurgeon))
                .Add(New ParameterSQL("LeadAnaesthetist", Me.LeadAnaesthetist))
                .Add(New ParameterSQL("OtherAnaesthetist", Me.OtherAnaesthetist))
                .Add(New ParameterSQL("LeadNurse", Me.LeadNurse))
                .Add(New ParameterSQL("OtherNurse", Me.OtherNurse))
                .Add(New ParameterSQL("AnaesthesiaTypeID", Me.AnaesthesiaTypeID))
                .Add(New ParameterSQL("OperationClassID", Me.OperationClassID))
                .Add(New ParameterSQL("PreoperativeDiagnosis", Me.PreoperativeDiagnosis))
                .Add(New ParameterSQL("PlannedProcedures", Me.PlannedProcedures))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("PostoperativeInstructions", Me.PostoperativeInstructions))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDTheatreOperations")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("OperationDateTime", Me.OperationDateTime))
                .Add(New ParameterSQL("LeadSurgeon", Me.LeadSurgeon))
                .Add(New ParameterSQL("OtherSurgeon", Me.OtherSurgeon))
                .Add(New ParameterSQL("LeadAnaesthetist", Me.LeadAnaesthetist))
                .Add(New ParameterSQL("OtherAnaesthetist", Me.OtherAnaesthetist))
                .Add(New ParameterSQL("LeadNurse", Me.LeadNurse))
                .Add(New ParameterSQL("OtherNurse", Me.OtherNurse))
                .Add(New ParameterSQL("AnaesthesiaTypeID", Me.AnaesthesiaTypeID))
                .Add(New ParameterSQL("OperationClassID", Me.OperationClassID))
                .Add(New ParameterSQL("PreoperativeDiagnosis", Me.PreoperativeDiagnosis))
                .Add(New ParameterSQL("PlannedProcedures", Me.PlannedProcedures))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("PostoperativeInstructions", Me.PostoperativeInstructions))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDTheatreOperations")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Me.SetCommand("uspDeleteIPDTheatreOperations")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
            End With

            'For Audit Trial
            Me.SetLogObject("IPDTheatreOperations")

            Return Parameters

        End Function

        Public Function GetIPDTheatreOperations(roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
            End With

            Return Me.Load("uspGetIPDTheatreOperations", "IPDTheatreOperations", Parameters)

        End Function

#End Region

    End Class

    Public Class Discharges : Inherits DBConnect

#Region " Fields "

        Private m_AdmissionNo As String
        Private m_StaffNo As String
        Private m_RoundNo As String
        Private m_DischargeDateTime As Date
        Private m_DischargeNotes As String
        Private m_DischargeStatusID As String
        Private m_ReviewDate As Date
        Private m_History As String
        Private m_Examination As String
        Private m_KeyFindingsInvestigation As String
        Private m_TreatmentOnWard As String
        Private m_OutcomeOfTreatment As String
        Private m_KeyRecommendations As String

#End Region

#Region " Properties "

        Public Property AdmissionNo() As String
            Get
                Return m_AdmissionNo
            End Get
            Set(Value As String)
                m_AdmissionNo = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property DischargeDateTime() As Date
            Get
                Return m_DischargeDateTime
            End Get
            Set(Value As Date)
                m_DischargeDateTime = Value
            End Set
        End Property

        Public Property DischargeNotes() As String
            Get
                Return m_DischargeNotes
            End Get
            Set(Value As String)
                m_DischargeNotes = Value
            End Set
        End Property

        Public Property DischargeStatusID() As String
            Get
                Return m_DischargeStatusID
            End Get
            Set(Value As String)
                m_DischargeStatusID = Value
            End Set
        End Property

        Public Property ReviewDate() As Date
            Get
                Return m_ReviewDate
            End Get
            Set(Value As Date)
                m_ReviewDate = Value
            End Set
        End Property

        Public Property History() As String
            Get
                Return m_History
            End Get
            Set(Value As String)
                m_History = Value
            End Set
        End Property

        Public Property Examination() As String
            Get
                Return m_Examination
            End Get
            Set(Value As String)
                m_Examination = Value
            End Set
        End Property

        Public Property KeyFindingsInvestigation() As String
            Get
                Return m_KeyFindingsInvestigation
            End Get
            Set(Value As String)
                m_KeyFindingsInvestigation = Value
            End Set
        End Property

        Public Property TreatmentOnWard() As String
            Get
                Return m_TreatmentOnWard
            End Get
            Set(Value As String)
                m_TreatmentOnWard = Value
            End Set
        End Property

        Public Property OutcomeOfTreatment() As String
            Get
                Return m_OutcomeOfTreatment
            End Get
            Set(Value As String)
                m_OutcomeOfTreatment = Value
            End Set
        End Property

        Public Property KeyRecommendations() As String
            Get
                Return m_KeyRecommendations
            End Get
            Set(Value As String)
                m_KeyRecommendations = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertDischarges")

            With Parameters
                .Add(New ParameterSQL("AdmissionNo", Me.AdmissionNo))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("DischargeDateTime", Me.DischargeDateTime))
                .Add(New ParameterSQL("DischargeNotes", Me.DischargeNotes))
                .Add(New ParameterSQL("DischargeStatusID", Me.DischargeStatusID))
                .Add(New ParameterSQL("ReviewDate", Me.ReviewDate))
                .Add(New ParameterSQL("History", Me.History))
                .Add(New ParameterSQL("Examination", Me.Examination))
                .Add(New ParameterSQL("KeyFindingsInvestigation", Me.KeyFindingsInvestigation))
                .Add(New ParameterSQL("TreatmentOnWard", Me.TreatmentOnWard))
                .Add(New ParameterSQL("OutcomeOfTreatment", Me.OutcomeOfTreatment))
                .Add(New ParameterSQL("KeyRecommendations", Me.KeyRecommendations))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateDischarges")

            With Parameters
                .Add(New ParameterSQL("AdmissionNo", Me.AdmissionNo))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("DischargeDateTime", Me.DischargeDateTime))
                .Add(New ParameterSQL("DischargeNotes", Me.DischargeNotes))
                .Add(New ParameterSQL("DischargeStatusID", Me.DischargeStatusID))
                .Add(New ParameterSQL("ReviewDate", Me.ReviewDate))
                .Add(New ParameterSQL("History", Me.History))
                .Add(New ParameterSQL("Examination", Me.Examination))
                .Add(New ParameterSQL("KeyFindingsInvestigation", Me.KeyFindingsInvestigation))
                .Add(New ParameterSQL("TreatmentOnWard", Me.TreatmentOnWard))
                .Add(New ParameterSQL("OutcomeOfTreatment", Me.OutcomeOfTreatment))
                .Add(New ParameterSQL("KeyRecommendations", Me.KeyRecommendations))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("Discharges")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "AdmissionNo = '" + Me.AdmissionNo + "'"
            Dim errorPart As String = "Admission No: " + Me.AdmissionNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Discharges"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Discharges")

            Return Parameters

        End Function

        Public Function GetDischarges(admissionNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AdmissionNo", admissionNo))
            End With

            Return Me.Load("uspGetDischarges", "Discharges", Parameters)

        End Function

#End Region

    End Class

    Public Class Deaths : Inherits DBConnect

#Region " Fields "

        Private m_PatientNo As String
        Private m_DeathDate As Date
        Private m_Notes As String
        Private m_StaffNo As String
        Private m_TimeOfDeath As String
        Private m_PrimaryCauseOfDeath As String
        Private m_SecondaryCauseOfDeath As String
        Private m_OtherCauseOfDeath As String

#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property DeathDate() As Date
            Get
                Return m_DeathDate
            End Get
            Set(value As Date)
                m_DeathDate = value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property TimeOfDeath() As String
            Get
                Return m_TimeOfDeath
            End Get
            Set(Value As String)
                m_TimeOfDeath = Value
            End Set
        End Property

        Public Property PrimaryCauseOfDeath() As String
            Get
                Return m_PrimaryCauseOfDeath
            End Get
            Set(Value As String)
                m_PrimaryCauseOfDeath = Value
            End Set
        End Property

        Public Property SecondaryCauseOfDeath() As String
            Get
                Return m_SecondaryCauseOfDeath
            End Get
            Set(Value As String)
                m_SecondaryCauseOfDeath = Value
            End Set
        End Property

        Public Property OtherCauseOfDeath() As String
            Get
                Return m_OtherCauseOfDeath
            End Get
            Set(Value As String)
                m_OtherCauseOfDeath = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertDeaths")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("DeathDate", Me.DeathDate))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("TimeOfDeath", Me.TimeOfDeath))
                .Add(New ParameterSQL("PrimaryCauseOfDeath", Me.PrimaryCauseOfDeath))
                .Add(New ParameterSQL("SecondaryCauseOfDeath", Me.SecondaryCauseOfDeath))
                .Add(New ParameterSQL("OtherCauseOfDeath", Me.OtherCauseOfDeath))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateDeaths")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("DeathDate", Me.DeathDate))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("TimeOfDeath", Me.TimeOfDeath))
                .Add(New ParameterSQL("PrimaryCauseOfDeath", Me.PrimaryCauseOfDeath))
                .Add(New ParameterSQL("SecondaryCauseOfDeath", Me.SecondaryCauseOfDeath))
                .Add(New ParameterSQL("OtherCauseOfDeath", Me.OtherCauseOfDeath))
            End With

            'For Audit Trial
            Me.SetLogObject("Deaths")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Me.SetCommand("uspDeleteDeaths")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
            End With

            'For Audit Trial
            Me.SetLogObject("Deaths")

            Return Parameters

        End Function

        Public Function GetDeaths(patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetDeaths", "Deaths", Parameters)

        End Function

#End Region

    End Class

    Public Class ARTRegimen : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_Combination As String
        Private m_StartDate As Date
        Private m_WHOStageID As String
        Private m_DrugLinesID As String
        Private m_StaffNo As String
        Private m_ARTCategoryID As String
        Private m_WhyEligible As String
        Private m_ARTSwitchReasons As String
        Private m_Notes As String
        Private m_ARTStatusID As String
        Private m_RefillDuration As Integer

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property Combination() As String
            Get
                Return m_Combination
            End Get
            Set(Value As String)
                m_Combination = Value
            End Set
        End Property

        Public Property StartDate() As Date
            Get
                Return m_StartDate
            End Get
            Set(value As Date)
                m_StartDate = value
            End Set
        End Property

        Public Property WHOStageID() As String
            Get
                Return m_WHOStageID
            End Get
            Set(value As String)
                m_WHOStageID = value
            End Set
        End Property

        Public Property DrugLinesID() As String
            Get
                Return m_DrugLinesID
            End Get
            Set(Value As String)
                m_DrugLinesID = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property ARTCategoryID() As String
            Get
                Return m_ARTCategoryID
            End Get
            Set(value As String)
                m_ARTCategoryID = value
            End Set
        End Property

        Public Property WhyEligible() As String
            Get
                Return m_WhyEligible
            End Get
            Set(value As String)
                m_WhyEligible = value
            End Set
        End Property

        Public Property ARTSwitchReasons() As String
            Get
                Return m_ARTSwitchReasons
            End Get
            Set(value As String)
                m_ARTSwitchReasons = value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(value As String)
                m_Notes = value
            End Set
        End Property

        Public Property ARTStatusID() As String
            Get
                Return m_ARTStatusID
            End Get
            Set(value As String)
                m_ARTStatusID = value
            End Set
        End Property

        Public Property RefillDuration() As Integer
            Get
                Return m_RefillDuration
            End Get
            Set(value As Integer)
                m_RefillDuration = value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertARTRegimen")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("Combination", Me.Combination))
                .Add(New ParameterSQL("StartDate", Me.StartDate))
                .Add(New ParameterSQL("WHOStageID", Me.WHOStageID))
                .Add(New ParameterSQL("DrugLinesID", Me.DrugLinesID))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("ARTCategoryID", Me.ARTCategoryID))
                .Add(New ParameterSQL("WhyEligible", Me.WhyEligible))
                .Add(New ParameterSQL("ARTSwitchReasons", Me.ARTSwitchReasons))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("ARTStatusID", Me.ARTStatusID))
                .Add(New ParameterSQL("RefillDuration", Me.RefillDuration))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateARTRegimen")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("Combination", Me.Combination))
                .Add(New ParameterSQL("StartDate", Me.StartDate))
                .Add(New ParameterSQL("WHOStageID", Me.WHOStageID))
                .Add(New ParameterSQL("DrugLinesID", Me.DrugLinesID))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("ARTCategoryID", Me.ARTCategoryID))
                .Add(New ParameterSQL("WhyEligible", Me.WhyEligible))
                .Add(New ParameterSQL("ARTSwitchReasons", Me.ARTSwitchReasons))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("ARTStatusID", Me.ARTStatusID))
                .Add(New ParameterSQL("RefillDuration", Me.RefillDuration))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trial
            Me.SetLogObject("ARTRegimen")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Me.SetCommand("uspDeleteARTRegimen")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
            End With

            'For Audit Trial
            Me.SetLogObject("ARTRegimen")

            Return Parameters

        End Function

        Public Function GetARTRegimen(visitNo As String) As DataSet

            If visitNo <> "" OrElse visitNo <> String.Empty Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                End With

            ElseIf (visitNo = "" OrElse visitNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetARTRegimen", "ARTRegimen", Parameters)

        End Function

        Public Function GetARTRegimen() As DataSet
            Return Me.GetARTRegimen(String.Empty)
        End Function

        Public Function GetVisitNoCurrentlyOnART(patientNo As String, visitDate As Nullable(Of Date)) As String

            Dim oAppData As New SyncSoft.Common.Classes.AppData()

            If IsNothing(visitDate) OrElse CDate(visitDate).Equals(oAppData.NullDateValue) Then
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("VisitDate", SqlDbType.SmallDateTime))
                    .Add(New ParameterSQL("VisitNo", SqlDbType.VarChar, 20))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("PatientNo", patientNo))
                    .Add(New ParameterSQL("VisitDate", visitDate))
                    .Add(New ParameterSQL("VisitNo", SqlDbType.VarChar, 20))
                End With
            End If

            Me.ReadData = Me.Read("uspGetVisitNoCurrentlyOnART", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("VisitNo")) Then
                    Return CStr(Me.ReadData("VisitNo"))
                Else : Return String.Empty
                End If

            Else : Return Nothing
            End If

        End Function

        Public Function GetVisitNoCurrentlyOnART(patientNo As String) As String
            Return Me.GetVisitNoCurrentlyOnART(patientNo, Nothing)
        End Function

#End Region

    End Class

    Public Class ARTRegimenDetails : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_DrugNo As String
        Private m_Dosage As String
        Private m_Duration As Integer
        Private m_Quantity As Integer
        Private m_Formula As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property DrugNo() As String
            Get
                Return m_DrugNo
            End Get
            Set(value As String)
                m_DrugNo = value
            End Set
        End Property

        Public Property Dosage() As String
            Get
                Return m_Dosage
            End Get
            Set(Value As String)
                m_Dosage = Value
            End Set
        End Property

        Public Property Duration() As Integer
            Get
                Return m_Duration
            End Get
            Set(value As Integer)
                m_Duration = value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(value As Integer)
                m_Quantity = value
            End Set
        End Property

        Public Property Formula() As String
            Get
                Return m_Formula
            End Get
            Set(Value As String)
                m_Formula = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyBase.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditARTRegimenDetails")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("DrugNo", Me.DrugNo))
                .Add(New ParameterSQL("Dosage", Me.Dosage))
                .Add(New ParameterSQL("Duration", Me.Duration))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Formula", Me.Formula))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "VisitNo = '" + Me.VisitNo + "' and DrugNo = '" + Me.DrugNo + "'"
            errorPart = "Visit No: " + Me.VisitNo + " and Drug No: " + Me.DrugNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ARTRegimenDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trial
            Me.SetLogObject("ARTRegimenDetails")

            Return Parameters

        End Function

        Public Function GetARTRegimenDetails(visitNo As String, drugNo As String) As DataSet

            If drugNo <> "" OrElse drugNo <> String.Empty Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("DrugNo", drugNo))
                End With

            ElseIf (drugNo = "" OrElse drugNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("DrugNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetARTRegimenDetails", "ARTRegimenDetails", Parameters)

        End Function

        Public Function GetARTRegimenDetails(visitNo As String) As DataSet
            Return Me.GetARTRegimenDetails(visitNo, String.Empty)
        End Function

        Public Function GetARTCurrentlyOn(patientNo As String, ARTStatusID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
                .Add(New ParameterSQL("ARTStatusID", ARTStatusID))
            End With

            Return Me.Load("uspGetARTCurrentlyOn", "ARTCurrentlyOn", Parameters)

        End Function

#End Region

    End Class

    Public Class ARTStopped : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_StopDate As Date
        Private m_ARTStopReasons As String
        Private m_StaffNo As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property StopDate() As Date
            Get
                Return m_StopDate
            End Get
            Set(value As Date)
                m_StopDate = value
            End Set
        End Property


        Public Property ARTStopReasons() As String
            Get
                Return m_ARTStopReasons
            End Get
            Set(Value As String)
                m_ARTStopReasons = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(Value As String)
                m_StaffNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyBase.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertARTStopped")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("StopDate", Me.StopDate))
                .Add(New ParameterSQL("ARTStopReasons", Me.ARTStopReasons))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateARTStopped")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("StopDate", Me.StopDate))
                .Add(New ParameterSQL("ARTStopReasons", Me.ARTStopReasons))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trial
            Me.SetLogObject("ARTStopped")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Me.SetCommand("uspDeleteARTStopped")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
            End With

            'For Audit Trial
            Me.SetLogObject("ARTStopped")

            Return Parameters

        End Function

        Public Function GetARTStopped(visitNo As String) As DataSet

            If visitNo <> "" OrElse visitNo <> String.Empty Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                End With

            ElseIf (visitNo = "" OrElse visitNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetARTStopped", "ARTStopped", Parameters)

        End Function

        Public Function GetARTStopped() As DataSet
            Return Me.GetARTStopped(String.Empty)
        End Function

#End Region

    End Class

    Public Class PurchaseOrders : Inherits DBConnect

#Region " Fields "

        Private m_PurchaseOrderNo As String
        Private m_OrderDate As Date
        Private m_DocumentNo As String
        Private m_SupplierNo As String
        Private m_ShipAddress As String

#End Region

#Region " Properties "

        Public Property PurchaseOrderNo() As String
            Get
                Return m_PurchaseOrderNo
            End Get
            Set(Value As String)
                m_PurchaseOrderNo = Value
            End Set
        End Property

        Public Property OrderDate() As Date
            Get
                Return m_OrderDate
            End Get
            Set(Value As Date)
                m_OrderDate = Value
            End Set
        End Property

        Public Property DocumentNo() As String
            Get
                Return m_DocumentNo
            End Get
            Set(Value As String)
                m_DocumentNo = Value
            End Set
        End Property

        Public Property SupplierNo() As String
            Get
                Return m_SupplierNo
            End Get
            Set(Value As String)
                m_SupplierNo = Value
            End Set
        End Property

        Public Property ShipAddress() As String
            Get
                Return m_ShipAddress
            End Get
            Set(Value As String)
                m_ShipAddress = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPurchaseOrders")

            With Parameters
                .Add(New ParameterSQL("PurchaseOrderNo", Me.PurchaseOrderNo))
                .Add(New ParameterSQL("OrderDate", Me.OrderDate))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("SupplierNo", Me.SupplierNo))
                .Add(New ParameterSQL("ShipAddress", Me.ShipAddress))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePurchaseOrders")

            With Parameters
                .Add(New ParameterSQL("PurchaseOrderNo", Me.PurchaseOrderNo))
                .Add(New ParameterSQL("OrderDate", Me.OrderDate))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("SupplierNo", Me.SupplierNo))
                .Add(New ParameterSQL("ShipAddress", Me.ShipAddress))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("PurchaseOrders")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PurchaseOrderNo = '" + Me.PurchaseOrderNo + "'"
            Dim errorPart As String = "Purchase Order No: " + Me.PurchaseOrderNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PurchaseOrders"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PurchaseOrders")

            Return Parameters

        End Function

        Public Function GetPurchaseOrders(purchaseOrderNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PurchaseOrderNo", purchaseOrderNo))
            End With

            Return Me.Load("uspGetPurchaseOrders", "PurchaseOrders", Parameters)

        End Function

        ''' <summary>
        ''' Returns periodic PurchaseOrders as per specified PurchaseOrder period, indicating wheather to include received or not
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <param name="includeReceived"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetPeriodicPurchaseOrders(startDate As Date, endDate As Date, includeReceived As Boolean) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("IncludeReceived", includeReceived))
            End With

            Return Me.Load("uspGetPeriodicPurchaseOrders", "PurchaseOrders", Parameters)

        End Function

        Public Function GetPurchaseOrdersNotPaidFor(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetPurchaseOrdersNotPaidFor", "PurchaseOrders", Parameters)

        End Function

        ''' <summary>
        ''' Returns all periodic PurchaseOrders as per specified PurchaseOrder period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicPurchaseOrders(startDate As Date, endDate As Date) As DataSet
            Return GetPeriodicPurchaseOrders(startDate, endDate, True)
        End Function

        Public Function GetNextPurchaseOrderID() As Integer

            With Parameters
                .Add(New ParameterSQL("PurchaseOrderID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextPurchaseOrderID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("PurchaseOrderID")) Then
                    Return CInt(Me.ReadData("PurchaseOrderID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function IsPurchaseOrderReceived(purchaseOrderNo As String) As Boolean

            Dim numberOrderReceived As Short

            With Parameters
                .Add(New ParameterSQL("PurchaseOrderNo", purchaseOrderNo))
                .Add(New ParameterSQL("NoOrderReceived", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspCountPurchaseOrderReceived", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("NoOrderReceived")) Then
                    numberOrderReceived = 0
                Else : numberOrderReceived = CShort(Me.ReadData("NoOrderReceived"))
                End If
            End If

            Return numberOrderReceived > 0

        End Function

#End Region

    End Class

    Public Class PurchaseOrderDetails : Inherits DBConnect

#Region " Fields "

        Private m_PurchaseOrderNo As String
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_ItemName As String
        Private m_UnitMeasure As String
        Private m_ItemGroup As String
        Private m_Quantity As Integer
        Private m_Rate As Decimal
        Private m_PackID As String
        Private m_PackSize As Integer
        Private m_Amount As Decimal
        Private m_VATValue As Decimal
        Private m_Notes As String
        Private m_StockStatusID As String


#End Region

#Region " Properties "

        Public Property PurchaseOrderNo() As String
            Get
                Return m_PurchaseOrderNo
            End Get
            Set(Value As String)
                m_PurchaseOrderNo = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemName() As String
            Get
                Return m_ItemName
            End Get
            Set(Value As String)
                m_ItemName = Value
            End Set
        End Property

        Public Property UnitMeasure() As String
            Get
                Return m_UnitMeasure
            End Get
            Set(Value As String)
                m_UnitMeasure = Value
            End Set
        End Property

        Public Property ItemGroup() As String
            Get
                Return m_ItemGroup
            End Get
            Set(ByVal Value As String)
                m_ItemGroup = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property Rate() As Decimal
            Get
                Return m_Rate
            End Get
            Set(Value As Decimal)
                m_Rate = Value
            End Set
        End Property

        Public Property PackID() As String
            Get
                Return m_PackID
            End Get
            Set(Value As String)
                m_PackID = Value
            End Set
        End Property

        Public Property PackSize() As Integer
            Get
                Return m_PackSize
            End Get
            Set(ByVal Value As Integer)
                m_PackSize = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property


        Public Property VATValue() As Decimal
            Get
                Return m_VATValue
            End Get
            Set(ByVal Value As Decimal)
                m_VATValue = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

        Public Property StockStatusID() As String
            Get
                Return m_StockStatusID
            End Get
            Set(ByVal Value As String)
                m_StockStatusID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditPurchaseOrderDetails")

            With Parameters
                .Add(New ParameterSQL("PurchaseOrderNo", Me.PurchaseOrderNo))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemName", Me.ItemName))
                .Add(New ParameterSQL("UnitMeasure", Me.UnitMeasure))
                .Add(New ParameterSQL("ItemGroup", Me.ItemGroup))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Rate", Me.Rate))
                .Add(New ParameterSQL("PackID", Me.PackID))
                .Add(New ParameterSQL("PackSize", Me.PackSize))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("VATValue", Me.VATValue))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("StockStatusID", Me.StockStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PurchaseOrderNo = '" + Me.PurchaseOrderNo + "' and ItemCategoryID = '" + Me.ItemCategoryID + "' and ItemCode = '" + Me.ItemCode + "'"
            Dim errorPart As String = "Purchase Order No: " + Me.PurchaseOrderNo + " and Item Category: " + Me.ItemCategoryID + " and Item Code: " + Me.ItemCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PurchaseOrderDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PurchaseOrderDetails")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets Purchase Order Details for supplied Purchase Order No and item category ID
        ''' </summary>
        ''' <param name="PurchaseOrderNo"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPurchaseOrderDetails(purchaseOrderNo As String, itemCategoryID As String) As DataSet

            If String.IsNullOrEmpty(itemCategoryID) Then
                With Parameters
                    .Add(New ParameterSQL("PurchaseOrderNo", purchaseOrderNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("PurchaseOrderNo", purchaseOrderNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With
            End If

            Return Me.Load("uspGetPurchaseOrderDetails", "PurchaseOrderDetails", Parameters)

        End Function

        ''' <summary>
        ''' Gets Purchase Order Details for supplied Purchase Order No
        ''' </summary>
        ''' <param name="PurchaseOrderNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPurchaseOrderDetails(purchaseOrderNo As String) As DataSet
            Return GetPurchaseOrderDetails(purchaseOrderNo, String.Empty)
        End Function

#End Region

    End Class

    Public Class GoodsReceivedNote : Inherits DBConnect

#Region " Fields "

        Private m_GRNNo As String
        Private m_PurchaseOrderNo As String
        Private m_ReceivedDate As Date
        Private m_AdviceNoteNo As String
        Private m_DeliveryLocationID As String
        Private m_DiscountTotal As Decimal
        Private m_TotalVAT As Decimal
        Private m_AmountWords As String

#End Region

#Region " Properties "

        Public Property GRNNo() As String
            Get
                Return m_GRNNo
            End Get
            Set(Value As String)
                m_GRNNo = Value
            End Set
        End Property

        Public Property PurchaseOrderNo() As String
            Get
                Return m_PurchaseOrderNo
            End Get
            Set(Value As String)
                m_PurchaseOrderNo = Value
            End Set
        End Property

        Public Property ReceivedDate() As Date
            Get
                Return m_ReceivedDate
            End Get
            Set(Value As Date)
                m_ReceivedDate = Value
            End Set
        End Property

        Public Property AdviceNoteNo() As String
            Get
                Return m_AdviceNoteNo
            End Get
            Set(Value As String)
                m_AdviceNoteNo = Value
            End Set
        End Property

        Public Property DeliveryLocationID() As String
            Get
                Return m_DeliveryLocationID
            End Get
            Set(Value As String)
                m_DeliveryLocationID = Value
            End Set
        End Property

        Public Property DiscountTotal() As Decimal
            Get
                Return m_DiscountTotal
            End Get
            Set(ByVal Value As Decimal)
                m_DiscountTotal = Value
            End Set
        End Property

        Public Property TotalVAT() As Decimal
            Get
                Return m_TotalVAT
            End Get
            Set(ByVal Value As Decimal)
                m_TotalVAT = Value
            End Set
        End Property

        Public Property AmountWords() As String
            Get
                Return m_AmountWords
            End Get
            Set(Value As String)
                m_AmountWords = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertGoodsReceivedNote")

            With Parameters
                .Add(New ParameterSQL("GRNNo", Me.GRNNo))
                .Add(New ParameterSQL("PurchaseOrderNo", Me.PurchaseOrderNo))
                .Add(New ParameterSQL("ReceivedDate", Me.ReceivedDate))
                .Add(New ParameterSQL("AdviceNoteNo", Me.AdviceNoteNo))
                .Add(New ParameterSQL("DeliveryLocationID", Me.DeliveryLocationID))
                .Add(New ParameterSQL("DiscountTotal", Me.DiscountTotal))
                .Add(New ParameterSQL("TotalVAT", Me.TotalVAT))
                .Add(New ParameterSQL("AmountWords", Me.AmountWords))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateGoodsReceivedNote")

            With Parameters
                .Add(New ParameterSQL("GRNNo", Me.GRNNo))
                .Add(New ParameterSQL("PurchaseOrderNo", Me.PurchaseOrderNo))
                .Add(New ParameterSQL("ReceivedDate", Me.ReceivedDate))
                .Add(New ParameterSQL("AdviceNoteNo", Me.AdviceNoteNo))
                .Add(New ParameterSQL("DeliveryLocationID", Me.DeliveryLocationID))
                .Add(New ParameterSQL("DiscountTotal", Me.DiscountTotal))
                .Add(New ParameterSQL("TotalVAT", Me.TotalVAT))
                .Add(New ParameterSQL("AmountWords", Me.AmountWords))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("GoodsReceivedNote")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "GRNNo = '" + Me.GRNNo + "'"
            Dim errorPart As String = "GRN No: " + Me.GRNNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "GoodsReceivedNote"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("GoodsReceivedNote")

            Return Parameters

        End Function

        Public Function GetGoodsReceivedNote(_GRNNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("GRNNo", _GRNNo))
            End With

            Return Me.Load("uspGetGoodsReceivedNote", "GoodsReceivedNote", Parameters)

        End Function

        ''' <summary>
        ''' Returns all periodic GoodsReceivedNote as per specified GoodsReceivedNote period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicGoodsReceivedNote(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetPeriodicGoodsReceivedNote", "GoodsReceivedNote", Parameters)

        End Function

        Public Function GetNextGRNID(purchaseOrderNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("PurchaseOrderNo", purchaseOrderNo))
                .Add(New ParameterSQL("GRNID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextGRNID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("GRNID")) Then
                    Return CInt(Me.ReadData("GRNID"))
                Else : Return 1
                End If

            End If

        End Function




        ''' <summary>
        ''' Returns all periodic UnReturnedGoodsReceivedNotes as per specified GoodsReceivedNote period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetUnReturnedGoodsReceivedNote(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetUnReturnedGoodsReceivedNote", "GoodsReceivedNote", Parameters)

        End Function


#End Region

    End Class

    Public Class GoodsReceivedNoteDetails : Inherits DBConnect

#Region " Fields "

        Private m_GRNNo As String
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_ItemName As String
        Private m_UnitMeasure As String
        Private m_OrderedQuantity As Integer
        Private m_ReceivedQuantity As Integer
        Private m_BonusQuantity As Integer
        Private m_Rate As Decimal
        Private m_PackID As String
        Private m_PackSize As Integer
        Private m_Discount As Decimal
        Private m_VATValue As Decimal
        Private m_Amount As Decimal
        Private m_PaystatusID As String
        Private m_BatchNo As String
        Private m_ExpiryDate As Date
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property GRNNo() As String
            Get
                Return m_GRNNo
            End Get
            Set(Value As String)
                m_GRNNo = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemName() As String
            Get
                Return m_ItemName
            End Get
            Set(Value As String)
                m_ItemName = Value
            End Set
        End Property

        Public Property UnitMeasure() As String
            Get
                Return m_UnitMeasure
            End Get
            Set(Value As String)
                m_UnitMeasure = Value
            End Set
        End Property

        Public Property OrderedQuantity() As Integer
            Get
                Return m_OrderedQuantity
            End Get
            Set(Value As Integer)
                m_OrderedQuantity = Value
            End Set
        End Property

        Public Property ReceivedQuantity() As Integer
            Get
                Return m_ReceivedQuantity
            End Get
            Set(Value As Integer)
                m_ReceivedQuantity = Value
            End Set
        End Property

        Public Property BonusQuantity() As Integer
            Get
                Return m_BonusQuantity
            End Get
            Set(Value As Integer)
                m_BonusQuantity = Value
            End Set
        End Property

        Public Property Rate() As Decimal
            Get
                Return m_Rate
            End Get
            Set(Value As Decimal)
                m_Rate = Value
            End Set
        End Property

        Public Property PackID() As String
            Get
                Return m_PackID
            End Get
            Set(Value As String)
                m_PackID = Value
            End Set
        End Property

        Public Property PackSize() As Integer
            Get
                Return m_PackSize
            End Get
            Set(Value As Integer)
                m_PackSize = Value
            End Set
        End Property

        Public Property Discount() As Decimal
            Get
                Return m_Discount
            End Get
            Set(Value As Decimal)
                m_Discount = Value
            End Set
        End Property
        Public Property VATValue() As Decimal
            Get
                Return m_VATValue
            End Get
            Set(Value As Decimal)
                m_VATValue = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(Value As Decimal)
                m_Amount = Value
            End Set
        End Property

        Public Property PaystatusID() As String
            Get
                Return m_PaystatusID
            End Get
            Set(Value As String)
                m_PaystatusID = Value
            End Set
        End Property

        Public Property BatchNo() As String
            Get
                Return m_BatchNo
            End Get
            Set(Value As String)
                m_BatchNo = Value
            End Set
        End Property

        Public Property ExpiryDate() As Date
            Get
                Return m_ExpiryDate
            End Get
            Set(Value As Date)
                m_ExpiryDate = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub
#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditGoodsReceivedNoteDetails")

            With Parameters
                .Add(New ParameterSQL("GRNNo", Me.GRNNo))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemName", Me.ItemName))
                .Add(New ParameterSQL("UnitMeasure", Me.UnitMeasure))
                .Add(New ParameterSQL("OrderedQuantity", Me.OrderedQuantity))
                .Add(New ParameterSQL("ReceivedQuantity", Me.ReceivedQuantity))
                .Add(New ParameterSQL("BonusQuantity", Me.BonusQuantity))
                .Add(New ParameterSQL("Rate", Me.Rate))
                .Add(New ParameterSQL("PackID", Me.PackID))
                .Add(New ParameterSQL("PackSize", Me.PackSize))
                .Add(New ParameterSQL("Discount", Me.Discount))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("PaystatusID", Me.PaystatusID))
                .Add(New ParameterSQL("VATValue", Me.VATValue))
                .Add(New ParameterSQL("BatchNo", Me.BatchNo))
                .Add(New ParameterSQL("ExpiryDate", Me.ExpiryDate))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function


        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePaidGoodsReceivedNoteDetails")

                With Parameters
                 .Add(New ParameterSQL("GRNNo", Me.GRNNo))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("PaystatusID", Me.PaystatusID))
                End With


            'For Audit Trial
            Me.SetLogObject("GoodsReceivedNoteDetails")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "GRNNo = '" + Me.GRNNo + "' and ItemCategoryID = '" + Me.ItemCategoryID + "' and ItemCode = '" + Me.ItemCode + "'"
            Dim errorPart As String = "GRN No: " + Me.GRNNo + " and Item Category: " + Me.ItemCategoryID + " and Item Code: " + Me.ItemCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "GoodsReceivedNoteDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("GoodsReceivedNoteDetails")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets Goods Received Note Details for supplied GRN No and item category ID
        ''' </summary>
        ''' <param name="GRNNo"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetGoodsReceivedNoteDetails(GRNNo As String, itemCategoryID As String) As DataSet

            If String.IsNullOrEmpty(itemCategoryID) Then
                With Parameters
                    .Add(New ParameterSQL("GRNNo", GRNNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("GRNNo", GRNNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With
            End If

            Return Me.Load("uspGetGoodsReceivedNoteDetails", "GoodsReceivedNoteDetails", Parameters)

        End Function

        ''' <summary>
        ''' Gets Goods Received Note Details for supplied GRN No
        ''' </summary>
        ''' <param name="GRNNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGoodsReceivedNoteDetails(GRNNo As String) As DataSet
            Return GetGoodsReceivedNoteDetails(GRNNo, String.Empty)
        End Function

        ''' <summary>
        ''' Gets Goods Received Note Details for supplied GRN No, LocationID and and item category ID. These are for GRNs to be returned
        ''' </summary>
        ''' <param name="GRNNo"></param>
        '''  <param name="LocationID"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>

        Public Function GetGoodsReceivedNoteDetailsToReturn(GRNNo As String, LocationID As String, itemCategoryID As String, itemCode As String) As DataSet

            If String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) Then
                With Parameters
                    .Add(New ParameterSQL("GRNNo", GRNNo))
                    .Add(New ParameterSQL("LocationID", LocationID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                End With

            ElseIf String.IsNullOrEmpty(itemCategoryID) And Not String.IsNullOrEmpty(itemCode) Then
                With Parameters
                    .Add(New ParameterSQL("GRNNo", GRNNo))
                    .Add(New ParameterSQL("LocationID", LocationID))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("GRNNo", GRNNo))
                    .Add(New ParameterSQL("LocationID", LocationID))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                End With
            End If

            Return Me.Load("uspGetGoodsReceivedNoteDetailsToReturn", "GoodsReceivedNoteDetails", Parameters)

        End Function

        ''' <summary>
        ''' Gets Goods Received Note Details for supplied GRN No and LocationID.This GRN is to be returned
        ''' </summary>
        ''' <param name="GRNNo"></param>
        '''  <param name="LocationID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGoodsReceivedNoteDetailsToReturn(GRNNo As String, LocationID As String, itemCode As String) As DataSet
            Return GetGoodsReceivedNoteDetailsToReturn(GRNNo, LocationID, String.Empty, itemCode)
        End Function

        Public Function GetGoodsReceivedNoteDetailsToReturn(GRNNo As String, LocationID As String) As DataSet
            Return GetGoodsReceivedNoteDetailsToReturn(GRNNo, LocationID, String.Empty, String.Empty)
        End Function

        Public Function GoodsReceivedDetailsSupplierHistory(ByVal SupplierNo As String, ByVal ItemCategoryID As String, ByVal ItemCode As String, startDate As Date, endDate As Date) As DataSet

            If String.IsNullOrEmpty(SupplierNo) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso String.IsNullOrEmpty(ItemCode) Then

                With Parameters
                    .Add(New ParameterSQL("SupplierNo", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            ElseIf Not String.IsNullOrEmpty(SupplierNo) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso String.IsNullOrEmpty(ItemCode) Then
                With Parameters
                    .Add(New ParameterSQL("SupplierNo", SupplierNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            ElseIf String.IsNullOrEmpty(SupplierNo) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso String.IsNullOrEmpty(ItemCode) Then
                With Parameters
                    .Add(New ParameterSQL("SupplierNo", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            ElseIf String.IsNullOrEmpty(SupplierNo) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso Not String.IsNullOrEmpty(ItemCode) Then
                With Parameters
                    .Add(New ParameterSQL("SupplierNo", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", ItemCode))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            ElseIf Not String.IsNullOrEmpty(SupplierNo) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso String.IsNullOrEmpty(ItemCode) Then
                With Parameters
                    .Add(New ParameterSQL("SupplierNo", SupplierNo))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            ElseIf Not String.IsNullOrEmpty(SupplierNo) AndAlso String.IsNullOrEmpty(ItemCategoryID) AndAlso Not String.IsNullOrEmpty(ItemCode) Then
                With Parameters
                    .Add(New ParameterSQL("SupplierNo", SupplierNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", ItemCode))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            ElseIf String.IsNullOrEmpty(SupplierNo) AndAlso Not String.IsNullOrEmpty(ItemCategoryID) AndAlso Not String.IsNullOrEmpty(ItemCode) Then
                With Parameters
                    .Add(New ParameterSQL("SupplierNo", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", ItemCode))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("SupplierNo", SupplierNo))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", ItemCode))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            End If

            Return Me.Load("uspGoodsReceivedDetailsSupplierHistory", "GoodsReceivedNoteDetails", Parameters)

        End Function

        Public Function GetUnpaidGoodsReceivedNoteDetails(GRNNo As String) As DataSet

                With Parameters
                    .Add(New ParameterSQL("GRNNo", GRNNo))
                End With


            Return Me.Load("uspGetNotPaidGoodsReceivedNoteDetails", "GoodsReceivedNoteDetails", Parameters)

        End Function
#End Region

    End Class

    Public Class GoodsReturnedNote : Inherits DBConnect

#Region " Fields "

        Private m_ReturnNo As String
        Private m_GRNNo As String
        Private m_ReturnDate As Date
        Private m_AmountWords As String
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property ReturnNo() As String
            Get
                Return m_ReturnNo
            End Get
            Set(ByVal Value As String)
                m_ReturnNo = Value
            End Set
        End Property

        Public Property GRNNo() As String
            Get
                Return m_GRNNo
            End Get
            Set(ByVal Value As String)
                m_GRNNo = Value
            End Set
        End Property

        Public Property ReturnDate() As Date
            Get
                Return m_ReturnDate
            End Get
            Set(ByVal Value As Date)
                m_ReturnDate = Value
            End Set
        End Property

        Public Property AmountWords() As String
            Get
                Return m_AmountWords
            End Get
            Set(ByVal Value As String)
                m_AmountWords = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertGoodsReturnedNote")

            With Parameters
                .Add(New ParameterSQL("ReturnNo", Me.ReturnNo))
                .Add(New ParameterSQL("GRNNo", Me.GRNNo))
                .Add(New ParameterSQL("ReturnDate", Me.ReturnDate))
                .Add(New ParameterSQL("AmountWords", Me.AmountWords))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateGoodsReturnedNote")

            With Parameters
                .Add(New ParameterSQL("ReturnNo", Me.ReturnNo))
                .Add(New ParameterSQL("GRNNo", Me.GRNNo))
                .Add(New ParameterSQL("ReturnDate", Me.ReturnDate))
                .Add(New ParameterSQL("AmountWords", Me.AmountWords))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("GoodsReturnedNote")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ReturnNo = '" + Me.ReturnNo + "'"
            Dim errorPart As String = "Return No: " + Me.ReturnNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "GoodsReturnedNote"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("GoodsReturnedNote")

            Return Parameters

        End Function

        Public Function GetGoodsReturnedNote(ByVal returnNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ReturnNo", returnNo))
            End With

            Return Me.Load("uspGetGoodsReturnedNote", "GoodsReturnedNote", Parameters)

        End Function

        Public Function GetNextReturnID(GRNNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("GRNNo", GRNNo))
                .Add(New ParameterSQL("ReturnID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextReturnID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("ReturnID")) Then
                    Return CInt(Me.ReadData("ReturnID"))
                Else : Return 1
                End If

            End If

        End Function
#End Region

    End Class

    Public Class GoodsReturnedNoteDetails : Inherits DBConnect

#Region " Fields "

        Private m_ReturnNo As String
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_ItemName As String
        Private m_ReturnQuantity As Integer
        Private m_GoodsReturnReasonID As String

#End Region

#Region " Properties "

        Public Property ReturnNo() As String
            Get
                Return m_ReturnNo
            End Get
            Set(ByVal Value As String)
                m_ReturnNo = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemName() As String
            Get
                Return m_ItemName
            End Get
            Set(ByVal Value As String)
                m_ItemName = Value
            End Set
        End Property

        Public Property ReturnQuantity() As Integer
            Get
                Return m_ReturnQuantity
            End Get
            Set(ByVal Value As Integer)
                m_ReturnQuantity = Value
            End Set
        End Property

        Public Property GoodsReturnReasonID() As String
            Get
                Return m_GoodsReturnReasonID
            End Get
            Set(ByVal Value As String)
                m_GoodsReturnReasonID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertGoodsReturnedNoteDetails")

            With Parameters
                .Add(New ParameterSQL("ReturnNo", Me.ReturnNo))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemName", Me.ItemName))
                .Add(New ParameterSQL("ReturnQuantity", Me.ReturnQuantity))
                .Add(New ParameterSQL("GoodsReturnReasonID", Me.GoodsReturnReasonID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                '.Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateGoodsReturnedNoteDetails")

            With Parameters
                .Add(New ParameterSQL("ReturnNo", Me.ReturnNo))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemName", Me.ItemName))
                .Add(New ParameterSQL("ReturnQuantity", Me.ReturnQuantity))
                .Add(New ParameterSQL("GoodsReturnReasonID", Me.GoodsReturnReasonID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("GoodsReturnedNoteDetails")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ReturnNo = '" + Me.ReturnNo + "' and ItemCategoryID = '" + Me.ItemCategoryID + "' and ItemCode = '" + Me.ItemCode + "'"
            Dim errorPart As String = "Return No: " + Me.ReturnNo + " and Item Category: " + Me.ItemCategoryID + " and Item Code: " + Me.ItemCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "GoodsReturnedNoteDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("GoodsReturnedNoteDetails")

            Return Parameters

        End Function

        Public Function GetGoodsReturnedNoteDetails(ByVal returnNo As String, ByVal itemCategoryID As String, ByVal itemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ReturnNo", returnNo))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("ItemCode", itemCode))
            End With

            Return Me.Load("uspGetGoodsReturnedNoteDetails", "GoodsReturnedNoteDetails", Parameters)

        End Function


        Public Function GetReturnedGoods(ByVal GRNNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("GRNNo", GRNNo))

            End With

            Return Me.Load("uspGetReturnedGoods", "GoodsReturnedNoteDetails", Parameters)

        End Function


#End Region


    End Class

    Public Class Inventory : Inherits DBConnect

#Region " Fields "

        Private m_LocationID As String
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_TranDate As Date
        Private m_StockTypeID As String
        Private m_Quantity As Integer
        Private m_Balance As Integer ' readonly
        Private m_Details As String
        'Private m_TransferReason As String
        Private m_EntryModeID As String
        Private m_BatchNo As String
        Private m_ExpiryDate As Date

#End Region

#Region " Properties "

        Public Property LocationID() As String
            Get
                Return m_LocationID
            End Get
            Set(Value As String)
                m_LocationID = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property TranDate() As Date
            Get
                Return m_TranDate
            End Get
            Set(Value As Date)
                m_TranDate = Value
            End Set
        End Property

        Public Property StockTypeID() As String
            Get
                Return m_StockTypeID
            End Get
            Set(Value As String)
                m_StockTypeID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public ReadOnly Property Balance() As Integer
            Get
                Return m_Balance
            End Get
        End Property

        Public Property Details() As String
            Get
                Return m_Details
            End Get
            Set(Value As String)
                m_Details = Value
            End Set
        End Property

        'Public Property TransferReason() As String
        '    Get
        '        Return m_TransferReason
        '    End Get
        '    Set(Value As String)
        '        m_TransferReason = Value
        '    End Set
        'End Property

        Public Property EntryModeID() As String
            Get
                Return m_EntryModeID
            End Get
            Set(Value As String)
                m_EntryModeID = Value
            End Set
        End Property

        Public Property BatchNo() As String
            Get
                Return m_BatchNo
            End Get
            Set(Value As String)
                m_BatchNo = Value
            End Set
        End Property

        Public Property ExpiryDate() As Date
            Get
                Return m_ExpiryDate
            End Get
            Set(Value As Date)
                m_ExpiryDate = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertInventory")

            With Parameters
                .Add(New ParameterSQL("LocationID", Me.LocationID))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("TranDate", Me.TranDate))
                .Add(New ParameterSQL("StockTypeID", Me.StockTypeID))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Details", Me.Details))
                '.Add(New ParameterSQL("TransferReason", Me.TransferReason))
                .Add(New ParameterSQL("EntryModeID", Me.EntryModeID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("BatchNo", Me.BatchNo))
                .Add(New ParameterSQL("ExpiryDate", Me.ExpiryDate))
            End With

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets actual inventory balance at supllied location
        ''' </summary>
        ''' <param name="locationID"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="itemCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInventoryBalance(locationID As String, itemCategoryID As String, itemCode As String) As Integer

            If String.IsNullOrEmpty(locationID) Then
                With Parameters
                    .Add(New ParameterSQL("LocationID", Nothing, 10, ParameterDirection.Input))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("Balance", SqlDbType.Int))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("Balance", SqlDbType.Int))
                End With
            End If

            Me.ReadData = Read("uspGetInventoryBalance", Parameters)

            If Not Me.ReadData Is Nothing Then

                If IsDBNull(Me.ReadData("Balance")) Then
                    Return 0
                Else : Return CInt(Me.ReadData("Balance"))
                End If

            End If

        End Function

        ''' <summary>
        ''' Gets actual inventory batchno at supllied location
        ''' </summary>
        ''' <param name="locationID"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="itemCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 

        Public Function GetInventoryBatchNo(LocationID As String, itemCategoryID As String, itemCode As String) As String
            If String.IsNullOrEmpty(LocationID) Then
                With Parameters
                    .Add(New ParameterSQL("LocationID", Nothing, 10, ParameterDirection.Input))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BatchNo", SqlDbType.VarChar, 20))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("LocationID", LocationID))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BatchNo", SqlDbType.VarChar, 20))

                End With
            End If

            Me.ReadData = Read("uspGetInventoryBatchNo", Parameters)
            Dim batchNo As String = String.Empty
            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("BatchNo")) Then
                    batchNo = CStr(Me.ReadData("BatchNo"))

                End If
            End If
            Return batchNo

        End Function

        ''' <summary>
        ''' Gets actual inventory Expiry Date at supllied location
        ''' </summary>
        ''' <param name="locationID"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="itemCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 

        Public Function GetInventoryExpiryDate(LocationID As String, ItemCategoryID As String, ItemCode As String) As Date

            If String.IsNullOrEmpty(LocationID) Then
                With Parameters
                    .Add(New ParameterSQL("LocationID", Nothing, 10, ParameterDirection.Input))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", ItemCode))
                    .Add(New ParameterSQL("ExpiryDate", SqlDbType.SmallDateTime))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("LocationID", LocationID))
                    .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                    .Add(New ParameterSQL("ItemCode", ItemCode))
                    .Add(New ParameterSQL("ExpiryDate", SqlDbType.SmallDateTime))

                End With
            End If
            Me.ReadData = Read("uspGetInventoryExpiryDate", Parameters)


            If Not Me.ReadData Is Nothing Then

                If IsDBNull(Me.ReadData("ExpiryDate")) Then
                    Return Nothing
                Else
                    Return CDate((Me.ReadData("ExpiryDate")))
                    DisplayMessage(CStr(Me.ReadData("ExpiryDate")))
                End If

            End If

        End Function

        Public Function GetInventoryLogins(startDateTime As Date, endDateTime As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))
            End With
            Return Me.Load("uspGetInventoryLogins", "Inventory", Parameters)

        End Function



        ''' <summary>
        ''' Gets actual inventory balance at all locations
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="itemCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInventoryBalance(itemCategoryID As String, itemCode As String) As Integer
            Return GetInventoryBalance(String.Empty, itemCategoryID, itemCode)
        End Function

        ''' <summary>
        ''' Gets available stock taking care of pending items that may be picked in the last 1 day
        ''' </summary>
        ''' <param name="drugNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 

        Public Function GetAvailableStock(drugNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("DrugNo", drugNo))
                .Add(New ParameterSQL("Balance", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetAvailableStock", Parameters)

            If Not Me.ReadData Is Nothing Then

                If IsDBNull(Me.ReadData("Balance")) Then
                    Return 0
                Else : Return CInt(Me.ReadData("Balance"))
                End If

            End If

        End Function

        Public Function GetAvailableToPayForDrugs(drugNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("DrugNo", drugNo))
                .Add(New ParameterSQL("Balance", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetAvailableToPayForDrugs", Parameters)

            If Not Me.ReadData Is Nothing Then

                If IsDBNull(Me.ReadData("Balance")) Then
                    Return 0
                Else : Return CInt(Me.ReadData("Balance"))
                End If

            End If

        End Function


        ''' <summary>
        ''' Gets inventory start balance at supllied location
        ''' </summary>
        ''' <param name="locationID"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="itemCode"></param>
        ''' <param name="startDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInventoryStartBalance(locationID As String, itemCategoryID As String, itemCode As String, startDate As Date) As Integer

            If String.IsNullOrEmpty(locationID) Then
                With Parameters
                    .Add(New ParameterSQL("LocationID", Nothing, 10, ParameterDirection.Input))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("StartBalance", SqlDbType.Int))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("StartBalance", SqlDbType.Int))
                End With
            End If

            Me.ReadData = Read("uspGetInventoryStartBalance", Parameters)

            If Not Me.ReadData Is Nothing Then

                If IsDBNull(Me.ReadData("StartBalance")) Then
                    Return 0
                Else : Return CInt(Me.ReadData("StartBalance"))
                End If

            End If

        End Function

        ''' <summary>
        ''' Gets inventory start balance at all locations
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="itemCode"></param>
        ''' <param name="startDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInventoryStartBalance(itemCategoryID As String, itemCode As String, startDate As Date) As Integer
            Return GetInventoryStartBalance(String.Empty, itemCategoryID, itemCode, startDate)
        End Function

        ''' <summary>
        ''' Gets inventory End balance at supllied location
        ''' </summary>
        ''' <param name="locationID"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="itemCode"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInventoryEndBalance(locationID As String, itemCategoryID As String, itemCode As String, endDate As Date) As Integer

            If String.IsNullOrEmpty(locationID) Then
                With Parameters
                    .Add(New ParameterSQL("LocationID", Nothing, 10, ParameterDirection.Input))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("EndBalance", SqlDbType.Int))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("EndBalance", SqlDbType.Int))
                End With
            End If

            Me.ReadData = Read("uspGetInventoryEndBalance", Parameters)

            If Not Me.ReadData Is Nothing Then

                If IsDBNull(Me.ReadData("EndBalance")) Then
                    Return 0
                Else : Return CInt(Me.ReadData("EndBalance"))
                End If

            End If

        End Function

        ''' <summary>
        ''' Gets inventory End balance at all locations
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="itemCode"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInventoryEndBalance(itemCategoryID As String, itemCode As String, endDate As Date) As Integer
            Return GetInventoryEndBalance(String.Empty, itemCategoryID, itemCode, endDate)
        End Function



        Public Function GetPeriodicInventory(startDateTime As Date, endDateTime As Date, itemCategoryID As String, itemCode As String,
                                             branchID As String, locationID As String, loginID As String) As DataSet


            '--------------------------------------All Not null-----------------------------------------

            If Not String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
            Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(locationID) AndAlso
                Not String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With

                '--------------------------------------only ItemCategory Is null-----------------------------------------
            ElseIf String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
            Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(locationID) AndAlso
            Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With



                '--------------------------------------only ItemCode Is null-----------------------------------------
            ElseIf Not String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) AndAlso
            Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(locationID) AndAlso
            Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With

                '--------------------------------------only BranchID Is null-----------------------------------------

            ElseIf Not String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
            String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(locationID) AndAlso
            Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With

                '--------------------------------------only LocationID Is null-----------------------------------------
            ElseIf Not String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
             Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
            Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With


                '--------------------------------------only LocationID Is null-----------------------------------------
            ElseIf Not String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
             Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
            Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("LocationID", loginID))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With

                '--------------------------------------ItemCategory And ItemCode Not null -----------------------------------------
            ElseIf Not String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
            String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
                 String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
                '--------------------------------------ItemCategory And BranchID Not null-----------------------------------------

            ElseIf Not String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) AndAlso
        Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
             String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With

                '--------------------------------------Only ItemCategoryID And LocationID Not null-----------------------------------------

            ElseIf Not String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) AndAlso
        String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(locationID) AndAlso
            String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With

                '--------------------------------------Only ItemCategoryID And LoginID Not null-----------------------------------------

            ElseIf Not String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) AndAlso
      String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
            Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
                '--------------------------------------ItemCode And BranchID Not null -----------------------------------------
            ElseIf String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
        Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
            String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
                '--------------------------------------ItemCode And LocationID Not null-----------------------------------------

            ElseIf String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
         String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(locationID) AndAlso
            String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
                '--------------------------------------Only ItemCode And LoginID Not null-----------------------------------------

            ElseIf String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
        String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
            Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
                '--------------------------------------BranchID And LoginID Not null-----------------------------------------

            ElseIf String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) AndAlso
        Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(locationID) AndAlso
             String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
                '--------------------------------------LocationID And LoginID Not null -----------------------------------------
            ElseIf String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) AndAlso
        String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(locationID) AndAlso
            Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
                '-----------------------------ItemCategory And ItemCode  null -----------------------------------------
            ElseIf String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) AndAlso
        Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(locationID) AndAlso
            Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
                '--------------------------------------ItemCategory And BranchID  null-----------------------------------------

            ElseIf String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
         String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(locationID) AndAlso
            Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
                '--------------------------------------Only ItemCategoryID And LocationID  null-----------------------------------------

            ElseIf String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
        Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
            Not String.IsNullOrEmpty(loginID) Then

                '--------------------------------------Only ItemCategoryID And LoginID  null-----------------------------------------

            ElseIf String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
        Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(locationID) AndAlso
            String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
                '--------------------------------------ItemCode And BranchID  null -----------------------------------------
            ElseIf Not String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) AndAlso
         String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(locationID) AndAlso
            Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
                '--------------------------------------ItemCode And LocationID  null-----------------------------------------

            ElseIf Not String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) AndAlso
        Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
            Not String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
                '--------------------------------------Only ItemCode And LoginID null-----------------------------------------

            ElseIf Not Not String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) AndAlso
        Not String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(locationID) AndAlso
            String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
                '--------------------------------------BranchID And LocationID  null -----------------------------------------
            ElseIf Not String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
         String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
            Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
                '--------------------------------------BranchID And LoginID null-----------------------------------------

            ElseIf Not String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
         String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(locationID) AndAlso
             String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
                '--------------------------------------LocationID And LoginID null -----------------------------------------
            ElseIf Not String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
        Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
             String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
                '--------------------------------------------Only ItemCategoryID Not null-----------------------------------------

            ElseIf Not String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) AndAlso
        String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
            String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
                '--------------------------------------Only ItemCode Not null-----------------------------------------

            ElseIf String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) AndAlso
         String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
             String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
                '--------------------------------------Only BranchID Not null-----------------------------------------

            ElseIf String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) AndAlso
        Not String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
             String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
                '--------------------------------------Only LocationID Not null-----------------------------------------

            ElseIf String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) AndAlso
        String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(locationID) AndAlso
            String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
                '--------------------------------------Only LoginID  Not null-----------------------------------------

            ElseIf String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) AndAlso
         String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
            Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
                '--------------------------------------all null-----------------------------------------

            ElseIf String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) AndAlso
        String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(locationID) AndAlso
            String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With

            End If
            Return Me.Load("uspGetPeriodicInventory", "Inventory", Parameters)
        End Function

#End Region

    End Class

    Public Class InventoryLocation : Inherits DBConnect

#Region " Fields "

        Private m_LocationID As String
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_UnitsAtHand As Integer
        Private m_BatchNo As String
        Private m_ExpiryDate As Date

#End Region

#Region " Properties "

        Public Property LocationID() As String
            Get
                Return m_LocationID
            End Get
            Set(Value As String)
                m_LocationID = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property UnitsAtHand() As Integer
            Get
                Return m_UnitsAtHand
            End Get
            Set(Value As Integer)
                m_UnitsAtHand = Value
            End Set
        End Property

        Public Property BatchNo() As String
            Get
                Return m_BatchNo
            End Get
            Set(Value As String)
                m_BatchNo = Value
            End Set
        End Property

        Public Property ExpiryDate() As Date
            Get
                Return m_ExpiryDate
            End Get
            Set(Value As Date)
                m_ExpiryDate = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditInventoryLocation")

            With Parameters
                .Add(New ParameterSQL("LocationID", Me.LocationID))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("UnitsAtHand", Me.UnitsAtHand))
                .Add(New ParameterSQL("BatchNo", Me.BatchNo))
                .Add(New ParameterSQL("ExpiryDate", Me.ExpiryDate))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "LocationID = '" + Me.LocationID + "' and ItemCategoryID = '" + Me.ItemCategoryID + "' and ItemCode = '" + Me.ItemCode + "'"
            Dim errorPart As String = "Location: " + Me.LocationID + " and Item Category: " + Me.ItemCategoryID + " and Item Code: " + Me.ItemCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "InventoryLocation"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("InventoryLocation")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets inventory location details at supplied location
        ''' </summary>
        ''' <param name="locationID"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="itemCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>

        Public Function GetInventoryLocation(locationID As String, itemCategoryID As String, itemCode As String) As DataSet

            If String.IsNullOrEmpty(locationID) AndAlso String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) Then
                With Parameters
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                End With

            ElseIf String.IsNullOrEmpty(locationID) AndAlso Not String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode) Then
                With Parameters
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                End With

            ElseIf Not String.IsNullOrEmpty(locationID) AndAlso Not String.IsNullOrEmpty(itemCategoryID) AndAlso String.IsNullOrEmpty(itemCode) Then
                With Parameters
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                End With
            End If

            Return Me.Load("uspGetInventoryLocation", "InventoryLocation", Parameters)

        End Function



        Public Function GetInventoryItemCategoryLocation(locationID As String, itemCategoryID As String) As DataSet

            Return Me.GetInventoryLocation(locationID, itemCategoryID, String.Empty)

        End Function

        Public Function GetInventoryItemCategoryLocation(locationID As String, itemCategoryID As String, itemCode As String) As DataSet

            Return Me.GetInventoryLocation(locationID, itemCategoryID, itemCode)

        End Function


        ''' <summary>
        ''' Gets inventory location details for all locations
        ''' </summary>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="itemCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>

        Public Function GetInventoryLocation(itemCategoryID As String, itemCode As String) As DataSet
            Return GetInventoryLocation(String.Empty, itemCategoryID, itemCode)
        End Function

        Public Function GetDistintInventoryLocations() As DataSet

            Return Me.Load("uspGetDistintInventoryLocations", "InventoryLocation")

        End Function

        Public Function GetDistintInventoryLocationItemCategory() As DataSet

            Return Me.Load("uspGetDistintInventoryLocationItemCategory", "InventoryLocation")

        End Function


        Public Function GetInventoryItemsLocation(locationID As String, itemCategoryID As String, itemCode As String) As DataSet

            If String.IsNullOrEmpty(itemCode) Then
                With Parameters
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                End With
            End If
            Return Me.Load("uspGetInventoryItemsLocation", "InventoryLocation", Parameters)
        End Function

        Public Function GetAllInventionLocations(objectID As Integer, dataID As String) As DataSet

            If objectID = Nothing AndAlso String.IsNullOrEmpty(dataID) Then

                With Parameters
                    .Add(New ParameterSQL("ObjectID", Nothing))
                    .Add(New ParameterSQL("DataID", Nothing))
                End With

            ElseIf Not objectID = Nothing AndAlso String.IsNullOrEmpty(dataID) Then

                With Parameters
                    .Add(New ParameterSQL("ObjectID", objectID))
                    .Add(New ParameterSQL("DataID", Nothing))
                End With

            ElseIf objectID = Nothing AndAlso Not String.IsNullOrEmpty(dataID) Then

                With Parameters
                    .Add(New ParameterSQL("ObjectID", Nothing))
                    .Add(New ParameterSQL("DataID", dataID))
                End With

            Else

                With Parameters
                    .Add(New ParameterSQL("ObjectID", objectID))
                    .Add(New ParameterSQL("DataID", dataID))
                End With
            End If



            Return Me.Load("uspGetAllLocations", "AllLocations", Parameters)

        End Function

        Public Function GetAllInventionLocations() As DataSet


            Return Me.GetAllInventionLocations(Nothing, Nothing)

        End Function

        Public Function GetInvectionLocationByObjectID(objectID As Integer) As DataSet

            Return Me.GetAllInventionLocations(objectID, Nothing)

        End Function

        Public Function GetInvectionLocationByDataID(dataID As String) As DataSet

            Return Me.GetAllInventionLocations(Nothing, dataID)

        End Function



#End Region

    End Class
    Public Class InventoryOrders : Inherits DBConnect

#Region " Fields "

        Private m_OrderNo As String
        Private m_OrderDate As Date
        Private m_OrderTypeID As String
        Private m_FromLocationID As String
        Private m_ToLocationID As String
        Private m_StockCost As Decimal
        Private m_TransferReasonID As String

#End Region

#Region " Properties "

        Public Property OrderNo() As String
            Get
                Return m_OrderNo
            End Get
            Set(Value As String)
                m_OrderNo = Value
            End Set
        End Property

        Public Property OrderDate() As Date
            Get
                Return m_OrderDate
            End Get
            Set(Value As Date)
                m_OrderDate = Value
            End Set
        End Property

        Public Property OrderTypeID() As String
            Get
                Return m_OrderTypeID
            End Get
            Set(Value As String)
                m_OrderTypeID = Value
            End Set
        End Property

        Public Property FromLocationID() As String
            Get
                Return m_FromLocationID
            End Get
            Set(Value As String)
                m_FromLocationID = Value
            End Set
        End Property


        Public Property ToLocationID() As String
            Get
                Return m_ToLocationID
            End Get
            Set(Value As String)
                m_ToLocationID = Value
            End Set
        End Property

        Public Property StockCost() As Decimal
            Get
                Return m_StockCost
            End Get
            Set(Value As Decimal)
                m_StockCost = Value
            End Set
        End Property

        Public Property TransferReasonID() As String
            Get
                Return m_TransferReasonID
            End Get
            Set(Value As String)
                m_TransferReasonID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertInventoryOrders")

            With Parameters
                .Add(New ParameterSQL("OrderNo", Me.OrderNo))
                .Add(New ParameterSQL("OrderDate", Me.OrderDate))
                .Add(New ParameterSQL("OrderTypeID", Me.OrderTypeID))
                .Add(New ParameterSQL("FromLocationID", Me.FromLocationID))
                .Add(New ParameterSQL("ToLocationID", Me.ToLocationID))
                .Add(New ParameterSQL("StockCost", Me.StockCost))
                .Add(New ParameterSQL("TransferReasonID", Me.TransferReasonID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateInventoryOrders")

            With Parameters
                .Add(New ParameterSQL("OrderNo", Me.OrderNo))
                .Add(New ParameterSQL("OrderDate", Me.OrderDate))
                .Add(New ParameterSQL("OrderTypeID", Me.OrderTypeID))
                .Add(New ParameterSQL("ToLocationID", Me.ToLocationID))
                .Add(New ParameterSQL("StockCost", Me.StockCost))
                .Add(New ParameterSQL("TransferReasonID", Me.TransferReasonID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("InventoryOrders")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "OrderNo = '" + Me.OrderNo + "'"
            Dim errorPart As String = "Order No: " + Me.OrderNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "InventoryOrders"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("InventoryOrders")

            Return Parameters

        End Function

        Public Function GetInventoryOrders(OrderNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("OrderNo", OrderNo))
            End With

            Return Me.Load("uspGetInventoryOrders", "InventoryOrders", Parameters)

        End Function

        Public Function GetNextOrderID() As Integer

            With Parameters
                .Add(New ParameterSQL("OrderID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextOrderID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("OrderID")) Then
                    Return CInt(Me.ReadData("OrderID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function IsOrderTransferred(orderNo As String) As Boolean

            Dim numberOrderTransferred As Short

            With Parameters
                .Add(New ParameterSQL("OrderNo", orderNo))
                .Add(New ParameterSQL("NoOrderTransferred", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspCountOrderTransferred", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("NoOrderTransferred")) Then
                    numberOrderTransferred = 0
                Else : numberOrderTransferred = CShort(Me.ReadData("NoOrderTransferred"))
                End If
            End If

            Return numberOrderTransferred > 0

        End Function

        ''' <summary>
        ''' Returns all periodic InventoryOrders as per specified InventoryOrders period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicInventoryOrders(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetPeriodicInventoryOrders", "InventoryOrders", Parameters)

        End Function

        Public Function GetLocationInventoryOrderAcknowledgement(FromLocationID As String, InventoryAlertDays As Integer) As DataSet

            With Parameters
                .Add(New ParameterSQL("FromLocationID", FromLocationID))
                .Add(New ParameterSQL("InventoryAlertDays", InventoryAlertDays))
            End With
            Return Me.Load("uspGetNotAcknowledgedInventoryOrders", "InventoryAcknowledgements", Parameters)

        End Function

        Public Function GetNotProcessedInventoryAcknowledgement(InventoryAlertDays As Integer) As DataSet

            With Parameters
                .Add(New ParameterSQL("InventoryAlertDays", InventoryAlertDays))
            End With

            Return Me.Load("uspGetNotProcessedInventoryAcknowledgement", "InventoryOrders", Parameters)

        End Function


#End Region

    End Class

    Public Class InventoryOrderDetails : Inherits DBConnect

#Region " Fields "

        Private m_OrderNo As String
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_PackID As String
        Private m_PackSize As Integer
        Private m_UnitCost As Decimal
        Private m_Quantity As Integer
        Private m_ItemStatusID As String

#End Region

#Region " Properties "

        Public Property OrderNo() As String
            Get
                Return m_OrderNo
            End Get
            Set(Value As String)
                m_OrderNo = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property PackID() As String
            Get
                Return m_PackID
            End Get
            Set(Value As String)
                m_PackID = Value
            End Set
        End Property

        Public Property PackSize() As Integer
            Get
                Return m_PackSize
            End Get
            Set(Value As Integer)
                m_PackSize = Value
            End Set
        End Property

        Public Property UnitCost() As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(Value As Decimal)
                m_UnitCost = Value
            End Set
        End Property


        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property ItemStatusID() As String
            Get
                Return m_ItemStatusID
            End Get
            Set(ByVal Value As String)
                m_ItemStatusID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditInventoryOrderDetails")

            With Parameters
                .Add(New ParameterSQL("OrderNo", Me.OrderNo))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("PackID", Me.PackID))
                .Add(New ParameterSQL("PackSize", Me.PackSize))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("ItemStatusID", Me.ItemStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Me.SetCommand("uspDeleteInventoryOrderDetails")

            With Parameters
                .Add(New ParameterSQL("OrderNo", Me.OrderNo))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
            End With

            'For Audit Trial
            Me.SetLogObject("InventoryOrderDetails")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets all Inventory Order Details for supplied Order no and item category ID
        ''' </summary>
        ''' <param name="OrderNo"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInventoryOrderDetails(orderNo As String, itemCategoryID As String) As DataSet

            If String.IsNullOrEmpty(itemCategoryID) Then
                With Parameters
                    .Add(New ParameterSQL("OrderNo", orderNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("OrderNo", orderNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With
            End If

            Return Me.Load("uspGetInventoryOrderDetails", "InventoryOrderDetails", Parameters)

        End Function

        ''' <summary>
        ''' Gets only Issued Inventory Order Details for supplied Order no
        ''' </summary>
        ''' <param name="OrderNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInventoryOrderDetails(orderNo As String) As DataSet
            Return GetInventoryOrderDetails(orderNo, String.Empty)
        End Function

        ''' <summary>
        ''' Gets pending inventory order details at supplied to location
        ''' </summary>
        ''' <param name="toLocationID"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPendingInventoryOrderDetails(toLocationID As String, startDate As Date, endDate As Date) As DataSet

            If String.IsNullOrEmpty(toLocationID) Then
                With Parameters
                    .Add(New ParameterSQL("ToLocationID", Nothing))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("ToLocationID", toLocationID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            End If

            Return Me.Load("uspGetPendingInventoryOrderDetails", "InventoryOrderDetails", Parameters)

        End Function

        ''' <summary>
        ''' Gets pending inventory order details for all locations
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPendingInventoryOrderDetails(startDate As Date, endDate As Date) As DataSet
            Return GetPendingInventoryOrderDetails(String.Empty, startDate, endDate)
        End Function

#End Region

    End Class

    Public Class InventoryTransfers : Inherits DBConnect

#Region " Fields "

        Private m_TransferNo As String
        Private m_TransferDate As Date
        Private m_FromLocationID As String
        Private m_ToLocationID As String
        Private m_StockCost As Decimal
        Private m_OrderNo As String

#End Region

#Region " Properties "

        Public Property TransferNo() As String
            Get
                Return m_TransferNo
            End Get
            Set(Value As String)
                m_TransferNo = Value
            End Set
        End Property

        Public Property TransferDate() As Date
            Get
                Return m_TransferDate
            End Get
            Set(Value As Date)
                m_TransferDate = Value
            End Set
        End Property

        Public Property FromLocationID() As String
            Get
                Return m_FromLocationID
            End Get
            Set(Value As String)
                m_FromLocationID = Value
            End Set
        End Property

        Public Property ToLocationID() As String
            Get
                Return m_ToLocationID
            End Get
            Set(Value As String)
                m_ToLocationID = Value
            End Set
        End Property

        Public Property StockCost() As Decimal
            Get
                Return m_StockCost
            End Get
            Set(Value As Decimal)
                m_StockCost = Value
            End Set
        End Property

        Public Property OrderNo() As String
            Get
                Return m_OrderNo
            End Get
            Set(Value As String)
                m_OrderNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertInventoryTransfers")

            With Parameters
                .Add(New ParameterSQL("TransferNo", Me.TransferNo))
                .Add(New ParameterSQL("TransferDate", Me.TransferDate))
                .Add(New ParameterSQL("FromLocationID", Me.FromLocationID))
                .Add(New ParameterSQL("ToLocationID", Me.ToLocationID))
                .Add(New ParameterSQL("StockCost", Me.StockCost))
                .Add(New ParameterSQL("OrderNo", Me.OrderNo))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateInventoryTransfers")

            With Parameters
                .Add(New ParameterSQL("TransferNo", Me.TransferNo))
                .Add(New ParameterSQL("TransferDate", Me.TransferDate))
                .Add(New ParameterSQL("ToLocationID", Me.ToLocationID))
                .Add(New ParameterSQL("StockCost", Me.StockCost))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("InventoryTransfers")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "TransferNo = '" + Me.TransferNo + "'"
            Dim errorPart As String = "Transfer No: " + Me.TransferNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "InventoryTransfers"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("InventoryTransfers")

            Return Parameters

        End Function

        Public Function GetInventoryTransfers(transferNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("TransferNo", transferNo))
            End With

            Return Me.Load("uspGetInventoryTransfers", "InventoryTransfers", Parameters)

        End Function

        Public Function GetNextTransferID() As Integer

            With Parameters
                .Add(New ParameterSQL("TransferID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextTransferID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("TransferID")) Then
                    Return CInt(Me.ReadData("TransferID"))
                Else : Return 1
                End If

            End If

        End Function

        ''' <summary>
        ''' Returns all periodic InventoryTransfers as per specified InventoryTransfers period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicInventoryTransfers(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetPeriodicInventoryTransfers", "InventoryTransfers", Parameters)

        End Function

#End Region

    End Class

    Public Class InventoryTransferDetails : Inherits DBConnect

#Region " Fields "

        Private m_TransferNo As String
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_PackID As String
        Private m_PackSize As Integer
        Private m_UnitCost As Decimal
        Private m_Quantity As Integer
        Private m_BatchNo As String
        Private m_ExpiryDate As Date
        Private m_StockStatusID As String

#End Region

#Region " Properties "

        Public Property TransferNo() As String
            Get
                Return m_TransferNo
            End Get
            Set(Value As String)
                m_TransferNo = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property PackID() As String
            Get
                Return m_PackID
            End Get
            Set(Value As String)
                m_PackID = Value
            End Set
        End Property

        Public Property PackSize() As Integer
            Get
                Return m_PackSize
            End Get
            Set(Value As Integer)
                m_PackSize = Value
            End Set
        End Property



        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(Value As Integer)
                m_Quantity = Value
            End Set
        End Property


        Public Property UnitCost() As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(Value As Decimal)
                m_UnitCost = Value
            End Set
        End Property

        Public Property BatchNo() As String
            Get
                Return m_BatchNo
            End Get
            Set(Value As String)
                m_BatchNo = Value
            End Set
        End Property

        Public Property ExpiryDate() As Date
            Get
                Return m_ExpiryDate
            End Get
            Set(Value As Date)
                m_ExpiryDate = Value
            End Set
        End Property

        Public Property StockStatusID() As String
            Get
                Return m_StockStatusID
            End Get
            Set(Value As String)
                m_StockStatusID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditInventoryTransferDetails")

            With Parameters
                .Add(New ParameterSQL("TransferNo", Me.TransferNo))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("PackID", Me.PackID))
                .Add(New ParameterSQL("PackSize", Me.PackSize))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("BatchNo", Me.BatchNo))
                .Add(New ParameterSQL("ExpiryDate", Me.ExpiryDate))
                .Add(New ParameterSQL("StockStatusID", Me.StockStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "TransferNo = '" + Me.TransferNo + "' and ItemCategoryID = '" + Me.ItemCategoryID + "' and ItemCode = '" + Me.ItemCode + "'"
            Dim errorPart As String = "Transfer No: " + Me.TransferNo + " and Item Category: " + Me.ItemCategoryID + " and Item Code: " + Me.ItemCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "InventoryTransferDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("InventoryTransferDetails")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets all Inventory Transfer Details for supplied transfer no and item category ID
        ''' </summary>
        ''' <param name="transferNo"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInventoryTransferDetails(transferNo As String, itemCategoryID As String) As DataSet

            If String.IsNullOrEmpty(itemCategoryID) Then
                With Parameters
                    .Add(New ParameterSQL("TransferNo", transferNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("TransferNo", transferNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With
            End If

            Return Me.Load("uspGetInventoryTransferDetails", "InventoryTransferDetails", Parameters)

        End Function

        ''' <summary>
        ''' Gets only Issued Inventory Transfer Details for supplied transfer no
        ''' </summary>
        ''' <param name="transferNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInventoryTransferDetails(transferNo As String) As DataSet
            Return GetInventoryTransferDetails(transferNo, String.Empty)
        End Function

        ''' <summary>
        ''' Gets issued inventory transfer details at supplied to location
        ''' </summary>
        ''' <param name="toLocationID"></param>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIssuedInventoryTransferDetails(toLocationID As String, orderTypeID As String, startDate As Date, endDate As Date) As DataSet

            If String.IsNullOrEmpty(toLocationID) AndAlso String.IsNullOrEmpty(orderTypeID) Then
                With Parameters
                    .Add(New ParameterSQL("ToLocationID", Nothing))
                    .Add(New ParameterSQL("OrderTypeID", Nothing))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            ElseIf Not String.IsNullOrEmpty(toLocationID) AndAlso String.IsNullOrEmpty(orderTypeID) Then
                With Parameters
                    .Add(New ParameterSQL("ToLocationID", toLocationID))
                    .Add(New ParameterSQL("OrderTypeID", Nothing))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            ElseIf String.IsNullOrEmpty(toLocationID) AndAlso Not String.IsNullOrEmpty(orderTypeID) Then
                With Parameters
                    .Add(New ParameterSQL("ToLocationID", Nothing))
                    .Add(New ParameterSQL("OrderTypeID", orderTypeID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            ElseIf Not String.IsNullOrEmpty(toLocationID) AndAlso Not String.IsNullOrEmpty(orderTypeID) Then
                With Parameters
                    .Add(New ParameterSQL("ToLocationID", toLocationID))
                    .Add(New ParameterSQL("OrderTypeID", orderTypeID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("ToLocationID", toLocationID))
                    .Add(New ParameterSQL("OrderTypeID", orderTypeID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            End If

            Return Me.Load("uspGetIssuedInventoryTransferDetails", "InventoryTransferDetails", Parameters)

        End Function

        ''' <summary>
        ''' Gets issued inventory transfer details for all locations
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>

        Public Function GetIssuedInventoryTransferDetails(startDate As Date, endDate As Date) As DataSet
            Return GetIssuedInventoryTransferDetails(String.Empty, String.Empty, startDate, endDate)
        End Function



        Public Function GetIssuedInventoryTransferDetails(orderTypeID As String, startDate As Date, endDate As Date) As DataSet
            Return GetIssuedInventoryTransferDetails(String.Empty, orderTypeID, startDate, endDate)
        End Function

#End Region

    End Class

    Public Class InventoryAcknowledges : Inherits DBConnect

#Region " Fields "

        Private m_TransferNo As String
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_ReceivedDate As Date

#End Region

#Region " Properties "

        Public Property TransferNo() As String
            Get
                Return m_TransferNo
            End Get
            Set(Value As String)
                m_TransferNo = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ReceivedDate() As Date
            Get
                Return m_ReceivedDate
            End Get
            Set(Value As Date)
                m_ReceivedDate = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertInventoryAcknowledges")

            With Parameters
                .Add(New ParameterSQL("TransferNo", Me.TransferNo))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ReceivedDate", Me.ReceivedDate))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        ''' <summary>
        ''' Returns all periodic InventoryAcknowledges as per specified InventoryAcknowledges period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicInventoryAcknowledges(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetPeriodicInventoryAcknowledges", "InventoryAcknowledges", Parameters)

        End Function

        Public Function GetInventoryAcknowledges(transferNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("TransferNo", transferNo))
            End With

            Return Me.Load("uspGetInventoryAcknowledges", "InventoryAcknowledges", Parameters)

        End Function

#End Region

    End Class


    Public Class DeliveryNoteDetails : Inherits DBConnect

#Region " Fields "

        Private m_TransferNo As String
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_PackID As String
        Private m_PackSize As Integer
        Private m_Quantity As Integer
        Private m_RecordDateTime As Date
        Private m_UnitCost As Decimal
        Private m_DeliveryDate As Date




#End Region

#Region " Properties "

        Public Property TransferNo() As String
            Get
                Return m_TransferNo
            End Get
            Set(ByVal Value As String)
                m_TransferNo = Value
            End Set
        End Property

        Public Property DeliveryDate() As Date
            Get
                Return m_DeliveryDate
            End Get
            Set(ByVal Value As Date)
                m_DeliveryDate = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property PackID() As String
            Get
                Return m_PackID
            End Get
            Set(ByVal Value As String)
                m_PackID = Value
            End Set
        End Property

        Public Property PackSize() As Integer
            Get
                Return m_PackSize
            End Get
            Set(ByVal Value As Integer)
                m_PackSize = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(ByVal Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property RecordDateTime() As Date
            Get
                Return m_RecordDateTime
            End Get
            Set(ByVal Value As Date)
                m_RecordDateTime = Value
            End Set
        End Property

        Public Property UnitCost() As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(ByVal Value As Decimal)
                m_UnitCost = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertDeliveryNoteDetails")

            With Parameters
                .Add(New ParameterSQL("TransferNo", Me.TransferNo))
                .Add(New ParameterSQL("DeliveryDate", Me.DeliveryDate))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("PackID", Me.PackID))
                .Add(New ParameterSQL("PackSize", Me.PackSize))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateDeliveryNoteDetails")

            With Parameters
                .Add(New ParameterSQL("TransferNo", Me.TransferNo))
                .Add(New ParameterSQL("DeliveryDate", Me.DeliveryDate))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("PackID", Me.PackID))
                .Add(New ParameterSQL("PackSize", Me.PackSize))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
            End With

            'For Audit Trail
            Me.SetLogObject("DeliveryNoteDetails")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "TransferNo = '" + Me.TransferNo + "' and ItemCategoryID = '" + Me.ItemCategoryID + "' and ItemCode = '" + Me.ItemCode + "'"
            Dim errorPart As String = "Transfer No: " + Me.TransferNo + " And Item Category: " + Me.ItemCategoryID + " And Item Code: " + Me.ItemCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "DeliveryNoteDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("DeliveryNoteDetails")

            Return Parameters

        End Function

        Public Function GetDeliveryNoteDetails(ByVal transferNo As String, ByVal itemCategoryID As String, ByVal itemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("TransferNo", transferNo))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("ItemCode", itemCode))
            End With

            Return Me.Load("uspGetDeliveryNoteDetails", "DeliveryNoteDetails", Parameters)

        End Function

#End Region



    End Class



    Public Class PhysicalStockCount : Inherits DBConnect

#Region " Fields "

        Private m_PSCNo As String
        Private m_GeneralNotes As String
        Private m_StartDate As Date
        Private m_EndDate As Date
        Private m_Closed As Boolean

#End Region

#Region " Properties "

        Public Property PSCNo() As String
            Get
                Return m_PSCNo
            End Get
            Set(ByVal Value As String)
                m_PSCNo = Value
            End Set
        End Property

        Public Property GeneralNotes() As String
            Get
                Return m_GeneralNotes
            End Get
            Set(ByVal Value As String)
                m_GeneralNotes = Value
            End Set
        End Property

        Public Property StartDate() As Date
            Get
                Return m_StartDate
            End Get
            Set(ByVal Value As Date)
                m_StartDate = Value
            End Set
        End Property

        Public Property EndDate() As Date
            Get
                Return m_EndDate
            End Get
            Set(ByVal Value As Date)
                m_EndDate = Value
            End Set
        End Property

        Public Property Closed() As Boolean
            Get
                Return m_Closed
            End Get
            Set(ByVal Value As Boolean)
                m_Closed = Value
            End Set
        End Property
#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPhysicalStockCount")

            With Parameters
                .Add(New ParameterSQL("PSCNo", Me.PSCNo))
                .Add(New ParameterSQL("GeneralNotes", Me.GeneralNotes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("StartDate", Me.StartDate))
                .Add(New ParameterSQL("EndDate", Me.EndDate))
                .Add(New ParameterSQL("Closed", Me.Closed))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePhysicalStockCount")

            With Parameters
                .Add(New ParameterSQL("PSCNo", Me.PSCNo))
                .Add(New ParameterSQL("GeneralNotes", Me.GeneralNotes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("StartDate", Me.StartDate))
                .Add(New ParameterSQL("EndDate", Me.EndDate))
                .Add(New ParameterSQL("Closed", Me.Closed))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("PhysicalStockCount")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PSCNo = '" + Me.PSCNo + "'"
            Dim errorPart As String = "PSC No: " + Me.PSCNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PhysicalStockCount"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PhysicalStockCount")

            Return Parameters

        End Function

        Public Function GetPhysicalStockCount(ByVal pSCNo As String, ByVal startDate As Date, ByVal endDate As Date) As DataSet
            If Not String.IsNullOrEmpty(pSCNo) Then

                With Parameters
                    .Add(New ParameterSQL("PSCNo", pSCNo))
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("PSCNo", Nothing))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            End If
            Return Me.Load("uspGetPhysicalStockCount", "PhysicalStockCount", Parameters)

        End Function


        Public Function GetPhysicalStockCount(ByVal pSCNo As String) As DataSet
            Return Me.GetPhysicalStockCount(pSCNo, Nothing, Nothing)
        End Function

        Public Function GetPeriodicPhysicalStockCount(ByVal startDate As Date, ByVal endDate As Date) As DataSet
            Return Me.GetPhysicalStockCount(String.Empty, startDate, endDate)
        End Function


        Public Function GetNextPSCID() As Integer

            With Parameters
                .Add(New ParameterSQL("PSCID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextPSCID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("PSCID")) Then
                    Return CInt(Me.ReadData("PSCID"))
                Else : Return 1
                End If

            End If

        End Function


        Public Function GetOpenPhysicalStockCount(endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetOpenPhysicalStockCount", "PhysicalStockCount", Parameters)

        End Function


        Public Function CloseExpiredPhysicalStockCount(endDate As Date) As ArrayList

            Me.SetCommand("uspCloseExpiredPhysicalStockCount")

            With Parameters
                .Add(New ParameterSQL("EndDate", endDate))
            End With



            Return Parameters

        End Function


#End Region

    End Class


    Public Class PhysicalStockCountDetails : Inherits DBConnect

#Region " Fields "

        Private m_PSCNo As String
        Private m_LocationID As String
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_SystemQuantity As Integer
        Private m_PhysicalCountQuantity As Integer
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property PSCNo() As String
            Get
                Return m_PSCNo
            End Get
            Set(ByVal Value As String)
                m_PSCNo = Value
            End Set
        End Property

        Public Property LocationID() As String
            Get
                Return m_LocationID
            End Get
            Set(ByVal Value As String)
                m_LocationID = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property SystemQuantity() As Integer
            Get
                Return m_SystemQuantity
            End Get
            Set(ByVal Value As Integer)
                m_SystemQuantity = Value
            End Set
        End Property

        Public Property PhysicalCountQuantity() As Integer
            Get
                Return m_PhysicalCountQuantity
            End Get
            Set(ByVal Value As Integer)
                m_PhysicalCountQuantity = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

       
#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPhysicalStockCountDetails")

            With Parameters
                .Add(New ParameterSQL("PSCNo", Me.PSCNo))
                .Add(New ParameterSQL("LocationID ", Me.LocationID))
                .Add(New ParameterSQL("ItemCategoryID ", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("SystemQuantity", Me.SystemQuantity))
                .Add(New ParameterSQL("PhysicalCountQuantity", Me.PhysicalCountQuantity))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePhysicalStockCountDetails")

            With Parameters
                .Add(New ParameterSQL("PSCNo", Me.PSCNo))
                .Add(New ParameterSQL("LocationID ", Me.LocationID))
                .Add(New ParameterSQL("ItemCategoryID ", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("SystemQuantity", Me.SystemQuantity))
                .Add(New ParameterSQL("PhysicalCountQuantity", Me.PhysicalCountQuantity))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("PhysicalStockCountDetails")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PSCNo = '" + Me.PSCNo + "' and LocationID  = '" + Me.LocationID + "' and ItemCategoryID  = '" + Me.ItemCategoryID + "' and ItemCode = '" + Me.ItemCode + "'"
            Dim errorPart As String = "PSC No: " + Me.PSCNo + " And Location ID : " + Me.LocationID + " And Item CategoryID : " + Me.ItemCategoryID + " And General Notes: " + Me.ItemCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PhysicalStockCountDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PhysicalStockCountDetails")

            Return Parameters

        End Function

        Public Function GetPhysicalStockCountDetails(ByVal pSCNo As String, ByVal locationID As String, ByVal itemCategoryID As String, ByVal itemCode As String) As DataSet

            If (Not String.IsNullOrEmpty(locationID) AndAlso Not String.IsNullOrEmpty(itemCategoryID) AndAlso Not String.IsNullOrEmpty(itemCode)) Then

                With Parameters
                    .Add(New ParameterSQL("PSCNo", pSCNo))
                    .Add(New ParameterSQL("LocationID ", locationID))
                    .Add(New ParameterSQL("ItemCategoryID ", itemCategoryID))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                End With

            Else

                With Parameters
                    .Add(New ParameterSQL("PSCNo", pSCNo))
                    .Add(New ParameterSQL("LocationID ", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID ", Nothing))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                End With
            End If
            Return Me.Load("uspGetPhysicalStockCountDetails", "PhysicalStockCountDetails", Parameters)

        End Function

        Public Function GetPhysicalStockCountDetails(ByVal pSCNo As String) As DataSet
            Return Me.GetPhysicalStockCountDetails(pSCNo, String.Empty, String.Empty, String.Empty)
        End Function



#End Region

    End Class

    Public Class BankingRegister : Inherits DBConnect

#Region " Fields "

        Private m_RegisterNo As String
        Private m_CollectionStartDate As Date
        Private m_CollectionEndDate As Date
        Private m_BankingDate As Date
        Private m_CollectionSourceTypeID As String
        Private m_BankNameID As String
        Private m_AccountName As String
        Private m_AccountNo As String
        Private m_AmountCollected As Decimal
        Private m_AmountBanked As Decimal
        Private m_AmountInWords As String
        Private m_CurrencyID As String
        Private m_ExchangeRate As Decimal
        Private m_BankedBy As String
        Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property RegisterNo() As String
            Get
                Return m_RegisterNo
            End Get
            Set(ByVal Value As String)
                m_RegisterNo = Value
            End Set
        End Property

        Public Property CollectionStartDate() As Date
            Get
                Return m_CollectionStartDate
            End Get
            Set(ByVal Value As Date)
                m_CollectionStartDate = Value
            End Set
        End Property

        Public Property CollectionEndDate() As Date
            Get
                Return m_CollectionEndDate
            End Get
            Set(ByVal Value As Date)
                m_CollectionEndDate = Value
            End Set
        End Property

        Public Property BankingDate() As Date
            Get
                Return m_BankingDate
            End Get
            Set(ByVal Value As Date)
                m_BankingDate = Value
            End Set
        End Property

        Public Property CollectionSourCeTypeID() As String
            Get
                Return m_CollectionSourceTypeID
            End Get
            Set(ByVal Value As String)
                m_CollectionSourceTypeID = Value
            End Set
        End Property
        Public Property BankNameID() As String
            Get
                Return m_BankNameID
            End Get
            Set(ByVal Value As String)
                m_BankNameID = Value
            End Set
        End Property

        Public Property AccountName() As String
            Get
                Return m_AccountName
            End Get
            Set(ByVal Value As String)
                m_AccountName = Value
            End Set
        End Property

        Public Property AccountNo() As String
            Get
                Return m_AccountNo
            End Get
            Set(ByVal Value As String)
                m_AccountNo = Value
            End Set
        End Property

        Public Property AmountCollected() As Decimal
            Get
                Return m_AmountCollected
            End Get
            Set(ByVal Value As Decimal)
                m_AmountCollected = Value
            End Set
        End Property

        Public Property AmountBanked() As Decimal
            Get
                Return m_AmountBanked
            End Get
            Set(ByVal Value As Decimal)
                m_AmountBanked = Value
            End Set
        End Property

        Public Property AmountInWords() As String
            Get
                Return m_AmountInWords
            End Get
            Set(ByVal Value As String)
                m_AmountInWords = Value
            End Set
        End Property

        Public Property CurrencyID() As String
            Get
                Return m_CurrencyID
            End Get
            Set(ByVal Value As String)
                m_CurrencyID = Value
            End Set
        End Property

        Public Property ExchangeRate() As Decimal
            Get
                Return m_ExchangeRate
            End Get
            Set(ByVal Value As Decimal)
                m_ExchangeRate = Value
            End Set
        End Property
        Public Property BankedBy() As String
            Get
                Return m_BankedBy
            End Get
            Set(ByVal Value As String)
                m_BankedBy = Value
            End Set
        End Property

        Public Property RecordDateTime() As Date
            Get
                Return m_RecordDateTime
            End Get
            Set(ByVal Value As Date)
                m_RecordDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertBankingRegister")

            With Parameters
                .Add(New ParameterSQL("RegisterNo", Me.RegisterNo))
                .Add(New ParameterSQL("CollectionStartDate", Me.CollectionStartDate))
                .Add(New ParameterSQL("CollectionEndDate", Me.CollectionEndDate))
                .Add(New ParameterSQL("BankingDate", Me.BankingDate))
                .Add(New ParameterSQL("CollectionSourceTypeID", Me.CollectionSourCeTypeID))
                .Add(New ParameterSQL("BankNameID", Me.BankNameID))
                .Add(New ParameterSQL("AccountName", Me.AccountName))
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("AmountCollected", Me.AmountCollected))
                .Add(New ParameterSQL("AmountBanked", Me.AmountBanked))
                .Add(New ParameterSQL("AmountInWords", Me.AmountInWords))
                .Add(New ParameterSQL("CurrencyID", Me.CurrencyID))
                .Add(New ParameterSQL("ExchangeRate", Me.ExchangeRate))
                .Add(New ParameterSQL("BankedBy", Me.BankedBy))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateBankingRegister")

            With Parameters
                .Add(New ParameterSQL("RegisterNo", Me.RegisterNo))
                .Add(New ParameterSQL("CollectionStartDate", Me.CollectionStartDate))
                .Add(New ParameterSQL("CollectionEndDate", Me.CollectionEndDate))
                .Add(New ParameterSQL("BankingDate", Me.BankingDate))
                .Add(New ParameterSQL("CollectionSourceTypeID", Me.CollectionSourCeTypeID))
                .Add(New ParameterSQL("BankNameID", Me.BankNameID))
                .Add(New ParameterSQL("AccountName", Me.AccountName))
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("AmountCollected", Me.AmountCollected))
                .Add(New ParameterSQL("AmountBanked", Me.AmountBanked))
                .Add(New ParameterSQL("AmountInWords", Me.AmountInWords))
                .Add(New ParameterSQL("ExchangeRate", Me.ExchangeRate))
                .Add(New ParameterSQL("CurrencyID", Me.CurrencyID))
                .Add(New ParameterSQL("BankedBy", Me.BankedBy))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            'For Audit Trail
            Me.SetLogObject("BankingRegister")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RegisterNo = '" + Me.RegisterNo + "'"
            Dim errorPart As String = "Register No: " + Me.RegisterNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "BankingRegister"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("BankingRegister")

            Return Parameters

        End Function

        Public Function GetBankingRegister(ByVal registerNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RegisterNo", registerNo))
            End With

            Return Me.Load("uspGetBankingRegister", "BankingRegister", Parameters)

        End Function



        Public Function GetPeriodicBankingRegister(ByVal bankNamesID As String, ByVal accountNo As String, ByVal loginID As String, startDate As Date, endDate As Date) As DataSet

            If String.IsNullOrEmpty(bankNamesID) AndAlso String.IsNullOrEmpty(accountNo) AndAlso String.IsNullOrEmpty(loginID) Then

                With Parameters
                    .Add(New ParameterSQL("BankNamesID", Nothing))
                    .Add(New ParameterSQL("AccountNo", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            ElseIf Not String.IsNullOrEmpty(bankNamesID) AndAlso String.IsNullOrEmpty(accountNo) AndAlso String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("BankNamesID", bankNamesID))
                    .Add(New ParameterSQL("AccountNo", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            ElseIf String.IsNullOrEmpty(bankNamesID) AndAlso Not String.IsNullOrEmpty(accountNo) AndAlso String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("BankNamesID", Nothing))
                    .Add(New ParameterSQL("AccountNo", accountNo))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            ElseIf String.IsNullOrEmpty(bankNamesID) AndAlso String.IsNullOrEmpty(accountNo) AndAlso Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("BankNamesID", Nothing))
                    .Add(New ParameterSQL("AccountNo", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            ElseIf Not String.IsNullOrEmpty(bankNamesID) AndAlso Not String.IsNullOrEmpty(accountNo) AndAlso String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("BankNamesID", bankNamesID))
                    .Add(New ParameterSQL("AccountNo", accountNo))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            ElseIf Not String.IsNullOrEmpty(bankNamesID) AndAlso String.IsNullOrEmpty(accountNo) AndAlso Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("BankNamesID", bankNamesID))
                    .Add(New ParameterSQL("AccountNo", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            ElseIf String.IsNullOrEmpty(bankNamesID) AndAlso Not String.IsNullOrEmpty(accountNo) AndAlso Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("BankNamesID", Nothing))
                    .Add(New ParameterSQL("AccountNo", accountNo))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("BankNamesID", bankNamesID))
                    .Add(New ParameterSQL("AccountNo", accountNo))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With

            End If

            Return Me.Load("uspGetPeriodicBankingRegister", "BankingRegister", Parameters)

        End Function


        Public Function GetNextRegisterID() As Integer

            With Parameters
                .Add(New ParameterSQL("RegisterID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextRegisterID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("RegisterID")) Then
                    Return CInt(Me.ReadData("RegisterID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function GetBankingLogins(ByVal startDate As Date, ByVal endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDate))
                .Add(New ParameterSQL("EndDateTime", endDate))
            End With

            Return Me.Load("uspGetBankingRegisterLogins", "BankingRegister", Parameters)

        End Function
#End Region

    End Class

    Public Class BankingRegisterDetails : Inherits DBConnect

#Region " Fields "

        Private m_RegisterNo As String
        Private m_CollectionModesID As String
        Private m_BankModesID As String
        Private m_Amount As Decimal
        Private m_DocumentNo As String
        Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property RegisterNo() As String
            Get
                Return m_RegisterNo
            End Get
            Set(ByVal Value As String)
                m_RegisterNo = Value
            End Set
        End Property

        Public Property CollectionModesID() As String
            Get
                Return m_CollectionModesID
            End Get
            Set(ByVal Value As String)
                m_CollectionModesID = Value
            End Set
        End Property

        Public Property BankModesID() As String
            Get
                Return m_BankModesID
            End Get
            Set(ByVal Value As String)
                m_BankModesID = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property

        Public Property DocumentNo() As String
            Get
                Return m_DocumentNo
            End Get
            Set(ByVal Value As String)
                m_DocumentNo = Value
            End Set
        End Property

        Public Property RecordDateTime() As Date
            Get
                Return m_RecordDateTime
            End Get
            Set(ByVal Value As Date)
                m_RecordDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertBankingRegisterDetails")

            With Parameters
                .Add(New ParameterSQL("RegisterNo", Me.RegisterNo))
                .Add(New ParameterSQL("CollectionModesID", Me.CollectionModesID))
                .Add(New ParameterSQL("BankModesID", Me.BankModesID))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateBankingRegisterDetails")

            With Parameters
                .Add(New ParameterSQL("RegisterNo", Me.RegisterNo))
                .Add(New ParameterSQL("CollectionModesID", Me.CollectionModesID))
                .Add(New ParameterSQL("BankModesID", Me.BankModesID))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            'For Audit Trail
            Me.SetLogObject("BankingRegisterDetails")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RegisterNo = '" + Me.RegisterNo + "' and CollectionModesID = '" + Me.CollectionModesID + "' and DocumentNo = '" + Me.DocumentNo + "'"
            Dim errorPart As String = "Register No: " + Me.RegisterNo + " And Collection Mode: " + Me.CollectionModesID + " And Document No: " + Me.DocumentNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "BankingRegisterDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("BankingRegisterDetails")

            Return Parameters

        End Function

        Public Function GetBankingRegisterDetails(ByVal registerNo As String, ByVal collectionModesID As String, ByVal documentNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RegisterNo", registerNo))
                .Add(New ParameterSQL("CollectionModesID", collectionModesID))
                .Add(New ParameterSQL("DocumentNo", documentNo))
            End With

            Return Me.Load("uspGetBankingRegisterDetails", "BankingRegisterDetails", Parameters)

        End Function

#End Region

    End Class

    Public Class BankPaymentDetails : Inherits DBConnect

#Region " Fields "

        Private m_ReceiptNo As String
        Private m_BankNamesID As String
        Private m_AccountNo As String
        Private m_DocumentNo As String
        Private m_PayModesID As String
        Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property ReceiptNo() As String
            Get
                Return m_ReceiptNo
            End Get
            Set(ByVal Value As String)
                m_ReceiptNo = Value
            End Set
        End Property

        Public Property BankNamesID() As String
            Get
                Return m_BankNamesID
            End Get
            Set(ByVal Value As String)
                m_BankNamesID = Value
            End Set
        End Property

        Public Property AccountNo() As String
            Get
                Return m_AccountNo
            End Get
            Set(ByVal Value As String)
                m_AccountNo = Value
            End Set
        End Property

        Public Property DocumentNo() As String
            Get
                Return m_DocumentNo
            End Get
            Set(ByVal Value As String)
                m_DocumentNo = Value
            End Set
        End Property

        Public Property PayModesID() As String
            Get
                Return m_PayModesID
            End Get
            Set(ByVal Value As String)
                m_PayModesID = Value
            End Set
        End Property

        Public Property RecordDateTime() As Date
            Get
                Return m_RecordDateTime
            End Get
            Set(ByVal Value As Date)
                m_RecordDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertBankPaymentDetails")

            With Parameters
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("BankNamesID", Me.BankNamesID))
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("PayModesID", Me.PayModesID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateBankPaymentDetails")

            With Parameters
                .Add(New ParameterSQL("ReceiptNo", Me.ReceiptNo))
                .Add(New ParameterSQL("BankNamesID", Me.BankNamesID))
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("PayModesID", Me.PayModesID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("BankPaymentDetails")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ReceiptNo = '" + Me.ReceiptNo + "'"
            Dim errorPart As String = "Receipt No: " + Me.ReceiptNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "BankPaymentDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("BankPaymentDetails")

            Return Parameters

        End Function

        Public Function GetBankPaymentDetails(ByVal receiptNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ReceiptNo", receiptNo))
            End With

            Return Me.Load("uspGetBankPaymentDetails", "BankPaymentDetails", Parameters)

        End Function

#End Region

    End Class

    Public Class AssetRegister : Inherits DBConnect

#Region " Fields "

        Private m_SerialNo As String
        Private m_ManufacturerID As String
        Private m_InstitutionalID As String
        Private m_Photo As Byte()
        Private m_AssetSourceID As String
        Private m_AssetCategoryID As String
        Private m_DeptID As String
        Private m_ItemDescription As String
        Private m_Brand As String
        Private m_Quantity As Integer
        Private m_Value As Integer
        Private m_DateOfPurchase As Date
        Private m_SupplierNo As String
        Private m_InvoiceNo As String
        Private m_InvoiceDate As Date
        Private m_DateOfDelivery As Date
        Private m_SalvageValue As Integer
        Private m_DepreciationRate As Integer
        Private m_UsefulLife As Integer
        Private m_DepreciationMethodID As String
        Private m_DepreciationStartDate As Date
        Private m_AssignedTo As String
        Private m_Location As String
        Private m_ServicingSchedule As Integer

#End Region

#Region " Properties "

        Public Property SerialNo() As String
            Get
                Return m_SerialNo
            End Get
            Set(ByVal Value As String)
                m_SerialNo = Value
            End Set
        End Property

        Public Property ManufacturerID() As String
            Get
                Return m_ManufacturerID
            End Get
            Set(ByVal Value As String)
                m_ManufacturerID = Value
            End Set
        End Property

        Public Property InstitutionalID() As String
            Get
                Return m_InstitutionalID
            End Get
            Set(ByVal Value As String)
                m_InstitutionalID = Value
            End Set
        End Property

        Public Property Photo() As Byte()
            Get
                Return m_Photo
            End Get
            Set(ByVal Value As Byte())
                m_Photo = Value
            End Set
        End Property

        Public Property AssetSourceID() As String
            Get
                Return m_AssetSourceID
            End Get
            Set(ByVal Value As String)
                m_AssetSourceID = Value
            End Set
        End Property

        Public Property AssetCategoryID() As String
            Get
                Return m_AssetCategoryID
            End Get
            Set(ByVal Value As String)
                m_AssetCategoryID = Value
            End Set
        End Property

        Public Property DeptID() As String
            Get
                Return m_DeptID
            End Get
            Set(ByVal Value As String)
                m_DeptID = Value
            End Set
        End Property

        Public Property ItemDescription() As String
            Get
                Return m_ItemDescription
            End Get
            Set(ByVal Value As String)
                m_ItemDescription = Value
            End Set
        End Property

        Public Property Brand() As String
            Get
                Return m_Brand
            End Get
            Set(ByVal Value As String)
                m_Brand = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(ByVal Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property Value() As Integer
            Get
                Return m_Value
            End Get
            Set(ByVal Value As Integer)
                m_Value = Value
            End Set
        End Property

        Public Property DateOfPurchase() As Date
            Get
                Return m_DateOfPurchase
            End Get
            Set(ByVal Value As Date)
                m_DateOfPurchase = Value
            End Set
        End Property

        Public Property SupplierNo() As String
            Get
                Return m_SupplierNo
            End Get
            Set(ByVal Value As String)
                m_SupplierNo = Value
            End Set
        End Property

        Public Property InvoiceNo() As String
            Get
                Return m_InvoiceNo
            End Get
            Set(ByVal Value As String)
                m_InvoiceNo = Value
            End Set
        End Property

        Public Property InvoiceDate() As Date
            Get
                Return m_InvoiceDate
            End Get
            Set(ByVal Value As Date)
                m_InvoiceDate = Value
            End Set
        End Property

        Public Property DateOfDelivery() As Date
            Get
                Return m_DateOfDelivery
            End Get
            Set(ByVal Value As Date)
                m_DateOfDelivery = Value
            End Set
        End Property

        Public Property SalvageValue() As Integer
            Get
                Return m_SalvageValue
            End Get
            Set(ByVal Value As Integer)
                m_SalvageValue = Value
            End Set
        End Property

        Public Property DepreciationRate() As Integer
            Get
                Return m_DepreciationRate
            End Get
            Set(ByVal Value As Integer)
                m_DepreciationRate = Value
            End Set
        End Property

        Public Property UsefulLife() As Integer
            Get
                Return m_UsefulLife
            End Get
            Set(ByVal Value As Integer)
                m_UsefulLife = Value
            End Set
        End Property

        Public Property DepreciationMethodID() As String
            Get
                Return m_DepreciationMethodID
            End Get
            Set(ByVal Value As String)
                m_DepreciationMethodID = Value
            End Set
        End Property

        Public Property DepreciationStartDate() As Date
            Get
                Return m_DepreciationStartDate
            End Get
            Set(ByVal Value As Date)
                m_DepreciationStartDate = Value
            End Set
        End Property

        Public Property AssignedTo() As String
            Get
                Return m_AssignedTo
            End Get
            Set(ByVal Value As String)
                m_AssignedTo = Value
            End Set
        End Property

        Public Property Location() As String
            Get
                Return m_Location
            End Get
            Set(ByVal Value As String)
                m_Location = Value
            End Set
        End Property

        Public Property ServicingSchedule() As Integer
            Get
                Return m_ServicingSchedule
            End Get
            Set(ByVal Value As Integer)
                m_ServicingSchedule = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertAssetRegister")

            With Parameters
                .Add(New ParameterSQL("SerialNo", Me.SerialNo))
                .Add(New ParameterSQL("ManufacturerID", Me.ManufacturerID))
                .Add(New ParameterSQL("InstitutionalID", Me.InstitutionalID))
                .Add(New ParameterSQL("Photo", Me.Photo))
                .Add(New ParameterSQL("AssetSourceID", Me.AssetSourceID))
                .Add(New ParameterSQL("AssetCategoryID", Me.AssetCategoryID))
                .Add(New ParameterSQL("DeptID", Me.DeptID))
                .Add(New ParameterSQL("ItemDescription", Me.ItemDescription))
                .Add(New ParameterSQL("Brand", Me.Brand))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Value", Me.Value))
                .Add(New ParameterSQL("DateOfPurchase", Me.DateOfPurchase))
                .Add(New ParameterSQL("SupplierNo", Me.SupplierNo))
                .Add(New ParameterSQL("InvoiceNo", Me.InvoiceNo))
                .Add(New ParameterSQL("InvoiceDate", Me.InvoiceDate))
                .Add(New ParameterSQL("DateOfDelivery", Me.DateOfDelivery))
                .Add(New ParameterSQL("SalvageValue", Me.SalvageValue))
                .Add(New ParameterSQL("DepreciationRate", Me.DepreciationRate))
                .Add(New ParameterSQL("UsefulLife", Me.UsefulLife))
                .Add(New ParameterSQL("DepreciationMethodID", Me.DepreciationMethodID))
                .Add(New ParameterSQL("DepreciationStartDate", Me.DepreciationStartDate))
                .Add(New ParameterSQL("AssignedTo", Me.AssignedTo))
                .Add(New ParameterSQL("Location", Me.Location))
                .Add(New ParameterSQL("ServicingSchedule", Me.ServicingSchedule))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateAssetRegister")

            With Parameters
                .Add(New ParameterSQL("SerialNo", Me.SerialNo))
                .Add(New ParameterSQL("ManufacturerID", Me.ManufacturerID))
                .Add(New ParameterSQL("InstitutionalID", Me.InstitutionalID))
                .Add(New ParameterSQL("Photo", Me.Photo))
                .Add(New ParameterSQL("AssetSourceID", Me.AssetSourceID))
                .Add(New ParameterSQL("AssetCategoryID", Me.AssetCategoryID))
                .Add(New ParameterSQL("DeptID", Me.DeptID))
                .Add(New ParameterSQL("ItemDescription", Me.ItemDescription))
                .Add(New ParameterSQL("Brand", Me.Brand))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Value", Me.Value))
                .Add(New ParameterSQL("DateOfPurchase", Me.DateOfPurchase))
                .Add(New ParameterSQL("SupplierNo", Me.SupplierNo))
                .Add(New ParameterSQL("InvoiceNo", Me.InvoiceNo))
                .Add(New ParameterSQL("InvoiceDate", Me.InvoiceDate))
                .Add(New ParameterSQL("DateOfDelivery", Me.DateOfDelivery))
                .Add(New ParameterSQL("SalvageValue", Me.SalvageValue))
                .Add(New ParameterSQL("DepreciationRate", Me.DepreciationRate))
                .Add(New ParameterSQL("UsefulLife", Me.UsefulLife))
                .Add(New ParameterSQL("DepreciationMethodID", Me.DepreciationMethodID))
                .Add(New ParameterSQL("DepreciationStartDate", Me.DepreciationStartDate))
                .Add(New ParameterSQL("AssignedTo", Me.AssignedTo))
                .Add(New ParameterSQL("Location", Me.Location))
                .Add(New ParameterSQL("ServicingSchedule", Me.ServicingSchedule))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("AssetRegister")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "SerialNo = '" + Me.SerialNo + "'"
            Dim errorPart As String = "SerialNo: " + Me.SerialNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "AssetRegister"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("AssetRegister")

            Return Parameters

        End Function

        Public Function GetAssetRegister(ByVal serialNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("SerialNo", serialNo))
            End With

            Return Me.Load("uspGetAssetRegister", "AssetRegister", Parameters)

        End Function

#End Region

    End Class

    Public Class AssetMaintainanceLog : Inherits DBConnect

#Region " Fields "

        Private m_SerialNo As String
        Private m_ActionTaken As String
        Private m_MaintainanceDate As Date
        Private m_MaintainedBy As String
        Private m_MaintainaceCost As Decimal
        Private m_NextDue As Date

#End Region

#Region " Properties "

        Public Property SerialNo() As String
            Get
                Return m_SerialNo
            End Get
            Set(ByVal Value As String)
                m_SerialNo = Value
            End Set
        End Property

        Public Property ActionTaken() As String
            Get
                Return m_ActionTaken
            End Get
            Set(ByVal Value As String)
                m_ActionTaken = Value
            End Set
        End Property

        Public Property MaintainanceDate() As Date
            Get
                Return m_MaintainanceDate
            End Get
            Set(ByVal Value As Date)
                m_MaintainanceDate = Value
            End Set
        End Property

        Public Property MaintainedBy() As String
            Get
                Return m_MaintainedBy
            End Get
            Set(ByVal Value As String)
                m_MaintainedBy = Value
            End Set
        End Property

        Public Property MaintainaceCost() As Decimal
            Get
                Return m_MaintainaceCost
            End Get
            Set(ByVal Value As Decimal)
                m_MaintainaceCost = Value
            End Set
        End Property

        Public Property NextDue() As Date
            Get
                Return m_NextDue
            End Get
            Set(ByVal Value As Date)
                m_NextDue = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertAssetMaintainanceLog")

            With Parameters
                .Add(New ParameterSQL("SerialNo", Me.SerialNo))
                .Add(New ParameterSQL("ActionTaken", Me.ActionTaken))
                .Add(New ParameterSQL("MaintainanceDate", Me.MaintainanceDate))
                .Add(New ParameterSQL("MaintainedBy", Me.MaintainedBy))
                .Add(New ParameterSQL("MaintainaceCost", Me.MaintainaceCost))
                .Add(New ParameterSQL("NextDue", Me.NextDue))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateAssetMaintainanceLog")

            With Parameters
                .Add(New ParameterSQL("SerialNo", Me.SerialNo))
                .Add(New ParameterSQL("ActionTaken", Me.ActionTaken))
                .Add(New ParameterSQL("MaintainanceDate", Me.MaintainanceDate))
                .Add(New ParameterSQL("MaintainedBy", Me.MaintainedBy))
                .Add(New ParameterSQL("MaintainaceCost", Me.MaintainaceCost))
                .Add(New ParameterSQL("NextDue", Me.NextDue))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("AssetMaintainanceLog")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "SerialNo = '" + Me.SerialNo + "' and MaintainanceDate = '" + Me.MaintainanceDate.ToString() + "'"
            Dim errorPart As String = "SerialNo: " + Me.SerialNo + " and MaintainanceDate: " + Me.MaintainanceDate.ToString()

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "AssetMaintainanceLog"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("AssetMaintainanceLog")

            Return Parameters

        End Function

        Public Function GetAssetMaintainanceLog(ByVal serialNo As String, ByVal maintainanceDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("SerialNo", serialNo))
                .Add(New ParameterSQL("MaintainanceDate", maintainanceDate))
            End With

            Return Me.Load("uspGetAssetMaintainanceLog", "AssetMaintainanceLog", Parameters)

        End Function

#End Region

    End Class

    Public Class OtherItems : Inherits DBConnect

#Region " Fields "

        Private m_ItemCode As String
        Private m_ItemName As String
        Private m_ItemCategoryID As String
        Private m_UnitCost As Decimal
        Private m_Quantity As Integer
        Private m_Details As String
        Private m_LocationID As String
        Private m_Hidden As Boolean
        Private m_GroupsID As String
        Private m_UnitMeasureID As String
        Private m_VATPercentage As Decimal
#End Region

#Region " Properties "

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemName() As String
            Get
                Return m_ItemName
            End Get
            Set(ByVal Value As String)
                m_ItemName = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property UnitCost() As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(ByVal Value As Decimal)
                m_UnitCost = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(ByVal Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property Details() As String
            Get
                Return m_Details
            End Get
            Set(ByVal Value As String)
                m_Details = Value
            End Set
        End Property

        Public Property LocationID() As String
            Get
                Return m_LocationID
            End Get
            Set(ByVal Value As String)
                m_LocationID = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(ByVal Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

        Public Property GroupsID() As String
            Get
                Return m_GroupsID
            End Get
            Set(Value As String)
                m_GroupsID = Value
            End Set
        End Property

        Public Property UnitMeasureID() As String
            Get
                Return m_UnitMeasureID
            End Get
            Set(Value As String)
                m_UnitMeasureID = Value
            End Set
        End Property

        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property
#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertOtherItems")

            With Parameters
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemName", Me.ItemName))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Details", Me.Details))
                .Add(New ParameterSQL("LocationID", Me.LocationID))
                .Add(New ParameterSQL("GroupsID", Me.GroupsID))
                .Add(New ParameterSQL("UnitMeasureID", Me.UnitMeasureID))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateOtherItems")

            With Parameters
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemName", Me.ItemName))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Details", Me.Details))
                .Add(New ParameterSQL("LocationID", Me.LocationID))
                .Add(New ParameterSQL("GroupsID", Me.GroupsID))
                .Add(New ParameterSQL("UnitMeasureID", Me.UnitMeasureID))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("OtherItems")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ItemCode = '" + Me.ItemCode + "'"
            Dim errorPart As String = "ItemCode: " + Me.ItemCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "OtherItems"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("OtherItems")

            Return Parameters

        End Function

        Public Function GetOtherItems(ByVal itemCode As String) As DataSet

            If (itemCode = "" OrElse itemCode = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("ItemCode", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ItemCode", itemCode))
                End With
            End If

            Return Me.Load("uspGetOtherItems", "OtherItems", Parameters)

        End Function

        Public Function GetOtherItems() As DataSet
            Return Me.GetOtherItems(String.Empty)
        End Function

        Public Function GetNextItemID() As Integer

            With Parameters
                .Add(New ParameterSQL("ItemID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextItemID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("ItemID")) Then
                    Return CInt(Me.ReadData("ItemID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function



#End Region

    End Class

    Public Class Expenditure : Inherits DBConnect

#Region " Fields "

        Private m_ExpenditureNo As String
        Private m_SpentDate As Date
        Private m_ExpenditureCategoryID As String
        Private m_ExpenditureSourceTypeID As String
        Private m_BankID As String
        Private m_AccountNo As String
        Private m_ExchangeRate As Decimal
        Private m_GivenTo As String
        Private m_Amount As Decimal
        Private m_DocumentNo As String
        Private m_Details As String
        Private m_BranchID As String

#End Region

#Region " Properties "

        Public Property ExpenditureNo() As String
            Get
                Return m_ExpenditureNo
            End Get
            Set(value As String)
                m_ExpenditureNo = value
            End Set
        End Property

        Public Property SpentDate() As Date
            Get
                Return m_SpentDate
            End Get
            Set(Value As Date)
                m_SpentDate = Value
            End Set
        End Property

        Public Property ExpenditureCategoryID() As String
            Get
                Return m_ExpenditureCategoryID
            End Get
            Set(Value As String)
                m_ExpenditureCategoryID = Value
            End Set
        End Property


        Public Property ExpenditureSourceTypeID() As String
            Get
                Return m_ExpenditureSourceTypeID
            End Get
            Set(Value As String)
                m_ExpenditureSourceTypeID = Value
            End Set
        End Property

        Public Property AccountNo() As String
            Get
                Return m_AccountNo
            End Get
            Set(Value As String)
                m_AccountNo = Value
            End Set
        End Property

        Public Property ExchangeRate() As Decimal
            Get
                Return m_ExchangeRate
            End Get
            Set(Value As Decimal)
                m_ExchangeRate = Value
            End Set
        End Property

        Public Property GivenTo() As String
            Get
                Return m_GivenTo
            End Get
            Set(Value As String)
                m_GivenTo = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(Value As Decimal)
                m_Amount = Value
            End Set
        End Property

        Public Property DocumentNo() As String
            Get
                Return m_DocumentNo
            End Get
            Set(Value As String)
                m_DocumentNo = Value
            End Set
        End Property

        Public Property Details() As String
            Get
                Return m_Details
            End Get
            Set(Value As String)
                m_Details = Value
            End Set
        End Property

        Public Property BranchID() As String
            Get
                Return m_BranchID
            End Get
            Set(Value As String)
                m_BranchID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertExpenditure")

            With Parameters
                .Add(New ParameterSQL("ExpenditureNo", Me.ExpenditureNo))
                .Add(New ParameterSQL("SpentDate", Me.SpentDate))
                .Add(New ParameterSQL("ExpenditureCategoryID", Me.ExpenditureCategoryID))
                .Add(New ParameterSQL("ExpenditureSourceTypeID", Me.ExpenditureSourceTypeID))
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("ExchangeRate", Me.ExchangeRate))
                .Add(New ParameterSQL("GivenTo", Me.GivenTo))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("Details", Me.Details))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("BranchID", Me.BranchID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Private Function GetExpenditure(expenditureNo As String, startDateTime As Nullable(Of Date),
                          endDateTime As Nullable(Of Date), loginID As String, branchID As String) As DataSet

            If (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso (String.IsNullOrEmpty(branchID)) AndAlso (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("ExpenditureNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso (String.IsNullOrEmpty(branchID)) AndAlso Not (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("ExpenditureNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(branchID)) AndAlso Not (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("ExpenditureNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(branchID)) AndAlso (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("ExpenditureNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("ExpenditureNo", expenditureNo))
                    .Add(New ParameterSQL("StartDateTime", Nothing))
                    .Add(New ParameterSQL("EndDateTime", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With
            End If

            Return Me.Load("uspGetExpenditure", "Expenditure", Parameters)

        End Function

        ''' <summary>
        ''' Gets expenditure for specified expenditure no
        ''' </summary>
        ''' <param name="expenditureNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetExpenditure(expenditureNo As String) As DataSet
            Return GetExpenditure(expenditureNo, Nothing, Nothing, String.Empty, Nothing)
        End Function

        ' ''' <summary>
        ' ''' Gets Expenditure for record DateTime between start DateTime and end DateTime
        ' ''' </summary>
        ' ''' <param name="startDateTime"></param>
        ' ''' <param name="endDateTime"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        'Public Function GetExpenditure(startDateTime As Date, endDateTime As Date) As DataSet
        '    Return GetExpenditure(String.Empty, startDateTime, endDateTime, String.Empty, Nothing)
        'End Function

        ' ''' <summary>
        ' ''' Gets Expenditure for record DateTime between start DateTime and end DateTime for aspecific login id
        ' ''' </summary>
        ' ''' <param name="startDateTime"></param>
        ' ''' <param name="endDateTime"></param>
        ' ''' <param name="loginID"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        'Public Function GetExpenditure(startDateTime As Date, endDateTime As Date, loginID As String) As DataSet
        '    Return GetExpenditure(String.Empty, startDateTime, endDateTime, loginID, Nothing)
        'End Function

        Public Function GetExpenditure(startDateTime As Date, endDateTime As Date, loginID As String, branchID As String) As DataSet
            Return GetExpenditure(String.Empty, startDateTime, endDateTime, loginID, branchID)
        End Function


        Public Function GetSummarizedPeriodicExpenditure(startDateTime As Date,
                          endDateTime As Date, loginID As String, branchID As String) As DataSet

            If (String.IsNullOrEmpty(branchID)) AndAlso (String.IsNullOrEmpty(loginID)) Then
                With Parameters

                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            ElseIf (String.IsNullOrEmpty(branchID)) AndAlso Not (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With


            ElseIf Not (String.IsNullOrEmpty(branchID)) AndAlso (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With


            ElseIf Not (String.IsNullOrEmpty(branchID)) AndAlso Not (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            End If

            Return Me.Load("uspGetSummarizedPeriodicExpenditure", "Expenditure", Parameters)

        End Function

        Public Function GetNextExpenditureID() As Integer

            With Parameters
                .Add(New ParameterSQL("ExpenditureID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextExpenditureID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("ExpenditureID")) Then
                    Return CInt(Me.ReadData("ExpenditureID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function GetTimelySMSExpenditure(startDateTime As Date, endDateTime As Date) As DataSet


            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))
            End With


            Return Me.Load("uspGetTimelyExpenditure", "Expenditure", Parameters)

        End Function

#End Region

    End Class

    Public Class BulkMessaging : Inherits DBConnect

#Region " Fields "

        Private m_MessageNo As String
        Private m_Phone As String
        Private m_Message As String
        Private m_SentID As String
        Private m_flagID As String
        Private m_SendDateTime As Date
        Private m_TextLifeSpan As Integer

#End Region

#Region " Properties "

        Public Property MessageNo() As String
            Get
                Return m_MessageNo
            End Get
            Set(ByVal Value As String)
                m_MessageNo = Value
            End Set
        End Property

        Public Property Phone() As String
            Get
                Return m_Phone
            End Get
            Set(ByVal Value As String)
                m_Phone = Value
            End Set
        End Property

        Public Property Message() As String
            Get
                Return m_Message
            End Get
            Set(ByVal Value As String)
                m_Message = Value
            End Set
        End Property

        Public Property SentID() As String
            Get
                Return m_SentID
            End Get
            Set(ByVal Value As String)
                m_SentID = Value
            End Set
        End Property

        Public Property flagID() As String
            Get
                Return m_flagID
            End Get
            Set(ByVal Value As String)
                m_flagID = Value
            End Set
        End Property

        Public Property SendDateTime() As Date
            Get
                Return m_SendDateTime
            End Get
            Set(ByVal Value As Date)
                m_SendDateTime = Value
            End Set
        End Property

        Public Property TextLifeSpan() As Integer
            Get
                Return m_TextLifeSpan
            End Get
            Set(ByVal Value As Integer)
                m_TextLifeSpan = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertBulkMessaging")

            With Parameters
                .Add(New ParameterSQL("MessageNo", Me.MessageNo))
                .Add(New ParameterSQL("Phone", Me.Phone))
                .Add(New ParameterSQL("Message", Me.Message))
                .Add(New ParameterSQL("SentID", Me.SentID))
                .Add(New ParameterSQL("flagID", Me.flagID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("SendDateTime", Me.SendDateTime))
                .Add(New ParameterSQL("TextLifeSpan", Me.TextLifeSpan))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateBulkMessaging")

            With Parameters
                .Add(New ParameterSQL("MessageNo", Me.MessageNo))
                .Add(New ParameterSQL("Phone", Me.Phone))
                .Add(New ParameterSQL("Message", Me.Message))
                .Add(New ParameterSQL("SentID", Me.SentID))
                .Add(New ParameterSQL("flagID", Me.flagID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("SendDateTime", Me.SendDateTime))
                .Add(New ParameterSQL("TextLifeSpan", Me.TextLifeSpan))
            End With

            'For Audit Trail
            Me.SetLogObject("BulkMessaging")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "MessageNo = '" + Me.MessageNo + "'"
            Dim errorPart As String = "MessageNo: " + Me.MessageNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "BulkMessaging"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("BulkMessaging")

            Return Parameters

        End Function

        Public Function GetBulkMessaging(ByVal messageNo As String) As DataSet

            If (messageNo = "" OrElse messageNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("MessageNo", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("MessageNo", messageNo))
                End With
            End If

            Return Me.Load("uspGetBulkMessaging", "BulkMessaging", Parameters)

        End Function

        Public Function GetBulkMessaging() As DataSet
            Return GetBulkMessaging(String.Empty)
        End Function

        Public Function GetNextMessageID() As Integer

            With Parameters
                .Add(New ParameterSQL("MessageID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextMessageID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("MessageID")) Then
                    Return CInt(Me.ReadData("MessageID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

        Public Function GetUnSentMessages(ByVal sentID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("SentID", sentID))
            End With
            Return Me.Load("uspGetUnsentTextMessages", "BulkMessaging", Parameters)
        End Function


#End Region

    End Class

    Public Class DrugAdministration : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_TakenDateTime As Date
        Private m_ItemCode As String
        Private m_ItemCategory As String
        Private m_ItemName As String
        Private m_NurseNotes As String
        Private m_QuantityTaken As Integer
        Private m_StaffNo As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property TakenDateTime() As Date
            Get
                Return m_TakenDateTime
            End Get
            Set(ByVal Value As Date)
                m_TakenDateTime = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategory() As String
            Get
                Return m_ItemCategory
            End Get
            Set(ByVal Value As String)
                m_ItemCategory = Value
            End Set
        End Property

        Public Property ItemName() As String
            Get
                Return m_ItemName
            End Get
            Set(ByVal Value As String)
                m_ItemName = Value
            End Set
        End Property

        Public Property QuantityTaken() As Integer
            Get
                Return m_QuantityTaken
            End Get
            Set(ByVal Value As Integer)
                m_QuantityTaken = Value
            End Set
        End Property

        Public Property NurseNotes() As String
            Get
                Return m_NurseNotes
            End Get
            Set(ByVal Value As String)
                m_NurseNotes = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(ByVal Value As String)
                m_StaffNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertDrugAdministration")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("TakenDateTime", Me.TakenDateTime))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategory", Me.ItemCategory))
                .Add(New ParameterSQL("ItemName", Me.ItemName))
                .Add(New ParameterSQL("NurseNotes", Me.NurseNotes))
                .Add(New ParameterSQL("QuantityTaken", Me.QuantityTaken))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateDrugAdministration")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("TakenDateTime", Me.TakenDateTime))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategory", Me.ItemCategory))
                .Add(New ParameterSQL("ItemName", Me.ItemName))
                .Add(New ParameterSQL("NurseNotes", Me.NurseNotes))
                .Add(New ParameterSQL("QuantityTaken", Me.QuantityTaken))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
            End With

            'For Audit Trail
            Me.SetLogObject("DrugAdministration")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "VisitNo: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "DrugAdministration"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("DrugAdministration")

            Return Parameters

        End Function

        Public Function GetDrugAdministration(ByVal visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))

            End With

            Return Me.Load("uspGetDrugAdministration", "DrugAdministration", Parameters)

        End Function

        Public Function GetDrugAdministeredQuantity(visitNo As String, itemCode As String, itemCategory As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategory", itemCategory))
            End With

            Return Me.Load("uspGetSumDrugAdministered", "DrugAdministration", Parameters)

        End Function
#End Region

    End Class

    Public Class OtherIncome : Inherits DBConnect

#Region " Fields "

        Private m_IncomeNo As String
        Private m_IncomeDate As Date
        Private m_IncomeSourcesID As String
        Private m_PayModesID As String
        Private m_Amount As Decimal
        Private m_CurrenciesID As String
        Private m_AmountTendered As Decimal
        Private m_ExchangeRate As Decimal
        Private m_Change As Decimal
        Private m_DocumentNo As String
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property IncomeNo() As String
            Get
                Return m_IncomeNo
            End Get
            Set(Value As String)
                m_IncomeNo = Value
            End Set
        End Property

        Public Property IncomeDate() As Date
            Get
                Return m_IncomeDate
            End Get
            Set(Value As Date)
                m_IncomeDate = Value
            End Set
        End Property

        Public Property IncomeSourcesID() As String
            Get
                Return m_IncomeSourcesID
            End Get
            Set(Value As String)
                m_IncomeSourcesID = Value
            End Set
        End Property

        Public Property PayModesID() As String
            Get
                Return m_PayModesID
            End Get
            Set(Value As String)
                m_PayModesID = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(Value As Decimal)
                m_Amount = Value
            End Set
        End Property

        Public Property CurrenciesID() As String
            Get
                Return m_CurrenciesID
            End Get
            Set(Value As String)
                m_CurrenciesID = Value
            End Set
        End Property

        Public Property AmountTendered() As Decimal
            Get
                Return m_AmountTendered
            End Get
            Set(Value As Decimal)
                m_AmountTendered = Value
            End Set
        End Property

        Public Property ExchangeRate() As Decimal
            Get
                Return m_ExchangeRate
            End Get
            Set(Value As Decimal)
                m_ExchangeRate = Value
            End Set
        End Property

        Public Property Change() As Decimal
            Get
                Return m_Change
            End Get
            Set(Value As Decimal)
                m_Change = Value
            End Set
        End Property

        Public Property DocumentNo() As String
            Get
                Return m_DocumentNo
            End Get
            Set(Value As String)
                m_DocumentNo = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertOtherIncome")

            With Parameters
                .Add(New ParameterSQL("IncomeNo", Me.IncomeNo))
                .Add(New ParameterSQL("IncomeDate", Me.IncomeDate))
                .Add(New ParameterSQL("IncomeSourcesID", Me.IncomeSourcesID))
                .Add(New ParameterSQL("PayModesID", Me.PayModesID))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("CurrenciesID", Me.CurrenciesID))
                .Add(New ParameterSQL("AmountTendered", Me.AmountTendered))
                .Add(New ParameterSQL("ExchangeRate", Me.ExchangeRate))
                .Add(New ParameterSQL("Change", Me.Change))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Private Function GetOtherIncome(incomeNo As String, startDateTime As Nullable(Of Date),
                                 endDateTime As Nullable(Of Date), loginID As String, branchID As String) As DataSet

            If (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(branchID) AndAlso String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("IncomeNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso String.IsNullOrEmpty(branchID) AndAlso Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("IncomeNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(branchID)) AndAlso Not (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("IncomeNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", loginID))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            ElseIf (startDateTime IsNot Nothing) AndAlso (endDateTime IsNot Nothing) AndAlso Not (String.IsNullOrEmpty(branchID)) AndAlso (String.IsNullOrEmpty(loginID)) Then
                With Parameters
                    .Add(New ParameterSQL("IncomeNo", Nothing))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", branchID))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("IncomeNo", incomeNo))
                    .Add(New ParameterSQL("StartDateTime", Nothing))
                    .Add(New ParameterSQL("EndDateTime", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                    .Add(New ParameterSQL("BranchID", Nothing))
                End With
            End If

            Return Me.Load("uspGetOtherIncome", "OtherIncome", Parameters)

        End Function

        ''' <summary>
        ''' Gets OtherIncome for specified income no
        ''' </summary>
        ''' <param name="incomeNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetOtherIncome(incomeNo As String) As DataSet
            Return GetOtherIncome(incomeNo, Nothing, Nothing, String.Empty, Nothing)
        End Function

        ' ''' <summary>
        ' ''' Gets OtherIncome for record DateTime between start DateTime and end DateTime
        ' ''' </summary>
        ' ''' <param name="startDateTime"></param>
        ' ''' <param name="endDateTime"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        'Public Function GetOtherIncome(startDateTime As Date, endDateTime As Date) As DataSet
        '    Return GetOtherIncome(String.Empty, startDateTime, endDateTime, String.Empty, Nothing)
        'End Function

        ' ''' <summary>
        ' ''' Gets OtherIncome for record DateTime between start DateTime and end DateTime for aspecific login id
        ' ''' </summary>
        ' ''' <param name="startDateTime"></param>
        ' ''' <param name="endDateTime"></param>
        ' ''' <param name="loginID"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        'Public Function GetOtherIncome(startDateTime As Date, endDateTime As Date, loginID As String) As DataSet
        '    Return GetOtherIncome(String.Empty, startDateTime, endDateTime, loginID, Nothing)
        'End Function

        Public Function GetOtherIncome(startDateTime As Date, endDateTime As Date, loginID As String, branchID As String) As DataSet
            Return GetOtherIncome(String.Empty, startDateTime, endDateTime, loginID, branchID)
        End Function
        Public Function GetNextIncomeID() As Integer

            With Parameters
                .Add(New ParameterSQL("IncomeID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextIncomeID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("IncomeID")) Then
                    Return CInt(Me.ReadData("IncomeID"))
                Else : Return 1
                End If

            End If

        End Function



        Public Function GetTimelySMSOtherIncomes(startDateTime As Date, endDateTime As Date) As DataSet


            With Parameters
                .Add(New ParameterSQL("StartDateTime", startDateTime))
                .Add(New ParameterSQL("EndDateTime", endDateTime))
            End With


            Return Me.Load("uspGetTimelyOtherIncomeSMS", "OtherIncome", Parameters)

        End Function



        Public Function GetPeriodicPayModesOtherIncomeSummary(startDateTime As Date, endDateTime As Date, payModesID As String, loginID As String, VisitsBranch As String) As DataSet

            '-----------------------All null---------------------------------------
            If String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With




                '------------------------only PayModeID Not null---------------------------------------
            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With


                '------------------------only LoginID Not null---------------------------------------
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With


                '------------------------only VisitsBranch Not null---------------------------------------
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With



                '----------------------------- Not PayModesID And LoginID----------------------------------------

            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------only PayModesID And BranchID Not null---------------------------------------	
            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------only Login ID And Branch ID Not null---------------------------------------	
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With


            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
            End If
            Return Me.Load("uspGetPeriodicOtherIncomeSummaries", "OtherIncome", Parameters)
        End Function


        Public Function GetPeriodicPayModeOtherIncome(startDateTime As Date, endDateTime As Date, payModesID As String, loginID As String, VisitsBranch As String) As DataSet

            '-----------------------All null---------------------------------------
            If String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With




                '------------------------only PayModeID Not null---------------------------------------
            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With


                '------------------------only LoginID Not null---------------------------------------
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With


                '------------------------only VisitsBranch Not null---------------------------------------
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With



                '----------------------------- Not PayModesID And LoginID----------------------------------------

            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With

                '------------------------only PayModesID And BranchID Not null---------------------------------------	
            ElseIf Not String.IsNullOrEmpty(payModesID) AndAlso String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", Nothing))

                End With

                '------------------------only Login ID And Branch ID Not null---------------------------------------	
            ElseIf String.IsNullOrEmpty(payModesID) AndAlso Not String.IsNullOrEmpty(loginID) AndAlso Not String.IsNullOrEmpty(VisitsBranch) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", Nothing))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With


            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("PayModesID", payModesID))
                    .Add(New ParameterSQL("VisitsBranch", VisitsBranch))
                    .Add(New ParameterSQL("LoginID", loginID))

                End With
            End If
            Return Me.Load("uspGetPeriodicPayModeOtherIncome", "OtherIncome", Parameters)
        End Function



#End Region

    End Class

    Public Class PrintDetails : Inherits DBConnect

#Region " Fields "

        Private m_PatientNo As String
        Private m_DocumentNo As String
        Private m_PrintDesc As String
        Private m_PrintCategoryID As String

#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(ByVal Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property DocumentNo() As String
            Get
                Return m_DocumentNo
            End Get
            Set(ByVal Value As String)
                m_DocumentNo = Value
            End Set
        End Property

        Public Property PrintDesc() As String
            Get
                Return m_PrintDesc
            End Get
            Set(ByVal Value As String)
                m_PrintDesc = Value
            End Set
        End Property

        Public Property PrintCategoryID() As String
            Get
                Return m_PrintCategoryID
            End Get
            Set(ByVal Value As String)
                m_PrintCategoryID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPrintDetails")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("PrintDesc", Me.PrintDesc))
                .Add(New ParameterSQL("PrintCategoryID", Me.PrintCategoryID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePrintDetails")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("PrintDesc", Me.PrintDesc))
                .Add(New ParameterSQL("PrintCategoryID", Me.PrintCategoryID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("PrintDetails")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PatientNo = '" + Me.PatientNo + "'"
            Dim errorPart As String = "PatientNo: " + Me.PatientNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PrintDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PrintDetails")

            Return Parameters

        End Function

        Public Function GetPrintDetails(ByVal patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetPrintDetails", "PrintDetails", Parameters)

        End Function

#End Region



    End Class

#End Region

#Region " Setup "

    Public Class Staff : Inherits Person

#Region " Fields "

        Private m_StaffNo As String
        Private m_StaffTitleID As String
        Private m_DoctorSpecialtyID As String
        Private m_Hidden As Boolean
        Private m_CreatorLoginID As String
        Private m_RecordDateTime As Date
#End Region

#Region " Properties "

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property CreatorLoginID() As String
            Get
                Return m_CreatorLoginID
            End Get
            Set(value As String)
                m_CreatorLoginID = value
            End Set
        End Property


        Public Property StaffTitleID() As String
            Get
                Return m_StaffTitleID
            End Get
            Set(value As String)
                m_StaffTitleID = value
            End Set
        End Property

        Public Property DoctorSpecialtyID() As String
            Get
                Return m_DoctorSpecialtyID
            End Get
            Set(value As String)
                m_DoctorSpecialtyID = value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

        Public Property RecordDateTime() As Date
            Get
                Return m_RecordDateTime
            End Get
            Set(ByVal Value As Date)
                m_RecordDateTime = Value
            End Set
        End Property
#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyBase.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertStaff")

            With Parameters
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("FirstName", Me.FirstName))
                .Add(New ParameterSQL("LastName", Me.LastName))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("StaffTitleID", Me.StaffTitleID))
                .Add(New ParameterSQL("Speciality", Me.Speciality))
                .Add(New ParameterSQL("Qualifications", Me.Qualifications))
                .Add(New ParameterSQL("Email", Me.Email))
                .Add(New ParameterSQL("JoinDate", Me.JoinDate))
                .Add(New ParameterSQL("Phone", Me.Phone))
                .Add(New ParameterSQL("Location", Me.Location))
                .Add(New ParameterSQL("Fingerprint", Me.Fingerprint))
                .Add(New ParameterSQL("DoctorSpecialtyID", Me.DoctorSpecialtyID))
                .Add(New ParameterSQL("Signature", Me.Signature))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("CreatorLoginID", Me.CreatorLoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateStaff")

            With Parameters
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("FirstName", Me.FirstName))
                .Add(New ParameterSQL("LastName", Me.LastName))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("StaffTitleID", Me.StaffTitleID))
                .Add(New ParameterSQL("Speciality", Me.Speciality))
                .Add(New ParameterSQL("Qualifications", Me.Qualifications))
                .Add(New ParameterSQL("Email", Me.Email))
                .Add(New ParameterSQL("JoinDate", Me.JoinDate))
                .Add(New ParameterSQL("Phone", Me.Phone))
                .Add(New ParameterSQL("Location", Me.Location))
                .Add(New ParameterSQL("Fingerprint", Me.Fingerprint))
                .Add(New ParameterSQL("DoctorSpecialtyID", Me.DoctorSpecialtyID))
                .Add(New ParameterSQL("Signature", Me.Signature))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("Hidden", Me.Hidden))

            End With

            'For Audit Trial
            Me.SetLogObject("Staff")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "StaffNo = '" + Me.StaffNo + "'"
            Dim errorPart As String = "Staff No: " + Me.StaffNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Staff"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trial
            Me.SetLogObject("Staff")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets staff for the supplied staff No of supplied staff tittle and doctor specialty
        ''' </summary>
        ''' <param name="staffNo"></param>
        ''' <param name="staffTitleID"></param>
        ''' <param name="doctorSpecialtyID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Private Function GetStaff(staffNo As String, staffTitleID As String, doctorSpecialtyID As String) As DataSet

            If (staffNo <> "" OrElse staffNo <> String.Empty) And
                (staffTitleID = "" OrElse staffTitleID = String.Empty) And
                (doctorSpecialtyID = "" OrElse doctorSpecialtyID = String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("StaffNo", staffNo))
                    .Add(New ParameterSQL("StaffTitleID", Nothing))
                    .Add(New ParameterSQL("DoctorSpecialtyID", Nothing))
                End With

            ElseIf (staffNo = "" OrElse staffNo = String.Empty) And
                    (staffTitleID <> "" OrElse staffTitleID <> String.Empty) And
                    (doctorSpecialtyID = "" OrElse doctorSpecialtyID = String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("StaffNo", Nothing))
                    .Add(New ParameterSQL("StaffTitleID", staffTitleID))
                    .Add(New ParameterSQL("DoctorSpecialtyID", Nothing))
                End With

            ElseIf (staffNo = "" OrElse staffNo = String.Empty) And
                    (staffTitleID <> "" OrElse staffTitleID <> String.Empty) And
                    (doctorSpecialtyID <> "" OrElse doctorSpecialtyID <> String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("StaffNo", Nothing))
                    .Add(New ParameterSQL("StaffTitleID", staffTitleID))
                    .Add(New ParameterSQL("DoctorSpecialtyID", doctorSpecialtyID))
                End With

            ElseIf (staffNo = "" OrElse staffNo = String.Empty) And
                    (staffTitleID = "" OrElse staffTitleID = String.Empty) And
                    (doctorSpecialtyID = "" OrElse doctorSpecialtyID = String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("StaffNo", Nothing))
                    .Add(New ParameterSQL("StaffTitleID", Nothing))
                    .Add(New ParameterSQL("DoctorSpecialtyID", Nothing))
                End With

            End If

            Return Me.Load("uspGetStaff", "Staff", Parameters)

        End Function

        ''' <summary>
        ''' Gets staff for the supplied staffno
        ''' </summary>
        ''' <param name="staffNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetStaff(staffNo As String) As DataSet
            Return GetStaff(staffNo, String.Empty, String.Empty)
        End Function

        ''' <summary>
        ''' Gets staff for the supplied staff title
        ''' </summary>
        ''' <param name="staffTitleID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetStaffByStaffTitle(staffTitleID As String) As DataSet
            Return GetStaff(String.Empty, staffTitleID, String.Empty)
        End Function

        ''' <summary>
        ''' Returns staff for aspecified staff title and doctor specialty
        ''' </summary>
        ''' <param name="staffTitleID"></param>
        ''' <param name="doctorSpecialtyID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetStaffByDoctorSpecialty(staffTitleID As String, doctorSpecialtyID As String) As DataSet
            Return GetStaff(String.Empty, staffTitleID, doctorSpecialtyID)
        End Function

        ''' <summary>
        ''' Gets staff for supplied Login ID
        ''' </summary>
        ''' <param name="loginID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetStaffByLoginID(loginID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("LoginID", loginID))
            End With

            Return Me.Load("uspGetStaffByLoginID", "Staff", Parameters)

        End Function

        ''' <summary>
        ''' Gets all staff
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetStaff() As DataSet
            Return GetStaff(String.Empty, String.Empty, String.Empty)
        End Function

        Public Function GetNextStaffID() As Integer

            With Parameters
                .Add(New ParameterSQL("StaffID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextStaffID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("StaffID")) Then
                    Return CInt(Me.ReadData("StaffID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

        Public Function GetCurrentStaffFullName() As String

            Try
                Dim oCurrentUser As New CurrentUser()
                Dim staffRow As DataRow = GetStaffByLoginID(oCurrentUser.LoginID).Tables("Staff").Rows(0)

                Return StringMayBeEnteredIn(staffRow, "StaffFullName")

            Catch ex As Exception
                Return String.Empty
            End Try

        End Function

        Public Function GetLoginName(loginID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("LoginID", loginID))
            End With

            Return Me.Load("uspGetStaffLoginDetails", "Logins", Parameters)

        End Function

        Public Function GetMessengerUsers() As DataSet

            Return Me.Load("uspGetMessengerUsers", "Logins")

        End Function

        Private Function GetLoggedInStaff(staffNo As String, staffTitleID As String, doctorSpecialtyID As String) As DataSet

            If Not String.IsNullOrEmpty(staffNo) AndAlso String.IsNullOrEmpty(staffTitleID) AndAlso
                                String.IsNullOrEmpty(doctorSpecialtyID) Then

                With Parameters
                    .Add(New ParameterSQL("StaffNo", staffNo))
                    .Add(New ParameterSQL("StaffTitleID", Nothing))
                    .Add(New ParameterSQL("DoctorSpecialtyID", Nothing))
                End With

            ElseIf String.IsNullOrEmpty(staffNo) AndAlso Not String.IsNullOrEmpty(staffTitleID) AndAlso
                                String.IsNullOrEmpty(doctorSpecialtyID) Then

                With Parameters
                    .Add(New ParameterSQL("StaffNo", Nothing))
                    .Add(New ParameterSQL("StaffTitleID", staffTitleID))
                    .Add(New ParameterSQL("DoctorSpecialtyID", Nothing))
                End With

            ElseIf String.IsNullOrEmpty(staffNo) AndAlso Not String.IsNullOrEmpty(staffTitleID) AndAlso
                                Not String.IsNullOrEmpty(doctorSpecialtyID) Then

                With Parameters
                    .Add(New ParameterSQL("StaffNo", Nothing))
                    .Add(New ParameterSQL("StaffTitleID", staffTitleID))
                    .Add(New ParameterSQL("DoctorSpecialtyID", doctorSpecialtyID))
                End With

            ElseIf String.IsNullOrEmpty(staffNo) AndAlso String.IsNullOrEmpty(staffTitleID) AndAlso
                                String.IsNullOrEmpty(doctorSpecialtyID) Then

                With Parameters
                    .Add(New ParameterSQL("StaffNo", Nothing))
                    .Add(New ParameterSQL("StaffTitleID", Nothing))
                    .Add(New ParameterSQL("DoctorSpecialtyID", Nothing))
                End With

            End If

            Return Me.Load("uspGetLoggedInStaff", "Staff", Parameters)

        End Function


        Public Function GetLoggedInStaffByDoctorSpecialty(staffTitleID As String, doctorSpecialtyID As String) As DataSet
            Return GetLoggedInStaff(String.Empty, staffTitleID, doctorSpecialtyID)
        End Function

        Public Function GetLoggedInStaffByStaffTitle(staffTitleID As String) As DataSet
            Return GetLoggedInStaff(String.Empty, staffTitleID, String.Empty)
        End Function

#End Region

    End Class

    Public Class BillCustomers : Inherits DBConnect

#Region " Fields "

        Private m_AccountNo As String
        Private m_BillCustomerName As String
        Private m_BillCustomerTypeID As String
        Private m_InsuranceNo As String
        Private m_ContactPerson As String
        Private m_Address As String
        Private m_Phone As String
        Private m_Fax As String
        Private m_Email As String
        Private m_Website As String
        Private m_LogoPhoto As Byte()
        Private m_MemberDeclaration As String
        Private m_DoctorDeclaration As String
        Private m_CoPayTypeID As String
        Private m_CoPayPercent As Single
        Private m_CoPayValue As Decimal
        Private m_CreditLimit As Decimal
        Private m_AllowOnlyListedMember As Boolean
        Private m_UseCustomFee As Boolean
        Private m_SmartCardApplicable As Boolean
        Private m_CaptureMemberCardNo As Boolean
        Private m_CaptureClaimReferenceNo As Boolean
        Private m_Hidden As Boolean
        Private m_AccountStatusID As String

#End Region

#Region " Properties "

        Public Property AccountNo() As String
            Get
                Return m_AccountNo
            End Get
            Set(Value As String)
                m_AccountNo = Value
            End Set
        End Property

        Public Property BillCustomerName() As String
            Get
                Return m_BillCustomerName
            End Get
            Set(Value As String)
                m_BillCustomerName = Value
            End Set
        End Property

        Public Property BillCustomerTypeID() As String
            Get
                Return m_BillCustomerTypeID
            End Get
            Set(Value As String)
                m_BillCustomerTypeID = Value
            End Set
        End Property

        Public Property InsuranceNo() As String
            Get
                Return m_InsuranceNo
            End Get
            Set(Value As String)
                m_InsuranceNo = Value
            End Set
        End Property

        Public Property ContactPerson() As String
            Get
                Return m_ContactPerson
            End Get
            Set(value As String)
                m_ContactPerson = value
            End Set
        End Property

        Public Property Address() As String
            Get
                Return m_Address
            End Get
            Set(Value As String)
                m_Address = Value
            End Set
        End Property

        Public Property Phone() As String
            Get
                Return m_Phone
            End Get
            Set(Value As String)
                m_Phone = Value
            End Set
        End Property

        Public Property Fax() As String
            Get
                Return m_Fax
            End Get
            Set(Value As String)
                m_Fax = Value
            End Set
        End Property

        Public Property Email() As String
            Get
                Return m_Email
            End Get
            Set(Value As String)
                m_Email = Value
            End Set
        End Property

        Public Property Website() As String
            Get
                Return m_Website
            End Get
            Set(Value As String)
                m_Website = Value
            End Set
        End Property

        Public Property LogoPhoto() As Byte()
            Get
                Return m_LogoPhoto
            End Get
            Set(Value As Byte())
                m_LogoPhoto = Value
            End Set
        End Property

        Public Property MemberDeclaration() As String
            Get
                Return m_MemberDeclaration
            End Get
            Set(Value As String)
                m_MemberDeclaration = Value
            End Set
        End Property

        Public Property DoctorDeclaration() As String
            Get
                Return m_DoctorDeclaration
            End Get
            Set(Value As String)
                m_DoctorDeclaration = Value
            End Set
        End Property

        Public Property CoPayTypeID() As String
            Get
                Return m_CoPayTypeID
            End Get
            Set(Value As String)
                m_CoPayTypeID = Value
            End Set
        End Property

        Public Property CoPayPercent() As Single
            Get
                Return m_CoPayPercent
            End Get
            Set(Value As Single)
                m_CoPayPercent = Value
            End Set
        End Property

        Public Property CoPayValue() As Decimal
            Get
                Return m_CoPayValue
            End Get
            Set(Value As Decimal)
                m_CoPayValue = Value
            End Set
        End Property

        Public Property CreditLimit() As Decimal
            Get
                Return m_CreditLimit
            End Get
            Set(Value As Decimal)
                m_CreditLimit = Value
            End Set
        End Property

        Public Property AllowOnlyListedMember() As Boolean
            Get
                Return m_AllowOnlyListedMember
            End Get
            Set(Value As Boolean)
                m_AllowOnlyListedMember = Value
            End Set
        End Property

        Public Property UseCustomFee() As Boolean
            Get
                Return m_UseCustomFee
            End Get
            Set(Value As Boolean)
                m_UseCustomFee = Value
            End Set
        End Property

        Public Property SmartCardApplicable() As Boolean
            Get
                Return m_SmartCardApplicable
            End Get
            Set(Value As Boolean)
                m_SmartCardApplicable = Value
            End Set
        End Property

        Public Property CaptureMemberCardNo() As Boolean
            Get
                Return m_CaptureMemberCardNo
            End Get
            Set(Value As Boolean)
                m_CaptureMemberCardNo = Value
            End Set
        End Property

        Public Property CaptureClaimReferenceNo() As Boolean
            Get
                Return m_CaptureClaimReferenceNo
            End Get
            Set(Value As Boolean)
                m_CaptureClaimReferenceNo = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

        Public Property AccountStatusID() As String
            Get
                Return m_AccountStatusID
            End Get
            Set(Value As String)
                m_AccountStatusID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertBillCustomers")

            With Parameters
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("BillCustomerName", Me.BillCustomerName))
                .Add(New ParameterSQL("BillCustomerTypeID", Me.BillCustomerTypeID))
                .Add(New ParameterSQL("InsuranceNo", Me.InsuranceNo))
                .Add(New ParameterSQL("ContactPerson", Me.ContactPerson))
                .Add(New ParameterSQL("Address", Me.Address))
                .Add(New ParameterSQL("Phone", Me.Phone))
                .Add(New ParameterSQL("Fax", Me.Fax))
                .Add(New ParameterSQL("Email", Me.Email))
                .Add(New ParameterSQL("Website", Me.Website))
                .Add(New ParameterSQL("LogoPhoto", Me.LogoPhoto))
                .Add(New ParameterSQL("MemberDeclaration", Me.MemberDeclaration))
                .Add(New ParameterSQL("DoctorDeclaration", Me.DoctorDeclaration))
                .Add(New ParameterSQL("CoPayTypeID", Me.CoPayTypeID))
                .Add(New ParameterSQL("CoPayPercent", Me.CoPayPercent))
                .Add(New ParameterSQL("CoPayValue", Me.CoPayValue))
                .Add(New ParameterSQL("CreditLimit", Me.CreditLimit))
                .Add(New ParameterSQL("AllowOnlyListedMember", Me.AllowOnlyListedMember))
                .Add(New ParameterSQL("UseCustomFee", Me.UseCustomFee))
                .Add(New ParameterSQL("SmartCardApplicable", Me.SmartCardApplicable))
                .Add(New ParameterSQL("CaptureMemberCardNo", Me.CaptureMemberCardNo))
                .Add(New ParameterSQL("CaptureClaimReferenceNo", Me.CaptureClaimReferenceNo))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("AccountStatusID", Me.AccountStatusID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateBillCustomers")

            With Parameters
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("BillCustomerName", Me.BillCustomerName))
                .Add(New ParameterSQL("BillCustomerTypeID", Me.BillCustomerTypeID))
                .Add(New ParameterSQL("InsuranceNo", Me.InsuranceNo))
                .Add(New ParameterSQL("ContactPerson", Me.ContactPerson))
                .Add(New ParameterSQL("Address", Me.Address))
                .Add(New ParameterSQL("Phone", Me.Phone))
                .Add(New ParameterSQL("Fax", Me.Fax))
                .Add(New ParameterSQL("Email", Me.Email))
                .Add(New ParameterSQL("Website", Me.Website))
                .Add(New ParameterSQL("LogoPhoto", Me.LogoPhoto))
                .Add(New ParameterSQL("MemberDeclaration", Me.MemberDeclaration))
                .Add(New ParameterSQL("DoctorDeclaration", Me.DoctorDeclaration))
                .Add(New ParameterSQL("CoPayTypeID", Me.CoPayTypeID))
                .Add(New ParameterSQL("CoPayPercent", Me.CoPayPercent))
                .Add(New ParameterSQL("CoPayValue", Me.CoPayValue))
                .Add(New ParameterSQL("CreditLimit", Me.CreditLimit))
                .Add(New ParameterSQL("AllowOnlyListedMember", Me.AllowOnlyListedMember))
                .Add(New ParameterSQL("UseCustomFee", Me.UseCustomFee))
                .Add(New ParameterSQL("SmartCardApplicable", Me.SmartCardApplicable))
                .Add(New ParameterSQL("CaptureMemberCardNo", Me.CaptureMemberCardNo))
                .Add(New ParameterSQL("CaptureClaimReferenceNo", Me.CaptureClaimReferenceNo))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("AccountStatusID", Me.AccountStatusID))
            End With

            'For Audit Trial
            Me.SetLogObject("BillCustomers")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Me.SetCommand("uspDeleteBillCustomers")

            With Parameters
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
            End With

            'For Audit Trial
            Me.SetLogObject("BillCustomers")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets a bill customer correponding to the supplied account number.
        ''' Cash Account will be excluded if exclude cash account is set to true
        ''' </summary>
        ''' <param name="accountNo"></param>
        ''' <param name="excludeCashAccount"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Private Function GetBillCustomers(accountNo As String, excludeCashAccount As Boolean) As DataSet

            If accountNo <> "" OrElse accountNo <> String.Empty Then
                With Parameters
                    .Add(New ParameterSQL("AccountNo", accountNo))
                    .Add(New ParameterSQL("ExcludeCashAccount", excludeCashAccount))
                End With

            ElseIf (accountNo = "" OrElse accountNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("AccountNo", Nothing))
                    .Add(New ParameterSQL("ExcludeCashAccount", excludeCashAccount))
                End With
            End If

            Return Me.Load("uspGetBillCustomers", "BillCustomers", Parameters)

        End Function

        ''' <summary>
        ''' Gets a bill customer correponding to the supplied account number.
        ''' </summary>
        ''' <param name="accountNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetBillCustomers(accountNo As String) As DataSet
            Return Me.GetBillCustomers(accountNo, False)
        End Function

        ''' <summary>
        ''' Gets all bill customers
        ''' Cash Account will be excluded if exclude cash account is set to true
        ''' </summary>
        ''' <param name="excludeCashAccount"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetBillCustomers(excludeCashAccount As Boolean) As DataSet
            Return Me.GetBillCustomers(String.Empty, excludeCashAccount)
        End Function

        ''' <summary>
        ''' Gets all bill customers
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetBillCustomers() As DataSet
            Return Me.GetBillCustomers(String.Empty, False)
        End Function

        ''' <summary>
        ''' Gets all the bill customers of bill customer type insurance or by insurance no
        ''' </summary>
        ''' <param name="billCustomerTypeID"></param>
        ''' <param name="insuranceNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Private Function GetBillCustomersInsurance(billCustomerTypeID As String, insuranceNo As String) As DataSet

            If Not String.IsNullOrEmpty(billCustomerTypeID) AndAlso String.IsNullOrEmpty(insuranceNo) Then
                With Parameters
                    .Add(New ParameterSQL("BillCustomerTypeID", billCustomerTypeID))
                    .Add(New ParameterSQL("InsuranceNo", Nothing))
                End With

            ElseIf String.IsNullOrEmpty(billCustomerTypeID) AndAlso Not String.IsNullOrEmpty(insuranceNo) Then
                With Parameters
                    .Add(New ParameterSQL("BillCustomerTypeID", Nothing))
                    .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("BillCustomerTypeID", Nothing))
                    .Add(New ParameterSQL("InsuranceNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetBillCustomersInsurance", "BillCustomers", Parameters)

        End Function

        ''' <summary>
        ''' Gets all the bill customers of bill customer type insurance
        ''' </summary>
        ''' <param name="billCustomerTypeID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetBillCustomersInsurance(billCustomerTypeID As String) As DataSet
            Return GetBillCustomersInsurance(billCustomerTypeID, String.Empty)
        End Function

        ''' <summary>
        ''' Gets all the bill customers for supplied insurance no
        ''' </summary>
        ''' <param name="insuranceNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetBillCustomersByInsuranceNo(insuranceNo As String) As DataSet
            Return GetBillCustomersInsurance(String.Empty, insuranceNo)
        End Function

        Public Function GetNextAccountID() As Integer

            With Parameters
                .Add(New ParameterSQL("AccountID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextAccountID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("AccountID")) Then
                    Return CInt(Me.ReadData("AccountID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

#End Region

    End Class

    Public Class AssociatedBillCustomers : Inherits DBConnect

#Region " Fields "

        Private m_AccountNo As String
        Private m_AssociatedBillNo As String

#End Region

#Region " Properties "

        Public Property AccountNo() As String
            Get
                Return m_AccountNo
            End Get
            Set(Value As String)
                m_AccountNo = Value
            End Set
        End Property

        Public Property AssociatedBillNo() As String
            Get
                Return m_AssociatedBillNo
            End Get
            Set(Value As String)
                m_AssociatedBillNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditAssociatedBillCustomers")

            With Parameters
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("AssociatedBillNo", Me.AssociatedBillNo))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "AccountNo = '" + Me.AccountNo + "' and AssociatedBillNo = '" + Me.AssociatedBillNo + "'"
            Dim errorPart As String = "Account No: " + Me.AccountNo + " and Associated Bill No: " + Me.AssociatedBillNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "AssociatedBillCustomers"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("AssociatedBillCustomers")

            Return Parameters

        End Function

        Public Function GetAssociatedBillCustomers(accountNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AccountNo", accountNo))
            End With

            Return Me.Load("uspGetAssociatedBillCustomers", "AssociatedBillCustomers", Parameters)

        End Function

#End Region

    End Class

    Public Class BillCustomFee : Inherits DBConnect

#Region " Fields "

        Private m_AccountNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_CustomFee As Decimal
        Private m_CurrenciesID As String

#End Region

#Region " Properties "

        Public Property AccountNo() As String
            Get
                Return m_AccountNo
            End Get
            Set(Value As String)
                m_AccountNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property CustomFee() As Decimal
            Get
                Return m_CustomFee
            End Get
            Set(Value As Decimal)
                m_CustomFee = Value
            End Set
        End Property

        Public Property CurrenciesID() As String
            Get
                Return m_CurrenciesID
            End Get
            Set(Value As String)
                m_CurrenciesID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditBillCustomFee")

            With Parameters
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("CustomFee", Me.CustomFee))
                .Add(New ParameterSQL("CurrenciesID", Me.CurrenciesID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "AccountNo = '" + Me.AccountNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Account No: " + Me.AccountNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "BillCustomFee"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("BillCustomFee")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets Bill custom fee corresponding to supplied item code, item category and account no
        ''' </summary>
        ''' <param name="itemCode"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="accountNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetBillCustomFee(itemCode As String, itemCategoryID As String, accountNo As String) As DataSet

            If (accountNo <> "" OrElse accountNo <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("AccountNo", accountNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("AccountNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetBillCustomFee", "BillCustomFee", Parameters)

        End Function

        ''' <summary>
        ''' Gets Bill custom fee corresponding to supplied item code and item category
        ''' </summary>
        ''' <param name="itemCode"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetBillCustomFee(itemCode As String, itemCategoryID As String) As DataSet
            Return GetBillCustomFee(itemCode, itemCategoryID, String.Empty)
        End Function

#End Region

    End Class

    Public Class BillExcludedItems : Inherits DBConnect

#Region " Fields "

        Private m_AccountNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String

#End Region

#Region " Properties "

        Public Property AccountNo() As String
            Get
                Return m_AccountNo
            End Get
            Set(Value As String)
                m_AccountNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditBillExcludedItems")

            With Parameters
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "AccountNo = '" + Me.AccountNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            errorPart = "Account No: " + Me.AccountNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "BillExcludedItems"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("BillExcludedItems")

            Return Parameters

        End Function

        Public Function GetBillExcludedItems(accountNo As String, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AccountNo", accountNo))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetBillExcludedItems", "BillExcludedItems", Parameters)

        End Function

#End Region

    End Class

    Public Class BillCustomerMembers : Inherits DBConnect

#Region " Fields "

        Private m_MedicalCardNo As String
        Private m_AccountNo As String
        Private m_Surname As String
        Private m_FirstName As String
        Private m_MiddleName As String
        Private m_PolicyStartDate As Date
        Private m_PolicyEndDate As Date
        Private m_CreditLimit As Decimal
        Private m_MemberStatusID As String

#End Region

#Region " Properties "

        Public Property MedicalCardNo() As String
            Get
                Return m_MedicalCardNo
            End Get
            Set(Value As String)
                m_MedicalCardNo = Value
            End Set
        End Property

        Public Property AccountNo() As String
            Get
                Return m_AccountNo
            End Get
            Set(Value As String)
                m_AccountNo = Value
            End Set
        End Property

        Public Property Surname() As String
            Get
                Return m_Surname
            End Get
            Set(Value As String)
                m_Surname = Value
            End Set
        End Property

        Public Property FirstName() As String
            Get
                Return m_FirstName
            End Get
            Set(Value As String)
                m_FirstName = Value
            End Set
        End Property

        Public Property MiddleName() As String
            Get
                Return m_MiddleName
            End Get
            Set(Value As String)
                m_MiddleName = Value
            End Set
        End Property

        Public Property PolicyStartDate() As Date
            Get
                Return m_PolicyStartDate
            End Get
            Set(Value As Date)
                m_PolicyStartDate = Value
            End Set
        End Property

        Public Property PolicyEndDate() As Date
            Get
                Return m_PolicyEndDate
            End Get
            Set(Value As Date)
                m_PolicyEndDate = Value
            End Set
        End Property

        Public Property CreditLimit() As Decimal
            Get
                Return m_CreditLimit
            End Get
            Set(Value As Decimal)
                m_CreditLimit = Value
            End Set
        End Property

        Public Property MemberStatusID() As String
            Get
                Return m_MemberStatusID
            End Get
            Set(Value As String)
                m_MemberStatusID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditBillCustomerMembers")

            With Parameters
                .Add(New ParameterSQL("MedicalCardNo", Me.MedicalCardNo))
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("Surname", Me.Surname))
                .Add(New ParameterSQL("FirstName", Me.FirstName))
                .Add(New ParameterSQL("MiddleName", Me.MiddleName))
                .Add(New ParameterSQL("PolicyStartDate", Me.PolicyStartDate))
                .Add(New ParameterSQL("PolicyEndDate", Me.PolicyEndDate))
                .Add(New ParameterSQL("CreditLimit", Me.CreditLimit))
                .Add(New ParameterSQL("MemberStatusID", Me.MemberStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "MedicalCardNo = '" + Me.MedicalCardNo + "' and AccountNo = '" + Me.AccountNo + "'"
            Dim errorPart As String = "Medical Card No: " + Me.MedicalCardNo + " and Account No: " + Me.AccountNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "BillCustomerMembers"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("BillCustomerMembers")

            Return Parameters

        End Function

        'Public Function GetBillCustomerMembers(medicalCardNo As String, accountNo As String, hideRecordExistsMSG As Boolean) As DataSet

        '    With Parameters
        '        .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
        '        .Add(New ParameterSQL("AccountNo", accountNo))
        '        .Add(New ParameterSQL("HideRecordExistsMSG", hideRecordExistsMSG))
        '    End With

        '    Return Me.Load("uspGetBillCustomerMembers", "BillCustomerMembers", Parameters)

        'End Function

        Public Function GetBillCustomerMembers(MedicalCardNo As String, accountNo As String, excludeCashAccount As Boolean) As DataSet

            If (Not MedicalCardNo = "" OrElse Not MedicalCardNo = String.Empty) AndAlso (Not accountNo = "" OrElse Not accountNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("MedicalCardNo", MedicalCardNo))
                    .Add(New ParameterSQL("AccountNo", accountNo))
                    .Add(New ParameterSQL("HideRecordExistsMSG", excludeCashAccount))
                End With

            ElseIf (Not MedicalCardNo = "" OrElse Not MedicalCardNo = String.Empty) AndAlso (accountNo = "" OrElse accountNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("MedicalCardNo", MedicalCardNo))
                    .Add(New ParameterSQL("AccountNo", Nothing))
                    .Add(New ParameterSQL("HideRecordExistsMSG", excludeCashAccount))
                End With


            ElseIf (MedicalCardNo = "" OrElse MedicalCardNo = String.Empty) AndAlso (Not accountNo = "" OrElse Not accountNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("MedicalCardNo", Nothing))
                    .Add(New ParameterSQL("AccountNo", accountNo))
                    .Add(New ParameterSQL("HideRecordExistsMSG", excludeCashAccount))
                End With

            ElseIf (MedicalCardNo = "" OrElse MedicalCardNo = String.Empty) AndAlso (accountNo = "" OrElse accountNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("MedicalCardNo", Nothing))
                    .Add(New ParameterSQL("AccountNo", Nothing))
                    .Add(New ParameterSQL("HideRecordExistsMSG", excludeCashAccount))
                End With

            End If

            Return Me.Load("uspGetBillCustomerMembers", "BillCustomerMembers", Parameters)

        End Function

        Public Function GetBillCustomerMembers(medicalCardNo As String, accountNo As String) As DataSet
            Return GetBillCustomerMembers(medicalCardNo, accountNo, False)
        End Function

        Public Function GetBillCustomerMembers() As DataSet
            Return GetBillCustomerMembers(String.Empty, String.Empty, True)
        End Function

#End Region

    End Class

    Public Class MemberBenefits : Inherits DBConnect

#Region " Fields "

        Private m_BenefitCode As String
        Private m_BenefitName As String
        Private m_ItemCategoryID As String

#End Region

#Region " Properties "

        Public Property BenefitCode() As String
            Get
                Return m_BenefitCode
            End Get
            Set(Value As String)
                m_BenefitCode = Value
            End Set
        End Property

        Public Property BenefitName() As String
            Get
                Return m_BenefitName
            End Get
            Set(Value As String)
                m_BenefitName = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertMemberBenefits")

            With Parameters
                .Add(New ParameterSQL("BenefitCode", Me.BenefitCode))
                .Add(New ParameterSQL("BenefitName", Me.BenefitName))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateMemberBenefits")

            With Parameters
                .Add(New ParameterSQL("BenefitCode", Me.BenefitCode))
                .Add(New ParameterSQL("BenefitName", Me.BenefitName))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
            End With

            'For Audit Trail
            Me.SetLogObject("MemberBenefits")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "BenefitCode = '" + Me.BenefitCode + "'"
            Dim errorPart As String = "Benefit Code: " + Me.BenefitCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "MemberBenefits"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("MemberBenefits")

            Return Parameters

        End Function

        ''' <summary>
        ''' Returns member benefits for specified benefit code
        ''' </summary>
        ''' <param name="benefitCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetMemberBenefits(benefitCode As String) As DataSet

            If String.IsNullOrEmpty(benefitCode) Then
                With Parameters
                    .Add(New ParameterSQL("BenefitCode", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("BenefitCode", benefitCode))
                End With
            End If

            Return Me.Load("uspGetMemberBenefits", "MemberBenefits", Parameters)

        End Function

        ''' <summary>
        ''' Gets all member benefits
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetMemberBenefits() As DataSet
            Return GetMemberBenefits(String.Empty)
        End Function

#End Region

    End Class

    Public Class MemberLimits : Inherits DBConnect

#Region " Fields "

        Private m_MedicalCardNo As String
        Private m_AccountNo As String
        Private m_BenefitCode As String
        Private m_MemberLimit As Decimal

#End Region

#Region " Properties "

        Public Property MedicalCardNo() As String
            Get
                Return m_MedicalCardNo
            End Get
            Set(Value As String)
                m_MedicalCardNo = Value
            End Set
        End Property

        Public Property AccountNo() As String
            Get
                Return m_AccountNo
            End Get
            Set(Value As String)
                m_AccountNo = Value
            End Set
        End Property

        Public Property BenefitCode() As String
            Get
                Return m_BenefitCode
            End Get
            Set(Value As String)
                m_BenefitCode = Value
            End Set
        End Property

        Public Property MemberLimit() As Decimal
            Get
                Return m_MemberLimit
            End Get
            Set(Value As Decimal)
                m_MemberLimit = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditMemberLimits")

            With Parameters
                .Add(New ParameterSQL("MedicalCardNo", Me.MedicalCardNo))
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("BenefitCode", Me.BenefitCode))
                .Add(New ParameterSQL("MemberLimit", Me.MemberLimit))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "MedicalCardNo = '" + Me.MedicalCardNo + "' and AccountNo = '" + Me.AccountNo + "' and BenefitCode = '" + Me.BenefitCode + "'"
            Dim errorPart As String = "Medical Card No: " + Me.MedicalCardNo + " and Account No: " + Me.AccountNo + " and Benefit Code: " + Me.BenefitCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "MemberLimits"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("MemberLimits")

            Return Parameters

        End Function

        Public Function GetMemberLimits(medicalCardNo As String, accountNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
                .Add(New ParameterSQL("AccountNo", accountNo))
            End With

            Return Me.Load("uspGetMemberLimits", "MemberLimits", Parameters)

        End Function

#End Region

    End Class

    Public Class Insurances : Inherits DBConnect

#Region " Fields "

        Private m_InsuranceNo As String
        Private m_InsuranceName As String
        Private m_ContactPerson As String
        Private m_Address As String
        Private m_Phone As String
        Private m_Fax As String
        Private m_Email As String
        Private m_Website As String
        Private m_LogoPhoto As Byte()
        Private m_MemberDeclaration As String
        Private m_DoctorDeclaration As String
        Private m_UseCustomFee As Boolean
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property InsuranceNo() As String
            Get
                Return m_InsuranceNo
            End Get
            Set(Value As String)
                m_InsuranceNo = Value
            End Set
        End Property

        Public Property InsuranceName() As String
            Get
                Return m_InsuranceName
            End Get
            Set(Value As String)
                m_InsuranceName = Value
            End Set
        End Property

        Public Property ContactPerson() As String
            Get
                Return m_ContactPerson
            End Get
            Set(Value As String)
                m_ContactPerson = Value
            End Set
        End Property

        Public Property Address() As String
            Get
                Return m_Address
            End Get
            Set(Value As String)
                m_Address = Value
            End Set
        End Property

        Public Property Phone() As String
            Get
                Return m_Phone
            End Get
            Set(Value As String)
                m_Phone = Value
            End Set
        End Property

        Public Property Fax() As String
            Get
                Return m_Fax
            End Get
            Set(Value As String)
                m_Fax = Value
            End Set
        End Property

        Public Property Email() As String
            Get
                Return m_Email
            End Get
            Set(Value As String)
                m_Email = Value
            End Set
        End Property

        Public Property Website() As String
            Get
                Return m_Website
            End Get
            Set(Value As String)
                m_Website = Value
            End Set
        End Property

        Public Property LogoPhoto() As Byte()
            Get
                Return m_LogoPhoto
            End Get
            Set(Value As Byte())
                m_LogoPhoto = Value
            End Set
        End Property

        Public Property MemberDeclaration() As String
            Get
                Return m_MemberDeclaration
            End Get
            Set(Value As String)
                m_MemberDeclaration = Value
            End Set
        End Property

        Public Property DoctorDeclaration() As String
            Get
                Return m_DoctorDeclaration
            End Get
            Set(Value As String)
                m_DoctorDeclaration = Value
            End Set
        End Property

        Public Property UseCustomFee() As Boolean
            Get
                Return m_UseCustomFee
            End Get
            Set(Value As Boolean)
                m_UseCustomFee = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertInsurances")

            With Parameters
                .Add(New ParameterSQL("InsuranceNo", Me.InsuranceNo))
                .Add(New ParameterSQL("InsuranceName", Me.InsuranceName))
                .Add(New ParameterSQL("ContactPerson", Me.ContactPerson))
                .Add(New ParameterSQL("Address", Me.Address))
                .Add(New ParameterSQL("Phone", Me.Phone))
                .Add(New ParameterSQL("Fax", Me.Fax))
                .Add(New ParameterSQL("Email", Me.Email))
                .Add(New ParameterSQL("Website", Me.Website))
                .Add(New ParameterSQL("LogoPhoto", Me.LogoPhoto))
                .Add(New ParameterSQL("MemberDeclaration", Me.MemberDeclaration))
                .Add(New ParameterSQL("DoctorDeclaration", Me.DoctorDeclaration))
                .Add(New ParameterSQL("UseCustomFee", Me.UseCustomFee))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateInsurances")

            With Parameters
                .Add(New ParameterSQL("InsuranceNo", Me.InsuranceNo))
                .Add(New ParameterSQL("InsuranceName", Me.InsuranceName))
                .Add(New ParameterSQL("ContactPerson", Me.ContactPerson))
                .Add(New ParameterSQL("Address", Me.Address))
                .Add(New ParameterSQL("Phone", Me.Phone))
                .Add(New ParameterSQL("Fax", Me.Fax))
                .Add(New ParameterSQL("Email", Me.Email))
                .Add(New ParameterSQL("Website", Me.Website))
                .Add(New ParameterSQL("LogoPhoto", Me.LogoPhoto))
                .Add(New ParameterSQL("MemberDeclaration", Me.MemberDeclaration))
                .Add(New ParameterSQL("DoctorDeclaration", Me.DoctorDeclaration))
                .Add(New ParameterSQL("UseCustomFee", Me.UseCustomFee))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            'For Audit Trail
            Me.SetLogObject("Insurances")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "InsuranceNo = '" + Me.InsuranceNo + "'"
            errorPart = "Insurance No: " + Me.InsuranceNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Insurances"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Insurances")

            Return Parameters

        End Function

        ''' <summary>
        ''' Returns Insurance for the supplied insurance number
        ''' </summary>
        ''' <param name="insuranceNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsurances(insuranceNo As String) As DataSet

            If (insuranceNo = "" OrElse insuranceNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("InsuranceNo", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                End With
            End If

            Return Me.Load("uspGetInsurances", "Insurances", Parameters)

        End Function

        ''' <summary>
        ''' Returns all Insurances that are not hidden
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsurances() As DataSet
            Return GetInsurances(String.Empty)
        End Function

        Public Function GetNextInsuranceID() As Integer

            With Parameters
                .Add(New ParameterSQL("InsuranceID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextInsuranceID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("InsuranceID")) Then
                    Return CInt(Me.ReadData("InsuranceID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

#End Region

    End Class

    Public Class InsuranceExclusions : Inherits DBConnect

#Region " Fields "

        Private m_InsuranceNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String

#End Region

#Region " Properties "

        Public Property InsuranceNo() As String
            Get
                Return m_InsuranceNo
            End Get
            Set(Value As String)
                m_InsuranceNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditInsuranceExclusions")

            With Parameters
                .Add(New ParameterSQL("InsuranceNo", Me.InsuranceNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "InsuranceNo = '" + Me.InsuranceNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Insurance No: " + Me.InsuranceNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "InsuranceExclusions"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("InsuranceExclusions")

            Return Parameters

        End Function

        Public Function GetInsuranceExclusions(insuranceNo As String, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetInsuranceExclusions", "InsuranceExclusions", Parameters)

        End Function

#End Region

    End Class

    Public Class InsurancePolicies : Inherits DBConnect

#Region " Fields "

        Private m_PolicyNo As String
        Private m_InsuranceNo As String
        Private m_PolicyName As String

#End Region

#Region " Properties "

        Public Property PolicyNo() As String
            Get
                Return m_PolicyNo
            End Get
            Set(Value As String)
                m_PolicyNo = Value
            End Set
        End Property

        Public Property InsuranceNo() As String
            Get
                Return m_InsuranceNo
            End Get
            Set(Value As String)
                m_InsuranceNo = Value
            End Set
        End Property

        Public Property PolicyName() As String
            Get
                Return m_PolicyName
            End Get
            Set(Value As String)
                m_PolicyName = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertInsurancePolicies")

            With Parameters
                .Add(New ParameterSQL("PolicyNo", Me.PolicyNo))
                .Add(New ParameterSQL("InsuranceNo", Me.InsuranceNo))
                .Add(New ParameterSQL("PolicyName", Me.PolicyName))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateInsurancePolicies")

            With Parameters
                .Add(New ParameterSQL("PolicyNo", Me.PolicyNo))
                .Add(New ParameterSQL("InsuranceNo", Me.InsuranceNo))
                .Add(New ParameterSQL("PolicyName", Me.PolicyName))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("InsurancePolicies")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PolicyNo = '" + Me.PolicyNo + "'"
            Dim errorPart As String = "Policy No: " + Me.PolicyNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "InsurancePolicies"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("InsurancePolicies")

            Return Parameters

        End Function

        Private Function GetInsurancePolicies(policyNo As String, insuranceNo As String) As DataSet

            If policyNo <> "" OrElse policyNo <> String.Empty And
                (insuranceNo = "" OrElse insuranceNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("PolicyNo", policyNo))
                    .Add(New ParameterSQL("InsuranceNo", Nothing))
                End With

            ElseIf (policyNo = "" OrElse policyNo = String.Empty) And
                (insuranceNo <> "" OrElse insuranceNo <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("PolicyNo", Nothing))
                    .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                End With

            ElseIf (policyNo = "" OrElse policyNo = String.Empty) And
                (insuranceNo = "" OrElse insuranceNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("PolicyNo", Nothing))
                    .Add(New ParameterSQL("InsuranceNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetInsurancePolicies", "InsurancePolicies", Parameters)

        End Function

        ''' <summary>
        ''' Gets an insurance policy corresponding to agiven policy no
        ''' </summary>
        ''' <param name="PolicyNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsurancePolicies(policyNo As String) As DataSet
            Return GetInsurancePolicies(policyNo, String.Empty)
        End Function

        ''' <summary>
        ''' Gets InsurancePolicies of agiven insurance
        ''' </summary>
        ''' <param name="InsuranceNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsurancePoliciesByInsuranceNo(InsuranceNo As String) As DataSet
            Return GetInsurancePolicies(String.Empty, InsuranceNo)
        End Function

        ''' <summary>
        ''' gets all InsurancePolicies
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsurancePolicies() As DataSet
            Return GetInsurancePolicies(String.Empty, String.Empty)
        End Function

        Public Function GetNextPolicyID(insuranceNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                .Add(New ParameterSQL("PolicyID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextPolicyID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("PolicyID")) Then
                    Return CInt(Me.ReadData("PolicyID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

#End Region

    End Class

    Public Class Companies : Inherits DBConnect

#Region " Fields "

        Private m_CompanyNo As String
        Private m_CompanyName As String
        Private m_ContactPerson As String
        Private m_ContractStartDate As Date
        Private m_ContractEndDate As Date
        Private m_Address As String
        Private m_Phone As String

#End Region

#Region " Properties "

        Public Property CompanyNo() As String
            Get
                Return m_CompanyNo
            End Get
            Set(Value As String)
                m_CompanyNo = Value
            End Set
        End Property

        Public Property CompanyName() As String
            Get
                Return m_CompanyName
            End Get
            Set(Value As String)
                m_CompanyName = Value
            End Set
        End Property

        Public Property ContactPerson() As String
            Get
                Return m_ContactPerson
            End Get
            Set(Value As String)
                m_ContactPerson = Value
            End Set
        End Property

        Public Property ContractStartDate() As Date
            Get
                Return m_ContractStartDate
            End Get
            Set(Value As Date)
                m_ContractStartDate = Value
            End Set
        End Property

        Public Property ContractEndDate() As Date
            Get
                Return m_ContractEndDate
            End Get
            Set(Value As Date)
                m_ContractEndDate = Value
            End Set
        End Property

        Public Property Address() As String
            Get
                Return m_Address
            End Get
            Set(Value As String)
                m_Address = Value
            End Set
        End Property

        Public Property Phone() As String
            Get
                Return m_Phone
            End Get
            Set(Value As String)
                m_Phone = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertCompanies")

            With Parameters
                .Add(New ParameterSQL("CompanyNo", Me.CompanyNo))
                .Add(New ParameterSQL("CompanyName", Me.CompanyName))
                .Add(New ParameterSQL("ContactPerson", Me.ContactPerson))
                .Add(New ParameterSQL("ContractStartDate", Me.ContractStartDate))
                .Add(New ParameterSQL("ContractEndDate", Me.ContractEndDate))
                .Add(New ParameterSQL("Address", Me.Address))
                .Add(New ParameterSQL("Phone", Me.Phone))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateCompanies")

            With Parameters
                .Add(New ParameterSQL("CompanyNo", Me.CompanyNo))
                .Add(New ParameterSQL("CompanyName", Me.CompanyName))
                .Add(New ParameterSQL("ContactPerson", Me.ContactPerson))
                .Add(New ParameterSQL("ContractStartDate", Me.ContractStartDate))
                .Add(New ParameterSQL("ContractEndDate", Me.ContractEndDate))
                .Add(New ParameterSQL("Address", Me.Address))
                .Add(New ParameterSQL("Phone", Me.Phone))
            End With

            'For Audit Trail
            Me.SetLogObject("Companies")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "CompanyNo = '" + Me.CompanyNo + "'"
            Dim errorPart As String = "Company No: " + Me.CompanyNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Companies"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Companies")

            Return Parameters

        End Function

        ''' <summary>
        ''' Returns a company for a given company number
        ''' </summary>
        ''' <param name="companyNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetCompanies(companyNo As String) As DataSet

            If (companyNo = "" OrElse companyNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With
            End If

            Return Me.Load("uspGetCompanies", "Companies", Parameters)

        End Function

        ''' <summary>
        ''' Returns all companies
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetCompanies() As DataSet
            Return GetCompanies(String.Empty)
        End Function

        Public Function GetNextCompanyID() As Integer

            With Parameters
                .Add(New ParameterSQL("CompanyID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextCompanyID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("CompanyID")) Then
                    Return CInt(Me.ReadData("CompanyID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

#End Region

    End Class

    Public Class InsuranceSchemes : Inherits DBConnect

#Region " Fields "

        Private m_CompanyNo As String
        Private m_PolicyNo As String
        Private m_SchemeJoinDate As Date
        Private m_SchemeStartDate As Date
        Private m_SchemeEndDate As Date
        Private m_CoPayTypeID As String
        Private m_CoPayPercent As Single
        Private m_CoPayValue As Decimal
        Private m_AnnualPremium As Decimal
        Private m_MemberPremium As Decimal
        Private m_SmartCardApplicable As Boolean
        Private m_SchemeStatusID As String

#End Region

#Region " Properties "

        Public Property CompanyNo() As String
            Get
                Return m_CompanyNo
            End Get
            Set(Value As String)
                m_CompanyNo = Value
            End Set
        End Property

        Public Property PolicyNo() As String
            Get
                Return m_PolicyNo
            End Get
            Set(Value As String)
                m_PolicyNo = Value
            End Set
        End Property

        Public Property SchemeJoinDate() As Date
            Get
                Return m_SchemeJoinDate
            End Get
            Set(Value As Date)
                m_SchemeJoinDate = Value
            End Set
        End Property

        Public Property SchemeStartDate() As Date
            Get
                Return m_SchemeStartDate
            End Get
            Set(Value As Date)
                m_SchemeStartDate = Value
            End Set
        End Property

        Public Property SchemeEndDate() As Date
            Get
                Return m_SchemeEndDate
            End Get
            Set(Value As Date)
                m_SchemeEndDate = Value
            End Set
        End Property

        Public Property CoPayTypeID() As String
            Get
                Return m_CoPayTypeID
            End Get
            Set(Value As String)
                m_CoPayTypeID = Value
            End Set
        End Property

        Public Property CoPayPercent() As Single
            Get
                Return m_CoPayPercent
            End Get
            Set(Value As Single)
                m_CoPayPercent = Value
            End Set
        End Property

        Public Property CoPayValue() As Decimal
            Get
                Return m_CoPayValue
            End Get
            Set(Value As Decimal)
                m_CoPayValue = Value
            End Set
        End Property

        Public Property AnnualPremium() As Decimal
            Get
                Return m_AnnualPremium
            End Get
            Set(Value As Decimal)
                m_AnnualPremium = Value
            End Set
        End Property

        Public Property MemberPremium() As Decimal
            Get
                Return m_MemberPremium
            End Get
            Set(Value As Decimal)
                m_MemberPremium = Value
            End Set
        End Property

        Public Property SmartCardApplicable() As Boolean
            Get
                Return m_SmartCardApplicable
            End Get
            Set(Value As Boolean)
                m_SmartCardApplicable = Value
            End Set
        End Property

        Public Property SchemeStatusID() As String
            Get
                Return m_SchemeStatusID
            End Get
            Set(Value As String)
                m_SchemeStatusID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertInsuranceSchemes")

            With Parameters
                .Add(New ParameterSQL("CompanyNo", Me.CompanyNo))
                .Add(New ParameterSQL("PolicyNo", Me.PolicyNo))
                .Add(New ParameterSQL("SchemeJoinDate", Me.SchemeJoinDate))
                .Add(New ParameterSQL("SchemeStartDate", Me.SchemeStartDate))
                .Add(New ParameterSQL("SchemeEndDate", Me.SchemeEndDate))
                .Add(New ParameterSQL("CoPayTypeID", Me.CoPayTypeID))
                .Add(New ParameterSQL("CoPayPercent", Me.CoPayPercent))
                .Add(New ParameterSQL("CoPayValue", Me.CoPayValue))
                .Add(New ParameterSQL("AnnualPremium", Me.AnnualPremium))
                .Add(New ParameterSQL("MemberPremium", Me.MemberPremium))
                .Add(New ParameterSQL("SmartCardApplicable", Me.SmartCardApplicable))
                .Add(New ParameterSQL("SchemeStatusID", Me.SchemeStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateInsuranceSchemes")

            With Parameters
                .Add(New ParameterSQL("CompanyNo", Me.CompanyNo))
                .Add(New ParameterSQL("PolicyNo", Me.PolicyNo))
                .Add(New ParameterSQL("SchemeJoinDate", Me.SchemeJoinDate))
                .Add(New ParameterSQL("SchemeStartDate", Me.SchemeStartDate))
                .Add(New ParameterSQL("SchemeEndDate", Me.SchemeEndDate))
                .Add(New ParameterSQL("CoPayTypeID", Me.CoPayTypeID))
                .Add(New ParameterSQL("CoPayPercent", Me.CoPayPercent))
                .Add(New ParameterSQL("CoPayValue", Me.CoPayValue))
                .Add(New ParameterSQL("AnnualPremium", Me.AnnualPremium))
                .Add(New ParameterSQL("MemberPremium", Me.MemberPremium))
                .Add(New ParameterSQL("SmartCardApplicable", Me.SmartCardApplicable))
                .Add(New ParameterSQL("SchemeStatusID", Me.SchemeStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("InsuranceSchemes")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "CompanyNo = '" + Me.CompanyNo + "' and PolicyNo = '" + Me.PolicyNo + "'"
            Dim errorPart As String = "Company No: " + Me.CompanyNo + " and Policy No: " + Me.PolicyNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "InsuranceSchemes"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("InsuranceSchemes")

            Return Parameters

        End Function

        Private Function GetInsuranceSchemes(companyNo As String, policyNo As String, insuranceNo As String) As DataSet

            If (companyNo <> "" OrElse companyNo <> String.Empty) And
           (policyNo <> "" OrElse policyNo <> String.Empty) And
           (insuranceNo = "" OrElse insuranceNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                    .Add(New ParameterSQL("PolicyNo", policyNo))
                    .Add(New ParameterSQL("InsuranceNo", Nothing))
                End With

            ElseIf (companyNo = "" OrElse companyNo = String.Empty) And
            (policyNo = "" OrElse policyNo = String.Empty) And
            (insuranceNo <> "" OrElse insuranceNo <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                    .Add(New ParameterSQL("PolicyNo", Nothing))
                    .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                    .Add(New ParameterSQL("PolicyNo", Nothing))
                    .Add(New ParameterSQL("InsuranceNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetInsuranceSchemes", "InsuranceSchemes", Parameters)

        End Function

        ''' <summary>
        ''' Gets InsuranceSchemes for supplied company no and policy no
        ''' </summary>
        ''' <param name="companyNo"></param>
        ''' <param name="policyNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsuranceSchemes(companyNo As String, policyNo As String) As DataSet
            Return GetInsuranceSchemes(companyNo, policyNo, String.Empty)
        End Function

        ''' <summary>
        ''' Gets InsuranceSchemes for supplied insurance no
        ''' </summary>
        ''' <param name="insuranceNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsuranceSchemes(insuranceNo As String) As DataSet
            Return GetInsuranceSchemes(String.Empty, String.Empty, insuranceNo)
        End Function

        ''' <summary>
        ''' Gets all Insurance Schemes
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsuranceSchemes() As DataSet
            Return GetInsuranceSchemes(String.Empty, String.Empty, String.Empty)
        End Function

        ''' <summary>
        ''' Returns Insurances in the Insurance Schemes
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsuranceSchemesInsurances() As DataSet
            Return Me.Load("uspGetInsuranceSchemesInsurances", "InsuranceSchemes", Parameters)
        End Function

        ''' <summary>
        ''' Returns Companies in the Insurance Schemes
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsuranceSchemesCompanies() As DataSet
            Return Me.Load("uspGetInsuranceSchemesCompanies", "InsuranceSchemes", Parameters)
        End Function

        ''' <summary>
        ''' Returns Policies in the Insurance Schemes
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsuranceSchemesPolicies() As DataSet
            Return Me.Load("uspGetInsuranceSchemesPolicies", "InsuranceSchemes", Parameters)
        End Function

#End Region

    End Class

    Public Class PolicyLimits : Inherits DBConnect

#Region " Fields "

        Private m_CompanyNo As String
        Private m_PolicyNo As String
        Private m_BenefitCode As String
        Private m_PolicyLimit As Decimal

#End Region

#Region " Properties "

        Public Property CompanyNo() As String
            Get
                Return m_CompanyNo
            End Get
            Set(Value As String)
                m_CompanyNo = Value
            End Set
        End Property

        Public Property PolicyNo() As String
            Get
                Return m_PolicyNo
            End Get
            Set(Value As String)
                m_PolicyNo = Value
            End Set
        End Property

        Public Property BenefitCode() As String
            Get
                Return m_BenefitCode
            End Get
            Set(Value As String)
                m_BenefitCode = Value
            End Set
        End Property

        Public Property PolicyLimit() As Decimal
            Get
                Return m_PolicyLimit
            End Get
            Set(Value As Decimal)
                m_PolicyLimit = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditPolicyLimits")

            With Parameters
                .Add(New ParameterSQL("CompanyNo", Me.CompanyNo))
                .Add(New ParameterSQL("PolicyNo", Me.PolicyNo))
                .Add(New ParameterSQL("BenefitCode", Me.BenefitCode))
                .Add(New ParameterSQL("PolicyLimit", Me.PolicyLimit))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "CompanyNo = '" + Me.CompanyNo + "' and PolicyNo = '" + Me.PolicyNo + "' and BenefitCode = '" + Me.BenefitCode + "'"
            Dim errorPart As String = "Company No: " + Me.CompanyNo + " and Policy No: " + Me.PolicyNo + " and Benefit Code: " + Me.BenefitCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PolicyLimits"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PolicyLimits")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets Registered policy limits
        ''' </summary>
        ''' <param name="companyNo"></param>
        ''' <param name="policyNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPolicyLimits(companyNo As String, policyNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("CompanyNo", companyNo))
                .Add(New ParameterSQL("PolicyNo", policyNo))
            End With

            Return Me.Load("uspGetPolicyLimits", "PolicyLimits", Parameters)

        End Function

        ''' <summary>
        ''' Gets Policy Limit Amount
        ''' </summary>
        ''' <param name="medicalCardNo"></param>
        ''' <param name="benefitCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPolicyLimit(medicalCardNo As String, benefitCode As String) As Decimal

            With Parameters
                .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
                .Add(New ParameterSQL("BenefitCode", benefitCode))
                .Add(New ParameterSQL("PolicyLimit", SqlDbType.Money))
            End With

            Me.ReadData = Read("uspGetPolicyLimit", Parameters)

            If Not Me.ReadData Is Nothing Then

                If IsDBNull(Me.ReadData("PolicyLimit")) Then
                    Return 0
                Else : Return CDec(Me.ReadData("PolicyLimit"))
                End If

            End If

        End Function

#End Region

    End Class

    Public Class InsuranceCustomFee : Inherits DBConnect

#Region " Fields "

        Private m_InsuranceNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_CustomFee As Decimal
        Private m_CurrenciesID As String

#End Region

#Region " Properties "

        Public Property InsuranceNo() As String
            Get
                Return m_InsuranceNo
            End Get
            Set(Value As String)
                m_InsuranceNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property CustomFee() As Decimal
            Get
                Return m_CustomFee
            End Get
            Set(Value As Decimal)
                m_CustomFee = Value
            End Set
        End Property

        Public Property CurrenciesID() As String
            Get
                Return m_CurrenciesID
            End Get
            Set(Value As String)
                m_CurrenciesID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditInsuranceCustomFee")

            With Parameters
                .Add(New ParameterSQL("InsuranceNo", Me.InsuranceNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("CustomFee", Me.CustomFee))
                .Add(New ParameterSQL("CurrenciesID", Me.CurrenciesID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "InsuranceNo = '" + Me.InsuranceNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Insurance No: " + Me.InsuranceNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "InsuranceCustomFee"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("InsuranceCustomFee")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets Bill custom fee corresponding to supplied item code, item category and medical card no
        ''' </summary>
        ''' <param name="itemCode"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <param name="medicalCardNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsuranceCustomFee(itemCode As String, itemCategoryID As String, medicalCardNo As String) As DataSet

            If (medicalCardNo <> "" OrElse medicalCardNo <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("MedicalCardNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetInsuranceCustomFee", "InsuranceCustomFee", Parameters)

        End Function

        ''' <summary>
        ''' Gets Bill custom fee corresponding to supplied item code and item category
        ''' </summary>
        ''' <param name="itemCode"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsuranceCustomFee(itemCode As String, itemCategoryID As String) As DataSet
            Return GetInsuranceCustomFee(itemCode, itemCategoryID, String.Empty)
        End Function

#End Region

    End Class

    Public Class InsuranceExcludedItems : Inherits DBConnect

#Region " Fields "

        Private m_CompanyNo As String
        Private m_PolicyNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String

#End Region

#Region " Properties "

        Public Property CompanyNo() As String
            Get
                Return m_CompanyNo
            End Get
            Set(Value As String)
                m_CompanyNo = Value
            End Set
        End Property

        Public Property PolicyNo() As String
            Get
                Return m_PolicyNo
            End Get
            Set(Value As String)
                m_PolicyNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditInsuranceExcludedItems")

            With Parameters
                .Add(New ParameterSQL("CompanyNo", Me.CompanyNo))
                .Add(New ParameterSQL("PolicyNo", Me.PolicyNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "CompanyNo = '" + Me.CompanyNo + "' and PolicyNo = '" + Me.PolicyNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            errorPart = "Company No: " + Me.CompanyNo + " and Policy No: " + Me.PolicyNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "InsuranceExcludedItems"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("InsuranceExcludedItems")

            Return Parameters

        End Function

        Public Function GetInsuranceExcludedItems(companyNo As String, policyNo As String, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("CompanyNo", companyNo))
                .Add(New ParameterSQL("PolicyNo", policyNo))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetInsuranceExcludedItems", "InsuranceExcludedItems", Parameters)

        End Function

#End Region

    End Class

    Public Class SchemeMembers : Inherits Person

#Region " Fields "

        Private m_MemberTypeID As String
        Private m_MedicalCardNo As String
        Private m_MainMemberNo As String
        Private m_CompanyNo As String
        Private m_PolicyNo As String
        Private m_Relationship As String
        Private m_PolicyStartDate As Date
        Private m_PolicyEndDate As Date
        Private m_MemberStatusID As String

#End Region

#Region " Properties "

        Public Property MemberTypeID() As String
            Get
                Return m_MemberTypeID
            End Get
            Set(Value As String)
                m_MemberTypeID = Value
            End Set
        End Property

        Public Property MedicalCardNo() As String
            Get
                Return m_MedicalCardNo
            End Get
            Set(Value As String)
                m_MedicalCardNo = Value
            End Set
        End Property

        Public Property MainMemberNo() As String
            Get
                Return m_MainMemberNo
            End Get
            Set(Value As String)
                m_MainMemberNo = Value
            End Set
        End Property

        Public Property CompanyNo() As String
            Get
                Return m_CompanyNo
            End Get
            Set(Value As String)
                m_CompanyNo = Value
            End Set
        End Property

        Public Property PolicyNo() As String
            Get
                Return m_PolicyNo
            End Get
            Set(Value As String)
                m_PolicyNo = Value
            End Set
        End Property

        Public Property Relationship() As String
            Get
                Return m_Relationship
            End Get
            Set(Value As String)
                m_Relationship = Value
            End Set
        End Property

        Public Property PolicyStartDate() As Date
            Get
                Return m_PolicyStartDate
            End Get
            Set(Value As Date)
                m_PolicyStartDate = Value
            End Set
        End Property

        Public Property PolicyEndDate() As Date
            Get
                Return m_PolicyEndDate
            End Get
            Set(Value As Date)
                m_PolicyEndDate = Value
            End Set
        End Property

        Public Property MemberStatusID() As String
            Get
                Return m_MemberStatusID
            End Get
            Set(Value As String)
                m_MemberStatusID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertSchemeMembers")

            With Parameters
                .Add(New ParameterSQL("MemberTypeID", Me.MemberTypeID))
                .Add(New ParameterSQL("MedicalCardNo", Me.MedicalCardNo))
                .Add(New ParameterSQL("MainMemberNo", Me.MainMemberNo))
                .Add(New ParameterSQL("CompanyNo", Me.CompanyNo))
                .Add(New ParameterSQL("PolicyNo", Me.PolicyNo))
                .Add(New ParameterSQL("ReferenceNo", Me.ReferenceNo))
                .Add(New ParameterSQL("Surname", Me.Surname))
                .Add(New ParameterSQL("FirstName", Me.FirstName))
                .Add(New ParameterSQL("MiddleName", Me.MiddleName))
                .Add(New ParameterSQL("BirthDate", Me.BirthDate))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("Address", Me.Address))
                .Add(New ParameterSQL("PhoneWork", Me.PhoneWork))
                .Add(New ParameterSQL("PhoneMobile", Me.PhoneMobile))
                .Add(New ParameterSQL("PhoneHome", Me.PhoneHome))
                .Add(New ParameterSQL("Email", Me.Email))
                .Add(New ParameterSQL("Photo", Me.Photo))
                .Add(New ParameterSQL("Fingerprint", Me.Fingerprint))
                .Add(New ParameterSQL("JoinDate", Me.JoinDate))
                .Add(New ParameterSQL("Relationship", Me.Relationship))
                .Add(New ParameterSQL("PolicyStartDate", Me.PolicyStartDate))
                .Add(New ParameterSQL("PolicyEndDate", Me.PolicyEndDate))
                .Add(New ParameterSQL("MemberStatusID", Me.MemberStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateSchemeMembers")

            With Parameters
                .Add(New ParameterSQL("MemberTypeID", Me.MemberTypeID))
                .Add(New ParameterSQL("MedicalCardNo", Me.MedicalCardNo))
                .Add(New ParameterSQL("MainMemberNo", Me.MainMemberNo))
                .Add(New ParameterSQL("CompanyNo", Me.CompanyNo))
                .Add(New ParameterSQL("PolicyNo", Me.PolicyNo))
                .Add(New ParameterSQL("ReferenceNo", Me.ReferenceNo))
                .Add(New ParameterSQL("Surname", Me.Surname))
                .Add(New ParameterSQL("FirstName", Me.FirstName))
                .Add(New ParameterSQL("MiddleName", Me.MiddleName))
                .Add(New ParameterSQL("BirthDate", Me.BirthDate))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("Address", Me.Address))
                .Add(New ParameterSQL("PhoneWork", Me.PhoneWork))
                .Add(New ParameterSQL("PhoneMobile", Me.PhoneMobile))
                .Add(New ParameterSQL("PhoneHome", Me.PhoneHome))
                .Add(New ParameterSQL("Email", Me.Email))
                .Add(New ParameterSQL("Photo", Me.Photo))
                .Add(New ParameterSQL("Fingerprint", Me.Fingerprint))
                .Add(New ParameterSQL("JoinDate", Me.JoinDate))
                .Add(New ParameterSQL("Relationship", Me.Relationship))
                .Add(New ParameterSQL("PolicyStartDate", Me.PolicyStartDate))
                .Add(New ParameterSQL("PolicyEndDate", Me.PolicyEndDate))
                .Add(New ParameterSQL("MemberStatusID", Me.MemberStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("SchemeMembers")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "MedicalCardNo = '" + Me.MedicalCardNo + "'"
            Dim errorPart As String = "Medical Card No: " + Me.MedicalCardNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "SchemeMembers"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("SchemeMembers")

            Return Parameters

        End Function

        Public Function GetSchemeMembers(medicalCardNo As String) As DataSet
            If medicalCardNo = "" OrElse medicalCardNo = String.Empty Then

                With Parameters
                    .Add(New ParameterSQL("MedicalCardNo", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
                End With
            End If

            Return Me.Load("uspGetSchemeMembers", "SchemeMembers", Parameters)

        End Function


        Public Function GetSchemeMembers() As DataSet
            Return GetSchemeMembers(String.Empty)
        End Function

        Public Function GetSchemeMembersMainMemberDetails(mainMemberNo As String) As DataSet
            If mainMemberNo = "" OrElse mainMemberNo = String.Empty Then

                With Parameters
                    .Add(New ParameterSQL("MainMemberNo", Nothing))
                End With
            Else

                With Parameters
                    .Add(New ParameterSQL("MainMemberNo", mainMemberNo))
                End With

            End If
            Return Me.Load("uspGetSchemeMembersMainMember", "SchemeMembers", Parameters)

        End Function

        Public Function GetSchemeMembersMainMemberDetails() As DataSet
            Return GetSchemeMembersMainMemberDetails(String.Empty)
        End Function


        Public Function GetSchemeMembersMainMember(startDate As Date, endDate As Date, mainMemberNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("MainMemberNo", mainMemberNo))

            End With

            Return Me.Load("uspGetSchemeMembersMainMemberConsumption", "SchemeMembers", Parameters)

        End Function

        Public Function GetSchemeMembersMainMemberConsumptionDetails(startDate As Date, endDate As Date, mainMemberNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("MainMemberNo", mainMemberNo))

            End With

            Return Me.Load("uspGetSchemeMembersMainMemberConsumptionDetails", "SchemeMembers", Parameters)

        End Function

        Public Function GetNextMedicalCardID() As Integer

            With Parameters
                .Add(New ParameterSQL("MedicalCardID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextMedicalCardID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("MedicalCardID")) Then
                    Return CInt(Me.ReadData("MedicalCardID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

        Public Function GetNextMainMemberID(medicalCardNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
                .Add(New ParameterSQL("MainMemberID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextMainMemberID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("MainMemberID")) Then
                    Return CInt(Me.ReadData("MainMemberID"))
                Else : Return 1
                End If

            End If

        End Function



        Public Function IsSchemeMember(ByVal medicalCardNo As String) As Boolean

            Dim records As Integer

            With Parameters
                .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
                .Add(New ParameterSQL("Records", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspIsSchemeMember", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("Records")) Then
                    records = 0
                Else : records = CInt(Me.ReadData("Records"))
                End If
            End If

            Return records > 0

        End Function



#End Region

    End Class


    Public Class HealthUnits : Inherits DBConnect

#Region " Fields "

        Private m_HealthUnitCode As String
        Private m_HealthUnitName As String
        Private m_DistrictsID As String
        Private m_ContactPerson As String
        Private m_Address As String
        Private m_Phone As String

#End Region

#Region " Properties "

        Public Property HealthUnitCode() As String
            Get
                Return m_HealthUnitCode
            End Get
            Set(Value As String)
                m_HealthUnitCode = Value
            End Set
        End Property

        Public Property HealthUnitName() As String
            Get
                Return m_HealthUnitName
            End Get
            Set(Value As String)
                m_HealthUnitName = Value
            End Set
        End Property

        Public Property DistrictsID() As String
            Get
                Return m_DistrictsID
            End Get
            Set(Value As String)
                m_DistrictsID = Value
            End Set
        End Property

        Public Property ContactPerson() As String
            Get
                Return m_ContactPerson
            End Get
            Set(Value As String)
                m_ContactPerson = Value
            End Set
        End Property

        Public Property Address() As String
            Get
                Return m_Address
            End Get
            Set(Value As String)
                m_Address = Value
            End Set
        End Property

        Public Property Phone() As String
            Get
                Return m_Phone
            End Get
            Set(Value As String)
                m_Phone = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertHealthUnits")

            With Parameters
                .Add(New ParameterSQL("HealthUnitCode", Me.HealthUnitCode))
                .Add(New ParameterSQL("HealthUnitName", Me.HealthUnitName))
                .Add(New ParameterSQL("DistrictsID", Me.DistrictsID))
                .Add(New ParameterSQL("ContactPerson", Me.ContactPerson))
                .Add(New ParameterSQL("Address", Me.Address))
                .Add(New ParameterSQL("Phone", Me.Phone))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateHealthUnits")

            With Parameters
                .Add(New ParameterSQL("HealthUnitCode", Me.HealthUnitCode))
                .Add(New ParameterSQL("HealthUnitName", Me.HealthUnitName))
                .Add(New ParameterSQL("DistrictsID", Me.DistrictsID))
                .Add(New ParameterSQL("ContactPerson", Me.ContactPerson))
                .Add(New ParameterSQL("Address", Me.Address))
                .Add(New ParameterSQL("Phone", Me.Phone))
            End With

            'For Audit Trail
            Me.SetLogObject("HealthUnits")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "HealthUnitCode = '" + Me.HealthUnitCode + "'"
            Dim errorPart As String = "Health Unit Code: " + Me.HealthUnitCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "HealthUnits"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("HealthUnits")

            Return Parameters

        End Function

        Private Function GetHealthUnits(healthUnitCode As String, districtsID As String) As DataSet

            If (healthUnitCode <> "" OrElse healthUnitCode <> String.Empty) And
                (districtsID = "" OrElse districtsID = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("healthUnitCode", healthUnitCode))
                    .Add(New ParameterSQL("DistrictsID", Nothing))
                End With

            ElseIf (healthUnitCode = "" OrElse healthUnitCode = String.Empty) And
                    (districtsID <> "" OrElse districtsID <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("healthUnitCode", Nothing))
                    .Add(New ParameterSQL("DistrictsID", districtsID))
                End With

            ElseIf (healthUnitCode = "" OrElse healthUnitCode = String.Empty) And
                    (districtsID = "" OrElse districtsID = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("healthUnitCode", Nothing))
                    .Add(New ParameterSQL("DistrictsID", Nothing))
                End With
            End If

            Return Me.Load("uspGetHealthUnits", "HealthUnits", Parameters)

        End Function

        ''' <summary>
        ''' Returns a healthUnit for aspecified healthUnitCode
        ''' </summary>
        ''' <param name="healthUnitCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetHealthUnits(healthUnitCode As String) As DataSet
            Return GetHealthUnits(healthUnitCode, String.Empty)
        End Function

        ''' <summary>
        ''' Returns a healthUnit for aspecified district
        ''' </summary>
        ''' <param name="districtsID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetHealthUnitsByDistrictsID(districtsID As String) As DataSet
            Return GetHealthUnits(String.Empty, districtsID)
        End Function

        ''' <summary>
        ''' Returns all HealthUnits
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetHealthUnits() As DataSet
            Return GetHealthUnits(String.Empty, String.Empty)
        End Function

        ''' <summary>
        ''' Gets Health Unit Code corresponding to supplied Health Unit name
        ''' </summary>
        ''' <param name="healthUnitName"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetHealthUnitsHealthUnitCode(healthUnitName As String) As String

            Try

                With Parameters
                    .Add(New ParameterSQL("HealthUnitName", healthUnitName))
                    .Add(New ParameterSQL("HealthUnitCode", SqlDbType.VarChar, 10))
                End With

                Me.ReadData = Me.Read("uspGetHealthUnitsHealthUnitCode", Parameters)

                If Me.ReadData IsNot Nothing Then

                    If Not IsDBNull(Me.ReadData("HealthUnitCode")) Then
                        Me.HealthUnitCode = CStr(Me.ReadData("HealthUnitCode"))
                    Else : Me.HealthUnitCode = String.Empty
                    End If

                    Return Me.HealthUnitCode
                Else : Return String.Empty
                End If

            Catch ex As Exception
                Throw ex

            End Try

        End Function

#End Region

    End Class

    Public Class Counties : Inherits DBConnect

#Region " Fields "

        Private m_CountyCode As String
        Private m_CountyName As String
        Private m_DistrictsID As String

#End Region

#Region " Properties "

        Public Property CountyCode() As String
            Get
                Return m_CountyCode
            End Get
            Set(Value As String)
                m_CountyCode = Value
            End Set
        End Property

        Public Property CountyName() As String
            Get
                Return m_CountyName
            End Get
            Set(Value As String)
                m_CountyName = Value
            End Set
        End Property

        Public Property DistrictsID() As String
            Get
                Return m_DistrictsID
            End Get
            Set(Value As String)
                m_DistrictsID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertCounties")

            With Parameters
                .Add(New ParameterSQL("CountyCode", Me.CountyCode))
                .Add(New ParameterSQL("CountyName", Me.CountyName))
                .Add(New ParameterSQL("DistrictsID", Me.DistrictsID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateCounties")

            With Parameters
                .Add(New ParameterSQL("CountyCode", Me.CountyCode))
                .Add(New ParameterSQL("CountyName", Me.CountyName))
                .Add(New ParameterSQL("DistrictsID", Me.DistrictsID))
            End With

            'For Audit Trail
            Me.SetLogObject("Counties")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "CountyCode = '" + Me.CountyCode + "'"
            Dim errorPart As String = "County Code: " + Me.CountyCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Counties"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Counties")

            Return Parameters

        End Function

        Private Function GetCounties(countyCode As String, districtsID As String) As DataSet

            If (countyCode <> "" OrElse countyCode <> String.Empty) And
                (districtsID = "" OrElse districtsID = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("CountyCode", countyCode))
                    .Add(New ParameterSQL("DistrictsID", Nothing))
                End With

            ElseIf (countyCode = "" OrElse countyCode = String.Empty) And
                    (districtsID <> "" OrElse districtsID <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("CountyCode", Nothing))
                    .Add(New ParameterSQL("DistrictsID", districtsID))
                End With

            ElseIf (countyCode = "" OrElse countyCode = String.Empty) And
                    (districtsID = "" OrElse districtsID = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("CountyCode", Nothing))
                    .Add(New ParameterSQL("DistrictsID", Nothing))
                End With
            End If

            Return Me.Load("uspGetCounties", "Counties", Parameters)

        End Function

        ''' <summary>
        ''' Gets county of agiven  county code
        ''' </summary>
        ''' <param name="CountyCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetCounties(countyCode As String) As DataSet
            Return GetCounties(countyCode, String.Empty)
        End Function

        ''' <summary>
        ''' Gets counties for agiven county code
        ''' </summary>
        ''' <param name="districtsID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetCountiesByDistrictsID(districtsID As String) As DataSet
            Return GetCounties(String.Empty, districtsID)
        End Function

        ''' <summary>
        ''' Gets all Counties
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetCounties() As DataSet
            Return GetCounties(String.Empty, String.Empty)
        End Function

#End Region

    End Class

    Public Class SubCounties : Inherits DBConnect

#Region " Fields "

        Private m_SubCountyCode As String
        Private m_SubCountyName As String
        Private m_CountyCode As String

#End Region

#Region " Properties "

        Public Property SubCountyCode() As String
            Get
                Return m_SubCountyCode
            End Get
            Set(Value As String)
                m_SubCountyCode = Value
            End Set
        End Property

        Public Property SubCountyName() As String
            Get
                Return m_SubCountyName
            End Get
            Set(Value As String)
                m_SubCountyName = Value
            End Set
        End Property

        Public Property CountyCode() As String
            Get
                Return m_CountyCode
            End Get
            Set(Value As String)
                m_CountyCode = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertSubCounties")

            With Parameters
                .Add(New ParameterSQL("SubCountyCode", Me.SubCountyCode))
                .Add(New ParameterSQL("SubCountyName", Me.SubCountyName))
                .Add(New ParameterSQL("CountyCode", Me.CountyCode))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateSubCounties")

            With Parameters
                .Add(New ParameterSQL("SubCountyCode", Me.SubCountyCode))
                .Add(New ParameterSQL("SubCountyName", Me.SubCountyName))
                .Add(New ParameterSQL("CountyCode", Me.CountyCode))
            End With

            'For Audit Trail
            Me.SetLogObject("SubCounties")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "SubCountyCode = '" + Me.SubCountyCode + "'"
            Dim errorPart As String = "Sub County Code: " + Me.SubCountyCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "SubCounties"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("SubCounties")

            Return Parameters

        End Function

        Private Function GetSubCounties(subCountyCode As String, countyCode As String) As DataSet

            If (subCountyCode <> "" OrElse subCountyCode <> String.Empty) And
                (countyCode = "" OrElse countyCode = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("SubCountyCode", subCountyCode))
                    .Add(New ParameterSQL("countyCode", Nothing))
                End With

            ElseIf (subCountyCode = "" OrElse subCountyCode = String.Empty) And
                    (countyCode <> "" OrElse countyCode <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("SubCountyCode", Nothing))
                    .Add(New ParameterSQL("CountyCode", countyCode))
                End With

            ElseIf (subCountyCode = "" OrElse subCountyCode = String.Empty) And
                    (countyCode = "" OrElse countyCode = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("SubCountyCode", Nothing))
                    .Add(New ParameterSQL("CountyCode", Nothing))
                End With
            End If

            Return Me.Load("uspGetSubCounties", "SubCounties", Parameters)

        End Function

        ''' <summary>
        ''' Gets sub counties corresponding to the sub county code
        ''' </summary>
        ''' <param name="subCountyCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetSubCounties(subCountyCode As String) As DataSet
            Return GetSubCounties(subCountyCode, String.Empty)
        End Function

        ''' <summary>
        ''' Gets Sub Counties for agiven County
        ''' </summary>
        ''' <param name="countyCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetSubCountiesByCountyCode(countyCode As String) As DataSet
            Return GetSubCounties(String.Empty, countyCode)
        End Function

        ''' <summary>
        ''' Gets all Sub Counties
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetSubCounties() As DataSet
            Return GetSubCounties(String.Empty, String.Empty)
        End Function

#End Region

    End Class

    Public Class Parishes : Inherits DBConnect

#Region " Fields "

        Private m_ParishCode As String
        Private m_ParishName As String
        Private m_SubCountyCode As String

#End Region

#Region " Properties "

        Public Property ParishCode() As String
            Get
                Return m_ParishCode
            End Get
            Set(Value As String)
                m_ParishCode = Value
            End Set
        End Property

        Public Property ParishName() As String
            Get
                Return m_ParishName
            End Get
            Set(Value As String)
                m_ParishName = Value
            End Set
        End Property

        Public Property SubCountyCode() As String
            Get
                Return m_SubCountyCode
            End Get
            Set(Value As String)
                m_SubCountyCode = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertParishes")

            With Parameters
                .Add(New ParameterSQL("ParishCode", Me.ParishCode))
                .Add(New ParameterSQL("ParishName", Me.ParishName))
                .Add(New ParameterSQL("SubCountyCode", Me.SubCountyCode))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateParishes")

            With Parameters
                .Add(New ParameterSQL("ParishCode", Me.ParishCode))
                .Add(New ParameterSQL("ParishName", Me.ParishName))
                .Add(New ParameterSQL("SubCountyCode", Me.SubCountyCode))
            End With

            'For Audit Trail
            Me.SetLogObject("Parishes")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ParishCode = '" + Me.ParishCode + "'"
            Dim errorPart As String = "Parish Code: " + Me.ParishCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Parishes"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Parishes")

            Return Parameters

        End Function

        Private Function GetParishes(parishCode As String, subCountyCode As String) As DataSet

            If (parishCode <> "" OrElse parishCode <> String.Empty) And
                (subCountyCode = "" OrElse subCountyCode = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("ParishCode", parishCode))
                    .Add(New ParameterSQL("SubCountyCode", Nothing))
                End With

            ElseIf (parishCode = "" OrElse parishCode = String.Empty) And
                    (subCountyCode <> "" OrElse subCountyCode <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("ParishCode", Nothing))
                    .Add(New ParameterSQL("SubCountyCode", subCountyCode))
                End With

            ElseIf (parishCode = "" OrElse parishCode = String.Empty) And
                    (subCountyCode = "" OrElse subCountyCode = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("ParishCode", Nothing))
                    .Add(New ParameterSQL("SubCountyCode", Nothing))
                End With
            End If

            Return Me.Load("uspGetParishes", "Parishes", Parameters)

        End Function

        ''' <summary>
        ''' Gets aparish corresponding to the parish code
        ''' </summary>
        ''' <param name="parishCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetParishes(parishCode As String) As DataSet
            Return GetParishes(parishCode, String.Empty)
        End Function

        ''' <summary>
        ''' Gets parishes for agiven sub county
        ''' </summary>
        ''' <param name="subCountyCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetParishesBySubCountyCode(subCountyCode As String) As DataSet
            Return GetParishes(String.Empty, subCountyCode)
        End Function

        ''' <summary>
        ''' Gets all parishes
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetParishes() As DataSet
            Return GetParishes(String.Empty, String.Empty)
        End Function

#End Region

    End Class

    Public Class Villages : Inherits DBConnect

#Region " Fields "

        Private m_VillageCode As String
        Private m_VillageName As String
        Private m_ParishCode As String

#End Region

#Region " Properties "

        Public Property VillageCode() As String
            Get
                Return m_VillageCode
            End Get
            Set(Value As String)
                m_VillageCode = Value
            End Set
        End Property

        Public Property VillageName() As String
            Get
                Return m_VillageName
            End Get
            Set(Value As String)
                m_VillageName = Value
            End Set
        End Property

        Public Property ParishCode() As String
            Get
                Return m_ParishCode
            End Get
            Set(Value As String)
                m_ParishCode = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertVillages")

            With Parameters
                .Add(New ParameterSQL("VillageCode", Me.VillageCode))
                .Add(New ParameterSQL("VillageName", Me.VillageName))
                .Add(New ParameterSQL("ParishCode", Me.ParishCode))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateVillages")

            With Parameters
                .Add(New ParameterSQL("VillageCode", Me.VillageCode))
                .Add(New ParameterSQL("VillageName", Me.VillageName))
                .Add(New ParameterSQL("ParishCode", Me.ParishCode))
            End With

            'For Audit Trail
            Me.SetLogObject("Villages")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VillageCode = '" + Me.VillageCode + "'"
            Dim errorPart As String = "Village Code: " + Me.VillageCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Villages"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Villages")

            Return Parameters

        End Function

        Private Function GetVillages(villageCode As String, parishCode As String) As DataSet

            If villageCode <> "" OrElse villageCode <> String.Empty And
                (parishCode = "" OrElse parishCode = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("VillageCode", villageCode))
                    .Add(New ParameterSQL("ParishCode", Nothing))
                End With

            ElseIf (villageCode = "" OrElse villageCode = String.Empty) And
                (parishCode <> "" OrElse parishCode <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("VillageCode", Nothing))
                    .Add(New ParameterSQL("ParishCode", parishCode))
                End With

            ElseIf (villageCode = "" OrElse villageCode = String.Empty) And
                (parishCode = "" OrElse parishCode = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("VillageCode", Nothing))
                    .Add(New ParameterSQL("ParishCode", Nothing))
                End With
            End If

            Return Me.Load("uspGetVillages", "Villages", Parameters)

        End Function

        ''' <summary>
        ''' Gets avillage corresponding to agiven village code
        ''' </summary>
        ''' <param name="villageCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetVillages(villageCode As String) As DataSet
            Return GetVillages(villageCode, String.Empty)
        End Function

        ''' <summary>
        ''' Gets villages of agiven parish
        ''' </summary>
        ''' <param name="parishCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetVillagesByParishCode(parishCode As String) As DataSet
            Return GetVillages(String.Empty, parishCode)
        End Function

        ''' <summary>
        ''' gets all villages
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetVillages() As DataSet
            Return GetVillages(String.Empty, String.Empty)
        End Function

#End Region

    End Class

     Public Class Suppliers : Inherits DBConnect

#Region " Fields "

        Private m_SupplierNo As String
        Private m_SupplierName As String
        Private m_ContactPerson As String
        Private m_Address As String
        Private m_Phone As String

#End Region

#Region " Properties "

        Public Property SupplierNo() As String
            Get
                Return m_SupplierNo
            End Get
            Set(Value As String)
                m_SupplierNo = Value
            End Set
        End Property

        Public Property SupplierName() As String
            Get
                Return m_SupplierName
            End Get
            Set(Value As String)
                m_SupplierName = Value
            End Set
        End Property

        Public Property ContactPerson() As String
            Get
                Return m_ContactPerson
            End Get
            Set(Value As String)
                m_ContactPerson = Value
            End Set
        End Property

        Public Property Address() As String
            Get
                Return m_Address
            End Get
            Set(Value As String)
                m_Address = Value
            End Set
        End Property

        Public Property Phone() As String
            Get
                Return m_Phone
            End Get
            Set(Value As String)
                m_Phone = Value
            End Set
        End Property

      
#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertSuppliers")

            With Parameters
                .Add(New ParameterSQL("SupplierNo", Me.SupplierNo))
                .Add(New ParameterSQL("SupplierName", Me.SupplierName))
                .Add(New ParameterSQL("ContactPerson", Me.ContactPerson))
                .Add(New ParameterSQL("Address", Me.Address))
                .Add(New ParameterSQL("Phone", Me.Phone))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateSuppliers")

            With Parameters
                .Add(New ParameterSQL("SupplierNo", Me.SupplierNo))
                .Add(New ParameterSQL("SupplierName", Me.SupplierName))
                .Add(New ParameterSQL("ContactPerson", Me.ContactPerson))
                .Add(New ParameterSQL("Address", Me.Address))
                .Add(New ParameterSQL("Phone", Me.Phone))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("Suppliers")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "SupplierNo = '" + Me.SupplierNo + "'"
            Dim errorPart As String = "Supplier No: " + Me.SupplierNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Suppliers"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Suppliers")

            Return Parameters

        End Function

        ''' <summary>
        ''' Returns a Supplier for a given Supplier number
        ''' </summary>
        ''' <param name="supplierNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetSuppliers(supplierNo As String) As DataSet

            If (supplierNo = "" OrElse supplierNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("SupplierNo", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("SupplierNo", supplierNo))
                End With
            End If

            Return Me.Load("uspGetSuppliers", "Suppliers", Parameters)

        End Function

        ''' <summary>
        ''' Returns all Suppliers
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetSuppliers() As DataSet
            Return GetSuppliers(String.Empty)
        End Function

        Public Function GetNextSupplierID() As Integer

            With Parameters
                .Add(New ParameterSQL("SupplierID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextSupplierID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("SupplierID")) Then
                    Return CInt(Me.ReadData("SupplierID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function


#End Region

    End Class


    Public Class BankAccounts : Inherits DBConnect

#Region " Fields "

        Private m_AccountNo As String
        Private m_AccountName As String
        Private m_BankNameID As String
        Private m_CurrencyID As String
        

#End Region

#Region " Properties "

        Public Property AccountNo() As String
            Get
                Return m_AccountNo
            End Get
            Set(ByVal Value As String)
                m_AccountNo = Value
            End Set
        End Property

        Public Property AccountName() As String
            Get
                Return m_AccountName
            End Get
            Set(ByVal Value As String)
                m_AccountName = Value
            End Set
        End Property

        Public Property BankNameID() As String
            Get
                Return m_BankNameID
            End Get
            Set(ByVal Value As String)
                m_BankNameID = Value
            End Set
        End Property

        Public Property CurrencyID() As String
            Get
                Return m_CurrencyID
            End Get
            Set(ByVal Value As String)
                m_CurrencyID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertBankAccounts")

            With Parameters
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("AccountName", Me.AccountName))
                .Add(New ParameterSQL("BankNameID", Me.BankNameID))
                .Add(New ParameterSQL("CurrencyID", Me.CurrencyID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateBankAccounts")

            With Parameters
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("AccountName", Me.AccountName))
                .Add(New ParameterSQL("BankNameID", Me.BankNameID))
                .Add(New ParameterSQL("CurrencyID", Me.CurrencyID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))

            End With

            'For Audit Trail
            Me.SetLogObject("BankAccounts")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "AccountNo = '" + Me.AccountNo + "'"
            Dim errorPart As String = "Account No: " + Me.AccountNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "BankAccounts"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("BankAccounts")

            Return Parameters

        End Function

        Public Function GetBankAccounts(ByVal accountNo As String, ByVal bankNameID As String, ByVal accountName As String) As DataSet
            If Not String.IsNullOrEmpty(accountNo) AndAlso String.IsNullOrEmpty(bankNameID) AndAlso String.IsNullOrEmpty(accountName) Then

                With Parameters
                    .Add(New ParameterSQL("AccountNo", accountNo))
                    .Add(New ParameterSQL("BankNameID", Nothing))
                    .Add(New ParameterSQL("AccountName", Nothing))
                End With

            ElseIf String.IsNullOrEmpty(accountNo) AndAlso Not String.IsNullOrEmpty(bankNameID) AndAlso Not String.IsNullOrEmpty(accountName) Then

                With Parameters
                    .Add(New ParameterSQL("AccountNo", Nothing))
                    .Add(New ParameterSQL("BankNameID", bankNameID))
                    .Add(New ParameterSQL("AccountName", accountName))

                End With

            ElseIf String.IsNullOrEmpty(accountNo) AndAlso String.IsNullOrEmpty(accountName) AndAlso Not String.IsNullOrEmpty(bankNameID) Then
                With Parameters
                    .Add(New ParameterSQL("AccountNo", Nothing))
                    .Add(New ParameterSQL("BankNameID", bankNameID))
                    .Add(New ParameterSQL("AccountName", Nothing))

                End With

            ElseIf String.IsNullOrEmpty(accountNo) AndAlso String.IsNullOrEmpty(bankNameID) AndAlso String.IsNullOrEmpty(accountName) Then
                With Parameters
                    .Add(New ParameterSQL("AccountNo", Nothing))
                    .Add(New ParameterSQL("BankNameID", Nothing))
                    .Add(New ParameterSQL("AccountName", Nothing))

                End With

            End If

            Return Me.Load("uspGetBankAccounts", "BankAccounts", Parameters)

        End Function

        Public Function GetBankAccounts(ByVal accountNo As String) As DataSet
            Return Me.GetBankAccounts(accountNo, String.Empty, String.Empty)
        End Function

        Public Function GetBankAccountsByBankID(ByVal bankNameID As String) As DataSet
            Return Me.GetBankAccounts(String.Empty, bankNameID, String.Empty)
        End Function

        Public Function GetBankAccounts() As DataSet
            Return Me.GetBankAccounts(String.Empty, String.Empty, String.Empty)
        End Function

#End Region



    End Class

    Public Class RevenueStreams : Inherits DBConnect

#Region " Fields "

        Private m_RevenueStreamCode As String
        Private m_Name As String
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property RevenueStreamCode() As String
            Get
                Return m_RevenueStreamCode
            End Get
            Set(ByVal Value As String)
                m_RevenueStreamCode = Value
            End Set
        End Property

        Public Property Name() As String
            Get
                Return m_Name
            End Get
            Set(ByVal Value As String)
                m_Name = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(ByVal Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditRevenueStreams")

            With Parameters
                .Add(New ParameterSQL("RevenueStreamCode", Me.RevenueStreamCode))
                .Add(New ParameterSQL("Name", Me.Name))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateRevenueStreams")

            With Parameters
                .Add(New ParameterSQL("RevenueStreamCode", Me.RevenueStreamCode))
                .Add(New ParameterSQL("Name", Me.Name))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            'For Audit Trail
            Me.SetLogObject("RevenueStreams")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RevenueStreamCode = '" + Me.RevenueStreamCode + "'"
            Dim errorPart As String = "Revenue Stream Code: " + Me.RevenueStreamCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "RevenueStreams"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("RevenueStreams")

            Return Parameters

        End Function

        Public Function GetRevenueStreams(ByVal revenueStreamCode As String) As DataSet
            If (String.IsNullOrEmpty(revenueStreamCode)) Then
                With Parameters
                    .Add(New ParameterSQL("RevenueStreamCode", Nothing))
                End With


            Else
                With Parameters
                    .Add(New ParameterSQL("RevenueStreamCode", revenueStreamCode))
                End With
            End If
            Return Me.Load("uspGetRevenueStreams", "RevenueStreams", Parameters)
        End Function

        Public Function GetRevenueStreams() As DataSet
            Return Me.GetRevenueStreams(String.Empty)
        End Function
#End Region



    End Class


    Public Class Services : Inherits DBConnect

#Region " Fields "
        Private m_ServiceCode As String
        Private m_ServiceName As String
        Private m_ServicePointID As String
        Private m_ServiceBillAtID As String
        Private m_UnitCost As Decimal
        Private m_VATPercentage As Decimal
        Private m_StandardFee As Decimal
        Private m_RevenueStream As String
        Private m_Hidden As Boolean
#End Region

#Region " Properties "

        Public Property ServiceCode() As String
            Get
                Return m_ServiceCode
            End Get
            Set(Value As String)
                m_ServiceCode = Value
            End Set
        End Property

        Public Property ServiceName() As String
            Get
                Return m_ServiceName
            End Get
            Set(Value As String)
                m_ServiceName = Value
            End Set
        End Property

        Public Property ServicePointID() As String
            Get
                Return m_ServicePointID
            End Get
            Set(Value As String)
                m_ServicePointID = Value
            End Set
        End Property

        Public Property ServiceBillAtID() As String
            Get
                Return m_ServiceBillAtID
            End Get
            Set(Value As String)
                m_ServiceBillAtID = Value
            End Set
        End Property

        Public Property UnitCost As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(value As Decimal)
                m_UnitCost = value
            End Set
        End Property
        Public Property VATPercentage As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(value As Decimal)
                m_VATPercentage = value
            End Set
        End Property

        Public Property StandardFee() As Decimal
            Get
                Return m_StandardFee
            End Get
            Set(Value As Decimal)
                m_StandardFee = Value
            End Set
        End Property

        Public Property RevenueStream() As String
            Get
                Return m_RevenueStream
            End Get
            Set(Value As String)
                m_RevenueStream = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertServices")

            With Parameters
                .Add(New ParameterSQL("ServiceCode", Me.ServiceCode))
                .Add(New ParameterSQL("ServiceName", Me.ServiceName))
                .Add(New ParameterSQL("ServicePointID", Me.ServicePointID))
                .Add(New ParameterSQL("ServiceBillAtID", Me.ServiceBillAtID))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("StandardFee", Me.StandardFee))
                .Add(New ParameterSQL("RevenueStreamCode", Me.RevenueStream))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateServices")

            With Parameters
                .Add(New ParameterSQL("ServiceCode", Me.ServiceCode))
                .Add(New ParameterSQL("ServiceName", Me.ServiceName))
                .Add(New ParameterSQL("ServicePointID", Me.ServicePointID))
                .Add(New ParameterSQL("ServiceBillAtID", Me.ServiceBillAtID))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("StandardFee", Me.StandardFee))
                .Add(New ParameterSQL("RevenueStreamCode", Me.RevenueStream))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            'For Audit Trial
            Me.SetLogObject("Services")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ServiceCode = '" + Me.ServiceCode + "'"
            Dim errorPart As String = "Service Code: " + Me.ServiceCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Services"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trial
            Me.SetLogObject("Services")

            Return Parameters

        End Function

        ''' <summary>
        ''' gets services for aparticular service code if service point is empty or
        ''' gets all the services at aparticular service point if service code is empty
        ''' otherwise gets all the services.
        ''' </summary>
        ''' <param name="serviceCode"></param>
        ''' <param name="servicePointID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Private Function GetServices(serviceCode As String, servicePointID As String) As DataSet

            If (serviceCode <> "" OrElse serviceCode <> String.Empty) And
                (servicePointID = "" OrElse servicePointID = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("ServiceCode", serviceCode))
                    .Add(New ParameterSQL("ServicePointID", Nothing))
                End With

            ElseIf (serviceCode = "" OrElse serviceCode = String.Empty) And
                    (servicePointID <> "" OrElse servicePointID <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("ServiceCode", Nothing))
                    .Add(New ParameterSQL("ServicePointID", servicePointID))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("ServiceCode", Nothing))
                    .Add(New ParameterSQL("ServicePointID", Nothing))
                End With
            End If

            Return Me.Load("uspGetServices", "Services", Parameters)

        End Function

        ''' <summary>
        ''' Gets service for supplied service code
        ''' </summary>
        ''' <param name="serviceCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetServices(serviceCode As String) As DataSet
            Return Me.GetServices(serviceCode, String.Empty)
        End Function

        ''' <summary>
        ''' Gets all services
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetServices() As DataSet
            Return Me.GetServices(String.Empty, String.Empty)
        End Function

        ''' <summary>
        ''' Gets all services at a particular service point
        ''' </summary>
        ''' <param name="servicePointID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetServicesAtServicePoint(servicePointID As String) As DataSet
            Return Me.GetServices(String.Empty, servicePointID)
        End Function

        Public Function GetNextServiceID() As Integer

            With Parameters
                .Add(New ParameterSQL("ServiceID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextServiceID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("ServiceID")) Then
                    Return CInt(Me.ReadData("ServiceID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

#End Region

    End Class

    Public Class ServicesDrSpecialtyFee : Inherits DBConnect

#Region " Fields "

        Private m_ServiceCode As String
        Private m_DoctorSpecialtyID As String
        Private m_SpecialtyFee As Decimal
        Private m_CurrenciesID As String

#End Region

#Region " Properties "

        Public Property ServiceCode() As String
            Get
                Return m_ServiceCode
            End Get
            Set(Value As String)
                m_ServiceCode = Value
            End Set
        End Property

        Public Property DoctorSpecialtyID() As String
            Get
                Return m_DoctorSpecialtyID
            End Get
            Set(Value As String)
                m_DoctorSpecialtyID = Value
            End Set
        End Property

        Public Property SpecialtyFee() As Decimal
            Get
                Return m_SpecialtyFee
            End Get
            Set(Value As Decimal)
                m_SpecialtyFee = Value
            End Set
        End Property

        Public Property CurrenciesID() As String
            Get
                Return m_CurrenciesID
            End Get
            Set(ByVal Value As String)
                m_CurrenciesID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditServicesDrSpecialtyFee")

            With Parameters
                .Add(New ParameterSQL("ServiceCode", Me.ServiceCode))
                .Add(New ParameterSQL("DoctorSpecialtyID", Me.DoctorSpecialtyID))
                .Add(New ParameterSQL("SpecialtyFee", Me.SpecialtyFee))
                .Add(New ParameterSQL("CurrenciesID", Me.CurrenciesID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ServiceCode = '" + Me.ServiceCode + "' and DoctorSpecialtyID = '" + Me.DoctorSpecialtyID + "'"
            Dim errorPart As String = "Service Code: " + Me.ServiceCode + " and Doctor Specialty: " + Me.DoctorSpecialtyID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ServicesDrSpecialtyFee"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ServicesDrSpecialtyFee")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets all for services Dr. specialty fee if doctor Specialty ID is empty otherwise gets for agiven service code and doctor Specialty ID
        ''' </summary>
        ''' <param name="serviceCode"></param>
        ''' <param name="doctorSpecialtyID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetServicesDrSpecialtyFee(serviceCode As String, doctorSpecialtyID As String) As DataSet

            If (doctorSpecialtyID <> "" OrElse doctorSpecialtyID <> String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("ServiceCode", serviceCode))
                    .Add(New ParameterSQL("DoctorSpecialtyID", doctorSpecialtyID))
                End With

            ElseIf (doctorSpecialtyID = "" OrElse doctorSpecialtyID = String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("ServiceCode", serviceCode))
                    .Add(New ParameterSQL("DoctorSpecialtyID", Nothing))
                End With

            End If

            Return Me.Load("uspGetServicesDrSpecialtyFee", "ServicesDrSpecialtyFee", Parameters)

        End Function

        ''' <summary>
        ''' returns all the services dr specialty fee, corresponding to the supplied service code
        ''' </summary>
        ''' <param name="serviceCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetServicesDrSpecialtyFee(serviceCode As String) As DataSet
            Return GetServicesDrSpecialtyFee(serviceCode, String.Empty)
        End Function

#End Region

    End Class

    Public Class ServicesStaffFee : Inherits DBConnect

#Region " Fields "

        Private m_ServiceCode As String
        Private m_StaffNo As String
        Private m_StaffFee As Decimal
        Private m_CurrenciesID As String

#End Region

#Region " Properties "

        Public Property ServiceCode() As String
            Get
                Return m_ServiceCode
            End Get
            Set(Value As String)
                m_ServiceCode = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property StaffFee() As Decimal
            Get
                Return m_StaffFee
            End Get
            Set(Value As Decimal)
                m_StaffFee = Value
            End Set
        End Property

        Public Property CurrenciesID() As String
            Get
                Return m_CurrenciesID
            End Get
            Set(ByVal Value As String)
                m_CurrenciesID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditServicesStaffFee")

            With Parameters
                .Add(New ParameterSQL("ServiceCode", Me.ServiceCode))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("StaffFee", Me.StaffFee))
                .Add(New ParameterSQL("CurrenciesID", Me.CurrenciesID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ServiceCode = '" + Me.ServiceCode + "' and StaffNo = '" + Me.StaffNo + "'"
            Dim errorPart As String = "Service Code: " + Me.ServiceCode + " and Staff No: " + Me.StaffNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ServicesStaffFee"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ServicesStaffFee")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets all for services staff fee if staff No is empty otherwise gets for agiven service code and staff No
        ''' </summary>
        ''' <param name="serviceCode"></param>
        ''' <param name="staffNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetServicesStaffFee(serviceCode As String, staffNo As String) As DataSet

            If (staffNo <> "" OrElse staffNo <> String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("ServiceCode", serviceCode))
                    .Add(New ParameterSQL("StaffNo", staffNo))
                End With

            ElseIf (staffNo = "" OrElse staffNo = String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("ServiceCode", serviceCode))
                    .Add(New ParameterSQL("StaffNo", Nothing))
                End With

            End If

            Return Me.Load("uspGetServicesStaffFee", "ServicesStaffFee", Parameters)

        End Function

        ''' <summary>
        ''' returns all the services staff fee, corresponding to the supplied service code
        ''' </summary>
        ''' <param name="serviceCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetServicesStaffFee(serviceCode As String) As DataSet
            Return GetServicesStaffFee(serviceCode, String.Empty)
        End Function

#End Region

    End Class

    Public Class ServicesSpecialtyBillCustomFee : Inherits DBConnect

#Region " Fields "

#End Region

#Region " Auto-Implemented Properties "

        Public Property ServiceCode As String
        Public Property DoctorSpecialtyID As String
        Public Property AccountNo As String
        Public Property CustomFee As Decimal
        Public Property CurrenciesID As String

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditServicesSpecialtyBillCustomFee")

            With Parameters
                .Add(New ParameterSQL("ServiceCode", Me.ServiceCode))
                .Add(New ParameterSQL("DoctorSpecialtyID", Me.DoctorSpecialtyID))
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("CustomFee", Me.CustomFee))
                .Add(New ParameterSQL("CurrenciesID", Me.CurrenciesID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ServiceCode = '" + Me.ServiceCode + "' and DoctorSpecialtyID = '" + Me.DoctorSpecialtyID + "' and AccountNo = '" + Me.AccountNo + "'"
            Dim errorPart As String = "Service Code: " + Me.ServiceCode + " and Doctor Specialty: " + Me.DoctorSpecialtyID + " and Account No: " + Me.AccountNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ServicesSpecialtyBillCustomFee"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ServicesSpecialtyBillCustomFee")

            Return Parameters

        End Function

        ''' <summary>
        ''' Returns Doctor Speciality Bill Custom Fee for specified serviceCode, doctorSpecialty ID and accountNo
        ''' </summary>
        ''' <param name="serviceCode"></param>
        ''' <param name="doctorSpecialtyID"></param>
        ''' <param name="accountNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetServicesSpecialtyBillCustomFee(ByVal serviceCode As String, ByVal doctorSpecialtyID As String, ByVal accountNo As String) As DataSet

            If (Not String.IsNullOrEmpty(doctorSpecialtyID) AndAlso Not String.IsNullOrEmpty(accountNo)) Then

                With Parameters
                    .Add(New ParameterSQL("ServiceCode", serviceCode))
                    .Add(New ParameterSQL("DoctorSpecialtyID", doctorSpecialtyID))
                    .Add(New ParameterSQL("AccountNo", accountNo))
                End With

            ElseIf (String.IsNullOrEmpty(doctorSpecialtyID) AndAlso String.IsNullOrEmpty(accountNo)) Then

                With Parameters
                    .Add(New ParameterSQL("ServiceCode", serviceCode))
                    .Add(New ParameterSQL("DoctorSpecialtyID", Nothing))
                    .Add(New ParameterSQL("AccountNo", Nothing))
                End With

            Else

                With Parameters
                    .Add(New ParameterSQL("ServiceCode", serviceCode))
                    .Add(New ParameterSQL("DoctorSpecialtyID", doctorSpecialtyID))
                    .Add(New ParameterSQL("AccountNo", accountNo))
                End With

            End If

            Return Me.Load("uspGetServicesSpecialtyBillCustomFee", "ServicesSpecialtyBillCustomFee", Parameters)

        End Function

        ''' <summary>
        ''' Returns all Doctor Speciality Bill Custom Fees for specified serviceCode
        ''' </summary>
        ''' <param name="serviceCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetServicesSpecialtyBillCustomFee(ByVal serviceCode As String) As DataSet
            Return GetServicesSpecialtyBillCustomFee(serviceCode, String.Empty, String.Empty)
        End Function

#End Region

    End Class

    Public Class ServicesStaffBillCustomFee : Inherits DBConnect

#Region " Fields "

#End Region

#Region " Auto-Implemented Properties "

        Public Property ServiceCode As String
        Public Property StaffNo As String
        Public Property AccountNo As String
        Public Property CustomFee As Decimal
        Public Property CurrenciesID As String

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditServicesStaffBillCustomFee")

            With Parameters
                .Add(New ParameterSQL("ServiceCode", Me.ServiceCode))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("CustomFee", Me.CustomFee))
                .Add(New ParameterSQL("CurrenciesID", Me.CurrenciesID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ServiceCode = '" + Me.ServiceCode + "' and StaffNo = '" + Me.StaffNo + "' and AccountNo = '" + Me.AccountNo + "'"
            Dim errorPart As String = "Service Code: " + Me.ServiceCode + " and Staff No: " + Me.StaffNo + " and Account No: " + Me.AccountNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ServicesStaffBillCustomFee"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ServicesStaffBillCustomFee")

            Return Parameters

        End Function

        ''' <summary>
        ''' Returns Doctor Staff Bill Custom Fee for specified serviceCode, staffNo and accountNo
        ''' </summary>
        ''' <param name="serviceCode"></param>
        ''' <param name="StaffNo"></param>
        ''' <param name="accountNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetServicesStaffBillCustomFee(ByVal serviceCode As String, ByVal staffNo As String, ByVal accountNo As String) As DataSet

            If (Not String.IsNullOrEmpty(staffNo) AndAlso Not String.IsNullOrEmpty(accountNo)) Then

                With Parameters
                    .Add(New ParameterSQL("ServiceCode", serviceCode))
                    .Add(New ParameterSQL("StaffNo", staffNo))
                    .Add(New ParameterSQL("AccountNo", accountNo))
                End With

            ElseIf (String.IsNullOrEmpty(staffNo) AndAlso String.IsNullOrEmpty(accountNo)) Then

                With Parameters
                    .Add(New ParameterSQL("ServiceCode", serviceCode))
                    .Add(New ParameterSQL("StaffNo", Nothing))
                    .Add(New ParameterSQL("AccountNo", Nothing))
                End With

            Else

                With Parameters
                    .Add(New ParameterSQL("ServiceCode", serviceCode))
                    .Add(New ParameterSQL("StaffNo", staffNo))
                    .Add(New ParameterSQL("AccountNo", accountNo))
                End With

            End If

            Return Me.Load("uspGetServicesStaffBillCustomFee", "ServicesStaffBillCustomFee", Parameters)

        End Function

        ''' <summary>
        ''' Returns all Doctor Staff Bill Custom Fee for specified serviceCode
        ''' </summary>
        ''' <param name="serviceCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetServicesStaffBillCustomFee(ByVal serviceCode As String) As DataSet
            Return GetServicesStaffBillCustomFee(serviceCode, String.Empty, String.Empty)
        End Function

#End Region

    End Class

    Public Class ServicesSpecialtyCustomCode : Inherits DBConnect

#Region " Fields "

#End Region

#Region " Auto-Implemented Properties "

        Public Property ServiceCode As String
        Public Property DoctorSpecialtyID As String
        Public Property CustomCode As String

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditServicesSpecialtyCustomCode")

            With Parameters
                .Add(New ParameterSQL("ServiceCode", Me.ServiceCode))
                .Add(New ParameterSQL("DoctorSpecialtyID", Me.DoctorSpecialtyID))
                .Add(New ParameterSQL("CustomCode", Me.CustomCode))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ServiceCode = '" + Me.ServiceCode + "' and DoctorSpecialtyID = '" + Me.DoctorSpecialtyID + "'"
            Dim errorPart As String = "Service Code: " + Me.ServiceCode + " and Doctor Specialty: " + Me.DoctorSpecialtyID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ServicesSpecialtyCustomCode"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ServicesSpecialtyCustomCode")

            Return Parameters

        End Function

        ''' <summary>
        ''' Returns Doctor Speciality Custom Code for specified serviceCode and doctorSpecialtyID
        ''' </summary>
        ''' <param name="serviceCode"></param>
        ''' <param name="doctorSpecialtyID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetServicesSpecialtyCustomCode(ByVal serviceCode As String, ByVal doctorSpecialtyID As String) As DataSet

            If (Not String.IsNullOrEmpty(doctorSpecialtyID)) Then

                With Parameters
                    .Add(New ParameterSQL("ServiceCode", serviceCode))
                    .Add(New ParameterSQL("DoctorSpecialtyID", doctorSpecialtyID))
                End With

            ElseIf (String.IsNullOrEmpty(doctorSpecialtyID)) Then

                With Parameters
                    .Add(New ParameterSQL("ServiceCode", serviceCode))
                    .Add(New ParameterSQL("DoctorSpecialtyID", Nothing))
                End With

            Else

                With Parameters
                    .Add(New ParameterSQL("ServiceCode", serviceCode))
                    .Add(New ParameterSQL("DoctorSpecialtyID", doctorSpecialtyID))
                End With

            End If

            Return Me.Load("uspGetServicesSpecialtyCustomCode", "ServicesSpecialtyCustomCode", Parameters)

        End Function

        ''' <summary>
        ''' Returns all Doctor Speciality Custom Code for specified serviceCode
        ''' </summary>
        ''' <param name="serviceCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetServicesSpecialtyCustomCode(ByVal serviceCode As String) As DataSet
            Return GetServicesSpecialtyCustomCode(serviceCode, String.Empty)
        End Function

#End Region

    End Class

    Public Class DrugCategories : Inherits DBConnect

#Region " Fields "

        Private m_CategoryNo As String
        Private m_CategoryName As String
        Private m_VaryPrescribedQty As Boolean
        Private m_DefaultPrescribedQty As Integer
        Private m_DosageSeparator As String
        Private m_DosageCalculationID As String
        Private m_DosageFormat As String

#End Region

#Region " Properties "

        Public Property CategoryNo() As String
            Get
                Return m_CategoryNo
            End Get
            Set(Value As String)
                m_CategoryNo = Value
            End Set
        End Property

        Public Property CategoryName() As String
            Get
                Return m_CategoryName
            End Get
            Set(Value As String)
                m_CategoryName = Value
            End Set
        End Property

        Public Property VaryPrescribedQty() As Boolean
            Get
                Return m_VaryPrescribedQty
            End Get
            Set(Value As Boolean)
                m_VaryPrescribedQty = Value
            End Set
        End Property

        Public Property DefaultPrescribedQty() As Integer
            Get
                Return m_DefaultPrescribedQty
            End Get
            Set(Value As Integer)
                m_DefaultPrescribedQty = Value
            End Set
        End Property

        Public Property DosageSeparator() As String
            Get
                Return m_DosageSeparator
            End Get
            Set(Value As String)
                m_DosageSeparator = Value
            End Set
        End Property

        Public Property DosageCalculationID() As String
            Get
                Return m_DosageCalculationID
            End Get
            Set(Value As String)
                m_DosageCalculationID = Value
            End Set
        End Property

        Public Property DosageFormat() As String
            Get
                Return m_DosageFormat
            End Get
            Set(Value As String)
                m_DosageFormat = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertDrugCategories")

            With Parameters
                .Add(New ParameterSQL("CategoryNo", Me.CategoryNo))
                .Add(New ParameterSQL("CategoryName", Me.CategoryName))
                .Add(New ParameterSQL("VaryPrescribedQty", Me.VaryPrescribedQty))
                .Add(New ParameterSQL("DefaultPrescribedQty", Me.DefaultPrescribedQty))
                .Add(New ParameterSQL("DosageSeparator", Me.DosageSeparator))
                .Add(New ParameterSQL("DosageCalculationID", Me.DosageCalculationID))
                .Add(New ParameterSQL("DosageFormat", Me.DosageFormat))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateDrugCategories")

            With Parameters
                .Add(New ParameterSQL("CategoryNo", Me.CategoryNo))
                .Add(New ParameterSQL("CategoryName", Me.CategoryName))
                .Add(New ParameterSQL("VaryPrescribedQty", Me.VaryPrescribedQty))
                .Add(New ParameterSQL("DefaultPrescribedQty", Me.DefaultPrescribedQty))
                .Add(New ParameterSQL("DosageSeparator", Me.DosageSeparator))
                .Add(New ParameterSQL("DosageCalculationID", Me.DosageCalculationID))
                .Add(New ParameterSQL("DosageFormat", Me.DosageFormat))
            End With

            'For Audit Trail
            Me.SetLogObject("DrugCategories")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "CategoryNo = '" + Me.CategoryNo + "'"
            Dim errorPart As String = "Category No: " + Me.CategoryNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "DrugCategories"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("DrugCategories")

            Return Parameters

        End Function

        ''' <summary>
        ''' Returns drug categories corresponding to supplied category no
        ''' </summary>
        ''' <param name="categoryNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDrugCategories(categoryNo As String) As DataSet

            If categoryNo <> "" OrElse categoryNo <> String.Empty Then
                With Parameters
                    .Add(New ParameterSQL("CategoryNo", categoryNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("CategoryNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetDrugCategories", "DrugCategories", Parameters)

        End Function

        ''' <summary>
        ''' Returns all drug categories
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDrugCategories() As DataSet
            Return GetDrugCategories(String.Empty)
        End Function

#End Region

    End Class

    Public Class Drugs : Inherits DBConnect

#Region " Fields "

        Private m_DrugNo As String
        Private m_DrugName As String
        Private m_AlternateName As String
        Private m_CategoryNo As String
        Private m_GroupsID As String
        Private m_UnitMeasureID As String
        Private m_OrderLevel As Integer
        Private m_KeepingUnit As Integer
        Private m_UnitCost As Decimal
        Private m_VATPercentage As Decimal
        Private m_UnitPrice As Decimal
        Private m_LastUpdate As Date
        Private m_Halted As Boolean
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property DrugNo() As String
            Get
                Return m_DrugNo
            End Get
            Set(Value As String)
                m_DrugNo = Value
            End Set
        End Property

        Public Property DrugName() As String
            Get
                Return m_DrugName
            End Get
            Set(Value As String)
                m_DrugName = Value
            End Set
        End Property

        Public Property AlternateName() As String
            Get
                Return m_AlternateName
            End Get
            Set(Value As String)
                m_AlternateName = Value
            End Set
        End Property

        Public Property CategoryNo() As String
            Get
                Return m_CategoryNo
            End Get
            Set(Value As String)
                m_CategoryNo = Value
            End Set
        End Property

        Public Property GroupsID() As String
            Get
                Return m_GroupsID
            End Get
            Set(Value As String)
                m_GroupsID = Value
            End Set
        End Property

        Public Property UnitMeasureID() As String
            Get
                Return m_UnitMeasureID
            End Get
            Set(Value As String)
                m_UnitMeasureID = Value
            End Set
        End Property

        Public Property OrderLevel() As Integer
            Get
                Return m_OrderLevel
            End Get
            Set(Value As Integer)
                m_OrderLevel = Value
            End Set
        End Property

        Public Property KeepingUnit() As Integer
            Get
                Return m_KeepingUnit
            End Get
            Set(Value As Integer)
                m_KeepingUnit = Value
            End Set
        End Property

        Public Property UnitCost() As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(Value As Decimal)
                m_UnitCost = Value
            End Set
        End Property

        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property LastUpdate() As Date
            Get
                Return m_LastUpdate
            End Get
            Set(Value As Date)
                m_LastUpdate = Value
            End Set
        End Property

        Public Property Halted() As Boolean
            Get
                Return m_Halted
            End Get
            Set(Value As Boolean)
                m_Halted = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertDrugs")

            With Parameters
                .Add(New ParameterSQL("DrugNo", Me.DrugNo))
                .Add(New ParameterSQL("DrugName", Me.DrugName))
                .Add(New ParameterSQL("AlternateName", Me.AlternateName))
                .Add(New ParameterSQL("CategoryNo", Me.CategoryNo))
                .Add(New ParameterSQL("GroupsID", Me.GroupsID))
                .Add(New ParameterSQL("UnitMeasureID", Me.UnitMeasureID))
                .Add(New ParameterSQL("OrderLevel", Me.OrderLevel))
                .Add(New ParameterSQL("KeepingUnit", Me.KeepingUnit))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("LastUpdate", Me.LastUpdate))
                .Add(New ParameterSQL("Halted", Me.Halted))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateDrugs")

            With Parameters
                .Add(New ParameterSQL("DrugNo", Me.DrugNo))
                .Add(New ParameterSQL("DrugName", Me.DrugName))
                .Add(New ParameterSQL("AlternateName", Me.AlternateName))
                .Add(New ParameterSQL("CategoryNo", Me.CategoryNo))
                .Add(New ParameterSQL("GroupsID", Me.GroupsID))
                .Add(New ParameterSQL("UnitMeasureID", Me.UnitMeasureID))
                .Add(New ParameterSQL("OrderLevel", Me.OrderLevel))
                .Add(New ParameterSQL("KeepingUnit", Me.KeepingUnit))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("LastUpdate", Me.LastUpdate))
                .Add(New ParameterSQL("Halted", Me.Halted))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            'For Audit Trial
            Me.SetLogObject("Drugs")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "DrugNo = '" + Me.DrugNo + "'"
            Dim errorPart As String = "Drug No: " + Me.DrugNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Drugs"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trial
            Me.SetLogObject("Drugs")

            Return Parameters

        End Function

        Public Function GetDrugs(drugNo As String, _ARVsOnly As Boolean) As DataSet

            If drugNo <> "" OrElse drugNo <> String.Empty Then
                With Parameters
                    .Add(New ParameterSQL("DrugNo", drugNo))
                    .Add(New ParameterSQL("ARVsOnly", _ARVsOnly))
                End With

            ElseIf (drugNo = "" OrElse drugNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("DrugNo", Nothing))
                    .Add(New ParameterSQL("ARVsOnly", _ARVsOnly))
                End With
            End If

            Return Me.Load("uspGetDrugs", "Drugs", Parameters)

        End Function

        Public Function GetDrugs(drugNo As String) As DataSet
            Return Me.GetDrugs(drugNo, False)
        End Function

        Public Function GetDrugs() As DataSet
            Return Me.GetDrugs(String.Empty, False)
        End Function

        ''' <summary>
        ''' Gets drugs running out of stock
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetToOrderDrugs() As DataSet
            Return Me.Load("uspGetToOrderDrugs", "Drugs", Parameters)
        End Function

        ''' <summary>
        ''' Gets Items in given location
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>

        Public Function GetToCountToOrderInventoryLocation(LocationID As String, ItemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("LocationID", LocationID))
                .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
            End With
            Return Me.Load("uspGetToCountToOrderInventoryLocation", "Drugs", Parameters)

        End Function

        Public Function GetToCountToExpireInventoryLocation(LocationID As String, ItemCategoryID As String, ExpiryWarningDays As Integer) As DataSet

            With Parameters
                .Add(New ParameterSQL("LocationID", LocationID))
                .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                .Add(New ParameterSQL("ExpiryWarningDays", ExpiryWarningDays))
            End With
            Return Me.Load("uspGetToCountToExpireInventoryLocation", "Drugs", Parameters)

        End Function


        Public Function GetToCountToUnsavedINTDrugBillables() As Integer

            Dim records As Integer = 0

            With Parameters
                .Add(New ParameterSQL("Records", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetToCountToUnsavedINTDrugBillables", Parameters)

            If Not Me.ReadData Is Nothing Then
                If Not IsDBNull(Me.ReadData("Records")) Then
                    records = CInt(Me.ReadData("Records"))
                Else : records = 0
                End If
            Else : records = 0
            End If

            Return records

        End Function

        Public Function GetReceiveINTBillableItems(itemCode As String, itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
            End With

            Return Me.Load("uspGetReceiveINTBillableItems", "INTBillables", Parameters)

        End Function

        ''' <summary>
        ''' Counts drugs running out of stock
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function CountToOrderDrugs() As Integer

            Dim records As Integer = 0

            With Parameters
                .Add(New ParameterSQL("Records", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspCountToOrderDrugs", Parameters)

            If Not Me.ReadData Is Nothing Then
                If Not IsDBNull(Me.ReadData("Records")) Then
                    records = CInt(Me.ReadData("Records"))
                Else : records = 0
                End If
            Else : records = 0
            End If

            Return records

        End Function


        ''' <summary>
        ''' Counts drugs running out of stock per location
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function CountToOrderInventoryLocation(ItemCategoryID As String, LocationID As String) As Integer

            Dim records As Integer = 0

            With Parameters
                .Add(New ParameterSQL("LocationID", LocationID))
                .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                .Add(New ParameterSQL("Records", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspCountToOrderInventoryLocation", Parameters)

            If Not Me.ReadData Is Nothing Then
                If Not IsDBNull(Me.ReadData("Records")) Then
                    records = CInt(Me.ReadData("Records"))
                Else : records = 0
                End If
            Else : records = 0
            End If

            Return records

        End Function


        ''' <summary>
        ''' Gets drugs to expire or already expired
        ''' </summary>
        ''' <param name="expiryWarningDays"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetToExpireDrugs(expiryWarningDays As Integer) As DataSet

            With Parameters
                .Add(New ParameterSQL("ExpiryWarningDays", expiryWarningDays))
            End With
            Return Me.Load("uspGetToExpireDrugs", "Drugs", Parameters)

        End Function

        ''' <summary>
        ''' Counts drugs to expire or already expired
        ''' </summary>
        ''' <param name="expiryWarningDays"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function CountToExpireDrugs(expiryWarningDays As Integer) As Integer

            Dim records As Integer = 0

            With Parameters
                .Add(New ParameterSQL("ExpiryWarningDays", expiryWarningDays))
                .Add(New ParameterSQL("Records", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspCountToExpireDrugs", Parameters)

            If Not Me.ReadData Is Nothing Then
                If Not IsDBNull(Me.ReadData("Records")) Then
                    records = CInt(Me.ReadData("Records"))
                Else : records = 0
                End If
            Else : records = 0
            End If

            Return records

        End Function


        ''' <summary>
        ''' Counts drugs to expire or already expired Per Location
        ''' </summary>
        ''' <param name="expiryWarningDays"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function CountToExpireInventoryLocation(ItemCategoryID As String, LocationID As String, expiryWarningDays As Integer) As Integer

            Dim records As Integer = 0

            With Parameters
                .Add(New ParameterSQL("ItemCategoryID", ItemCategoryID))
                .Add(New ParameterSQL("LocationID", LocationID))
                .Add(New ParameterSQL("ExpiryWarningDays", expiryWarningDays))
                .Add(New ParameterSQL("Records", SqlDbType.Int))

            End With

            Me.ReadData = Read("uspCountToExpireInventoryLocation", Parameters)

            If Not Me.ReadData Is Nothing Then
                If Not IsDBNull(Me.ReadData("Records")) Then
                    records = CInt(Me.ReadData("Records"))
                Else : records = 0
                End If
            Else : records = 0
            End If

            Return records

        End Function


        ''' <summary>
        ''' Get Drug Stock Card for apecified period and supplied drug at the supplied location ID
        ''' </summary>
        ''' <param name="startDateTime"></param>
        ''' <param name="endDateTime"></param>
        ''' <param name="drugNo"></param>
        ''' <param name="locationID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDrugStockCard(startDateTime As Date, endDateTime As Date, drugNo As String, locationID As String, loginID As String) As DataSet

            If Not String.IsNullOrEmpty(locationID) AndAlso String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("DrugNo", drugNo))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
            ElseIf Not String.IsNullOrEmpty(locationID) AndAlso Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("DrugNo", drugNo))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
            ElseIf String.IsNullOrEmpty(locationID) AndAlso Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("DrugNo", drugNo))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
            ElseIf String.IsNullOrEmpty(locationID) AndAlso String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("DrugNo", drugNo))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
            End If

            Return Me.Load("uspGetDrugStockCard", "Drugs", Parameters)

        End Function

        ''' <summary>
        ''' Get Drug Stock Card for apecified period and supplied drug for all locations
        ''' </summary>
        ''' <param name="startDateTime"></param>
        ''' <param name="endDateTime"></param>
        ''' <param name="drugNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDrugStockCard(startDateTime As Date, endDateTime As Date, drugNo As String) As DataSet
            Return GetDrugStockCard(startDateTime, endDateTime, drugNo, String.Empty, String.Empty)
        End Function

        ''' <summary>
        ''' Get Drug Inventory summary for apecified period and supplied drug at the supplied location ID
        ''' </summary>
        ''' <param name="startDateTime"></param>
        ''' <param name="endDateTime"></param>
        ''' <param name="locationID"></param>
        ''' <param name="drugNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDrugPeriodicInventory(startDateTime As Date, endDateTime As Date, locationID As String, drugNo As String) As DataSet

            If Not String.IsNullOrEmpty(drugNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("DrugNo", drugNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("DrugNo", Nothing))
                End With

            End If

            Return Me.Load("uspGetDrugPeriodicInventory", "Drugs", Parameters)

        End Function

        ''' <summary>
        ''' Gets for all drugs Inventory summary for apecified period at specified location ID
        ''' </summary>
        ''' <param name="startDateTime"></param>
        ''' <param name="endDateTime"></param>
        ''' <param name="locationID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDrugPeriodicInventory(startDateTime As Date, endDateTime As Date, locationID As String) As DataSet
            Return GetDrugPeriodicInventory(startDateTime, endDateTime, locationID, String.Empty)
        End Function

        Public Function GetNextDrugID() As Integer

            With Parameters
                .Add(New ParameterSQL("DrugID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextDrugID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("DrugID")) Then
                    Return CInt(Me.ReadData("DrugID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

        Public Function GetDrugsToPrescribebyCategory(groupsID As String) As DataSet


            With Parameters
                .Add(New ParameterSQL("GroupsID", groupsID))

            End With

            Return Me.Load("uspGetDrugsToPrescribebyCategory", "Drugs", Parameters)

        End Function

        Public Function GetInvEXT(ByVal itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))

            End With

            Return Me.Load("uspGetInventoryEXT", "InventoryEXT", Parameters)

        End Function


        Public Function GetReceiveINTBillables(ByVal itemCategoryID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))

            End With

            Return Me.Load("uspGetReceiveINTBillables", "INTBillables", Parameters)

        End Function


        Public Function GetAllPendingOrderDetails(locationID As String) As Integer

            Dim records As Integer = 0

            With Parameters
                .Add(New ParameterSQL("FromLocationID", locationID))
                .Add(New ParameterSQL("Records", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetAllPendingOrderDetails", Parameters)

            If Not Me.ReadData Is Nothing Then
                If Not IsDBNull(Me.ReadData("Records")) Then
                    records = CInt(Me.ReadData("Records"))
                Else : records = 0
                End If
            Else : records = 0
            End If

            Return records

        End Function
#End Region

    End Class

    Public Class MappedCodesFinance : Inherits DBConnect

#Region " Fields "

        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_AccountTypeID As String
        Private m_AccountNo As String
        Private m_ItemName As String

#End Region

#Region " Properties "

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property AccountTypeID() As String
            Get
                Return m_AccountTypeID
            End Get
            Set(ByVal Value As String)
                m_AccountTypeID = Value
            End Set
        End Property

        Public Property AccountNo() As String
            Get
                Return m_AccountNo
            End Get
            Set(ByVal Value As String)
                m_AccountNo = Value
            End Set
        End Property

        Public Property ItemName() As String
            Get
                Return m_ItemName
            End Get
            Set(ByVal Value As String)
                m_ItemName = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertMappedCodesFinance")

            With Parameters
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("AccountTypeID", Me.AccountTypeID))
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("ItemName", Me.ItemName))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("Username", Me.Username))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateMappedCodesFinance")

            With Parameters
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("AccountTypeID", Me.AccountTypeID))
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("ItemName", Me.ItemName))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("Username", Me.Username))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("MappedCodesFinance")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "' and AccountTypeID = '" + Me.AccountTypeID + "'"
            Dim errorPart As String = "Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID + " and Account Type: " + Me.AccountTypeID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "MappedCodesFinance"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("MappedCodesFinance")

            Return Parameters

        End Function


        Public Function GetMappedCodesFinance(ByVal itemCode As String, ByVal itemCategoryID As String, ByVal accountTypeID As String) As DataSet
            If String.IsNullOrEmpty(itemCode) Then
                With Parameters
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("AccountTypeID", accountTypeID))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                    .Add(New ParameterSQL("AccountTypeID", accountTypeID))
                End With
            End If


            Return Me.Load("uspGetMappedCodesFinance", "MappedCodesFinance", Parameters)

        End Function


        Public Function GetMappedCodesFinance(ByVal itemCategoryID As String, ByVal accountTypeID As String) As DataSet

            Return Me.GetMappedCodesFinance(String.Empty, itemCategoryID, accountTypeID)

        End Function

#End Region

    End Class

    Public Class AlternateDrugs : Inherits DBConnect

#Region " Fields "

        Private m_DrugNo As String
        Private m_AlternateDrugNo As String

#End Region

#Region " Properties "

        Public Property DrugNo() As String
            Get
                Return m_DrugNo
            End Get
            Set(Value As String)
                m_DrugNo = Value
            End Set
        End Property

        Public Property AlternateDrugNo() As String
            Get
                Return m_AlternateDrugNo
            End Get
            Set(Value As String)
                m_AlternateDrugNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditAlternateDrugs")

            With Parameters
                .Add(New ParameterSQL("DrugNo", Me.DrugNo))
                .Add(New ParameterSQL("AlternateDrugNo", Me.AlternateDrugNo))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "DrugNo = '" + Me.DrugNo + "' and AlternateDrugNo = '" + Me.AlternateDrugNo + "'"
            errorPart = "DrugNo: " + Me.DrugNo + " and Alternate Drug No: " + Me.AlternateDrugNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "AlternateDrugs"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("AlternateDrugs")

            Return Parameters

        End Function

        Public Function GetAlternateDrugs(drugNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("DrugNo", drugNo))
            End With

            Return Me.Load("uspGetAlternateDrugs", "AlternateDrugs", Parameters)

        End Function

#End Region

    End Class

    Public Class ConsumableItems : Inherits DBConnect

#Region " Fields "

        Private m_ConsumableNo As String
        Private m_ConsumableName As String
        Private m_AlternateName As String
        Private m_UnitMeasureID As String
        Private m_ConsumableCategoryID As String
        Private m_OrderLevel As Integer
        Private m_KeepingUnit As Integer
        Private m_UnitCost As Decimal
        Private m_VATPercentage As Decimal 'added 26/08/16
        Private m_UnitPrice As Decimal
        Private m_LastUpdate As Date
        Private m_Halted As Boolean
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property ConsumableNo() As String
            Get
                Return m_ConsumableNo
            End Get
            Set(Value As String)
                m_ConsumableNo = Value
            End Set
        End Property

        Public Property ConsumableName() As String
            Get
                Return m_ConsumableName
            End Get
            Set(Value As String)
                m_ConsumableName = Value
            End Set
        End Property

        Public Property AlternateName() As String
            Get
                Return m_AlternateName
            End Get
            Set(Value As String)
                m_AlternateName = Value
            End Set
        End Property

        Public Property UnitMeasureID() As String
            Get
                Return m_UnitMeasureID
            End Get
            Set(Value As String)
                m_UnitMeasureID = Value
            End Set
        End Property

        Public Property ConsumableCategoryID() As String
            Get
                Return m_ConsumableCategoryID
            End Get
            Set(Value As String)
                m_ConsumableCategoryID = Value
            End Set
        End Property

        Public Property OrderLevel() As Integer
            Get
                Return m_OrderLevel
            End Get
            Set(Value As Integer)
                m_OrderLevel = Value
            End Set
        End Property

        Public Property KeepingUnit() As Integer
            Get
                Return m_KeepingUnit
            End Get
            Set(Value As Integer)
                m_KeepingUnit = Value
            End Set
        End Property

        Public Property UnitCost() As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(Value As Decimal)
                m_UnitCost = Value
            End Set
        End Property

        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property LastUpdate() As Date
            Get
                Return m_LastUpdate
            End Get
            Set(Value As Date)
                m_LastUpdate = Value
            End Set
        End Property

        Public Property Halted() As Boolean
            Get
                Return m_Halted
            End Get
            Set(Value As Boolean)
                m_Halted = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertConsumableItems")

            With Parameters
                .Add(New ParameterSQL("ConsumableNo", Me.ConsumableNo))
                .Add(New ParameterSQL("ConsumableName", Me.ConsumableName))
                .Add(New ParameterSQL("AlternateName", Me.AlternateName))
                .Add(New ParameterSQL("UnitMeasureID", Me.UnitMeasureID))
                .Add(New ParameterSQL("ConsumableCategoryID", Me.ConsumableCategoryID))
                .Add(New ParameterSQL("OrderLevel", Me.OrderLevel))
                .Add(New ParameterSQL("KeepingUnit", Me.KeepingUnit))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("LastUpdate", Me.LastUpdate))
                .Add(New ParameterSQL("Halted", Me.Halted))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateConsumableItems")

            With Parameters
                .Add(New ParameterSQL("ConsumableNo", Me.ConsumableNo))
                .Add(New ParameterSQL("ConsumableName", Me.ConsumableName))
                .Add(New ParameterSQL("AlternateName", Me.AlternateName))
                .Add(New ParameterSQL("UnitMeasureID", Me.UnitMeasureID))
                .Add(New ParameterSQL("ConsumableCategoryID", Me.ConsumableCategoryID))
                .Add(New ParameterSQL("OrderLevel", Me.OrderLevel))
                .Add(New ParameterSQL("KeepingUnit", Me.KeepingUnit))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("LastUpdate", Me.LastUpdate))
                .Add(New ParameterSQL("Halted", Me.Halted))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            'For Audit Trail
            Me.SetLogObject("ConsumableItems")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ConsumableNo = '" + Me.ConsumableNo + "'"
            Dim errorPart As String = "Consumable No: " + Me.ConsumableNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ConsumableItems"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ConsumableItems")

            Return Parameters

        End Function


        ''' <summary>
        ''' Gets Consumable items corresponding to supplied Consumable No
        ''' </summary>
        ''' <param name="consumableNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetConsumableItems(consumableNo As String) As DataSet

            If String.IsNullOrEmpty(consumableNo) Then
                With Parameters
                    .Add(New ParameterSQL("ConsumableNo", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ConsumableNo", consumableNo))
                End With
            End If

            Return Me.Load("uspGetConsumableItems", "ConsumableItems", Parameters)

        End Function

        ''' <summary>
        ''' Gets all Consumable items that are not hidden
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetConsumableItems() As DataSet
            Return GetConsumableItems(String.Empty)
        End Function

        ''' <summary>
        ''' Gets consumable items running out of stock
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetToOrderConsumableItems() As DataSet
            Return Me.Load("uspGetToOrderConsumableItems", "ConsumableItems", Parameters)
        End Function

        ''' <summary>
        ''' Counts consumable items running out of stock
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function CountToOrderConsumableItems() As Integer

            Dim records As Integer = 0

            With Parameters
                .Add(New ParameterSQL("Records", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspCountToOrderConsumableItems", Parameters)

            If Not Me.ReadData Is Nothing Then
                If Not IsDBNull(Me.ReadData("Records")) Then
                    records = CInt(Me.ReadData("Records"))
                Else : records = 0
                End If
            Else : records = 0
            End If

            Return records

        End Function

        ''' <summary>
        ''' Gets consumable items to expire or already expired
        ''' </summary>
        ''' <param name="expiryWarningDays"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetToExpireConsumableItems(expiryWarningDays As Integer) As DataSet

            With Parameters
                .Add(New ParameterSQL("ExpiryWarningDays", expiryWarningDays))
            End With
            Return Me.Load("uspGetToExpireConsumableItems", "ConsumableItems", Parameters)

        End Function

        ''' <summary>
        ''' Counts consumable items to expire or already expired
        ''' </summary>
        ''' <param name="expiryWarningDays"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function CountToExpireConsumableItems(expiryWarningDays As Integer) As Integer

            Dim records As Integer = 0

            With Parameters
                .Add(New ParameterSQL("ExpiryWarningDays", expiryWarningDays))
                .Add(New ParameterSQL("Records", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspCountToExpireConsumableItems", Parameters)

            If Not Me.ReadData Is Nothing Then
                If Not IsDBNull(Me.ReadData("Records")) Then
                    records = CInt(Me.ReadData("Records"))
                Else : records = 0
                End If
            Else : records = 0
            End If

            Return records

        End Function

        ''' <summary>
        ''' Get Consumable Stock Card for apecified period and supplied consumable item at the supplied location ID
        ''' </summary>
        ''' <param name="startDateTime"></param>
        ''' <param name="endDateTime"></param>
        ''' <param name="consumableNo"></param>
        ''' <param name="locationID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>

        Public Function GetConsumableStockCard(startDateTime As Date, endDateTime As Date, consumableNo As String, locationID As String, loginID As String) As DataSet
            If Not String.IsNullOrEmpty(locationID) AndAlso String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("ConsumableNo", consumableNo))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
            ElseIf Not String.IsNullOrEmpty(locationID) AndAlso Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("consumableNo", consumableNo))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
            ElseIf String.IsNullOrEmpty(locationID) AndAlso Not String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("consumableNo", consumableNo))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", loginID))
                End With
            ElseIf String.IsNullOrEmpty(locationID) AndAlso String.IsNullOrEmpty(loginID) Then
                With Parameters
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("consumableNo", consumableNo))
                    .Add(New ParameterSQL("LocationID", Nothing))
                    .Add(New ParameterSQL("LoginID", Nothing))
                End With
            End If

            Return Me.Load("uspGetConsumableStockCard", "ConsumableItems", Parameters)

        End Function

        ''' <summary>
        ''' Get Consumable Stock Card for apecified period and supplied consumable item for all locations
        ''' </summary>
        ''' <param name="startDateTime"></param>
        ''' <param name="endDateTime"></param>
        ''' <param name="consumableNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetConsumableStockCard(startDateTime As Date, endDateTime As Date, consumableNo As String) As DataSet
            Return GetConsumableStockCard(startDateTime, endDateTime, consumableNo, String.Empty, String.Empty)

        End Function

        ''' <summary>
        ''' Get Consumable Inventory summary for apecified period and supplied Consumable at the supplied location ID
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <param name="locationID"></param>
        ''' <param name="consumableNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetConsumablePeriodicInventory(startDate As Date, endDate As Date, locationID As String, consumableNo As String) As DataSet

            If Not String.IsNullOrEmpty(consumableNo) Then
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("ConsumableNo", consumableNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("LocationID", locationID))
                    .Add(New ParameterSQL("ConsumableNo", Nothing))
                End With

            End If

            Return Me.Load("uspGetConsumablePeriodicInventory", "ConsumableItems", Parameters)

        End Function

        ''' <summary>
        ''' Gets for all consumable items Inventory summary for apecified period at specified location ID
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <param name="locationID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetConsumablePeriodicInventory(startDate As Date, endDate As Date, locationID As String) As DataSet
            Return GetConsumablePeriodicInventory(startDate, endDate, locationID, String.Empty)
        End Function

        Public Function GetNextConsumableID() As Integer

            With Parameters
                .Add(New ParameterSQL("ConsumableID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextConsumableID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("ConsumableID")) Then
                    Return CInt(Me.ReadData("ConsumableID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

#End Region

    End Class

    Public Class ItemLocationOrderLevels : Inherits DBConnect

#Region " Fields "

        Private m_LocationID As String
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_LocationOrderLevel As Integer

#End Region

#Region " Properties "

        Public Property LocationID() As String
            Get
                Return m_LocationID
            End Get
            Set(ByVal Value As String)
                m_LocationID = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property LocationOrderLevel() As Integer
            Get
                Return m_LocationOrderLevel
            End Get
            Set(ByVal Value As Integer)
                m_LocationOrderLevel = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditItemLocationOrderLevels")

            With Parameters
                .Add(New ParameterSQL("LocationID", Me.LocationID))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("LocationOrderLevel", Me.LocationOrderLevel))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "LocationID = '" + Me.LocationID + "' and ItemCategoryID = '" + Me.ItemCategoryID + "' and ItemCode = '" + Me.ItemCode + "'"
            Dim errorPart As String = "Location: " + Me.LocationID + " and Item Category: " + Me.ItemCategoryID + " and ItemCode: " + Me.ItemCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ItemLocationOrderLevels"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ItemLocationOrderLevels")

            Return Parameters

        End Function

        Public Function GetItemLocationOrderLevels(ByVal itemCategoryID As String, ByVal itemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("ItemCode", itemCode))
            End With

            Return Me.Load("uspGetItemLocationOrderLevels", "ItemLocationOrderLevels", Parameters)

        End Function

#End Region

    End Class

    Public Class Procedures : Inherits DBConnect

#Region " Fields "

        Private m_ProcedureCode As String
        Private m_ProcedureName As String
        Private m_ShortName As String
        Private m_ProcedureCategoryID As String
        Private m_UnitPrice As Decimal
        Private m_UnitCost As Decimal
        Private m_VATPercentage As Decimal
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property ProcedureCode() As String
            Get
                Return m_ProcedureCode
            End Get
            Set(Value As String)
                m_ProcedureCode = Value
            End Set
        End Property

        Public Property ProcedureName() As String
            Get
                Return m_ProcedureName
            End Get
            Set(Value As String)
                m_ProcedureName = Value
            End Set
        End Property

        Public Property ShortName() As String
            Get
                Return m_ShortName
            End Get
            Set(Value As String)
                m_ShortName = Value
            End Set
        End Property

        Public Property ProcedureCategoryID() As String
            Get
                Return m_ProcedureCategoryID
            End Get
            Set(ByVal Value As String)
                m_ProcedureCategoryID = Value
            End Set
        End Property

        Public Property UnitCost() As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(Value As Decimal)
                m_UnitCost = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertProcedures")

            With Parameters
                .Add(New ParameterSQL("ProcedureCode", Me.ProcedureCode))
                .Add(New ParameterSQL("ProcedureName", Me.ProcedureName))
                .Add(New ParameterSQL("ShortName", Me.ShortName))
                .Add(New ParameterSQL("ProcedureCategoryID", Me.ProcedureCategoryID))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateProcedures")

            With Parameters
                .Add(New ParameterSQL("ProcedureCode", Me.ProcedureCode))
                .Add(New ParameterSQL("ProcedureName", Me.ProcedureName))
                .Add(New ParameterSQL("ShortName", Me.ShortName))
                .Add(New ParameterSQL("ProcedureCategoryID", Me.ProcedureCategoryID))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            'For Audit Trail
            Me.SetLogObject("Procedures")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "ProcedureCode = '" + Me.ProcedureCode + "'"
            errorPart = "Procedure Code: " + Me.ProcedureCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Procedures"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Procedures")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets a procedure for the supplied procedure code
        ''' </summary>
        ''' <param name="procedureCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetProcedures(procedureCode As String) As DataSet

            If (procedureCode = "" OrElse procedureCode = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("ProcedureCode", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ProcedureCode", procedureCode))
                End With
            End If

            Return Me.Load("uspGetProcedures", "Procedures", Parameters)

        End Function

        ''' <summary>
        ''' Returns all the procedures that are not hidden
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetProcedures() As DataSet
            Return GetProcedures(String.Empty)
        End Function

        Public Function GetNextProcedureID() As Integer

            With Parameters
                .Add(New ParameterSQL("ProcedureID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextProcedureID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("ProcedureID")) Then
                    Return CInt(Me.ReadData("ProcedureID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function


#End Region

    End Class

    Public Class DentalServices : Inherits DBConnect

#Region " Fields "

        Private m_DentalCode As String
        Private m_DentalName As String
        Private m_DentalCategoryID As String
        Private m_UnitPrice As Decimal
        Private m_VATPercentage As Decimal
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property DentalCode() As String
            Get
                Return m_DentalCode
            End Get
            Set(Value As String)
                m_DentalCode = Value
            End Set
        End Property

        Public Property DentalName() As String
            Get
                Return m_DentalName
            End Get
            Set(Value As String)
                m_DentalName = Value
            End Set
        End Property

        Public Property DentalCategoryID() As String
            Get
                Return m_DentalCategoryID
            End Get
            Set(Value As String)
                m_DentalCategoryID = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property
        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property


        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertDentalServices")

            With Parameters
                .Add(New ParameterSQL("DentalCode", Me.DentalCode))
                .Add(New ParameterSQL("DentalName", Me.DentalName))
                .Add(New ParameterSQL("DentalCategoryID", Me.DentalCategoryID))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateDentalServices")

            With Parameters
                .Add(New ParameterSQL("DentalCode", Me.DentalCode))
                .Add(New ParameterSQL("DentalName", Me.DentalName))
                .Add(New ParameterSQL("DentalCategoryID", Me.DentalCategoryID))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            'For Audit Trail
            Me.SetLogObject("DentalServices")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "DentalCode = '" + Me.DentalCode + "'"
            Dim errorPart As String = "Dental Code: " + Me.DentalCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "DentalServices"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("DentalServices")

            Return Parameters

        End Function

        Private Function GetDentalServices(dentalCode As String, dentalCategoryID As String) As DataSet

            If Not String.IsNullOrEmpty(dentalCode) Then
                With Parameters
                    .Add(New ParameterSQL("DentalCode", dentalCode))
                    .Add(New ParameterSQL("DentalCategoryID", Nothing))
                End With

            ElseIf String.IsNullOrEmpty(dentalCode) And Not String.IsNullOrEmpty(dentalCategoryID) Then
                With Parameters
                    .Add(New ParameterSQL("DentalCode", Nothing))
                    .Add(New ParameterSQL("DentalCategoryID", dentalCategoryID))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("DentalCode", Nothing))
                    .Add(New ParameterSQL("DentalCategoryID", Nothing))
                End With
            End If

            Return Me.Load("uspGetDentalServices", "DentalServices", Parameters)

        End Function

        ''' <summary>
        ''' Gets a dental service for the supplied dental code
        ''' </summary>
        ''' <param name="dentalCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDentalServices(dentalCode As String) As DataSet
            Return GetDentalServices(dentalCode, String.Empty)
        End Function

        ''' <summary>
        ''' Returns all the dental services that are not hidden
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDentalServices() As DataSet
            Return GetDentalServices(String.Empty, String.Empty)
        End Function

        ''' <summary>
        ''' Gets all dental services for supplied dental category
        ''' </summary>
        ''' <param name="dentalCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDentalServicesByCategory(dentalCategoryID As String) As DataSet
            Return GetDentalServices(String.Empty, dentalCategoryID)
        End Function

        Public Function GetNextDentalID() As Integer

            With Parameters
                .Add(New ParameterSQL("DentalID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextDentalID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("DentalID")) Then
                    Return CInt(Me.ReadData("DentalID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

#End Region

    End Class

    Public Class TheatreServices : Inherits DBConnect

#Region " Fields "

        Private m_TheatreCode As String
        Private m_TheatreName As String
        Private m_UnitPrice As Decimal
        Private m_VATPercentage As Decimal
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property TheatreCode() As String
            Get
                Return m_TheatreCode
            End Get
            Set(Value As String)
                m_TheatreCode = Value
            End Set
        End Property

        Public Property TheatreName() As String
            Get
                Return m_TheatreName
            End Get
            Set(Value As String)
                m_TheatreName = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertTheatreServices")

            With Parameters
                .Add(New ParameterSQL("TheatreCode", Me.TheatreCode))
                .Add(New ParameterSQL("TheatreName", Me.TheatreName))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateTheatreServices")

            With Parameters
                .Add(New ParameterSQL("TheatreCode", Me.TheatreCode))
                .Add(New ParameterSQL("TheatreName", Me.TheatreName))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            'For Audit Trail
            Me.SetLogObject("TheatreServices")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "TheatreCode = '" + Me.TheatreCode + "'"
            Dim errorPart As String = "Theatre Code: " + Me.TheatreCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "TheatreServices"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("TheatreServices")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets Theatre services corresponding to supplied Theatre code
        ''' </summary>
        ''' <param name="theatreCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetTheatreServices(theatreCode As String) As DataSet

            If String.IsNullOrEmpty(theatreCode) Then
                With Parameters
                    .Add(New ParameterSQL("TheatreCode", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("TheatreCode", theatreCode))
                End With
            End If

            Return Me.Load("uspGetTheatreServices", "TheatreServices", Parameters)

        End Function

        ''' <summary>
        ''' Gets all Theatre services that are not hidden
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetTheatreServices() As DataSet
            Return GetTheatreServices(String.Empty)
        End Function

        Public Function GetNextTheatreID() As Integer

            With Parameters
                .Add(New ParameterSQL("TheatreID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextTheatreID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("TheatreID")) Then
                    Return CInt(Me.ReadData("TheatreID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

#End Region

    End Class

    Public Class EyeServices : Inherits DBConnect

#Region " Fields "

        Private m_EyeCode As String
        Private m_EyeName As String
        Private m_UnitCost As Decimal
        Private m_UnitPrice As Decimal
        Private m_VATPercentage As Decimal
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property EyeCode() As String
            Get
                Return m_EyeCode
            End Get
            Set(Value As String)
                m_EyeCode = Value
            End Set
        End Property

        Public Property EyeName() As String
            Get
                Return m_EyeName
            End Get
            Set(Value As String)
                m_EyeName = Value
            End Set
        End Property

        Public Property UnitCost() As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(Value As Decimal)
                m_UnitCost = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertEyeServices")

            With Parameters
                .Add(New ParameterSQL("EyeCode", Me.EyeCode))
                .Add(New ParameterSQL("EyeName", Me.EyeName))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateEyeServices")

            With Parameters
                .Add(New ParameterSQL("EyeCode", Me.EyeCode))
                .Add(New ParameterSQL("EyeName", Me.EyeName))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            'For Audit Trail
            Me.SetLogObject("EyeServices")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "EyeCode = '" + Me.EyeCode + "'"
            Dim errorPart As String = "Eye Code: " + Me.EyeCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "EyeServices"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("EyeServices")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets eye services corresponding to supplied eye code
        ''' </summary>
        ''' <param name="eyeCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetEyeServices(eyeCode As String) As DataSet

            If String.IsNullOrEmpty(eyeCode) Then
                With Parameters
                    .Add(New ParameterSQL("EyeCode", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("EyeCode", eyeCode))
                End With
            End If

            Return Me.Load("uspGetEyeServices", "EyeServices", Parameters)

        End Function

        ''' <summary>
        ''' Gets all eye services that are not hidden
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetEyeServices() As DataSet
            Return GetEyeServices(String.Empty)
        End Function

        Public Function GetNextEyeID() As Integer

            With Parameters
                .Add(New ParameterSQL("EyeID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextEyeID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("EyeID")) Then
                    Return CInt(Me.ReadData("EyeID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

#End Region

    End Class

    Public Class OpticalServices : Inherits DBConnect

#Region " Fields "

        Private m_OpticalCode As String
        Private m_OpticalName As String
        Private m_OpticalCategoryID As String
        Private m_UnitPrice As Decimal
        Private m_UnitCost As Decimal
        Private m_VATPercentage As Decimal
        Private m_LastUpdate As Date
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property OpticalCode() As String
            Get
                Return m_OpticalCode
            End Get
            Set(Value As String)
                m_OpticalCode = Value
            End Set
        End Property

        Public Property OpticalName() As String
            Get
                Return m_OpticalName
            End Get
            Set(Value As String)
                m_OpticalName = Value
            End Set
        End Property

        Public Property OpticalCategoryID() As String
            Get
                Return m_OpticalCategoryID
            End Get
            Set(Value As String)
                m_OpticalCategoryID = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property UnitCost() As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(Value As Decimal)
                m_UnitCost = Value
            End Set
        End Property

        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property

        Public Property LastUpdate() As Date
            Get
                Return m_LastUpdate
            End Get
            Set(value As Date)
                m_LastUpdate = value
            End Set
        End Property


        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertOpticalServices")

            With Parameters

                .Add(New ParameterSQL("OpticalCode", Me.OpticalCode))
                .Add(New ParameterSQL("OpticalName", Me.OpticalName))
                .Add(New ParameterSQL("OpticalCategoryID", Me.OpticalCategoryID))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateOpticalServices")

            With Parameters

                .Add(New ParameterSQL("OpticalCode", Me.OpticalCode))
                .Add(New ParameterSQL("OpticalName", Me.OpticalName))
                .Add(New ParameterSQL("OpticalCategoryID", Me.OpticalCategoryID))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))

            End With

            'For Audit Trail
            Me.SetLogObject("OpticalServices")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "OpticalCode = '" + Me.OpticalCode + "'"
            Dim errorPart As String = "Optical Code: " + Me.OpticalCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "OpticalServices"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("OpticalServices")

            Return Parameters

        End Function


        ''' <summary>
        ''' Gets Optical services corresponding to supplied Optical code
        ''' </summary>
        ''' <param name="OpticalCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetOpticalServices(opticalCode As String) As DataSet

            If String.IsNullOrEmpty(opticalCode) Then
                With Parameters
                    .Add(New ParameterSQL("OpticalCode", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("OpticalCode", opticalCode))
                End With
            End If

            Return Me.Load("uspGetOpticalServices", "OpticalServices", Parameters)

        End Function

        ''' <summary>
        ''' Gets all Optical services that are not hidden
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetOpticalServices() As DataSet
            Return GetOpticalServices(String.Empty)
        End Function

        Public Function GetNextOpticalID() As Integer

            With Parameters
                .Add(New ParameterSQL("OpticalID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextOpticalID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("OpticalID")) Then
                    Return CInt(Me.ReadData("OpticalID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

#End Region

    End Class

    Public Class MaternityServices : Inherits DBConnect

#Region " Fields "

        Private m_MaternityCode As String
        Private m_MaternityName As String
        Private m_UnitPrice As Decimal
        Private m_VATPercentage As Decimal
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property MaternityCode() As String
            Get
                Return m_MaternityCode
            End Get
            Set(Value As String)
                m_MaternityCode = Value
            End Set
        End Property

        Public Property MaternityName() As String
            Get
                Return m_MaternityName
            End Get
            Set(Value As String)
                m_MaternityName = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertMaternityServices")

            With Parameters
                .Add(New ParameterSQL("MaternityCode", Me.MaternityCode))
                .Add(New ParameterSQL("MaternityName", Me.MaternityName))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateMaternityServices")

            With Parameters
                .Add(New ParameterSQL("MaternityCode", Me.MaternityCode))
                .Add(New ParameterSQL("MaternityName", Me.MaternityName))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            'For Audit Trail
            Me.SetLogObject("MaternityServices")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "MaternityCode = '" + Me.MaternityCode + "'"
            Dim errorPart As String = "Maternity Code: " + Me.MaternityCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "MaternityServices"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("MaternityServices")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets Maternity services corresponding to supplied Maternity code
        ''' </summary>
        ''' <param name="MaternityCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetMaternityServices(maternityCode As String) As DataSet

            If String.IsNullOrEmpty(maternityCode) Then
                With Parameters
                    .Add(New ParameterSQL("MaternityCode", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("MaternityCode", maternityCode))
                End With
            End If

            Return Me.Load("uspGetMaternityServices", "MaternityServices", Parameters)

        End Function

        ''' <summary>
        ''' Gets all Maternity services that are not hidden
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetMaternityServices() As DataSet
            Return GetMaternityServices(String.Empty)
        End Function

        Public Function GetNextMaternityID() As Integer

            With Parameters
                .Add(New ParameterSQL("MaternityID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextMaternityID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("MaternityID")) Then
                    Return CInt(Me.ReadData("MaternityID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

#End Region

    End Class

    Public Class ICUServices : Inherits DBConnect

#Region " Fields "

        Private m_ICUCode As String
        Private m_ICUName As String
        Private m_UnitPrice As Decimal
        Private m_VATPercentage As Decimal
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property ICUCode() As String
            Get
                Return m_ICUCode
            End Get
            Set(Value As String)
                m_ICUCode = Value
            End Set
        End Property

        Public Property ICUName() As String
            Get
                Return m_ICUName
            End Get
            Set(Value As String)
                m_ICUName = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertICUServices")

            With Parameters
                .Add(New ParameterSQL("ICUCode", Me.ICUCode))
                .Add(New ParameterSQL("ICUName", Me.ICUName))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateICUServices")

            With Parameters
                .Add(New ParameterSQL("ICUCode", Me.ICUCode))
                .Add(New ParameterSQL("ICUName", Me.ICUName))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            'For Audit Trail
            Me.SetLogObject("ICUServices")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ICUCode = '" + Me.ICUCode + "'"
            Dim errorPart As String = "ICU Code: " + Me.ICUCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ICUServices"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ICUServices")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets ICU services corresponding to supplied ICU code
        ''' </summary>
        ''' <param name="ICUCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetICUServices(iCUCode As String) As DataSet

            If String.IsNullOrEmpty(iCUCode) Then
                With Parameters
                    .Add(New ParameterSQL("ICUCode", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ICUCode", iCUCode))
                End With
            End If

            Return Me.Load("uspGetICUServices", "ICUServices", Parameters)

        End Function

        ''' <summary>
        ''' Gets all ICU services that are not hidden
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetICUServices() As DataSet
            Return GetICUServices(String.Empty)
        End Function

        Public Function GetNextICUID() As Integer

            With Parameters
                .Add(New ParameterSQL("ICUID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextICUID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("ICUID")) Then
                    Return CInt(Me.ReadData("ICUID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function


#End Region

    End Class

    Public Class Diseases : Inherits DBConnect

#Region " Fields "

        Private m_DiseaseCode As String
        Private m_DiseaseName As String
        Private m_DiseaseCategoriesID As String
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property DiseaseCode() As String
            Get
                Return m_DiseaseCode
            End Get
            Set(Value As String)
                m_DiseaseCode = Value
            End Set
        End Property

        Public Property DiseaseName() As String
            Get
                Return m_DiseaseName
            End Get
            Set(Value As String)
                m_DiseaseName = Value
            End Set
        End Property

        Public Property DiseaseCategoriesID() As String
            Get
                Return m_DiseaseCategoriesID
            End Get
            Set(Value As String)
                m_DiseaseCategoriesID = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertDiseases")

            With Parameters
                .Add(New ParameterSQL("DiseaseCode", Me.DiseaseCode))
                .Add(New ParameterSQL("DiseaseName", Me.DiseaseName))
                .Add(New ParameterSQL("DiseaseCategoriesID", Me.DiseaseCategoriesID))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateDiseases")

            With Parameters
                .Add(New ParameterSQL("DiseaseCode", Me.DiseaseCode))
                .Add(New ParameterSQL("DiseaseName", Me.DiseaseName))
                .Add(New ParameterSQL("DiseaseCategoriesID", Me.DiseaseCategoriesID))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            'For Audit Trail
            Me.SetLogObject("Diseases")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "DiseaseCode = '" + Me.DiseaseCode + "'"
            Dim errorPart As String = "Disease Code: " + Me.DiseaseCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Diseases"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Diseases")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets a disease for the supplied disease code
        ''' </summary>
        ''' <param name="diseaseCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDiseases(diseaseCode As String) As DataSet

            If (diseaseCode = "" OrElse diseaseCode = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("DiseaseCode", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("DiseaseCode", diseaseCode))
                End With
            End If

            Return Me.Load("uspGetDiseases", "Diseases", Parameters)

        End Function

        ''' <summary>
        ''' Returns all diseases that are not hidden
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDiseases() As DataSet
            Return GetDiseases(String.Empty)
        End Function

#End Region

    End Class

    Public Class LabTests : Inherits DBConnect

#Region " Fields "

        Private m_TestCode As String
        Private m_TestName As String
        Private m_SpecimenTypeID As String
        Private m_LabsID As String
        Private m_NormalRange As String
        Private m_UnitMeasureID As String
        Private m_UnitCost As Decimal
        Private m_VATPercentage As Decimal
        Private m_TestFee As Decimal
        Private m_ResultDataTypeID As String
        Private m_Hidden As Boolean
        Private m_RequiresResultsApproval As Boolean
        Private m_TubeType As String
        Private m_TestDescription As String
#End Region

#Region " Properties "

        Public Property TestCode() As String
            Get
                Return m_TestCode
            End Get
            Set(Value As String)
                m_TestCode = Value
            End Set
        End Property

        Public Property TestName() As String
            Get
                Return m_TestName
            End Get
            Set(Value As String)
                m_TestName = Value
            End Set
        End Property

        Public Property SpecimenTypeID() As String
            Get
                Return m_SpecimenTypeID
            End Get
            Set(Value As String)
                m_SpecimenTypeID = Value
            End Set
        End Property

        Public Property LabsID() As String
            Get
                Return m_LabsID
            End Get
            Set(value As String)
                m_LabsID = value
            End Set
        End Property

        Public Property NormalRange() As String
            Get
                Return m_NormalRange
            End Get
            Set(value As String)
                m_NormalRange = value
            End Set
        End Property

        Public Property UnitMeasureID() As String
            Get
                Return m_UnitMeasureID
            End Get
            Set(value As String)
                m_UnitMeasureID = value
            End Set
        End Property

        Public Property UnitCost() As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(value As Decimal)
                m_UnitCost = value
            End Set
        End Property

        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(value As Decimal)
                m_VATPercentage = value
            End Set
        End Property

        Public Property TestFee() As Decimal
            Get
                Return m_TestFee
            End Get
            Set(value As Decimal)
                m_TestFee = value
            End Set
        End Property

        Public Property ResultDataTypeID() As String
            Get
                Return m_ResultDataTypeID
            End Get
            Set(value As String)
                m_ResultDataTypeID = value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property


        Public Property RequiresResultsApproval() As Boolean
            Get
                Return m_RequiresResultsApproval
            End Get
            Set(Value As Boolean)
                m_RequiresResultsApproval = Value
            End Set
        End Property

        Public Property TubeType() As String
            Get
                Return m_TubeType
            End Get
            Set(value As String)
                m_TubeType = value
            End Set
        End Property

        Public Property TestDescription() As String
            Get
                Return m_TestDescription
            End Get
            Set(Value As String)
                m_TestDescription = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyBase.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertLabTests")

            With Parameters
                .Add(New ParameterSQL("TestCode", Me.TestCode))
                .Add(New ParameterSQL("TestName", Me.TestName))
                .Add(New ParameterSQL("SpecimenTypeID", Me.SpecimenTypeID))
                .Add(New ParameterSQL("LabsID", Me.LabsID))
                .Add(New ParameterSQL("NormalRange", Me.NormalRange))
                .Add(New ParameterSQL("UnitMeasureID", Me.UnitMeasureID))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("TestFee", Me.TestFee))
                .Add(New ParameterSQL("ResultDataTypeID", Me.ResultDataTypeID))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("RequiresResultsApproval", Me.RequiresResultsApproval))
                .Add(New ParameterSQL("TubeType", Me.TubeType))
                .Add(New ParameterSQL("TestDescription", Me.TestDescription))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateLabTests")

            With Parameters
                .Add(New ParameterSQL("TestCode", Me.TestCode))
                .Add(New ParameterSQL("TestName", Me.TestName))
                .Add(New ParameterSQL("SpecimenTypeID", Me.SpecimenTypeID))
                .Add(New ParameterSQL("LabsID", Me.LabsID))
                .Add(New ParameterSQL("NormalRange", Me.NormalRange))
                .Add(New ParameterSQL("UnitMeasureID", Me.UnitMeasureID))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("TestFee", Me.TestFee))
                .Add(New ParameterSQL("ResultDataTypeID", Me.ResultDataTypeID))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("RequiresResultsApproval", Me.RequiresResultsApproval))
                .Add(New ParameterSQL("TubeType", Me.TubeType))
                .Add(New ParameterSQL("TestDescription", Me.TestDescription))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trial
            Me.SetLogObject("LabTests")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "TestCode = '" + Me.TestCode + "'"
            Dim errorPart As String = "Test Code: " + Me.TestCode
            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "LabTests"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trial
            Me.SetLogObject("LabTests")

            Return Parameters

        End Function

        ''' <summary>
        ''' Returns lab tests corresponding to supplied criteria
        ''' </summary>
        ''' <param name="testCode"></param>
        ''' <param name="onlyNumeric"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 

        Private Function GetLabTests(testCode As String, onlyNumeric As Boolean) As DataSet

            If (Not String.IsNullOrEmpty(testCode)) Then
                With Parameters
                    .Add(New ParameterSQL("TestCode", testCode))
                    .Add(New ParameterSQL("OnlyNumeric", Nothing))
                End With

            ElseIf (Not String.IsNullOrEmpty(testCode)) Then
                With Parameters
                    .Add(New ParameterSQL("TestCode", Nothing))
                    .Add(New ParameterSQL("OnlyNumeric", onlyNumeric))
                End With
            End If

            Return Me.Load("uspGetLabTests", "LabTests", Parameters)

        End Function

        Public Function GetLabDoctorNotes(testCode As String, specimenNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("TestCode", testCode))
                .Add(New ParameterSQL("SpecimenNo", specimenNo))
            End With

            Return Me.Load("uspGetLabResultsItemDetails", "LabTests", Parameters)

        End Function

        ''' <summary>
        ''' Returns lab test corresponging to supplied test code
        ''' </summary>
        ''' <param name="testCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetLabTests(testCode As String) As DataSet
            Return Me.GetLabTests(testCode, False)
        End Function

        ''' <summary>
        ''' Returns all lab tests that are not hidden
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetLabTests() As DataSet
            Return Me.GetLabTests(String.Empty, False)
        End Function

        ''' <summary>
        ''' Returns lab tests that have a numeric result value and are not hidden
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetNumericLabTests() As DataSet
            Return Me.GetLabTests(String.Empty, True)
        End Function



        Public Function GetLabTestsWithSubTests(testCode As String) As DataSet

            If (testCode = "" OrElse testCode = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("TestCode", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("TestCode", testCode))
                End With
            End If

            Return Me.Load("uspGetLabTestsWithSubTests", "LabTests", Parameters)

        End Function

        ''' <summary>
        ''' Returns all Lab Tests With SubTests that are not hidden
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetLabTestsWithSubTests() As DataSet
            Return GetLabTestsWithSubTests(String.Empty)
        End Function


        Public Function GetLabTestsSubTests(testCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("TestCode", testCode))
            End With

            Return Me.Load("uspGetLabTestsSubTests", "LabTests", Parameters)

        End Function

        Public Function GetLabTestsbyLabType(labsID As String) As DataSet


            With Parameters
                .Add(New ParameterSQL("labsID", labsID))

            End With

            Return Me.Load("uspGetLabTestByLabType", "LabTests", Parameters)

        End Function

        Public Function GetNextTestID() As Integer

            With Parameters
                .Add(New ParameterSQL("TestID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextTestID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("TestID")) Then
                    Return CInt(Me.ReadData("TestID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function


#End Region

    End Class

    Public Class LabPossibleResults : Inherits DBConnect

#Region " Fields "

        Private m_TestCode As String
        Private m_PossibleResult As String

#End Region

#Region " Properties "

        Public Property TestCode() As String
            Get
                Return m_TestCode
            End Get
            Set(Value As String)
                m_TestCode = Value
            End Set
        End Property

        Public Property PossibleResult() As String
            Get
                Return m_PossibleResult
            End Get
            Set(Value As String)
                m_PossibleResult = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditLabPossibleResults")

            With Parameters
                .Add(New ParameterSQL("TestCode", Me.TestCode))
                .Add(New ParameterSQL("PossibleResult", Me.PossibleResult))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "TestCode = '" + Me.TestCode + "' and PossibleResult = '" + Me.PossibleResult + "'"
            Dim errorPart As String = "Test Code: " + Me.TestCode + " and Possible Result: " + Me.PossibleResult

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "LabPossibleResults"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("LabPossibleResults")

            Return Parameters

        End Function

        Public Function GetLabPossibleResults(testCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("TestCode", testCode))
            End With

            Return Me.Load("uspGetLabPossibleResults", "LabPossibleResults", Parameters)

        End Function

#End Region

    End Class

    Public Class LabTestsEXT : Inherits DBConnect

#Region " Fields "
        Private m_TestCode As String
        Private m_SubTestCode As String
        Private m_SubTestName As String
        Private m_NormalRange As String
        Private m_UnitMeasureID As String
        Private m_ResultDataTypeID As String
        Private m_Hidden As Boolean
#End Region

#Region " Properties "

        Public Property TestCode() As String
            Get
                Return m_TestCode
            End Get
            Set(Value As String)
                m_TestCode = Value
            End Set
        End Property

        Public Property SubTestCode() As String
            Get
                Return m_SubTestCode
            End Get
            Set(value As String)
                m_SubTestCode = value
            End Set
        End Property

        Public Property SubTestName() As String
            Get
                Return m_SubTestName
            End Get
            Set(value As String)
                m_SubTestName = value
            End Set
        End Property

        Public Property NormalRange() As String
            Get
                Return m_NormalRange
            End Get
            Set(Value As String)
                m_NormalRange = Value
            End Set
        End Property

        Public Property UnitMeasureID() As String
            Get
                Return m_UnitMeasureID
            End Get
            Set(value As String)
                m_UnitMeasureID = value
            End Set
        End Property

        Public Property ResultDataTypeID() As String
            Get
                Return m_ResultDataTypeID
            End Get
            Set(value As String)
                m_ResultDataTypeID = value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property
#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyBase.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditLabTestsEXT")

            With Parameters
                .Add(New ParameterSQL("TestCode", Me.TestCode))
                .Add(New ParameterSQL("SubTestCode", Me.SubTestCode))
                .Add(New ParameterSQL("SubTestName", Me.SubTestName))
                .Add(New ParameterSQL("NormalRange", Me.NormalRange))
                .Add(New ParameterSQL("UnitMeasureID", Me.UnitMeasureID))
                .Add(New ParameterSQL("ResultDataTypeID", Me.ResultDataTypeID))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "TestCode = '" + Me.TestCode + "' and SubTestCode = '" + Me.SubTestCode + "'"
            Dim errorPart As String = "Test Code: " + Me.TestCode + " and Sub Test Code: " + Me.SubTestCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "LabTestsEXT"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trial
            Me.SetLogObject("LabTestsEXT")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets lab tests EXTRA for supplied fields
        ''' </summary>
        ''' <param name="testCode"></param>
        ''' <param name="hidden"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Private Function GetLabTestsEXT(testCode As String, subTestCode As String, hidden As Nullable(Of Boolean)) As DataSet

            If Not String.IsNullOrEmpty(subTestCode) Then
                With Parameters
                    .Add(New ParameterSQL("TestCode", testCode))
                    .Add(New ParameterSQL("SubTestCode", subTestCode))
                    .Add(New ParameterSQL("Hidden", Nothing))
                End With

            ElseIf String.IsNullOrEmpty(subTestCode) AndAlso (hidden Is Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("TestCode", testCode))
                    .Add(New ParameterSQL("SubTestCode", Nothing))
                    .Add(New ParameterSQL("Hidden", Nothing))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("TestCode", testCode))
                    .Add(New ParameterSQL("SubTestCode", Nothing))
                    .Add(New ParameterSQL("Hidden", hidden))
                End With

            End If

            Return Me.Load("uspGetLabTestsEXT", "LabTestsEXT", Parameters)

        End Function

        ''' <summary>
        ''' Gets lab test extra for supplied test code and sub test code
        ''' </summary>
        ''' <param name="testCode"></param>
        ''' <param name="subTestCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetLabTestsEXT(testCode As String, subTestCode As String) As DataSet
            Return GetLabTestsEXT(testCode, subTestCode, Nothing)
        End Function

        ''' <summary>
        ''' Gets lab test extra for supplied fields
        ''' </summary>
        ''' <param name="testCode"></param>
        ''' <param name="hidden"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetLabTestsEXT(testCode As String, hidden As Nullable(Of Boolean)) As DataSet
            Return GetLabTestsEXT(testCode, String.Empty, hidden)
        End Function

        ''' <summary>
        ''' Gets all lab tests EXTRA including hidden ones
        ''' </summary>
        ''' <param name="testCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetLabTestsEXT(testCode As String) As DataSet
            Return GetLabTestsEXT(testCode, String.Empty, Nothing)
        End Function

        Public Function GetLabTestsEXTPossibleResults(subTestCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("SubTestCode", subTestCode))
            End With

            Return Me.Load("uspGetLabSubTestsPerTest", "LabTestsEXTPossibleResults", Parameters)

        End Function

        Public Function IsHasPossibleSubTestsResults(subTestCode As String) As Boolean

            Dim records As Integer

            With Parameters
                .Add(New ParameterSQL("SubTestCode", subTestCode))
                .Add(New ParameterSQL("Records", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspGetHasPossibleSubTestsResults", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("Records")) Then
                    records = 0
                Else : records = CInt(Me.ReadData("Records"))
                End If
            End If

            Return records > 0

        End Function

#End Region

    End Class

    Public Class RadiologyExaminations : Inherits DBConnect

#Region " Fields "
        Private m_ExamCode As String
        Private m_ExamName As String
        Private m_RadiologyCategoriesID As String
        Private m_RadiologySiteID As String
        Private m_UnitPrice As Decimal
        Private m_VATPercentage As Decimal
        Private m_Hidden As Boolean
#End Region

#Region " Properties "

        Public Property ExamCode() As String
            Get
                Return m_ExamCode
            End Get
            Set(Value As String)
                m_ExamCode = Value
            End Set
        End Property

        Public Property ExamName() As String
            Get
                Return m_ExamName
            End Get
            Set(Value As String)
                m_ExamName = Value
            End Set
        End Property

        Public Property RadiologyCategoriesID() As String
            Get
                Return m_RadiologyCategoriesID
            End Get
            Set(Value As String)
                m_RadiologyCategoriesID = Value
            End Set
        End Property

        Public Property RadiologySiteID() As String
            Get
                Return m_RadiologySiteID
            End Get
            Set(Value As String)
                m_RadiologySiteID = Value
            End Set
        End Property


        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertRadiologyExaminations")

            With Parameters
                .Add(New ParameterSQL("ExamCode", Me.ExamCode))
                .Add(New ParameterSQL("ExamName", Me.ExamName))
                .Add(New ParameterSQL("RadiologyCategoriesID", Me.RadiologyCategoriesID))
                .Add(New ParameterSQL("RadiologySiteID", Me.RadiologySiteID))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateRadiologyExaminations")

            With Parameters
                .Add(New ParameterSQL("ExamCode", Me.ExamCode))
                .Add(New ParameterSQL("ExamName", Me.ExamName))
                .Add(New ParameterSQL("RadiologyCategoriesID", Me.RadiologyCategoriesID))
                .Add(New ParameterSQL("RadiologySiteID", Me.RadiologySiteID))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            'For Audit Trail
            Me.SetLogObject("RadiologyExaminations")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "ExamCode = '" + Me.ExamCode + "'"
            errorPart = "Exam Code: " + Me.ExamCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "RadiologyExaminations"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("RadiologyExaminations")

            Return Parameters

        End Function

        ''' <summary>
        ''' Returns Radiology Examinations for the supplied exam code
        ''' </summary>
        ''' <param name="examCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetRadiologyExaminations(examCode As String) As DataSet

            If examCode <> "" OrElse examCode <> String.Empty Then
                With Parameters
                    .Add(New ParameterSQL("ExamCode", examCode))
                End With

            ElseIf (examCode = "" OrElse examCode = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("ExamCode", Nothing))
                End With
            End If

            Return Me.Load("uspGetRadiologyExaminations", "RadiologyExaminations", Parameters)

        End Function

        ''' <summary>
        ''' Returns all Radiology Examinations
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetRadiologyExaminations() As DataSet
            Return GetRadiologyExaminations(String.Empty)
        End Function

        Public Function GetNextRadiologyExamID() As Integer

            With Parameters
                .Add(New ParameterSQL("ExamID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextRadiologyExamID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("ExamID")) Then
                    Return CInt(Me.ReadData("ExamID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function


#End Region

    End Class

    Public Class PathologyExaminations : Inherits DBConnect

#Region " Fields "

        Private m_ExamCode As String
        Private m_ExamName As String
        Private m_PathologyCategoriesID As String
        Private m_UnitPrice As Decimal
        Private m_VATPercentage As Decimal
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property ExamCode() As String
            Get
                Return m_ExamCode
            End Get
            Set(Value As String)
                m_ExamCode = Value
            End Set
        End Property

        Public Property ExamName() As String
            Get
                Return m_ExamName
            End Get
            Set(Value As String)
                m_ExamName = Value
            End Set
        End Property

        Public Property PathologyCategoriesID() As String
            Get
                Return m_PathologyCategoriesID
            End Get
            Set(Value As String)
                m_PathologyCategoriesID = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPathologyExaminations")

            With Parameters
                .Add(New ParameterSQL("ExamCode", Me.ExamCode))
                .Add(New ParameterSQL("ExamName", Me.ExamName))
                .Add(New ParameterSQL("PathologyCategoriesID", Me.PathologyCategoriesID))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePathologyExaminations")

            With Parameters
                .Add(New ParameterSQL("ExamCode", Me.ExamCode))
                .Add(New ParameterSQL("ExamName", Me.ExamName))
                .Add(New ParameterSQL("PathologyCategoriesID", Me.PathologyCategoriesID))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("PathologyExaminations")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ExamCode = '" + Me.ExamCode + "'"
            Dim errorPart As String = "Pathology Exam Code: " + Me.ExamCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PathologyExaminations"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PathologyExaminations")

            Return Parameters

        End Function

        ''' <summary>
        ''' Returns Pathology Examinations for the supplied exam code
        ''' </summary>
        ''' <param name="examCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetPathologyExaminations(examCode As String) As DataSet

            If examCode <> "" OrElse examCode <> String.Empty Then
                With Parameters
                    .Add(New ParameterSQL("ExamCode", examCode))
                End With

            ElseIf (examCode = "" OrElse examCode = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("ExamCode", Nothing))
                End With
            End If

            Return Me.Load("uspGetPathologyExaminations", "PathologyExaminations", Parameters)

        End Function

        ''' <summary>
        ''' Returns all Pathology Examinations
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPathologyExaminations() As DataSet
            Return GetPathologyExaminations(String.Empty)
        End Function


        Public Function GetNextPathologyExamID() As Integer

            With Parameters
                .Add(New ParameterSQL("ExamID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextPathologyExamID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("ExamID")) Then
                    Return CInt(Me.ReadData("ExamID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function


#End Region

    End Class


    Public Class ExtraChargeItems : Inherits DBConnect

#Region " Fields "

        Private m_ExtraItemCode As String
        Private m_ExtraItemName As String
        Private m_ExtraChargeCategoryID As String
        Private m_UnitCost As Decimal
        Private m_UnitPrice As Decimal
        Private m_VATPercentage As Decimal
        Private m_RevenueStream As String
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property ExtraItemCode() As String
            Get
                Return m_ExtraItemCode
            End Get
            Set(Value As String)
                m_ExtraItemCode = Value
            End Set
        End Property

        Public Property ExtraItemName() As String
            Get
                Return m_ExtraItemName
            End Get
            Set(Value As String)
                m_ExtraItemName = Value
            End Set
        End Property

        Public Property ExtraChargeCategoryID() As String
            Get
                Return m_ExtraChargeCategoryID
            End Get
            Set(Value As String)
                m_ExtraChargeCategoryID = Value
            End Set
        End Property

        Public Property UnitCost() As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(Value As Decimal)
                m_UnitCost = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property


        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property


        Public Property RevenueStream() As String
            Get
                Return m_RevenueStream
            End Get
            Set(Value As String)
                m_RevenueStream = Value
            End Set
        End Property


        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertExtraChargeItems")

            With Parameters
                .Add(New ParameterSQL("ExtraItemCode", Me.ExtraItemCode))
                .Add(New ParameterSQL("ExtraItemName", Me.ExtraItemName))
                .Add(New ParameterSQL("ExtraChargeCategoryID", Me.ExtraChargeCategoryID))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("RevenueStreamCode", Me.RevenueStream))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateExtraChargeItems")

            With Parameters
                .Add(New ParameterSQL("ExtraItemCode", Me.ExtraItemCode))
                .Add(New ParameterSQL("ExtraItemName", Me.ExtraItemName))
                .Add(New ParameterSQL("ExtraChargeCategoryID", Me.ExtraChargeCategoryID))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("RevenueStreamCode", Me.RevenueStream))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            'For Audit Trail
            Me.SetLogObject("ExtraChargeItems")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ExtraItemCode = '" + Me.ExtraItemCode + "'"
            Dim errorPart As String = "Item Code: " + Me.ExtraItemCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ExtraChargeItems"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ExtraChargeItems")

            Return Parameters

        End Function

        ''' <summary>
        ''' Returns extra charge items for agiven extra Item Code
        ''' </summary>
        ''' <param name="extraItemCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetExtraChargeItems(extraItemCode As String) As DataSet

            If extraItemCode <> "" OrElse extraItemCode <> String.Empty Then
                With Parameters
                    .Add(New ParameterSQL("ExtraItemCode", extraItemCode))
                End With

            ElseIf (extraItemCode = "" OrElse extraItemCode = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("ExtraItemCode", Nothing))
                End With
            End If

            Return Me.Load("uspGetExtraChargeItems", "ExtraChargeItems", Parameters)

        End Function

        ''' <summary>
        ''' Returns all extra charge items that are not hidden
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetExtraChargeItems() As DataSet
            Return GetExtraChargeItems(String.Empty)
        End Function

        Public Function GetNextExtraItemID() As Integer

            With Parameters
                .Add(New ParameterSQL("ExtraItemID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextExtraItemID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("ExtraItemID")) Then
                    Return CInt(Me.ReadData("ExtraItemID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function

#End Region

    End Class


    Public Class DrugCombinations : Inherits DBConnect

#Region " Fields "
        Private m_Combination As String
        Private m_CombinationDes As String
#End Region

#Region " Properties "

        Public Property Combination() As String
            Get
                Return m_Combination
            End Get
            Set(Value As String)
                m_Combination = Value
            End Set
        End Property

        Public Property CombinationDes() As String
            Get
                Return m_CombinationDes
            End Get
            Set(Value As String)
                m_CombinationDes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyBase.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertDrugCombinations")

            With Parameters
                .Add(New ParameterSQL("Combination", Me.Combination))
                .Add(New ParameterSQL("CombinationDes", Me.CombinationDes))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateDrugCombinations")

            With Parameters
                .Add(New ParameterSQL("Combination", Me.Combination))
                .Add(New ParameterSQL("CombinationDes", Me.CombinationDes))
            End With

            'For Audit Trial
            Me.SetLogObject("DrugCombinations")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "Combination = '" + Me.Combination + "'"
            errorPart = "Combination: " + Me.Combination

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "DrugCombinations"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trial
            Me.SetLogObject("DrugCombinations")

            Return Parameters

        End Function

        Public Function GetDrugCombinations(combination As String) As DataSet

            If combination <> "" OrElse combination <> String.Empty Then
                With Parameters
                    .Add(New ParameterSQL("Combination", combination))
                End With

            ElseIf (combination = "" OrElse combination = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("Combination", Nothing))
                End With
            End If

            Return Me.Load("uspGetDrugCombinations", "DrugCombinations", Parameters)

        End Function

        Public Function GetDrugCombinations() As DataSet
            Return Me.GetDrugCombinations(String.Empty)
        End Function

#End Region

    End Class

    Public Class DrugCombinationDetails : Inherits DBConnect

#Region " Fields "

        Private m_Combination As String
        Private m_DrugNo As String

#End Region

#Region " Properties "

        Public Property Combination() As String
            Get
                Return m_Combination
            End Get
            Set(Value As String)
                m_Combination = Value
            End Set
        End Property

        Public Property DrugNo() As String
            Get
                Return m_DrugNo
            End Get
            Set(value As String)
                m_DrugNo = value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyBase.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditDrugCombinationDetails")

            With Parameters
                .Add(New ParameterSQL("Combination", Me.Combination))
                .Add(New ParameterSQL("DrugNo", Me.DrugNo))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "Combination = '" + Me.Combination + "' and DrugNo = '" + Me.DrugNo + "'"
            errorPart = "Combination: " + Me.Combination + " and Drug No: " + Me.DrugNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "DrugCombinationDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trial
            Me.SetLogObject("DrugCombinationDetails")

            Return Parameters

        End Function

        Public Function GetDrugCombinationDetails(combination As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("Combination", combination))
            End With

            Return Me.Load("uspGetDrugCombinationDetails", "DrugCombinationDetails", Parameters)

        End Function

#End Region

    End Class

    Public Class Rooms : Inherits DBConnect

#Region " Fields "

        Private m_RoomNo As String
        Private m_RoomName As String
        Private m_WardsID As String

#End Region

#Region " Properties "

        Public Property RoomNo() As String
            Get
                Return m_RoomNo
            End Get
            Set(Value As String)
                m_RoomNo = Value
            End Set
        End Property

        Public Property RoomName() As String
            Get
                Return m_RoomName
            End Get
            Set(Value As String)
                m_RoomName = Value
            End Set
        End Property

        Public Property WardsID() As String
            Get
                Return m_WardsID
            End Get
            Set(Value As String)
                m_WardsID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertRooms")

            With Parameters
                .Add(New ParameterSQL("RoomNo", Me.RoomNo))
                .Add(New ParameterSQL("RoomName", Me.RoomName))
                .Add(New ParameterSQL("WardsID", Me.WardsID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateRooms")

            With Parameters
                .Add(New ParameterSQL("RoomNo", Me.RoomNo))
                .Add(New ParameterSQL("RoomName", Me.RoomName))
                .Add(New ParameterSQL("WardsID", Me.WardsID))
            End With

            'For Audit Trail
            Me.SetLogObject("Rooms")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RoomNo = '" + Me.RoomNo + "'"
            Dim errorPart As String = "Room No: " + Me.RoomNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Rooms"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Rooms")

            Return Parameters

        End Function

        Private Function GetRooms(roomNo As String, wardsID As String) As DataSet

            If (roomNo <> "" OrElse roomNo <> String.Empty) And
                (wardsID = "" OrElse wardsID = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("RoomNo", roomNo))
                    .Add(New ParameterSQL("WardsID", Nothing))
                End With

            ElseIf (roomNo = "" OrElse roomNo = String.Empty) And
                    (wardsID <> "" OrElse wardsID <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("RoomNo", Nothing))
                    .Add(New ParameterSQL("WardsID", wardsID))
                End With

            ElseIf (roomNo = "" OrElse roomNo = String.Empty) And
                    (wardsID = "" OrElse wardsID = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("RoomNo", Nothing))
                    .Add(New ParameterSQL("WardsID", Nothing))
                End With
            End If

            Return Me.Load("uspGetRooms", "Rooms", Parameters)

        End Function

        ''' <summary>
        ''' Returns a room for aspecified roomNo
        ''' </summary>
        ''' <param name="roomNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetRooms(roomNo As String) As DataSet
            Return GetRooms(roomNo, String.Empty)
        End Function

        ''' <summary>
        ''' Returns a room for aspecified ward
        ''' </summary>
        ''' <param name="wardsID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetRoomsBywardsID(wardsID As String) As DataSet
            Return GetRooms(String.Empty, wardsID)
        End Function

        ''' <summary>
        ''' Returns all Rooms
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetRooms() As DataSet
            Return GetRooms(String.Empty, String.Empty)
        End Function

#End Region

    End Class

    Public Class Beds : Inherits DBConnect

#Region " Fields "

        Private m_BedNo As String
        Private m_BedName As String
        Private m_RoomNo As String
        Private m_UnitCost As Decimal
        Private m_UnitPrice As Decimal
        Private m_VATPercentage As Decimal
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property BedNo() As String
            Get
                Return m_BedNo
            End Get
            Set(Value As String)
                m_BedNo = Value
            End Set
        End Property

        Public Property BedName() As String
            Get
                Return m_BedName
            End Get
            Set(Value As String)
                m_BedName = Value
            End Set
        End Property

        Public Property RoomNo() As String
            Get
                Return m_RoomNo
            End Get
            Set(Value As String)
                m_RoomNo = Value
            End Set
        End Property

        Public Property UnitCost() As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(Value As Decimal)
                m_UnitCost = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertBeds")

            With Parameters
                .Add(New ParameterSQL("BedNo", Me.BedNo))
                .Add(New ParameterSQL("BedName", Me.BedName))
                .Add(New ParameterSQL("RoomNo", Me.RoomNo))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateBeds")

            With Parameters
                .Add(New ParameterSQL("BedNo", Me.BedNo))
                .Add(New ParameterSQL("BedName", Me.BedName))
                .Add(New ParameterSQL("RoomNo", Me.RoomNo))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
            End With

            'For Audit Trail
            Me.SetLogObject("Beds")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "BedNo = '" + Me.BedNo + "'"
            Dim errorPart As String = "Bed No: " + Me.BedNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Beds"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Beds")

            Return Parameters

        End Function

        Private Function GetBeds(bedNo As String, roomNo As String) As DataSet

            If (bedNo <> "" OrElse bedNo <> String.Empty) And
                (roomNo = "" OrElse roomNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("BedNo", bedNo))
                    .Add(New ParameterSQL("RoomNo", Nothing))
                End With

            ElseIf (bedNo = "" OrElse bedNo = String.Empty) And
                    (roomNo <> "" OrElse roomNo <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("BedNo", Nothing))
                    .Add(New ParameterSQL("RoomNo", roomNo))
                End With

            ElseIf (bedNo = "" OrElse bedNo = String.Empty) And
                    (roomNo = "" OrElse roomNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("BedNo", Nothing))
                    .Add(New ParameterSQL("RoomNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetBeds", "Beds", Parameters)

        End Function

        ''' <summary>
        ''' Gets a bed corresponding to the bed no
        ''' </summary>
        ''' <param name="bedNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetBeds(bedNo As String) As DataSet
            Return GetBeds(bedNo, String.Empty)
        End Function

        ''' <summary>
        ''' Gets Beds for agiven room
        ''' </summary>
        ''' <param name="roomNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetBedsByRoomNo(roomNo As String) As DataSet
            Return GetBeds(String.Empty, roomNo)
        End Function

        ''' <summary>
        ''' Gets all Beds
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetBeds() As DataSet
            Return GetBeds(String.Empty, String.Empty)
        End Function



        Public Function GetNextBedID() As Integer

            With Parameters
                .Add(New ParameterSQL("BedID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextBedID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("BedID")) Then
                    Return CInt(Me.ReadData("BedID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function


#End Region

    End Class

    Public Class Allergies : Inherits DBConnect

#Region " Fields "

        Private m_AllergyNo As String
        Private m_AllergyName As String
        Private m_AllergyCategoryID As String

#End Region

#Region " Properties "

        Public Property AllergyNo() As String
            Get
                Return m_AllergyNo
            End Get
            Set(Value As String)
                m_AllergyNo = Value
            End Set
        End Property

        Public Property AllergyName() As String
            Get
                Return m_AllergyName
            End Get
            Set(Value As String)
                m_AllergyName = Value
            End Set
        End Property

        Public Property AllergyCategoryID() As String
            Get
                Return m_AllergyCategoryID
            End Get
            Set(Value As String)
                m_AllergyCategoryID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertAllergies")

            With Parameters
                .Add(New ParameterSQL("AllergyNo", Me.AllergyNo))
                .Add(New ParameterSQL("AllergyName", Me.AllergyName))
                .Add(New ParameterSQL("AllergyCategoryID", Me.AllergyCategoryID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateAllergies")

            With Parameters
                .Add(New ParameterSQL("AllergyNo", Me.AllergyNo))
                .Add(New ParameterSQL("AllergyName", Me.AllergyName))
                .Add(New ParameterSQL("AllergyCategoryID", Me.AllergyCategoryID))
            End With

            'For Audit Trail
            Me.SetLogObject("Allergies")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "AllergyNo = '" + Me.AllergyNo + "'"
            Dim errorPart As String = "Allergy No: " + Me.AllergyNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Allergies"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Allergies")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets Allergies for supplied allergy no
        ''' </summary>
        ''' <param name="allergyNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetAllergies(allergyNo As String) As DataSet

            If String.IsNullOrEmpty(allergyNo) Then

                With Parameters
                    .Add(New ParameterSQL("AllergyNo", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("AllergyNo", allergyNo))
                End With

            End If

            Return Me.Load("uspGetAllergies", "Allergies", Parameters)

        End Function

        ''' <summary>
        ''' Gets all Allergies
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetAllergies() As DataSet
            Return GetAllergies(String.Empty)
        End Function

#End Region

    End Class

    Public Class AllergyDrugs : Inherits DBConnect

#Region " Fields "

        Private m_AllergyNo As String
        Private m_DrugNo As String

#End Region

#Region " Properties "

        Public Property AllergyNo() As String
            Get
                Return m_AllergyNo
            End Get
            Set(Value As String)
                m_AllergyNo = Value
            End Set
        End Property

        Public Property DrugNo() As String
            Get
                Return m_DrugNo
            End Get
            Set(Value As String)
                m_DrugNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditAllergyDrugs")

            With Parameters
                .Add(New ParameterSQL("AllergyNo", Me.AllergyNo))
                .Add(New ParameterSQL("DrugNo", Me.DrugNo))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "AllergyNo = '" + Me.AllergyNo + "' and DrugNo = '" + Me.DrugNo + "'"
            Dim errorPart As String = "Allergy No: " + Me.AllergyNo + " and Drug No: " + Me.DrugNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "AllergyDrugs"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("AllergyDrugs")

            Return Parameters

        End Function

        Public Function GetAllergyDrugs(allergyNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AllergyNo", allergyNo))
            End With

            Return Me.Load("uspGetAllergyDrugs", "AllergyDrugs", Parameters)

        End Function

#End Region

    End Class

    Public Class ExchangeRates : Inherits DBConnect

#Region " Fields "

        Private m_CurrenciesID As String
        Private m_Buying As Decimal
        Private m_Selling As Decimal

#End Region

#Region " Properties "

        Public Property CurrenciesID() As String
            Get
                Return m_CurrenciesID
            End Get
            Set(Value As String)
                m_CurrenciesID = Value
            End Set
        End Property

        Public Property Buying() As Decimal
            Get
                Return m_Buying
            End Get
            Set(Value As Decimal)
                m_Buying = Value
            End Set
        End Property

        Public Property Selling() As Decimal
            Get
                Return m_Selling
            End Get
            Set(Value As Decimal)
                m_Selling = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditExchangeRates")

            With Parameters
                .Add(New ParameterSQL("CurrenciesID", Me.CurrenciesID))
                .Add(New ParameterSQL("Buying", Me.Buying))
                .Add(New ParameterSQL("Selling", Me.Selling))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "CurrenciesID = '" + Me.CurrenciesID + "'"
            Dim errorPart As String = "Currency: " + Me.CurrenciesID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ExchangeRates"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ExchangeRates")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets exchange rate for supplied currency ID
        ''' </summary>
        ''' <param name="currenciesID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetExchangeRates(currenciesID As String) As DataSet

            If String.IsNullOrEmpty(currenciesID) Then
                With Parameters
                    .Add(New ParameterSQL("CurrenciesID", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("CurrenciesID", currenciesID))
                End With

            End If

            Return Me.Load("uspGetExchangeRates", "ExchangeRates", Parameters)

        End Function

        ''' <summary>
        ''' Gets exchange rates for all currencies
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetExchangeRates() As DataSet
            Return GetExchangeRates(String.Empty)
        End Function

#End Region

    End Class

    Public Class PossibleAttachedItems : Inherits DBConnect

#Region " Fields "
        Private m_AttachedItemCode As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_Duration As String
        Private m_Dosage As String
        Private m_Quantity As Integer
        Private m_UnitCost As Decimal
        Private m_UnitPrice As Decimal
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property AttachedItemCode() As String
            Get
                Return m_AttachedItemCode
            End Get
            Set(ByVal Value As String)
                m_AttachedItemCode = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property Dosage() As String
            Get
                Return m_Dosage
            End Get
            Set(ByVal Value As String)
                m_Dosage = Value
            End Set
        End Property

        Public Property Duration() As String
            Get
                Return m_Duration
            End Get
            Set(ByVal Value As String)
                m_Duration = Value
            End Set
        End Property
        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(ByVal Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property UnitCost() As Decimal
            Get
                Return m_UnitCost
            End Get
            Set(Value As Decimal)
                m_UnitCost = Value
            End Set
        End Property

        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property


        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditPossibleAttachedItems")

            With Parameters
                .Add(New ParameterSQL("AttachedItemCode", Me.AttachedItemCode))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("Duration", Me.Duration))
                .Add(New ParameterSQL("Dosage", Me.Dosage))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "AttachedItemCode = '" + Me.AttachedItemCode + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "AttachedItemCode: " + Me.AttachedItemCode + " and ItemCode: " + Me.ItemCode + " and ItemCategoryID: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PossibleAttachedItems"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PossibleAttachedItems")

            Return Parameters

        End Function


        Public Function GetPossibleAttachedDrugItems(attachedItemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AttachedItemCode", attachedItemCode))
            End With
            Return Me.Load("uspGetAttachedDrugs", "PossibleAttachedItems", Parameters)

        End Function


        Public Function GetPossibleAttachedLabTests(attachedItemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AttachedItemCode", attachedItemCode))
            End With
            Return Me.Load("uspGetAttachedLabTests", "PossibleAttachedItems", Parameters)

        End Function

        Public Function GetPossibleAttachedconsumables(attachedItemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AttachedItemCode", attachedItemCode))
            End With
            Return Me.Load("uspGetAttachedConsumables", "PossibleAttachedItems", Parameters)

        End Function

        Public Function GetAttachedTheatreServices(attachedItemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AttachedItemCode", attachedItemCode))
            End With
            Return Me.Load("uspGetAttachedTheatreServices", "PossibleAttachedItems", Parameters)

        End Function

        Public Function GetAttachedPossibleCosumables(ByVal attachedItemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AttachedItemCode", attachedItemCode))
            End With

            Return Me.Load("uspGetAttachedPossibleConsumables", "PossibleAttachedItems", Parameters)

        End Function

        Public Function GetPossibleAttachedconsumablesExt(attachedItemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AttachedItemCode", attachedItemCode))
            End With
            Return Me.Load("uspGetAttachedPossibleConsumablesExt", "PossibleAttachedItems", Parameters)

        End Function

        Public Function GetAttachedPossibleCosumablesOnLoad(ByVal visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetAttachedPossibleCosumablesOnLoad", "PossibleAttachedItems", Parameters)

        End Function

        Public Function GetIPDAttachedPossibleCosumablesOnLoad(ByVal roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
            End With

            Return Me.Load("uspGetIPDAttachedPossibleCosumablesOnLoad", "PossibleAttachedItems", Parameters)

        End Function

        Public Function GetAttachedPossibleTheatreServices(ByVal attachedItemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AttachedItemCode", attachedItemCode))
            End With

            Return Me.Load("uspGetAttachedPossibleTheatreServices", "PossibleAttachedItems", Parameters)

        End Function

        Public Function GetAttachedPossibleTheatreServicesOnLoad(ByVal visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetAttachedPossibleTheatreServicesOnLoad", "PossibleAttachedItems", Parameters)

        End Function

        Public Function GetAttachedIPDPossibleTheatreServicesOnLoad(ByVal roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
            End With

            Return Me.Load("uspGetAttachedIPDPossibleTheatreServicesOnLoad", "PossibleAttachedItems", Parameters)

        End Function

        Public Function GetAttachedPossiblePrescription(ByVal attachedItemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AttachedItemCode", attachedItemCode))
            End With

            Return Me.Load("uspGetAttachedPossiblePrescritions", "PossibleAttachedItems", Parameters)

        End Function

        Public Function GetAttachedPossiblePrescriptionsOnLoad(ByVal visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetAttachedPossiblePrescritionsOnLoad", "PossibleAttachedItems", Parameters)

        End Function

        Public Function GetIPDAttachedPossiblePrescriptionsOnLoad(ByVal roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
            End With

            Return Me.Load("uspGetIPDAttachedPossiblePrescritionsOnLoad", "PossibleAttachedItems", Parameters)

        End Function

#End Region

    End Class


    Public Class Physiotherapy : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_OnMedication As String
        Private m_Medication As String
        Private m_Pain24hoursOrVAS As String
        Private m_LevelOfDependenceOrADLS As String
        Private m_MuscleStatus As String
        Private m_StatusOfJoints As String
        Private m_Sensitivity As String
        Private m_WalkingAnalysis As String
        Private m_ShortTermTreatmentTargets As String
        Private m_LongTermTreatmentTargets As String
        Private m_ProvisionalDiagnosis As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property OnMedication() As String
            Get
                Return m_OnMedication
            End Get
            Set(ByVal Value As String)
                m_OnMedication = Value
            End Set
        End Property

        Public Property Medication() As String
            Get
                Return m_Medication
            End Get
            Set(ByVal Value As String)
                m_Medication = Value
            End Set
        End Property

        Public Property Pain24hoursOrVAS() As String
            Get
                Return m_Pain24hoursOrVAS
            End Get
            Set(ByVal Value As String)
                m_Pain24hoursOrVAS = Value
            End Set
        End Property

        Public Property LevelOfDependenceOrADLS() As String
            Get
                Return m_LevelOfDependenceOrADLS
            End Get
            Set(ByVal Value As String)
                m_LevelOfDependenceOrADLS = Value
            End Set
        End Property

        Public Property MuscleStatus() As String
            Get
                Return m_MuscleStatus
            End Get
            Set(ByVal Value As String)
                m_MuscleStatus = Value
            End Set
        End Property

        Public Property StatusOfJoints() As String
            Get
                Return m_StatusOfJoints
            End Get
            Set(ByVal Value As String)
                m_StatusOfJoints = Value
            End Set
        End Property

        Public Property Sensitivity() As String
            Get
                Return m_Sensitivity
            End Get
            Set(ByVal Value As String)
                m_Sensitivity = Value
            End Set
        End Property

        Public Property WalkingAnalysis() As String
            Get
                Return m_WalkingAnalysis
            End Get
            Set(ByVal Value As String)
                m_WalkingAnalysis = Value
            End Set
        End Property

        Public Property ShortTermTreatmentTargets() As String
            Get
                Return m_ShortTermTreatmentTargets
            End Get
            Set(ByVal Value As String)
                m_ShortTermTreatmentTargets = Value
            End Set
        End Property

        Public Property LongTermTreatmentTargets() As String
            Get
                Return m_LongTermTreatmentTargets
            End Get
            Set(ByVal Value As String)
                m_LongTermTreatmentTargets = Value
            End Set
        End Property

        'Public Property CategoryID() As String
        '    Get
        '        Return m_CategoryID
        '    End Get
        '    Set(ByVal Value As String)
        '        m_CategoryID = Value
        '    End Set
        'End Property

        'Public Property TherapyTechniquesID() As String
        '    Get
        '        Return m_TherapyTechniquesID
        '    End Get
        '    Set(ByVal Value As String)
        '        m_TherapyTechniquesID = Value
        '    End Set
        'End Property



        Public Property ProvisionalDiagnosis() As String
            Get
                Return m_ProvisionalDiagnosis
            End Get
            Set(ByVal Value As String)
                m_ProvisionalDiagnosis = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPhysiotherapy")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("OnMedication", Me.OnMedication))
                .Add(New ParameterSQL("Medication", Me.Medication))
                .Add(New ParameterSQL("Pain24hoursOrVAS", Me.Pain24hoursOrVAS))
                .Add(New ParameterSQL("LevelOfDependenceOrADLS", Me.LevelOfDependenceOrADLS))
                .Add(New ParameterSQL("MuscleStatus", Me.MuscleStatus))
                .Add(New ParameterSQL("StatusOfJoints", Me.StatusOfJoints))
                .Add(New ParameterSQL("Sensitivity", Me.Sensitivity))
                .Add(New ParameterSQL("WalkingAnalysis", Me.WalkingAnalysis))
                .Add(New ParameterSQL("ShortTermTreatmentTargets", Me.ShortTermTreatmentTargets))
                .Add(New ParameterSQL("LongTermTreatmentTargets", Me.LongTermTreatmentTargets))
                .Add(New ParameterSQL("ProvisionalDiagnosis", Me.ProvisionalDiagnosis))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePhysiotherapy")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("OnMedication", Me.OnMedication))
                .Add(New ParameterSQL("Medication", Me.Medication))
                .Add(New ParameterSQL("Pain24hoursOrVAS", Me.Pain24hoursOrVAS))
                .Add(New ParameterSQL("LevelOfDependenceOrADLS", Me.LevelOfDependenceOrADLS))
                .Add(New ParameterSQL("MuscleStatus", Me.MuscleStatus))
                .Add(New ParameterSQL("StatusOfJoints", Me.StatusOfJoints))
                .Add(New ParameterSQL("Sensitivity", Me.Sensitivity))
                .Add(New ParameterSQL("WalkingAnalysis", Me.WalkingAnalysis))
                .Add(New ParameterSQL("ShortTermTreatmentTargets", Me.ShortTermTreatmentTargets))
                .Add(New ParameterSQL("LongTermTreatmentTargets", Me.LongTermTreatmentTargets))
                .Add(New ParameterSQL("ProvisionalDiagnosis", Me.ProvisionalDiagnosis))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("Physiotherapy")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo


            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Physiotherapy"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Physiotherapy")

            Return Parameters

        End Function


        Public Function GetPhysiotherapy(ByVal visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("visitNo", visitNo))
            End With

            Return Me.Load("uspGetPhysiotherapy", "Physiotherapy", Parameters)

        End Function


#End Region



    End Class

    Public Class PhysioDiagnosis : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_PhysioDiseaseNo As String
        Private m_Notes As String


#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property PhysioDiseaseNo() As String
            Get
                Return m_PhysioDiseaseNo
            End Get
            Set(ByVal Value As String)
                m_PhysioDiseaseNo = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPhysioDiagnosis")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("PhysioDiseaseNo", Me.PhysioDiseaseNo))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePhysioDiagnosis")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("PhysioDiseaseNo", Me.PhysioDiseaseNo))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("PhysioDiagnosis")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and PhysioDiseaseNo = '" + Me.PhysioDiseaseNo + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo + " and PhysioDiagnosis: " + Me.PhysioDiseaseNo


            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PhysioDiagnosis"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PhysioDiagnosis")

            Return Parameters

        End Function


        Public Function GetPhysioDiagnosis() As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", VisitNo))
            End With

            Return Me.Load("uspGetPhysioDiagnosis", "PhysioDiagnosis", Parameters)

        End Function

#End Region


    End Class

    Public Class TreatmentPlan : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_CategoryID As String
        Private m_TherapyTechniqueID As String
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property CategoryID() As String
            Get
                Return m_CategoryID
            End Get
            Set(ByVal Value As String)
                m_CategoryID = Value
            End Set
        End Property

        Public Property TherapyTechniqueID() As String
            Get
                Return m_TherapyTechniqueID
            End Get
            Set(ByVal Value As String)
                m_TherapyTechniqueID = Value
            End Set
        End Property


        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertTreatmentPlan")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("CategoryID", Me.CategoryID))
                .Add(New ParameterSQL("TherapyTechniqueID", Me.TherapyTechniqueID))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateTreatmentPlan")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("CategoryID", Me.CategoryID))
                .Add(New ParameterSQL("TherapyTechniqueID", Me.TherapyTechniqueID))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("TreatmentPlan")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and CategoryID = '" + Me.CategoryID + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo + " and TherapyTechniqueID: " + Me.CategoryID


            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "TreatmentPlan"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("TreatmentPlan")

            Return Parameters

        End Function

        Public Function GetTreatmentPlan() As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", VisitNo))
            End With

            Return Me.Load("uspGetTreatmentPlan", "TreatmentPlan", Parameters)

        End Function

        Public Function GetManipulativeTechniqueItems() As DataSet

            Return Me.Load("uspGetManipulativeTechniqueItems", "ManipulativeTechniqueItems")

        End Function


        Public Function GetElectrotherapyItems() As DataSet

            Return Me.Load("uspGetElectrotherapyItems", "ElectrotherapyItems")

        End Function


        Public Function GetExercisotherapyItems() As DataSet

            Return Me.Load("uspGetExercisotherapyItems", "ExercisotherapyItems")

        End Function

#End Region



    End Class

    Public Class PhysioDiseases : Inherits DBConnect

#Region " Fields "


        Private m_PhysioDiseaseNo As String
        Private m_DiseaseCode As String
        Private m_DiseaseName As String
        Private m_PhysioDiseaseCategoriesID As String


#End Region

#Region " Properties "



        Public Property PhysioDiseaseNo() As String
            Get
                Return m_PhysioDiseaseNo
            End Get
            Set(ByVal Value As String)
                m_PhysioDiseaseNo = Value
            End Set
        End Property

        Public Property DiseaseCode() As String
            Get
                Return m_DiseaseCode
            End Get
            Set(ByVal Value As String)
                m_DiseaseCode = Value
            End Set
        End Property

        Public Property DiseaseName() As String
            Get
                Return m_DiseaseName
            End Get
            Set(ByVal Value As String)
                m_DiseaseName = Value
            End Set
        End Property

        Public Property PhysioDiseaseCategoriesID() As String
            Get
                Return m_PhysioDiseaseCategoriesID
            End Get
            Set(ByVal Value As String)
                m_PhysioDiseaseCategoriesID = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPhysioDiseases")

            With Parameters

                .Add(New ParameterSQL("PhysioDiseaseNo", Me.PhysioDiseaseNo))
                .Add(New ParameterSQL("DiseaseCode", Me.DiseaseCode))
                .Add(New ParameterSQL("DiseaseName", Me.DiseaseName))
                .Add(New ParameterSQL("PhysioDiseaseCategoriesID", Me.PhysioDiseaseCategoriesID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePhysioDiseases")

            With Parameters

                .Add(New ParameterSQL("PhysioDiseaseNo", Me.PhysioDiseaseNo))
                .Add(New ParameterSQL("DiseaseCode", Me.DiseaseCode))
                .Add(New ParameterSQL("DiseaseName", Me.DiseaseName))
                .Add(New ParameterSQL("PhysioDiseaseCategoriesID", Me.PhysioDiseaseCategoriesID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("PhysioDiseases")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PhysioDiseaseNo = '" + Me.PhysioDiseaseNo + "'"
            Dim errorPart As String = "Physio Disease No: " + Me.PhysioDiseaseNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PhysioDiseases"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PhysioDiseases")

            Return Parameters

        End Function

        Public Function GetPhysioDiseases() As DataSet
            Return GetPhysioDiseases(String.Empty)
        End Function

        Public Function GetPhysioDiseases(ByVal PhysioDiseaseNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PhysioDiseaseNo", PhysioDiseaseNo))
            End With

            Return Me.Load("uspGetPhysioDiseases", "PhysioDiseases", Parameters)

        End Function

        Public Function GetPhysioDiseasesByPhysioDiseaseNo(ByVal PhysioDiseaseNo As String) As DataSet

            ''If (PhysioDiseaseNo = "" OrElse DiseaseCode = String.Empty) Then
            'With Parameters
            '    .Add(New ParameterSQL("PhysioDiseaseNo", Nothing))
            'End With
            'Else
            With Parameters
                .Add(New ParameterSQL("PhysioDiseaseNo", PhysioDiseaseNo))
            End With
            'End If

            Return Me.Load("uspGetPhysioDiseasesByPhysioDiseaseNo", "PhysioDiseases", Parameters)

        End Function

        Public Function GetNextPhysioDiseaseID(ByVal diseaseCode As String) As Integer

            With Parameters
                .Add(New ParameterSQL("DiseaseCode", diseaseCode))
                .Add(New ParameterSQL("DiseaseID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("GetNextPhysioDiseaseID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("DiseaseID")) Then
                    Return CInt(Me.ReadData("DiseaseID"))

                Else : Return 1
                End If

            End If

        End Function

#End Region



    End Class
#End Region

#Region " Utilities "


    Public Class Templates : Inherits DBConnect

#Region " Fields "

        Private m_TemplateName As String
        Private m_TemplateTypeID As String
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property TemplateName() As String
            Get
                Return m_TemplateName
            End Get
            Set(Value As String)
                m_TemplateName = Value
            End Set
        End Property

        Public Property TemplateTypeID() As String
            Get
                Return m_TemplateTypeID
            End Get
            Set(Value As String)
                m_TemplateTypeID = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertTemplates")

            With Parameters
                .Add(New ParameterSQL("TemplateName", Me.TemplateName))
                .Add(New ParameterSQL("TemplateTypeID", Me.TemplateTypeID))
                .Add(New ParameterSQL("Notes", Me.Notes))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateTemplates")

            With Parameters
                .Add(New ParameterSQL("TemplateName", Me.TemplateName))
                .Add(New ParameterSQL("TemplateTypeID", Me.TemplateTypeID))
                .Add(New ParameterSQL("Notes", Me.Notes))
            End With

            'For Audit Trail
            Me.SetLogObject("Templates")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "TemplateName = '" + Me.TemplateName + "'"
            Dim errorPart As String = "Template Name: " + Me.TemplateName

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Templates"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Templates")

            Return Parameters

        End Function

        Private Function GetTemplates(templateName As String, templateTypeID As String) As DataSet

            If templateName <> "" OrElse templateName <> String.Empty And
                (templateTypeID = "" OrElse templateTypeID = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("TemplateName", templateName))
                    .Add(New ParameterSQL("TemplateTypeID", Nothing))
                End With

            ElseIf (templateName = "" OrElse templateName = String.Empty) And
                (templateTypeID <> "" OrElse templateTypeID <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("TemplateName", Nothing))
                    .Add(New ParameterSQL("TemplateTypeID", templateTypeID))
                End With

            ElseIf (templateName = "" OrElse templateName = String.Empty) And
                (templateTypeID = "" OrElse templateTypeID = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("TemplateName", Nothing))
                    .Add(New ParameterSQL("TemplateTypeID", Nothing))
                End With
            End If

            Return Me.Load("uspGetTemplates", "Templates", Parameters)

        End Function

        ''' <summary>
        ''' Gets atemplate corresponding to agiven template name
        ''' </summary>
        ''' <param name="TemplateName"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetTemplates(templateName As String) As DataSet
            Return GetTemplates(templateName, String.Empty)
        End Function

        ''' <summary>
        ''' Gets Templates of agiven template type
        ''' </summary>
        ''' <param name="TemplateTypeID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetTemplatesByTemplateType(templateTypeID As String) As DataSet
            Return GetTemplates(String.Empty, templateTypeID)
        End Function

        ''' <summary>
        ''' Gets all Templates
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetTemplates() As DataSet
            Return GetTemplates(String.Empty, String.Empty)
        End Function

        Public Function GetDrfrequentlyprescribeddrugs(ByVal loginID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("LoginID", loginID))
            End With

            Return Me.Load("uspGetDrfrequentlyprescribeddrugs", "Items", Parameters)

        End Function
        Public Function GetDrfrequentlyRequestedTest(ByVal loginID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("LoginID", loginID))
            End With

            Return Me.Load("uspGetDrfrequentlyRequestedTest", "Items", Parameters)

        End Function




#End Region

    End Class


    Public Class Messenger : Inherits DBConnect

#Region " Fields "

        Private m_ReceiverStaffNo As String
        Private m_MessageInfo As String
        Private m_Status As Boolean

#End Region

#Region " Properties "

        Public Property ReceiverStaffNo() As String
            Get
                Return m_ReceiverStaffNo
            End Get
            Set(ByVal Value As String)
                m_ReceiverStaffNo = Value
            End Set
        End Property

        Public Property MessageInfo() As String
            Get
                Return m_MessageInfo
            End Get
            Set(ByVal Value As String)
                m_MessageInfo = Value
            End Set
        End Property

        Public Property Status() As Boolean
            Get
                Return m_Status
            End Get
            Set(ByVal Value As Boolean)
                m_Status = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertMessenger")

            With Parameters
                .Add(New ParameterSQL("ReceiverStaffNo", Me.ReceiverStaffNo))
                .Add(New ParameterSQL("MessageInfo", Me.MessageInfo))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("Status", Me.Status))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateMessenger")

            With Parameters
                .Add(New ParameterSQL("ReceiverStaffNo", Me.ReceiverStaffNo))
                .Add(New ParameterSQL("MessageInfo", Me.MessageInfo))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("Status", Me.Status))
            End With

            'For Audit Trail
            Me.SetLogObject("Messenger")

            Return Parameters

        End Function

        Public Function GetMessenger() As DataSet

            With Parameters
            End With

            Return Me.Load("uspGetMessenger", "Messenger", Parameters)

        End Function

        Public Function GetOutboxMessages(loginID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("LoginID", loginID))
            End With

            Return Me.Load("uspGetMessenger", "Messenger", Parameters)

        End Function

        Public Function GetInboxMessages(loginID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("LoginID", loginID))
            End With

            Return Me.Load("uspGetInboxMessages", "Messenger", Parameters)

        End Function

        Public Function GetUnreadMessages(loginID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("LoginID", loginID))
            End With
            Return Me.Load("uspGetUnReadMessages", "Messenger", Parameters)

        End Function

        Public Function GetClearReadMessages(loginID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("LoginID", loginID))
            End With
            Return Me.Load("uspGetClearReadMessages", "Messenger", Parameters)

        End Function

#End Region

    End Class


    Public Class Queues : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ServicePointID As String
        Private m_CurrentServicePointID As String
        Private m_PriorityID As String
        Private m_QueueStatus As Boolean
        Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ServicePointID() As String
            Get
                Return m_ServicePointID
            End Get
            Set(ByVal Value As String)
                m_ServicePointID = Value
            End Set
        End Property

        Public Property CurrentServicePointID() As String
            Get
                Return m_CurrentServicePointID
            End Get
            Set(ByVal Value As String)
                m_CurrentServicePointID = Value
            End Set
        End Property

        Public Property PriorityID() As String
            Get
                Return m_PriorityID
            End Get
            Set(ByVal Value As String)
                m_PriorityID = Value
            End Set
        End Property

        Public Property QueueStatus() As Boolean
            Get
                Return m_QueueStatus
            End Get
            Set(ByVal Value As Boolean)
                m_QueueStatus = Value
            End Set
        End Property

        Public Property RecordDateTime() As Date
            Get
                Return m_RecordDateTime
            End Get
            Set(ByVal Value As Date)
                m_RecordDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditQueues")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ServicePointID", Me.ServicePointID))
                .Add(New ParameterSQL("PriorityID", Me.PriorityID))
                .Add(New ParameterSQL("QueueStatus", Me.QueueStatus))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", Me.LoginID))
            End With

            Return Parameters

        End Function


        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and ServicePointID = '" + Me.ServicePointID + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo + " And Service Point No: " + Me.ServicePointID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Queues"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Queues")

            Return Parameters

        End Function

        Public Function GetQueues(ByVal visitNo As String, ByVal servicePointID As String, ByVal branchID As String) As DataSet

            If Not String.IsNullOrEmpty(visitNo) AndAlso
                Not String.IsNullOrEmpty(servicePointID) AndAlso Not String.IsNullOrEmpty(branchID) Then

                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ServicePointID", servicePointID))
                    .Add(New ParameterSQL("BranchID", branchID))

                End With

            ElseIf String.IsNullOrEmpty(visitNo) AndAlso Not String.IsNullOrEmpty(servicePointID) AndAlso
                Not String.IsNullOrEmpty(branchID) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", Nothing))
                    .Add(New ParameterSQL("ServicePointID", servicePointID))
                    .Add(New ParameterSQL("BranchID", branchID))

                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("VisitNo", Nothing))
                    .Add(New ParameterSQL("ServicePointID", Nothing))
                    .Add(New ParameterSQL("BranchID", branchID))

                End With

            End If


            Return Me.Load("uspGetQueues", "Queues", Parameters)

        End Function

#End Region



    End Class

    Public Class QueuedMessages : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ServicePointID As String
        Private m_TokenNo As String
        Private m_RoomNameID As String
        Private m_ReadCount As Integer
        Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ServicePointID() As String
            Get
                Return m_ServicePointID
            End Get
            Set(ByVal Value As String)
                m_ServicePointID = Value
            End Set
        End Property

        Public Property TokenNo() As String
            Get
                Return m_TokenNo
            End Get
            Set(ByVal Value As String)
                m_TokenNo = Value
            End Set
        End Property

        Public Property RoomNameID() As String
            Get
                Return m_RoomNameID
            End Get
            Set(ByVal Value As String)
                m_RoomNameID = Value
            End Set
        End Property

        Public Property ReadCount() As Integer
            Get
                Return m_ReadCount
            End Get
            Set(ByVal Value As Integer)
                m_ReadCount = Value
            End Set
        End Property

        Public Property RecordDateTime() As Date
            Get
                Return m_RecordDateTime
            End Get
            Set(ByVal Value As Date)
                m_RecordDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditQueuedMessages")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ServicePointID", Me.ServicePointID))
                .Add(New ParameterSQL("TokenNo", Me.TokenNo))
                .Add(New ParameterSQL("RoomNameID", Me.RoomNameID))
                .Add(New ParameterSQL("ReadCount", Me.ReadCount))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            Return Parameters

        End Function


        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and ServicePointID = '" + Me.ServicePointID + "' and TokenNo = '" + Me.TokenNo + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo + " And Service Point No: " + Me.ServicePointID + " And Token No: " + Me.TokenNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "QueuedMessages"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("QueuedMessages")

            Return Parameters

        End Function

        Public Function GetQueuedMessages(ByVal visitNo As String, ByVal branchID As String, ByVal servicePointID As String, ByVal tokenNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
                .Add(New ParameterSQL("BranchID", branchID))
                .Add(New ParameterSQL("ServicePointID", servicePointID))
                .Add(New ParameterSQL("TokenNo", tokenNo))
            End With

            Return Me.Load("uspGetQueuedMessages", "QueuedMessages", Parameters)

        End Function


        Public Function GetUnReadQueuedMessages(ByVal branchID As String, ByVal servicePointID As String, ByVal readCount As Integer) As DataSet
            If Not String.IsNullOrEmpty(servicePointID) Then
                With Parameters
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ServicePointID", servicePointID))
                    .Add(New ParameterSQL("MaxReadCount", readCount))

                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("BranchID", branchID))
                    .Add(New ParameterSQL("ServicePointID", Nothing))
                    .Add(New ParameterSQL("MaxReadCount", readCount))

                End With
            End If


            Return Me.Load("uspGetUnReadQueuedMessages", "QueuedMessages", Parameters)

        End Function

#End Region



    End Class


    Public Class BarCodeDetails : Inherits DBConnect

#Region " Fields "

        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_BarCode As String


#End Region

#Region " Properties "

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property BarCode() As String
            Get
                Return m_BarCode
            End Get
            Set(ByVal Value As String)
                m_BarCode = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertBarCodeDetails")

            With Parameters
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("BarCode", Me.BarCode))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Public Function GetBarCodeDetails(ByVal barCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("BarCode", barCode))
            End With

            Return Me.Load("uspGetBarCodeDetails", "BarCodeDetails", Parameters)

        End Function

#End Region

    End Class


    Public Class MappedCodes : Inherits DBConnect

#Region " Fields "

        Private m_AccountNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_CustomCode As String

#End Region

#Region " Properties "

        Public Property AccountNo() As String
            Get
                Return m_AccountNo
            End Get
            Set(ByVal Value As String)
                m_AccountNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property CustomCode() As String
            Get
                Return m_CustomCode
            End Get
            Set(ByVal Value As String)
                m_CustomCode = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertMappedCodes")

            With Parameters
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("CustomCode", Me.CustomCode))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateMappedCodes")

            With Parameters
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("CustomCode", Me.CustomCode))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("MappedCodes")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "AccountNo = '" + Me.AccountNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "' and CustomCode = '" + Me.CustomCode + "'"
            Dim errorPart As String = "AccountNo: " + Me.AccountNo + " and ItemCode: " + Me.ItemCode + " and ItemCategoryID: " + Me.ItemCategoryID + " and CustomCode: " + Me.CustomCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "MappedCodes"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("MappedCodes")

            Return Parameters

        End Function

        Public Function GetMappedCodes(ByVal accountNo As String, ByVal itemCode As String, ByVal itemCategoryID As String, ByVal customCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AccountNo", accountNo))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("CustomCode", customCode))
            End With

            Return Me.Load("uspGetMappedCodes", "MappedCodes", Parameters)

        End Function

#End Region

    End Class


    Public Class StaffLocations : Inherits DBConnect

#Region " Fields "

        Private m_StaffLoginID As String
        Private m_LocationID As String
        Private m_StartDate As Date
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property StaffLoginID() As String
            Get
                Return m_StaffLoginID
            End Get
            Set(ByVal Value As String)
                m_StaffLoginID = Value
            End Set
        End Property

        Public Property LocationID() As String
            Get
                Return m_LocationID
            End Get
            Set(ByVal Value As String)
                m_LocationID = Value
            End Set
        End Property

        Public Property StartDate() As Date
            Get
                Return m_StartDate
            End Get
            Set(ByVal Value As Date)
                m_StartDate = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertStaffLocations")

            With Parameters
                .Add(New ParameterSQL("StaffLoginID", Me.StaffLoginID))
                .Add(New ParameterSQL("LocationID", Me.LocationID))
                .Add(New ParameterSQL("StartDate", Me.StartDate))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateStaffLocations")

            With Parameters
                .Add(New ParameterSQL("StaffLoginID", Me.StaffLoginID))
                .Add(New ParameterSQL("LocationID", Me.LocationID))
                .Add(New ParameterSQL("StartDate", Me.StartDate))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("StaffLocations")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "StaffLoginID = '" + Me.StaffLoginID + "' and LocationID = '" + Me.LocationID + "' and StartDate = '" + Me.StartDate.ToString() + "'"
            Dim errorPart As String = "StaffLoginID: " + Me.StaffLoginID + " and LocationID: " + Me.LocationID + " and StartDate: " + Me.StartDate.ToString()

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "StaffLocations"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("StaffLocations")

            Return Parameters

        End Function

        Public Function GetStaffLocations(staffLoginID As String) As String

            With Parameters
                .Add(New ParameterSQL("StaffLoginID", staffLoginID))
                .Add(New ParameterSQL("LocationID", SqlDbType.VarChar, 10))
            End With


            Me.ReadData = Me.Read("uspGetStaffLocations", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("LocationID")) Then
                    Me.LocationID = CStr(Me.ReadData("LocationID"))
                Else : Me.LocationID = String.Empty
                End If

                Return Me.LocationID
            Else : Return String.Empty
            End If

        End Function

#End Region



    End Class


    Public Class ImportDataInfo : Inherits DBConnect

#Region " Fields "

        Private m_ItemCode As String
        Private m_SourceName As String
        Private m_SourceCaption As String
        Private m_DatabaseTypeID As String
        Private m_ConnectionModeID As String
        Private m_ImportServer As String
        Private m_ImportLogin As String
        Private m_ImportPassword As String
        Private m_SP_Name As String

#End Region

#Region " Properties "

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property SourceName() As String
            Get
                Return m_SourceName
            End Get
            Set(Value As String)
                m_SourceName = Value
            End Set
        End Property

        Public Property SourceCaption() As String
            Get
                Return m_SourceCaption
            End Get
            Set(Value As String)
                m_SourceCaption = Value
            End Set
        End Property

        Public Property DatabaseTypeID() As String
            Get
                Return m_DatabaseTypeID
            End Get
            Set(Value As String)
                m_DatabaseTypeID = Value
            End Set
        End Property

        Public Property ConnectionModeID() As String
            Get
                Return m_ConnectionModeID
            End Get
            Set(Value As String)
                m_ConnectionModeID = Value
            End Set
        End Property

        Public Property ImportServer() As String
            Get
                Return m_ImportServer
            End Get
            Set(Value As String)
                m_ImportServer = Value
            End Set
        End Property

        Public Property ImportLogin() As String
            Get
                Return m_ImportLogin
            End Get
            Set(Value As String)
                m_ImportLogin = Value
            End Set
        End Property

        Public Property ImportPassword() As String
            Get
                Return m_ImportPassword
            End Get
            Set(Value As String)
                m_ImportPassword = Value
            End Set
        End Property

        Public Property SP_Name() As String
            Get
                Return m_SP_Name
            End Get
            Set(Value As String)
                m_SP_Name = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertImportDataInfo")

            With Parameters
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("SourceName", Me.SourceName))
                .Add(New ParameterSQL("SourceCaption", Me.SourceCaption))
                .Add(New ParameterSQL("DatabaseTypeID", Me.DatabaseTypeID))
                .Add(New ParameterSQL("ConnectionModeID", Me.ConnectionModeID))
                .Add(New ParameterSQL("ImportServer", Me.ImportServer))
                .Add(New ParameterSQL("ImportLogin", Me.ImportLogin))
                .Add(New ParameterSQL("ImportPassword", Encrypt(Me.ImportPassword)))
                .Add(New ParameterSQL("SP_Name", Me.SP_Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateImportDataInfo")

            With Parameters
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("SourceName", Me.SourceName))
                .Add(New ParameterSQL("SourceCaption", Me.SourceCaption))
                .Add(New ParameterSQL("DatabaseTypeID", Me.DatabaseTypeID))
                .Add(New ParameterSQL("ConnectionModeID", Me.ConnectionModeID))
                .Add(New ParameterSQL("ImportServer", Me.ImportServer))
                .Add(New ParameterSQL("ImportLogin", Me.ImportLogin))
                .Add(New ParameterSQL("ImportPassword", Encrypt(Me.ImportPassword)))
                .Add(New ParameterSQL("SP_Name", Me.SP_Name))
            End With

            'For Audit Trail
            Me.SetLogObject("ImportDataInfo")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ItemCode = '" + Me.ItemCode + "' and SourceName = '" + Me.SourceName + "' and SourceCaption = '" + Me.SourceCaption + "'"
            Dim errorPart As String = "Item Code: " + Me.ItemCode + " and Source Name: " + Me.SourceName + " and Source Caption: " + Me.SourceCaption

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ImportDataInfo"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ImportDataInfo")

            Return Parameters

        End Function

        Public Function GetImportDataInfo(itemCode As String, sourceName As String, sourceCaption As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("SourceName", sourceName))
                .Add(New ParameterSQL("SourceCaption", sourceCaption))
            End With

            Return Me.Load("uspGetImportDataInfo", "ImportDataInfo", Parameters)

        End Function

        ''' <summary>
        ''' Returns all external lab results from source caption as per specified test date and time period like a supplied specimen no
        ''' </summary>
        ''' <param name="sourceCaption"></param>
        ''' <param name="startDateTime"></param>
        ''' <param name="endDateTime"></param>
        ''' <param name="specimenNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetExternalLabResults(sourceCaption As String, startDateTime As Date, endDateTime As Date, specimenNo As String) As DataSet

            If Not String.IsNullOrEmpty(specimenNo) Then
                With Parameters
                    .Add(New ParameterSQL("SourceCaption", sourceCaption))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("SpecimenNo", specimenNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("SourceCaption", sourceCaption))
                    .Add(New ParameterSQL("StartDateTime", startDateTime))
                    .Add(New ParameterSQL("EndDateTime", endDateTime))
                    .Add(New ParameterSQL("SpecimenNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetExternalLabResults", "ImportDataInfo", Parameters)

        End Function

        ''' <summary>
        ''' Returns all external lab results from source caption as per specified test date and time period
        ''' </summary>
        ''' <param name="sourceCaption"></param>
        ''' <param name="startDateTime"></param>
        ''' <param name="endDateTime"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetExternalLabResults(sourceCaption As String, startDateTime As Date, endDateTime As Date) As DataSet
            Return GetExternalLabResults(sourceCaption, startDateTime, endDateTime, String.Empty)
        End Function

        Public Function GetImportDataSources(itemCode As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ItemCode", itemCode))
            End With

            Return Me.Load("uspGetImportDataSources", "ImportDataInfo", Parameters)

        End Function

#End Region

    End Class

    Public Class OutwardFiles : Inherits DBConnect

#Region " Fields "

        Private m_OutwardNo As String
        Private m_FileNo As String
        Private m_TakenDateTime As Date
        Private m_TakenBy As String
        Private m_BillAccountName As String
        Private m_VisitNo As String

#End Region

#Region " Properties "

        Public Property OutwardNo() As String
            Get
                Return m_OutwardNo
            End Get
            Set(Value As String)
                m_OutwardNo = Value
            End Set
        End Property

        Public Property FileNo() As String
            Get
                Return m_FileNo
            End Get
            Set(Value As String)
                m_FileNo = Value
            End Set
        End Property

        Public Property TakenDateTime() As Date
            Get
                Return m_TakenDateTime
            End Get
            Set(Value As Date)
                m_TakenDateTime = Value
            End Set
        End Property

        Public Property TakenBy() As String
            Get
                Return m_TakenBy
            End Get
            Set(Value As String)
                m_TakenBy = Value
            End Set
        End Property

        Public Property BillAccountName() As String
            Get
                Return m_BillAccountName
            End Get
            Set(Value As String)
                m_BillAccountName = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertOutwardFiles")

            With Parameters
                .Add(New ParameterSQL("OutwardNo", Me.OutwardNo))
                .Add(New ParameterSQL("FileNo", Me.FileNo))
                .Add(New ParameterSQL("TakenDateTime", Me.TakenDateTime))
                .Add(New ParameterSQL("TakenBy", Me.TakenBy))
                .Add(New ParameterSQL("BillAccountName", Me.BillAccountName))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateOutwardFiles")

            With Parameters
                .Add(New ParameterSQL("OutwardNo", Me.OutwardNo))
                .Add(New ParameterSQL("TakenDateTime", Me.TakenDateTime))
                .Add(New ParameterSQL("TakenBy", Me.TakenBy))
                .Add(New ParameterSQL("BillAccountName", Me.BillAccountName))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("OutwardFiles")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "OutwardNo = '" + Me.OutwardNo + "'"
            Dim errorPart As String = "Outward No: " + Me.OutwardNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "OutwardFiles"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("OutwardFiles")

            Return Parameters

        End Function

        Public Function GetOutwardFiles(outwardNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("OutwardNo", outwardNo))
            End With

            Return Me.Load("uspGetOutwardFiles", "OutwardFiles", Parameters)

        End Function

        Public Function GetNextOutwardID(fileNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("FileNo", fileNo))
                .Add(New ParameterSQL("OutwardID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextOutwardID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("OutwardID")) Then
                    Return CInt(Me.ReadData("OutwardID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function GetOutwardNo(fileNo As String, takenDateTime As Nullable(Of Date)) As String

            Dim oAppData As New SyncSoft.Common.Classes.AppData()

            If IsNothing(takenDateTime) OrElse CDate(takenDateTime).Equals(oAppData.NullDateValue) Then
                With Parameters
                    .Add(New ParameterSQL("FileNo", fileNo))
                    .Add(New ParameterSQL("TakenDateTime", SqlDbType.SmallDateTime))
                    .Add(New ParameterSQL("OutwardNo", SqlDbType.VarChar, 20))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("FileNo", fileNo))
                    .Add(New ParameterSQL("TakenDateTime", takenDateTime))
                    .Add(New ParameterSQL("OutwardNo", SqlDbType.VarChar, 20))
                End With
            End If

            Me.ReadData = Me.Read("uspGetOutwardNo", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("OutwardNo")) Then
                    Return CStr(Me.ReadData("OutwardNo"))
                Else : Return String.Empty
                End If

            Else : Return Nothing
            End If

        End Function

        Public Function GetOutwardNo(fileNo As String) As String
            Return Me.GetOutwardNo(fileNo, Nothing)
        End Function

        Public Function GetOutWardFilesSummary(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))

            End With

            Return Me.Load("uspGetOutWardFilesSummary", "OutwardFiles", Parameters)

        End Function

        Public Function GetNotSeenOutWardFiles(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))

            End With

            Return Me.Load("uspGetNotSeenOutWardFiles", "OutwardFiles", Parameters)

        End Function

        Public Function GetDoctorSeenOutWardFiles(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))

            End With

            Return Me.Load("uspGetDoctorSeenOutWardFiles", "OutwardFiles", Parameters)

        End Function

#End Region

    End Class

    Public Class InwardFiles : Inherits DBConnect

#Region " Fields "

        Private m_OutwardNo As String
        Private m_ReturnDateTime As Date
        Private m_ReturnedBy As String

#End Region

#Region " Properties "

        Public Property OutwardNo() As String
            Get
                Return m_OutwardNo
            End Get
            Set(Value As String)
                m_OutwardNo = Value
            End Set
        End Property

        Public Property ReturnDateTime() As Date
            Get
                Return m_ReturnDateTime
            End Get
            Set(Value As Date)
                m_ReturnDateTime = Value
            End Set
        End Property

        Public Property ReturnedBy() As String
            Get
                Return m_ReturnedBy
            End Get
            Set(Value As String)
                m_ReturnedBy = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertInwardFiles")

            With Parameters
                .Add(New ParameterSQL("OutwardNo", Me.OutwardNo))
                .Add(New ParameterSQL("ReturnDateTime", Me.ReturnDateTime))
                .Add(New ParameterSQL("ReturnedBy", Me.ReturnedBy))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateInwardFiles")

            With Parameters
                .Add(New ParameterSQL("OutwardNo", Me.OutwardNo))
                .Add(New ParameterSQL("ReturnDateTime", Me.ReturnDateTime))
                .Add(New ParameterSQL("ReturnedBy", Me.ReturnedBy))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("InwardFiles")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "OutwardNo = '" + Me.OutwardNo + "'"
            Dim errorPart As String = "Outward No: " + Me.OutwardNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "InwardFiles"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("InwardFiles")

            Return Parameters

        End Function

        Public Function GetInwardFiles(outwardNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("OutwardNo", outwardNo))
            End With

            Return Me.Load("uspGetInwardFiles", "InwardFiles", Parameters)

        End Function

#End Region

    End Class

    Public Class SmartCardAuthorisations : Inherits DBConnect

#Region " Fields "

        Private m_PatientNo As String
        Private m_BillModesID As String
        Private m_BillNo As String
        Private m_ToVisitDate As Date
        Private m_MedicalCardNo As String
        Private m_AuthorisedBy As String
        Private m_AuthorisationReason As String
        Private m_ClaimReferenceNo As String

#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property BillModesID() As String
            Get
                Return m_BillModesID
            End Get
            Set(Value As String)
                m_BillModesID = Value
            End Set
        End Property

        Public Property BillNo() As String
            Get
                Return m_BillNo
            End Get
            Set(Value As String)
                m_BillNo = Value
            End Set
        End Property

        Public Property ToVisitDate() As Date
            Get
                Return m_ToVisitDate
            End Get
            Set(Value As Date)
                m_ToVisitDate = Value
            End Set
        End Property

        Public Property MedicalCardNo() As String
            Get
                Return m_MedicalCardNo
            End Get
            Set(Value As String)
                m_MedicalCardNo = Value
            End Set
        End Property

        Public Property AuthorisedBy() As String
            Get
                Return m_AuthorisedBy
            End Get
            Set(Value As String)
                m_AuthorisedBy = Value
            End Set
        End Property

        Public Property AuthorisationReason() As String
            Get
                Return m_AuthorisationReason
            End Get
            Set(Value As String)
                m_AuthorisationReason = Value
            End Set
        End Property

        Public Property ClaimReferenceNo() As String
            Get
                Return m_ClaimReferenceNo
            End Get
            Set(Value As String)
                m_ClaimReferenceNo = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertSmartCardAuthorisations")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("BillModesID", Me.BillModesID))
                .Add(New ParameterSQL("BillNo", Me.BillNo))
                .Add(New ParameterSQL("ToVisitDate", Me.ToVisitDate))
                .Add(New ParameterSQL("MedicalCardNo", Me.MedicalCardNo))
                .Add(New ParameterSQL("AuthorisedBy", Me.AuthorisedBy))
                .Add(New ParameterSQL("AuthorisationReason", Me.AuthorisationReason))
                .Add(New ParameterSQL("ClaimReferenceNo", Me.ClaimReferenceNo))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateSmartCardAuthorisations")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("BillModesID", Me.BillModesID))
                .Add(New ParameterSQL("BillNo", Me.BillNo))
                .Add(New ParameterSQL("ToVisitDate", Me.ToVisitDate))
                .Add(New ParameterSQL("MedicalCardNo", Me.MedicalCardNo))
                .Add(New ParameterSQL("AuthorisedBy", Me.AuthorisedBy))
                .Add(New ParameterSQL("AuthorisationReason", Me.AuthorisationReason))
                .Add(New ParameterSQL("ClaimReferenceNo", Me.ClaimReferenceNo))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("SmartCardAuthorisations")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PatientNo = '" + Me.PatientNo + "' and BillModesID = '" + Me.BillModesID + "' and BillNo = '" + Me.BillNo + "' and ToVisitDate = '" + FormatDate(Me.ToVisitDate) + "'"
            Dim errorPart As String = "Patient No: " + Me.PatientNo + " and Bill Modes: " + Me.BillModesID + " and Bill No: " + Me.BillNo + " and To-Visit Date: " + Me.ToVisitDate.ToString()

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "SmartCardAuthorisations"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("SmartCardAuthorisations")

            Return Parameters

        End Function

        Public Function GetSmartCardAuthorisations(patientNo As String, billModesID As String, billNo As String, toVisitDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
                .Add(New ParameterSQL("BillModesID", billModesID))
                .Add(New ParameterSQL("BillNo", billNo))
                .Add(New ParameterSQL("ToVisitDate", toVisitDate))
            End With

            Return Me.Load("uspGetSmartCardAuthorisations", "SmartCardAuthorisations", Parameters)

        End Function

        ''' <summary>
        ''' Indicates wheather patient is authorised or not
        ''' </summary>
        ''' <param name="patientNo"></param>
        ''' <param name="billModesID"></param>
        ''' <param name="billNo"></param>
        ''' <param name="toVisitDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function IsSmartCardAuthorized(patientNo As String, billModesID As String, billNo As String, toVisitDate As Date) As Boolean

            Dim authorized As Boolean

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
                .Add(New ParameterSQL("BillModesID", billModesID))
                .Add(New ParameterSQL("BillNo", billNo))
                .Add(New ParameterSQL("ToVisitDate", toVisitDate))
                .Add(New ParameterSQL("IsSmartCardAuthorized", SqlDbType.Bit))
            End With

            Me.ReadData = Read("uspIsSmartCardAuthorized", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("IsSmartCardAuthorized")) Then
                    authorized = False
                Else : authorized = CBool(Me.ReadData("IsSmartCardAuthorized"))
                End If
            End If

            Return authorized

        End Function

        ''' <summary>
        ''' Indicates wheather bill account is smart card applicable or not
        ''' </summary>
        ''' <param name="billModesID"></param>
        ''' <param name="billNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function IsSmartCardApplicable(billModesID As String, billNo As String) As Boolean

            Dim applicable As Boolean

            With Parameters
                .Add(New ParameterSQL("BillModesID", billModesID))
                .Add(New ParameterSQL("BillNo", billNo))
                .Add(New ParameterSQL("IsSmartCardApplicable", SqlDbType.Bit))
            End With

            Me.ReadData = Read("uspIsSmartCardApplicable", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("IsSmartCardApplicable")) Then
                    applicable = False
                Else : applicable = CBool(Me.ReadData("IsSmartCardApplicable"))
                End If
            End If

            Return applicable

        End Function

#End Region

    End Class

    Public Class ItemUnitPrice : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_UnitPrice As Nullable(Of Decimal)
        Private m_UnitCost As Nullable(Of Decimal)

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property UnitPrice() As Nullable(Of Decimal)
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Nullable(Of Decimal))
                m_UnitPrice = Value
            End Set
        End Property

        Public Property UnitCost() As Nullable(Of Decimal)
            Get
                Return m_UnitCost
            End Get
            Set(Value As Nullable(Of Decimal))
                m_UnitCost = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateItemUnitPrice")

            With Parameters
                If String.IsNullOrEmpty(Me.VisitNo) Then
                    .Add(New ParameterSQL("VisitNo", Nothing))
                Else : .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                End If
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                If Me.UnitPrice Is Nothing OrElse Me.UnitPrice < 0 Then
                    .Add(New ParameterSQL("UnitPrice", Nothing))
                Else : .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                End If
                If Me.UnitCost Is Nothing OrElse Me.UnitCost < 0 Then
                    .Add(New ParameterSQL("UnitCost", Nothing))
                Else : .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                End If
            End With

            'For Audit Trail
            Me.SetLogObject("ItemUnitPrice")

            Return Parameters

        End Function

#End Region

    End Class

    Public Class IPDItemUnitPrice : Inherits DBConnect

#Region " Fields "

        Private m_ExtraBillNo As String
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_UnitPrice As Nullable(Of Decimal)
        Private m_UnitCost As Nullable(Of Decimal)

#End Region

#Region " Properties "

        Public Property ExtraBillNo() As String
            Get
                Return m_ExtraBillNo
            End Get
            Set(Value As String)
                m_ExtraBillNo = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property UnitPrice() As Nullable(Of Decimal)
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Nullable(Of Decimal))
                m_UnitPrice = Value
            End Set
        End Property

        Public Property UnitCost() As Nullable(Of Decimal)
            Get
                Return m_UnitCost
            End Get
            Set(Value As Nullable(Of Decimal))
                m_UnitCost = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDItemUnitPrice")

            With Parameters
                If String.IsNullOrEmpty(Me.ExtraBillNo) Then
                    .Add(New ParameterSQL("ExtraBillNo", Nothing))
                Else : .Add(New ParameterSQL("ExtraBillNo", Me.ExtraBillNo))
                End If
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                If Me.UnitPrice Is Nothing OrElse Me.UnitPrice < 0 Then
                    .Add(New ParameterSQL("UnitPrice", Nothing))
                Else : .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                End If
                If Me.UnitCost Is Nothing OrElse Me.UnitCost < 0 Then
                    .Add(New ParameterSQL("UnitCost", Nothing))
                Else : .Add(New ParameterSQL("UnitCost", Me.UnitCost))
                End If
            End With

            'For Audit Trail
            Me.SetLogObject("IPDItemUnitPrice")

            Return Parameters

        End Function

#End Region

    End Class


    Public Class ItemsVATPercentage : Inherits DBConnect

#Region " Fields "
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_VATPercentage As Decimal


#End Region

#Region " Properties "

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(ByVal Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(ByVal Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(ByVal Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateItemsVATPercentage")

            With Parameters
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))

            End With

            Return Parameters

        End Function



#End Region



    End Class


    Public Class Alerts : Inherits DBConnect

#Region " Fields "

        Private m_AlertID As Integer
        Private m_AlertTypeID As String
        Private m_VisitNo As String
        Private m_StaffNo As String
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property AlertID() As Integer
            Get
                Return m_AlertID
            End Get
            Set(Value As Integer)
                m_AlertID = Value
            End Set
        End Property

        Public Property AlertTypeID() As String
            Get
                Return m_AlertTypeID
            End Get
            Set(Value As String)
                m_AlertTypeID = Value
            End Set
        End Property

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertAlerts")

            With Parameters
                .Add(New ParameterSQL("AlertTypeID", Me.AlertTypeID))
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "AlertID = '" + Me.AlertID.ToString() + "'"
            Dim errorPart As String = "Alert ID: " + Me.AlertID.ToString()

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Alerts"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            'Me.SetLogObject("Alerts")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets all alerts of supplied alert type corresponding to the Logged in user
        ''' </summary>
        ''' <param name="alertTypeID"></param>
        ''' <param name="staffLoginID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetAlerts(alertTypeID As String, staffLoginID As String) As DataSet

            If staffLoginID <> "" OrElse staffLoginID <> String.Empty Then
                With Parameters
                    .Add(New ParameterSQL("AlertTypeID", alertTypeID))
                    .Add(New ParameterSQL("StaffLoginID", staffLoginID))
                End With

            ElseIf (staffLoginID = "" OrElse staffLoginID = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("AlertTypeID", alertTypeID))
                    .Add(New ParameterSQL("StaffLoginID", Nothing))
                End With
            End If

            Return Me.Load("uspGetAlerts", "Alerts", Parameters)

        End Function

        ''' <summary>
        ''' Gets all alerts of supplied alert type 
        ''' </summary>
        ''' <param name="alertTypeID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetAlerts(alertTypeID As String) As DataSet
            Return GetAlerts(alertTypeID, String.Empty)
        End Function

#End Region

    End Class

    Public Class IPDAlerts : Inherits DBConnect

#Region " Fields "

        Private m_AlertID As Integer
        Private m_AlertTypeID As String
        Private m_RoundNo As String
        Private m_StaffNo As String
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property AlertID() As Integer
            Get
                Return m_AlertID
            End Get
            Set(Value As Integer)
                m_AlertID = Value
            End Set
        End Property

        Public Property AlertTypeID() As String
            Get
                Return m_AlertTypeID
            End Get
            Set(Value As String)
                m_AlertTypeID = Value
            End Set
        End Property

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property StaffNo() As String
            Get
                Return m_StaffNo
            End Get
            Set(Value As String)
                m_StaffNo = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertIPDAlerts")

            With Parameters
                .Add(New ParameterSQL("AlertTypeID", Me.AlertTypeID))
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("StaffNo", Me.StaffNo))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "AlertID = '" + Me.AlertID.ToString() + "'"
            Dim errorPart As String = "Alert ID: " + Me.AlertID.ToString()

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDAlerts"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            'Me.SetLogObject("IPDAlerts")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets all IPDAlerts of supplied alert type corresponding to the Logged in user
        ''' </summary>
        ''' <param name="alertTypeID"></param>
        ''' <param name="staffLoginID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDAlerts(alertTypeID As String, staffLoginID As String) As DataSet

            If staffLoginID <> "" OrElse staffLoginID <> String.Empty Then
                With Parameters
                    .Add(New ParameterSQL("AlertTypeID", alertTypeID))
                    .Add(New ParameterSQL("StaffLoginID", staffLoginID))
                End With

            ElseIf (staffLoginID = "" OrElse staffLoginID = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("AlertTypeID", alertTypeID))
                    .Add(New ParameterSQL("StaffLoginID", Nothing))
                End With
            End If

            Return Me.Load("uspGetIPDAlerts", "IPDAlerts", Parameters)

        End Function

        ''' <summary>
        ''' Gets all IPDAlerts of supplied alert type 
        ''' </summary>
        ''' <param name="alertTypeID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDAlerts(alertTypeID As String) As DataSet
            Return GetIPDAlerts(alertTypeID, String.Empty)
        End Function

#End Region

    End Class

#End Region

#Region " Reports "

    Public Class Reports : Inherits DBConnect

#Region " Fields "

#End Region

#Region " Properties "

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Public Function GetIncomeSummaries(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetIncomeSummaries", "Reports", Parameters)

        End Function

        Public Function GetIncomeSummariesByBills(startDate As Date, endDate As Date, billModesID As String,
                                                  billNo As String, companyNo As String) As DataSet

            If Not String.IsNullOrEmpty(companyNo) Then

                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetIncomeSummariesByBills", "Reports", Parameters)

        End Function

        Public Function GetIncomeSummariesByBills(startDate As Date, endDate As Date, billModesID As String,
                                                  billNo As String) As DataSet
            Return GetIncomeSummariesByBills(startDate, endDate, billModesID, billNo, String.Empty)
        End Function

        Public Function GetExtraChargeSummaries(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetExtraChargeSummaries", "Reports", Parameters)

        End Function

        Public Function GetExtraChargeSummariesByBills(startDate As Date, endDate As Date, billModesID As String,
                                                billNo As String, companyNo As String) As DataSet

            If Not String.IsNullOrEmpty(companyNo) Then

                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetExtraChargeSummariesByBills", "Reports", Parameters)

        End Function

        Public Function GetExtraChargeSummariesByBills(startDate As Date, endDate As Date, billModesID As String,
                                                  billNo As String) As DataSet
            Return GetExtraChargeSummariesByBills(startDate, endDate, billModesID, billNo, String.Empty)
        End Function

        Public Function GetDoctorVisitSummaries(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetDoctorVisitSummaries", "Reports", Parameters)

        End Function

        Public Function GetDoctorSpecialtyVisitSummaries(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetDoctorSpecialtyVisitSummaries", "Reports", Parameters)

        End Function

        Public Function GetIncomePaymentDetailsSummaries(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetIncomePaymentDetailsSummaries", "Reports", Parameters)

        End Function

        Public Function GetDetailedIncomePaymentDetailsSummaries(startDate As Date, endDate As Date, itemCategory As String) As DataSet



            If Not String.IsNullOrEmpty(itemCategory) Then

                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategory))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With
            End If

            Return Me.Load("uspGetDetailedIncomePaymentDetailsSummaries", "Reports", Parameters)

        End Function

        Public Function GetIPDDetailedIncomePaymentDetailsSummaries(startDate As Date, endDate As Date, itemCategory As String) As DataSet



            If Not String.IsNullOrEmpty(itemCategory) Then

                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategory))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With
            End If

            Return Me.Load("uspGetIPDDetailedIncomePaymentDetailsSummaries", "Reports", Parameters)

        End Function


        Public Function GetDetailedIncomePaymentDetailsSummaries(startDate As Date, endDate As Date) As DataSet
            Return GetDetailedIncomePaymentDetailsSummaries(startDate, endDate, String.Empty)
        End Function


        Public Function GetIPDDetailedIncomePaymentDetailsSummaries(startDate As Date, endDate As Date) As DataSet
            Return GetIPDDetailedIncomePaymentDetailsSummaries(startDate, endDate, String.Empty)
        End Function

        Public Function GetDetailedNotPaidIncomePaymentDetailsSummaries(startDate As Date, endDate As Date, itemCategory As String) As DataSet



            If Not String.IsNullOrEmpty(itemCategory) Then

                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategory))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With
            End If

            Return Me.Load("uspGetDetailedNotPaidIncomePaymentDetailsSummaries", "Reports", Parameters)

        End Function

        Public Function GetDetailedNotPaidIncomePaymentDetailsSummaries(startDate As Date, endDate As Date) As DataSet
            Return GetDetailedNotPaidIncomePaymentDetailsSummaries(startDate, endDate, String.Empty)
        End Function

        Public Function GetDetailedIPDNotPaidIncomePaymentDetailsSummaries(startDate As Date, endDate As Date, itemCategory As String) As DataSet



            If Not String.IsNullOrEmpty(itemCategory) Then

                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategory))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With
            End If

            Return Me.Load("uspGetDetailedIPDNotPaidIncomePaymentDetailsSummaries", "Reports", Parameters)

        End Function

        Public Function GetDetailedIPDNotPaidIncomePaymentDetailsSummaries(startDate As Date, endDate As Date) As DataSet
            Return GetDetailedIPDNotPaidIncomePaymentDetailsSummaries(startDate, endDate, String.Empty)
        End Function


        Public Function GetAccountsSummaries(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetAccountsSummaries", "Reports", Parameters)

        End Function

        Public Function GetClaimSummaries(startDate As Date, endDate As Date, healthUnitCode As String) As DataSet

            If Not String.IsNullOrEmpty(healthUnitCode) Then

                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("HealthUnitCode", healthUnitCode))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("HealthUnitCode", Nothing))
                End With
            End If

            Return Me.Load("uspGetClaimSummaries", "Reports", Parameters)

        End Function

        Public Function GetClaimSummaries(startDate As Date, endDate As Date) As DataSet
            Return GetClaimSummaries(startDate, endDate, String.Empty)
        End Function

        Public Function GetClaimSummariesByCompany(startDate As Date, endDate As Date,
                                                   insuranceNo As String, companyNo As String) As DataSet

            If Not String.IsNullOrEmpty(companyNo) Then

                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetClaimSummariesByCompany", "Reports", Parameters)

        End Function

        Public Function GetClaimSummariesByCompany(startDate As Date, endDate As Date, insuranceNo As String) As DataSet
            Return GetClaimSummariesByCompany(startDate, endDate, insuranceNo, String.Empty)
        End Function

        Public Function GetClaimsGeneralConsumption(startDate As Date, endDate As Date,
                                                   insuranceNo As String, companyNo As String) As DataSet

            If Not String.IsNullOrEmpty(companyNo) Then

                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("InsuranceNo", insuranceNo))
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetClaimsGeneralConsumption", "Reports", Parameters)

        End Function

        Public Function GetClaimsGeneralConsumption(startDate As Date, endDate As Date, insuranceNo As String) As DataSet
            Return GetClaimsGeneralConsumption(startDate, endDate, insuranceNo, String.Empty)
        End Function

        Public Function GetClaimSummariesByMedicalCardNo(startDate As Date, endDate As Date, medicalCardNo As String) As DataSet

            If Not String.IsNullOrEmpty(medicalCardNo) Then

                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("MedicalCardNo", medicalCardNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("MedicalCardNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetClaimSummariesByMedicalCardNo", "Reports", Parameters)

        End Function

        Public Function GetClaimSummariesByMedicalCardNo(startDate As Date, endDate As Date) As DataSet
            Return GetClaimSummariesByMedicalCardNo(startDate, endDate, String.Empty)
        End Function

        Public Function GetDiagnosisSummaries(searchAgeBy As String, startDate As Date, endDate As Date, startAge As Short, endAge As Short) As DataSet

            With Parameters
                .Add(New ParameterSQL("SearchAgeBy", searchAgeBy))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("StartAge", startAge))
                .Add(New ParameterSQL("EndAge", endAge))
            End With

            Return Me.Load("uspGetDiagnosisSummaries", "Reports", Parameters)

        End Function


        ''' <summary>
        ''' Returns all Diagnosis that are done more than once by a patient for the specified period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetDiagnosisReoccurances(startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As DataSet

            If (startDate IsNot Nothing) And (endDate IsNot Nothing) Then
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", Nothing))
                    .Add(New ParameterSQL("EndDate", Nothing))
                End With
            End If

            Return Me.Load("uspGetDiagnosisReoccurances", "Reports", Parameters)

        End Function

        Public Function GetIPDDiagnosisSummaries(searchAgeBy As String, startDate As Date, endDate As Date, startAge As Short, endAge As Short) As DataSet

            With Parameters
                .Add(New ParameterSQL("SearchAgeBy", searchAgeBy))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("StartAge", startAge))
                .Add(New ParameterSQL("EndAge", endAge))
            End With

            Return Me.Load("uspGetIPDDiagnosisSummaries", "Reports", Parameters)

        End Function

        Public Function GetDiseaseCategorySummaries(searchAgeBy As String, startDate As Date, endDate As Date, startAge As Short, endAge As Short) As DataSet

            With Parameters
                .Add(New ParameterSQL("SearchAgeBy", searchAgeBy))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("StartAge", startAge))
                .Add(New ParameterSQL("EndAge", endAge))
            End With

            Return Me.Load("uspGetDiseaseCategorySummaries", "Reports", Parameters)

        End Function

        Public Function GetIPDDiseaseCategorySummaries(searchAgeBy As String, startDate As Date, endDate As Date, startAge As Short, endAge As Short) As DataSet

            With Parameters
                .Add(New ParameterSQL("SearchAgeBy", searchAgeBy))
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("StartAge", startAge))
                .Add(New ParameterSQL("EndAge", endAge))
            End With

            Return Me.Load("uspGetIPDDiseaseCategorySummaries", "Reports", Parameters)

        End Function

        Public Function GetIPDIncomeSummaries(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetIPDIncomeSummaries", "Reports", Parameters)

        End Function

        Public Function GetIPDExtraChargeSummaries(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetIPDExtraChargeSummaries", "Reports", Parameters)

        End Function

        Public Function GetIPDDoctorVisitSummaries(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetIPDDoctorVisitSummaries", "Reports", Parameters)

        End Function

        Public Function GetIPDDoctorSpecialtyVisitSummaries(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetDoctorSpecialtyVisitSummaries", "Reports", Parameters)

        End Function

        Public Function GetIPDIncomePaymentDetailsSummaries(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetIPDIncomePaymentDetailsSummaries", "Reports", Parameters)

        End Function

        Public Function GetIPDExtraChargeSummariesByBills(startDate As Date, endDate As Date, billModesID As String,
                                                billNo As String, companyNo As String) As DataSet

            If Not String.IsNullOrEmpty(companyNo) Then

                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetIPDExtraChargeSummariesByBills", "Reports", Parameters)

        End Function

        Public Function GetIPDIncomeSummariesByBills(startDate As Date, endDate As Date, billModesID As String,
                                                  billNo As String, companyNo As String) As DataSet

            If Not String.IsNullOrEmpty(companyNo) Then

                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("CompanyNo", companyNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("StartDate", startDate))
                    .Add(New ParameterSQL("EndDate", endDate))
                    .Add(New ParameterSQL("BillModesID", billModesID))
                    .Add(New ParameterSQL("BillNo", billNo))
                    .Add(New ParameterSQL("CompanyNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetIPDIncomeSummariesByBills", "Reports", Parameters)

        End Function

        Public Function GetIPDIncomeSummariesByBills(startDate As Date, endDate As Date, billModesID As String,
                                                  billNo As String) As DataSet
            Return GetIPDIncomeSummariesByBills(startDate, endDate, billModesID, billNo, String.Empty)
        End Function

#End Region

    End Class

#End Region

#Region " PAED/GYN "

    Public Class Antenatal : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_Infection As String
        Private m_InfectionDetails As String
        Private m_AccidentDuringPregnancy As String
        Private m_DetailsOfAccident As String
        Private m_UseOfDrugsOrPrescription As String
        Private m_DrugDetails As String
        Private m_Smoking As String
        Private m_ChronicIllness As String
        Private m_DetailsOfIllness As String


#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property Infection() As String
            Get
                Return m_Infection
            End Get
            Set(ByVal Value As String)
                m_Infection = Value
            End Set
        End Property

        Public Property InfectionDetails() As String
            Get
                Return m_InfectionDetails
            End Get
            Set(ByVal Value As String)
                m_InfectionDetails = Value
            End Set
        End Property

        Public Property AccidentDuringPregnancy() As String
            Get
                Return m_AccidentDuringPregnancy
            End Get
            Set(ByVal Value As String)
                m_AccidentDuringPregnancy = Value
            End Set
        End Property

        Public Property DetailsOfAccident() As String
            Get
                Return m_DetailsOfAccident
            End Get
            Set(ByVal Value As String)
                m_DetailsOfAccident = Value
            End Set
        End Property

        Public Property UseOfDrugsOrPrescription() As String
            Get
                Return m_UseOfDrugsOrPrescription
            End Get
            Set(ByVal Value As String)
                m_UseOfDrugsOrPrescription = Value
            End Set
        End Property

        Public Property DrugDetails() As String
            Get
                Return m_DrugDetails
            End Get
            Set(ByVal Value As String)
                m_DrugDetails = Value
            End Set
        End Property

        Public Property Smoking() As String
            Get
                Return m_Smoking
            End Get
            Set(ByVal Value As String)
                m_Smoking = Value
            End Set
        End Property

        Public Property ChronicIllness() As String
            Get
                Return m_ChronicIllness
            End Get
            Set(ByVal Value As String)
                m_ChronicIllness = Value
            End Set
        End Property

        Public Property DetailsOfIllness() As String
            Get
                Return m_DetailsOfIllness
            End Get
            Set(ByVal Value As String)
                m_DetailsOfIllness = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertAntenatal")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("Infection", Me.Infection))
                .Add(New ParameterSQL("InfectionDetails", Me.InfectionDetails))
                .Add(New ParameterSQL("AccidentDuringPregnancy", Me.AccidentDuringPregnancy))
                .Add(New ParameterSQL("DetailsOfAccident", Me.DetailsOfAccident))
                .Add(New ParameterSQL("UseOfDrugsOrPrescription", Me.UseOfDrugsOrPrescription))
                .Add(New ParameterSQL("DrugDetails", Me.DrugDetails))
                .Add(New ParameterSQL("Smoking", Me.Smoking))
                .Add(New ParameterSQL("ChronicIllness", Me.ChronicIllness))
                .Add(New ParameterSQL("DetailsOfIllness", Me.DetailsOfIllness))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateAntenatal")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("Infection", Me.Infection))
                .Add(New ParameterSQL("InfectionDetails", Me.InfectionDetails))
                .Add(New ParameterSQL("AccidentDuringPregnancy", Me.AccidentDuringPregnancy))
                .Add(New ParameterSQL("DetailsOfAccident", Me.DetailsOfAccident))
                .Add(New ParameterSQL("UseOfDrugsOrPrescription", Me.UseOfDrugsOrPrescription))
                .Add(New ParameterSQL("DrugDetails", Me.DrugDetails))
                .Add(New ParameterSQL("Smoking", Me.Smoking))
                .Add(New ParameterSQL("ChronicIllness", Me.ChronicIllness))
                .Add(New ParameterSQL("DetailsOfIllness", Me.DetailsOfIllness))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("Antenatal")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Antenatal"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Antenatal")

            Return Parameters

        End Function

        Public Function GetAntenatal(ByVal VisitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", VisitNo))
            End With

            Return Me.Load("uspGetAntenatal", "Antenatal", Parameters)

        End Function

        Public Function GetAntenatal() As DataSet

            With Parameters

            End With

            Return Me.Load("uspGetAntenatal", "Antenatal", Parameters)

        End Function

#End Region

    End Class

    Public Class Perinatal : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ModeOfDelivery As String
        Private m_DurationOfLabour As Single
        Private m_DeliveryComplications As String
        Private m_AmountOfBloodLoss As Single
        Private m_MothersCondition As String
        Private m_DetailsOfCondition As String
        Private m_BabyAlive As String
        Private m_CauseOfDeath As String


#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ModeOfDelivery() As String
            Get
                Return m_ModeOfDelivery
            End Get
            Set(ByVal Value As String)
                m_ModeOfDelivery = Value
            End Set
        End Property

        Public Property DurationOfLabour() As Single
            Get
                Return m_DurationOfLabour
            End Get
            Set(ByVal Value As Single)
                m_DurationOfLabour = Value
            End Set
        End Property

        Public Property DeliveryComplications() As String
            Get
                Return m_DeliveryComplications
            End Get
            Set(ByVal Value As String)
                m_DeliveryComplications = Value
            End Set
        End Property

        Public Property AmountOfBloodLoss() As Single
            Get
                Return m_AmountOfBloodLoss
            End Get
            Set(ByVal Value As Single)
                m_AmountOfBloodLoss = Value
            End Set
        End Property

        Public Property MothersCondition() As String
            Get
                Return m_MothersCondition
            End Get
            Set(ByVal Value As String)
                m_MothersCondition = Value
            End Set
        End Property

        Public Property DetailsOfCondition() As String
            Get
                Return m_DetailsOfCondition
            End Get
            Set(ByVal Value As String)
                m_DetailsOfCondition = Value
            End Set
        End Property

        Public Property BabyAlive() As String
            Get
                Return m_BabyAlive
            End Get
            Set(ByVal Value As String)
                m_BabyAlive = Value
            End Set
        End Property

        Public Property CauseOfDeath() As String
            Get
                Return m_CauseOfDeath
            End Get
            Set(ByVal Value As String)
                m_CauseOfDeath = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPerinatal")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ModeOfDelivery", Me.ModeOfDelivery))
                .Add(New ParameterSQL("DurationOfLabour", Me.DurationOfLabour))
                .Add(New ParameterSQL("DeliveryComplications", Me.DeliveryComplications))
                .Add(New ParameterSQL("AmountOfBloodLoss", Me.AmountOfBloodLoss))
                .Add(New ParameterSQL("MothersCondition", Me.MothersCondition))
                .Add(New ParameterSQL("DetailsOfCondition", Me.DetailsOfCondition))
                .Add(New ParameterSQL("BabyAlive", Me.BabyAlive))
                .Add(New ParameterSQL("CauseOfDeath", Me.CauseOfDeath))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePerinatal")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ModeOfDelivery", Me.ModeOfDelivery))
                .Add(New ParameterSQL("DurationOfLabour", Me.DurationOfLabour))
                .Add(New ParameterSQL("DeliveryComplications", Me.DeliveryComplications))
                .Add(New ParameterSQL("AmountOfBloodLoss", Me.AmountOfBloodLoss))
                .Add(New ParameterSQL("MothersCondition", Me.MothersCondition))
                .Add(New ParameterSQL("DetailsOfCondition", Me.DetailsOfCondition))
                .Add(New ParameterSQL("BabyAlive", Me.BabyAlive))
                .Add(New ParameterSQL("CauseOfDeath", Me.CauseOfDeath))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("Perinatal")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Perinatal"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Perinatal")

            Return Parameters

        End Function


        Public Function GetPerinatal(ByVal VisitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", VisitNo))
            End With

            Return Me.Load("uspGetPerinatal", "Perinatal", Parameters)

        End Function

        Public Function GetPerinatal() As DataSet

            With Parameters

            End With

            Return Me.Load("uspGetPerinatal", "Perinatal", Parameters)

        End Function

#End Region



    End Class

    Public Class ObstetricHistory : Inherits DBConnect

#Region " Fields "

        Private m_PatientNo As String
        Private m_Gravidity As Integer
        Private m_Parity As Integer
        Private m_NoOfSurvivingChildren As Integer
        Private m_LMP As Date
        Private m_EDD As Date
        Private m_GestationalAgeInWks As Integer
        Private m_StillBirth As String
        Private m_NoOfStillBirths As Integer
        Private m_Abortions As String
        Private m_NoOfAbortions As Integer
        Private m_Caesarian As String
        Private m_NoOfCaesarians As Integer


#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(ByVal Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property Gravidity() As Integer
            Get
                Return m_Gravidity
            End Get
            Set(ByVal Value As Integer)
                m_Gravidity = Value
            End Set
        End Property

        Public Property Parity() As Integer
            Get
                Return m_Parity
            End Get
            Set(ByVal Value As Integer)
                m_Parity = Value
            End Set
        End Property

        Public Property NoOfSurvivingChildren() As Integer
            Get
                Return m_NoOfSurvivingChildren
            End Get
            Set(ByVal Value As Integer)
                m_NoOfSurvivingChildren = Value
            End Set
        End Property

        Public Property LMP() As Date
            Get
                Return m_LMP
            End Get
            Set(ByVal Value As Date)
                m_LMP = Value
            End Set
        End Property

        Public Property EDD() As Date
            Get
                Return m_EDD
            End Get
            Set(ByVal Value As Date)
                m_EDD = Value
            End Set
        End Property

        Public Property GestationalAgeInWks() As Integer
            Get
                Return m_GestationalAgeInWks
            End Get
            Set(ByVal Value As Integer)
                m_GestationalAgeInWks = Value
            End Set
        End Property

        Public Property StillBirth() As String
            Get
                Return m_StillBirth
            End Get
            Set(ByVal Value As String)
                m_StillBirth = Value
            End Set
        End Property

        Public Property NoOfStillBirths() As Integer
            Get
                Return m_NoOfStillBirths
            End Get
            Set(ByVal Value As Integer)
                m_NoOfStillBirths = Value
            End Set
        End Property

        Public Property Abortions() As String
            Get
                Return m_Abortions
            End Get
            Set(ByVal Value As String)
                m_Abortions = Value
            End Set
        End Property

        Public Property NoOfAbortions() As Integer
            Get
                Return m_NoOfAbortions
            End Get
            Set(ByVal Value As Integer)
                m_NoOfAbortions = Value
            End Set
        End Property

        Public Property Caesarian() As String
            Get
                Return m_Caesarian
            End Get
            Set(ByVal Value As String)
                m_Caesarian = Value
            End Set
        End Property

        Public Property NoOfCaesarians() As Integer
            Get
                Return m_NoOfCaesarians
            End Get
            Set(ByVal Value As Integer)
                m_NoOfCaesarians = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertObstetricHistory")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("Gravidity", Me.Gravidity))
                .Add(New ParameterSQL("Parity", Me.Parity))
                .Add(New ParameterSQL("NoOfSurvivingChildren", Me.NoOfSurvivingChildren))
                .Add(New ParameterSQL("LMP", Me.LMP))
                .Add(New ParameterSQL("EDD", Me.EDD))
                .Add(New ParameterSQL("GestationalAgeInWks", Me.GestationalAgeInWks))
                .Add(New ParameterSQL("StillBirth", Me.StillBirth))
                .Add(New ParameterSQL("NoOfStillBirths", Me.NoOfStillBirths))
                .Add(New ParameterSQL("Abortions", Me.Abortions))
                .Add(New ParameterSQL("NoOfAbortions", Me.NoOfAbortions))
                .Add(New ParameterSQL("Caesarian", Me.Caesarian))
                .Add(New ParameterSQL("NoOfCaesarians", Me.NoOfCaesarians))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateObstetricHistory")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("Gravidity", Me.Gravidity))
                .Add(New ParameterSQL("Parity", Me.Parity))
                .Add(New ParameterSQL("NoOfSurvivingChildren", Me.NoOfSurvivingChildren))
                .Add(New ParameterSQL("LMP", Me.LMP))
                .Add(New ParameterSQL("EDD", Me.EDD))
                .Add(New ParameterSQL("GestationalAgeInWks", Me.GestationalAgeInWks))
                .Add(New ParameterSQL("StillBirth", Me.StillBirth))
                .Add(New ParameterSQL("NoOfStillBirths", Me.NoOfStillBirths))
                .Add(New ParameterSQL("Abortions", Me.Abortions))
                .Add(New ParameterSQL("NoOfAbortions", Me.NoOfAbortions))
                .Add(New ParameterSQL("Caesarian", Me.Caesarian))
                .Add(New ParameterSQL("NoOfCaesarians", Me.NoOfCaesarians))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("ObstetricHistory")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PatientNo = '" + Me.PatientNo + "'"
            Dim errorPart As String = "Patient No: " + Me.PatientNo


            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ObstetricHistory"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ObstetricHistory")

            Return Parameters

        End Function

        Public Function GetObstetricHistory(ByVal PatientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", PatientNo))
            End With

            Return Me.Load("uspGetObstetricHistory", "ObstetricHistory", Parameters)

        End Function


#End Region



    End Class

    Public Class ChildGrowth : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_SocialSmile As Boolean
        Private m_HeadControl As Boolean
        Private m_ReactionToSound As Boolean
        Private m_GraspReflex As Boolean
        Private m_Sitting As Boolean
        Private m_Standing As Boolean
        Private m_WeightForAge As String
        Private m_HeightForAge As String
        Private m_WeightForHeight As String
        Private m_BreastFeedingID As String
        Private m_Notes As String

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property SocialSmile() As Boolean
            Get
                Return m_SocialSmile
            End Get
            Set(ByVal Value As Boolean)
                m_SocialSmile = Value
            End Set
        End Property

        Public Property HeadControl() As Boolean
            Get
                Return m_HeadControl
            End Get
            Set(ByVal Value As Boolean)
                m_HeadControl = Value
            End Set
        End Property

        Public Property ReactionToSound() As Boolean
            Get
                Return m_ReactionToSound
            End Get
            Set(ByVal Value As Boolean)
                m_ReactionToSound = Value
            End Set
        End Property

        Public Property GraspReflex() As Boolean
            Get
                Return m_GraspReflex
            End Get
            Set(ByVal Value As Boolean)
                m_GraspReflex = Value
            End Set
        End Property

        Public Property Sitting() As Boolean
            Get
                Return m_Sitting
            End Get
            Set(ByVal Value As Boolean)
                m_Sitting = Value
            End Set
        End Property

        Public Property Standing() As Boolean
            Get
                Return m_Standing
            End Get
            Set(ByVal Value As Boolean)
                m_Standing = Value
            End Set
        End Property

        Public Property WeightForAge() As String
            Get
                Return m_WeightForAge
            End Get
            Set(ByVal Value As String)
                m_WeightForAge = Value
            End Set
        End Property

        Public Property HeightForAge() As String
            Get
                Return m_HeightForAge
            End Get
            Set(ByVal Value As String)
                m_HeightForAge = Value
            End Set
        End Property

        Public Property WeightForHeight() As String
            Get
                Return m_WeightForHeight
            End Get
            Set(ByVal Value As String)
                m_WeightForHeight = Value
            End Set
        End Property
        Public Property BreastFeedingID() As String
            Get
                Return m_BreastFeedingID
            End Get
            Set(ByVal Value As String)
                m_BreastFeedingID = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertChildGrowth")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("SocialSmile", Me.SocialSmile))
                .Add(New ParameterSQL("HeadControl", Me.HeadControl))
                .Add(New ParameterSQL("ReactionToSound", Me.ReactionToSound))
                .Add(New ParameterSQL("GraspReflex", Me.GraspReflex))
                .Add(New ParameterSQL("Sitting", Me.Sitting))
                .Add(New ParameterSQL("Standing", Me.Standing))
                .Add(New ParameterSQL("WeightForAge", Me.WeightForAge))
                .Add(New ParameterSQL("HeightForAge", Me.HeightForAge))
                .Add(New ParameterSQL("WeightForHeight", Me.WeightForHeight))
                .Add(New ParameterSQL("BreastFeedingID", Me.BreastFeedingID))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateChildGrowth")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("SocialSmile", Me.SocialSmile))
                .Add(New ParameterSQL("HeadControl", Me.HeadControl))
                .Add(New ParameterSQL("ReactionToSound", Me.ReactionToSound))
                .Add(New ParameterSQL("GraspReflex", Me.GraspReflex))
                .Add(New ParameterSQL("Sitting", Me.Sitting))
                .Add(New ParameterSQL("Standing", Me.Standing))
                .Add(New ParameterSQL("WeightForAge", Me.WeightForAge))
                .Add(New ParameterSQL("HeightForAge", Me.HeightForAge))
                .Add(New ParameterSQL("WeightForHeight", Me.WeightForHeight))
                .Add(New ParameterSQL("BreastFeedingID", Me.BreastFeedingID))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("ChildGrowth")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "Patient No: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ChildGrowth"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ChildGrowth")

            Return Parameters

        End Function

        Public Function GetChildGrowth(ByVal visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetChildGrowth", "ChildGrowth", Parameters)

        End Function

#End Region



    End Class

    Public Class PostNatal : Inherits DBConnect

#Region " Fields "

        Private m_PatientNo As String
        Private m_DeliveryComplications As String
        Private m_ConditionOnBirth As String
        Private m_ConditionDetails As String
        Private m_PhysicalAbnormalityDetails As String
        Private m_UmblicalCordDetails As String
        Private m_Jaundice As String
        Private m_EarlyInfection As String
        Private m_InfectionDetails As String
        Private m_Convulsions As String
        Private m_ConvulsionsDetails As String
        Private m_EIDResults As String
        Private m_ApgarScore As Integer
        Private m_Notes As String


#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(ByVal Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property DeliveryComplications() As String
            Get
                Return m_DeliveryComplications
            End Get
            Set(ByVal Value As String)
                m_DeliveryComplications = Value
            End Set
        End Property

        Public Property ConditionOnBirth() As String
            Get
                Return m_ConditionOnBirth
            End Get
            Set(ByVal Value As String)
                m_ConditionOnBirth = Value
            End Set
        End Property

        Public Property ConditionDetails() As String
            Get
                Return m_ConditionDetails
            End Get
            Set(ByVal Value As String)
                m_ConditionDetails = Value
            End Set
        End Property

        Public Property PhysicalAbnormalityDetails() As String
            Get
                Return m_PhysicalAbnormalityDetails
            End Get
            Set(ByVal Value As String)
                m_PhysicalAbnormalityDetails = Value
            End Set
        End Property

        Public Property UmblicalCordDetails() As String
            Get
                Return m_UmblicalCordDetails
            End Get
            Set(ByVal Value As String)
                m_UmblicalCordDetails = Value
            End Set
        End Property

        Public Property Jaundice() As String
            Get
                Return m_Jaundice
            End Get
            Set(ByVal Value As String)
                m_Jaundice = Value
            End Set
        End Property

        Public Property EarlyInfection() As String
            Get
                Return m_EarlyInfection
            End Get
            Set(ByVal Value As String)
                m_EarlyInfection = Value
            End Set
        End Property

        Public Property InfectionDetails() As String
            Get
                Return m_InfectionDetails
            End Get
            Set(ByVal Value As String)
                m_InfectionDetails = Value
            End Set
        End Property

        Public Property Convulsions() As String
            Get
                Return m_Convulsions
            End Get
            Set(ByVal Value As String)
                m_Convulsions = Value
            End Set
        End Property

        Public Property ConvulsionsDetails() As String
            Get
                Return m_ConvulsionsDetails
            End Get
            Set(ByVal Value As String)
                m_ConvulsionsDetails = Value
            End Set
        End Property

        Public Property EIDResults() As String
            Get
                Return m_EIDResults
            End Get
            Set(ByVal Value As String)
                m_EIDResults = Value
            End Set
        End Property

        Public Property ApgarScore() As Integer
            Get
                Return m_ApgarScore
            End Get
            Set(ByVal Value As Integer)
                m_ApgarScore = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPostNatal")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("DeliveryComplications", Me.DeliveryComplications))
                .Add(New ParameterSQL("ConditionOnBirth", Me.ConditionOnBirth))
                .Add(New ParameterSQL("ConditionDetails", Me.ConditionDetails))
                .Add(New ParameterSQL("PhysicalAbnormalityDetails", Me.PhysicalAbnormalityDetails))
                .Add(New ParameterSQL("UmblicalCordDetails", Me.UmblicalCordDetails))
                .Add(New ParameterSQL("Jaundice", Me.Jaundice))
                .Add(New ParameterSQL("EarlyInfection", Me.EarlyInfection))
                .Add(New ParameterSQL("InfectionDetails", Me.InfectionDetails))
                .Add(New ParameterSQL("Convulsions", Me.Convulsions))
                .Add(New ParameterSQL("ConvulsionsDetails", Me.ConvulsionsDetails))
                .Add(New ParameterSQL("EIDResults", Me.EIDResults))
                .Add(New ParameterSQL("ApgarScore", Me.ApgarScore))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePostNatal")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("DeliveryComplications", Me.DeliveryComplications))
                .Add(New ParameterSQL("ConditionOnBirth", Me.ConditionOnBirth))
                .Add(New ParameterSQL("ConditionDetails", Me.ConditionDetails))
                .Add(New ParameterSQL("PhysicalAbnormalityDetails", Me.PhysicalAbnormalityDetails))
                .Add(New ParameterSQL("UmblicalCordDetails", Me.UmblicalCordDetails))
                .Add(New ParameterSQL("Jaundice", Me.Jaundice))
                .Add(New ParameterSQL("EarlyInfection", Me.EarlyInfection))
                .Add(New ParameterSQL("InfectionDetails", Me.InfectionDetails))
                .Add(New ParameterSQL("Convulsions", Me.Convulsions))
                .Add(New ParameterSQL("ConvulsionsDetails", Me.ConvulsionsDetails))
                .Add(New ParameterSQL("EIDResults", Me.EIDResults))
                .Add(New ParameterSQL("ApgarScore", Me.ApgarScore))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("PostNatal")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PatientNo = '" + Me.PatientNo + "'"
            Dim errorPart As String = "Patient No: " + Me.PatientNo


            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PostNatal"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PostNatal")

            Return Parameters

        End Function

        Public Function GetPostNatal(patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("patientNo", patientNo))
            End With

            Return Me.Load("uspGetPostNatal", "PostNatal", Parameters)

        End Function

#End Region



    End Class

    Public Class ImmunisationVaccines : Inherits DBConnect

#Region " Fields "

        Private m_ImmunisationNo As String
        Private m_PatientNo As String
        Private m_VaccineName As String
        Private m_VaccineReceived As String
        Private m_DateGiven As Date
        Private m_PlaceReceived As String
        Private m_Notes As String
        Private m_MothersName As String
        Private m_UpToDate As Boolean

#End Region

#Region " Properties "

        Public Property ImmunisationNo() As String
            Get
                Return m_ImmunisationNo
            End Get
            Set(ByVal Value As String)
                m_ImmunisationNo = Value
            End Set
        End Property

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(ByVal Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property VaccineName() As String
            Get
                Return m_VaccineName
            End Get
            Set(ByVal Value As String)
                m_VaccineName = Value
            End Set
        End Property

        Public Property VaccineReceived() As String
            Get
                Return m_VaccineReceived
            End Get
            Set(ByVal Value As String)
                m_VaccineReceived = Value
            End Set
        End Property

        Public Property DateGiven() As Date
            Get
                Return m_DateGiven
            End Get
            Set(ByVal Value As Date)
                m_DateGiven = Value
            End Set
        End Property

        Public Property PlaceReceived() As String
            Get
                Return m_PlaceReceived
            End Get
            Set(ByVal Value As String)
                m_PlaceReceived = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

        Public Property MothersName() As String
            Get
                Return m_MothersName
            End Get
            Set(ByVal Value As String)
                m_MothersName = Value
            End Set
        End Property

        Public Property UpToDate() As Boolean
            Get
                Return m_UpToDate
            End Get
            Set(ByVal Value As Boolean)
                m_UpToDate = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertImmunisationVaccines")

            With Parameters
                .Add(New ParameterSQL("ImmunisationNo", Me.ImmunisationNo))
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("VaccineName", Me.VaccineName))
                .Add(New ParameterSQL("VaccineReceived", Me.VaccineReceived))
                .Add(New ParameterSQL("DateGiven", Me.DateGiven))
                .Add(New ParameterSQL("PlaceReceived", Me.PlaceReceived))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("MothersName", Me.MothersName))
                .Add(New ParameterSQL("UpToDate", Me.UpToDate))
                .Add(New ParameterSQL("LoginID", Me.LoginID))


            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateImmunisationVaccines")

            With Parameters
                .Add(New ParameterSQL("ImmunisationNo", Me.ImmunisationNo))
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("VaccineName", Me.VaccineName))
                .Add(New ParameterSQL("VaccineReceived", Me.VaccineReceived))
                .Add(New ParameterSQL("DateGiven", Me.DateGiven))
                .Add(New ParameterSQL("PlaceReceived", Me.PlaceReceived))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("MothersName", Me.MothersName))
                .Add(New ParameterSQL("UpToDate", Me.UpToDate))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("ImmunisationVaccines")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ImmunisationNo = '" + Me.ImmunisationNo + "'"
            Dim errorPart As String = "Immunisation No: " + Me.ImmunisationNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ImmunisationVaccines"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ImmunisationVaccines")

            Return Parameters

        End Function

        Public Function GetImmunisationVaccines() As DataSet

            With Parameters
            End With

            Return Me.Load("uspGetImmunisationVaccines", "ImmunisationVaccines", Parameters)

        End Function

        Public Function GetImmunisationVaccines(ByVal PatientNo As String) As DataSet

            With Parameters
                '.Add(New ParameterSQL("ImmunisationNo", ImmunisationNo))
                .Add(New ParameterSQL("PatientNo", PatientNo))
            End With

            Return Me.Load("uspGetImmunisationVaccines", "ImmunisationVaccines", Parameters)

        End Function

        Public Function GetNextImmunisationID() As Integer

            With Parameters
                '.Add(New ParameterSQL("ImmunisationNo", ImmunisationNo))
                .Add(New ParameterSQL("ImmunisationID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextImmunisationID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("ImmunisationID")) Then
                    Return CInt(Me.ReadData("ImmunisationID"))
                Else : Return 1
                End If

            End If

        End Function

#End Region



    End Class

#End Region

#Region " CASE HOSPITAL"


    Public Class ServiceInvoices : Inherits DBConnect

#Region " Fields "

        Private m_ServiceInvoiceNo As String
        Private m_InvoiceDate As Date
        Private m_DocumentNo As String
        Private m_SupplierNo As String
        Private m_ShipAddress As String

#End Region

#Region " Properties "

        Public Property ServiceInvoiceNo() As String
            Get
                Return m_ServiceInvoiceNo
            End Get
            Set(Value As String)
                m_ServiceInvoiceNo = Value
            End Set
        End Property

        Public Property InvoiceDate() As Date
            Get
                Return m_InvoiceDate
            End Get
            Set(Value As Date)
                m_InvoiceDate = Value
            End Set
        End Property

        Public Property DocumentNo() As String
            Get
                Return m_DocumentNo
            End Get
            Set(Value As String)
                m_DocumentNo = Value
            End Set
        End Property

        Public Property SupplierNo() As String
            Get
                Return m_SupplierNo
            End Get
            Set(Value As String)
                m_SupplierNo = Value
            End Set
        End Property

        Public Property ShipAddress() As String
            Get
                Return m_ShipAddress
            End Get
            Set(Value As String)
                m_ShipAddress = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertServiceInvoices")

            With Parameters
                .Add(New ParameterSQL("ServiceInvoiceNo", Me.ServiceInvoiceNo))
                .Add(New ParameterSQL("InvoiceDate", Me.InvoiceDate))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("SupplierNo", Me.SupplierNo))
                .Add(New ParameterSQL("ShipAddress", Me.ShipAddress))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateServiceInvoices")

            With Parameters
                .Add(New ParameterSQL("ServiceInvoiceNo", Me.ServiceInvoiceNo))
                .Add(New ParameterSQL("InvoiceDate", Me.InvoiceDate))
                .Add(New ParameterSQL("DocumentNo", Me.DocumentNo))
                .Add(New ParameterSQL("SupplierNo", Me.SupplierNo))
                .Add(New ParameterSQL("ShipAddress", Me.ShipAddress))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("ServiceInvoices")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ServiceInvoiceNo = '" + Me.ServiceInvoiceNo + "'"
            Dim errorPart As String = "Service Invoice No: " + Me.ServiceInvoiceNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ServiceInvoices"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ServiceInvoices")

            Return Parameters

        End Function

        Public Function GetServiceInvoices(ServiceInvoiceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ServiceInvoiceNo", ServiceInvoiceNo))
            End With

            Return Me.Load("uspGetServiceInvoices", "ServiceInvoices", Parameters)

        End Function

        ''' <summary>
        ''' Returns periodic ServiceInvoices as per specified ServiceInvoice period, indicating wheather to include received or not
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <param name="includeReceived"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicServiceInvoices(startDate As Date, endDate As Date, includeReceived As Boolean) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
                .Add(New ParameterSQL("IncludeReceived", includeReceived))
            End With

            Return Me.Load("uspGetPeriodicServiceInvoices", "ServiceInvoices", Parameters)

        End Function

        ''' <summary>
        ''' Returns all periodic ServiceInvoices as per specified ServiceInvoice period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicServiceInvoices(startDate As Date, endDate As Date) As DataSet
            Return GetPeriodicServiceInvoices(startDate, endDate, True)
        End Function

        Public Function GetNextServiceInvoiceID() As Integer

            With Parameters
                .Add(New ParameterSQL("ServiceInvoiceID", SqlDbType.Int))
            End With

            Me.ReadData = Read("uspGetNextServiceInvoiceID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("ServiceInvoiceID")) Then
                    Return CInt(Me.ReadData("ServiceInvoiceID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function IsServiceInvoiceReceived(ServiceInvoiceNo As String) As Boolean

            Dim numberOrderReceived As Short

            With Parameters
                .Add(New ParameterSQL("ServiceInvoiceNo", ServiceInvoiceNo))
                .Add(New ParameterSQL("NoOrderReceived", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspCountServiceInvoiceReceived", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("NoOrderReceived")) Then
                    numberOrderReceived = 0
                Else : numberOrderReceived = CShort(Me.ReadData("NoOrderReceived"))
                End If
            End If

            Return numberOrderReceived > 0

        End Function

        Public Function GetServiceInvoicesNotPaidFor(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetServiceInvoicesNotPaidFor", "ServiceInvoices", Parameters)

        End Function

        Public Function GetNotPaidServiceInvoiceDetails(ServiceInvoiceNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ServiceInvoiceNo", ServiceInvoiceNo))
            End With


            Return Me.Load("uspGetNotPaidServiceInvoiceDetails", "ServiceInvoices", Parameters)

        End Function

#End Region

    End Class

    Public Class ServiceInvoiceDetails : Inherits DBConnect


#Region " Fields "

        Private m_ServiceInvoiceNo As String
        Private m_ItemCategoryID As String
        Private m_ItemCode As String
        Private m_ItemName As String
        Private m_UnitMeasure As String
        Private m_ItemGroup As String
        Private m_Quantity As Integer
        Private m_Rate As Decimal
        Private m_PackID As String
        Private m_PackSize As Integer
        Private m_Amount As Decimal
        Private m_VATValue As Decimal
        Private m_Notes As String
        Private m_PayStatusID As String


#End Region

#Region " Properties "

        Public Property ServiceInvoiceNo() As String
            Get
                Return m_ServiceInvoiceNo
            End Get
            Set(Value As String)
                m_ServiceInvoiceNo = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemName() As String
            Get
                Return m_ItemName
            End Get
            Set(Value As String)
                m_ItemName = Value
            End Set
        End Property

        Public Property UnitMeasure() As String
            Get
                Return m_UnitMeasure
            End Get
            Set(Value As String)
                m_UnitMeasure = Value
            End Set
        End Property

        Public Property ItemGroup() As String
            Get
                Return m_ItemGroup
            End Get
            Set(ByVal Value As String)
                m_ItemGroup = Value
            End Set
        End Property

        Public Property Quantity() As Integer
            Get
                Return m_Quantity
            End Get
            Set(Value As Integer)
                m_Quantity = Value
            End Set
        End Property

        Public Property Rate() As Decimal
            Get
                Return m_Rate
            End Get
            Set(Value As Decimal)
                m_Rate = Value
            End Set
        End Property

        Public Property PackID() As String
            Get
                Return m_PackID
            End Get
            Set(Value As String)
                m_PackID = Value
            End Set
        End Property

        Public Property PackSize() As Integer
            Get
                Return m_PackSize
            End Get
            Set(ByVal Value As Integer)
                m_PackSize = Value
            End Set
        End Property

        Public Property Amount() As Decimal
            Get
                Return m_Amount
            End Get
            Set(ByVal Value As Decimal)
                m_Amount = Value
            End Set
        End Property


        Public Property VATValue() As Decimal
            Get
                Return m_VATValue
            End Get
            Set(ByVal Value As Decimal)
                m_VATValue = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

        Public Property PayStatusID() As String
            Get
                Return m_PayStatusID
            End Get
            Set(ByVal Value As String)
                m_PayStatusID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditServiceInvoiceDetails")

            With Parameters
                .Add(New ParameterSQL("ServiceInvoiceNo", Me.ServiceInvoiceNo))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemName", Me.ItemName))
                .Add(New ParameterSQL("UnitMeasure", Me.UnitMeasure))
                .Add(New ParameterSQL("ItemGroup", Me.ItemGroup))
                .Add(New ParameterSQL("Quantity", Me.Quantity))
                .Add(New ParameterSQL("Rate", Me.Rate))
                .Add(New ParameterSQL("PackID", Me.PackID))
                .Add(New ParameterSQL("PackSize", Me.PackSize))
                .Add(New ParameterSQL("Amount", Me.Amount))
                .Add(New ParameterSQL("VATValue", Me.VATValue))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("PayStatusID", Me.PayStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePaidServiceInvoiceDetails")

            With Parameters
                .Add(New ParameterSQL("ServiceInvoiceNo", Me.ServiceInvoiceNo))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("PaystatusID", Me.PaystatusID))
            End With


            'For Audit Trial
            Me.SetLogObject("ServiceInvoiceDetails")

            Return Parameters

        End Function


        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ServiceInvoiceNo = '" + Me.ServiceInvoiceNo + "' and ItemCategoryID = '" + Me.ItemCategoryID + "' and ItemCode = '" + Me.ItemCode + "'"
            Dim errorPart As String = "Service Invoice No: " + Me.ServiceInvoiceNo + " and Item Category: " + Me.ItemCategoryID + " and Item Code: " + Me.ItemCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ServiceInvoiceDetails"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ServiceInvoiceDetails")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets Purchase Order Details for supplied Purchase Order No and item category ID
        ''' </summary>
        ''' <param name="ServiceInvoiceNo"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetServiceInvoiceDetails(ServiceInvoiceNo As String, itemCategoryID As String) As DataSet

            If String.IsNullOrEmpty(itemCategoryID) Then
                With Parameters
                    .Add(New ParameterSQL("ServiceInvoiceNo", ServiceInvoiceNo))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("ServiceInvoiceNo", ServiceInvoiceNo))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With
            End If

            Return Me.Load("uspGetServiceInvoiceDetails", "ServiceInvoiceDetails", Parameters)

        End Function

        ''' <summary>
        ''' Gets Purchase Order Details for supplied Purchase Order No
        ''' </summary>
        ''' <param name="ServiceInvoiceNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetServiceInvoiceDetails(ServiceInvoiceNo As String) As DataSet
            Return GetServiceInvoiceDetails(ServiceInvoiceNo, String.Empty)
        End Function

#End Region

    End Class


    Public Class CardiologyExaminations : Inherits DBConnect

#Region " Fields "
        Private m_ExamCode As String
        Private m_ExamName As String
        Private m_CardiologyCategoriesID As String
        Private m_CardiologySiteID As String
        Private m_UnitPrice As Decimal
        Private m_VATPercentage As Decimal
        Private m_Hidden As Boolean
        Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property ExamCode() As String
            Get
                Return m_ExamCode
            End Get
            Set(Value As String)
                m_ExamCode = Value
            End Set
        End Property

        Public Property ExamName() As String
            Get
                Return m_ExamName
            End Get
            Set(Value As String)
                m_ExamName = Value
            End Set
        End Property

        Public Property CardiologyCategoriesID() As String
            Get
                Return m_CardiologyCategoriesID
            End Get
            Set(Value As String)
                m_CardiologyCategoriesID = Value
            End Set
        End Property

        Public Property CardiologySiteID() As String
            Get
                Return m_CardiologySiteID
            End Get
            Set(Value As String)
                m_CardiologySiteID = Value
            End Set
        End Property


        Public Property UnitPrice() As Decimal
            Get
                Return m_UnitPrice
            End Get
            Set(Value As Decimal)
                m_UnitPrice = Value
            End Set
        End Property

        Public Property VATPercentage() As Decimal
            Get
                Return m_VATPercentage
            End Get
            Set(Value As Decimal)
                m_VATPercentage = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(Value As Boolean)
                m_Hidden = Value
            End Set
        End Property

        Public Property RecordDateTime() As Date
            Get
                Return m_RecordDateTime
            End Get
            Set(ByVal Value As Date)
                m_RecordDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertCardiologyExaminations")

            With Parameters
                .Add(New ParameterSQL("ExamCode", Me.ExamCode))
                .Add(New ParameterSQL("ExamName", Me.ExamName))
                .Add(New ParameterSQL("CardiologyCategoriesID", Me.CardiologyCategoriesID))
                .Add(New ParameterSQL("CardiologySiteID", Me.CardiologySiteID))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateCardiologyExaminations")

            With Parameters
                .Add(New ParameterSQL("ExamCode", Me.ExamCode))
                .Add(New ParameterSQL("ExamName", Me.ExamName))
                .Add(New ParameterSQL("CardiologyCategoriesID", Me.CardiologyCategoriesID))
                .Add(New ParameterSQL("CardiologySiteID", Me.CardiologySiteID))
                .Add(New ParameterSQL("UnitPrice", Me.UnitPrice))
                .Add(New ParameterSQL("VATPercentage", Me.VATPercentage))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            'For Audit Trail
            Me.SetLogObject("CardiologyExaminations")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String
            Dim errorPart As String

            where = "ExamCode = '" + Me.ExamCode + "'"
            errorPart = "Exam Code: " + Me.ExamCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "CardiologyExaminations"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("CardiologyExaminations")

            Return Parameters

        End Function

        ''' <summary>
        ''' Returns Cardiology Examinations for the supplied exam code
        ''' </summary>
        ''' <param name="examCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        ''' 
        Public Function GetCardiologyExaminations(examCode As String) As DataSet

            If examCode <> "" OrElse examCode <> String.Empty Then
                With Parameters
                    .Add(New ParameterSQL("ExamCode", examCode))
                End With

            ElseIf (examCode = "" OrElse examCode = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("ExamCode", Nothing))
                End With
            End If

            Return Me.Load("uspGetCardiologyExaminations", "CardiologyExaminations", Parameters)

        End Function

        ''' <summary>
        ''' Returns all Cardiology Examinations
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetCardiologyExaminations() As DataSet
            Return GetCardiologyExaminations(String.Empty)
        End Function


        Public Function GetNextCardiologyExamID() As Integer

            With Parameters
                .Add(New ParameterSQL("ExamID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextCardiologyExamID", Parameters)

            If Me.ReadData IsNot Nothing Then

                If Not IsDBNull(Me.ReadData("ExamID")) Then
                    Return CInt(Me.ReadData("ExamID"))
                Else : Return 1
                End If
            Else : Return 1
            End If

        End Function



#End Region

    End Class


    Public Class CardiologyReports : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_ExamDateTime As Date
        Private m_Indication As String
        Private m_Report As String
        Private m_Conclusion As String
        Private m_Cardiologist As String
        Private m_CardiologyTitleID As String
        Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ExamDateTime() As Date
            Get
                Return m_ExamDateTime
            End Get
            Set(Value As Date)
                m_ExamDateTime = Value
            End Set
        End Property

        Public Property Indication() As String
            Get
                Return m_Indication
            End Get
            Set(Value As String)
                m_Indication = Value
            End Set
        End Property

        Public Property Report() As String
            Get
                Return m_Report
            End Get
            Set(Value As String)
                m_Report = Value
            End Set
        End Property

        Public Property Conclusion() As String
            Get
                Return m_Conclusion
            End Get
            Set(Value As String)
                m_Conclusion = Value
            End Set
        End Property

        Public Property Cardiologist() As String
            Get
                Return m_Cardiologist
            End Get
            Set(Value As String)
                m_Cardiologist = Value
            End Set
        End Property

        Public Property CardiologyTitleID() As String
            Get
                Return m_CardiologyTitleID
            End Get
            Set(Value As String)
                m_CardiologyTitleID = Value
            End Set
        End Property


        Public Property RecordDateTime() As Date
            Get
                Return m_RecordDateTime
            End Get
            Set(ByVal Value As Date)
                m_RecordDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertCardiologyReports")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ExamDateTime", Me.ExamDateTime))
                .Add(New ParameterSQL("Indication", Me.Indication))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("Conclusion", Me.Conclusion))
                .Add(New ParameterSQL("Cardiologist", Me.Cardiologist))
                .Add(New ParameterSQL("CardiologyTitleID", Me.CardiologyTitleID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateCardiologyReports")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ExamDateTime", Me.ExamDateTime))
                .Add(New ParameterSQL("Indication", Me.Indication))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("Conclusion", Me.Conclusion))
                .Add(New ParameterSQL("Cardiologist", Me.Cardiologist))
                .Add(New ParameterSQL("CardiologyTitleID", Me.CardiologyTitleID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            'For Audit Trail
            Me.SetLogObject("CardiologyReports")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "CardiologyReports"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("CardiologyReports")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets the Cardiology reports correponding to the supplied visitno, itemcode and itemcategory id.
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <param name="itemCode"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetCardiologyReports(visitNo As String, itemCode As String, itemCategoryID As String) As DataSet

            If (visitNo <> "" OrElse visitNo <> String.Empty) And
               (itemCode = "" OrElse itemCode = String.Empty) And
               (itemCategoryID = "" OrElse itemCategoryID = String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With

            ElseIf (visitNo <> "" OrElse visitNo <> String.Empty) And
           (itemCode <> "" OrElse itemCode <> String.Empty) And
           (itemCategoryID <> "" OrElse itemCategoryID <> String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("VisitNo", visitNo))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With

            End If

            Return Me.Load("uspGetCardiologyReports", "CardiologyReports", Parameters)

        End Function

        ''' <summary>
        ''' Returns Cardiology reports corresponding to the supplied visit number
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetCardiologyReports(visitNo As String) As DataSet
            Return GetCardiologyReports(visitNo, String.Empty, String.Empty)
        End Function

        ''' <summary>
        ''' Gets daily Cardiology reports for self requests
        ''' </summary>
        ''' <param name="visitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetSelfRequestCardiologyReports(visitNo As String) As DataSet
            If (visitNo <> "" OrElse visitNo <> String.Empty) Then
                Return Me.Load("uspGetSelfRequestCardiologyReports", "CardiologyReports", Parameters)
            Else
                Return Me.Load("uspGetSelfRequestCardiologyReports", "CardiologyReports")
            End If
        End Function

#End Region

    End Class


    Public Class IPDCardiologyReports : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_ItemCode As String
        Private m_ItemCategoryID As String
        Private m_ExamDateTime As Date
        Private m_Indication As String
        Private m_Report As String
        Private m_Conclusion As String
        Private m_Cardiologist As String
        Private m_CardiologyTitleID As String
        Private m_RecordDateTime As Date

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property ItemCode() As String
            Get
                Return m_ItemCode
            End Get
            Set(Value As String)
                m_ItemCode = Value
            End Set
        End Property

        Public Property ItemCategoryID() As String
            Get
                Return m_ItemCategoryID
            End Get
            Set(Value As String)
                m_ItemCategoryID = Value
            End Set
        End Property

        Public Property ExamDateTime() As Date
            Get
                Return m_ExamDateTime
            End Get
            Set(Value As Date)
                m_ExamDateTime = Value
            End Set
        End Property

        Public Property Indication() As String
            Get
                Return m_Indication
            End Get
            Set(Value As String)
                m_Indication = Value
            End Set
        End Property

        Public Property Report() As String
            Get
                Return m_Report
            End Get
            Set(Value As String)
                m_Report = Value
            End Set
        End Property

        Public Property Conclusion() As String
            Get
                Return m_Conclusion
            End Get
            Set(Value As String)
                m_Conclusion = Value
            End Set
        End Property

        Public Property Cardiologist() As String
            Get
                Return m_Cardiologist
            End Get
            Set(Value As String)
                m_Cardiologist = Value
            End Set
        End Property

        Public Property CardiologyTitleID() As String
            Get
                Return m_CardiologyTitleID
            End Get
            Set(Value As String)
                m_CardiologyTitleID = Value
            End Set
        End Property

        Public Property RecordDateTime() As Date
            Get
                Return m_RecordDateTime
            End Get
            Set(ByVal Value As Date)
                m_RecordDateTime = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(serverName As String, databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertIPDCardiologyReports")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ExamDateTime", Me.ExamDateTime))
                .Add(New ParameterSQL("Indication", Me.Indication))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("Conclusion", Me.Conclusion))
                .Add(New ParameterSQL("Cardiologist", Me.Cardiologist))
                .Add(New ParameterSQL("CardiologyTitleID", Me.CardiologyTitleID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDCardiologyReports")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ExamDateTime", Me.ExamDateTime))
                .Add(New ParameterSQL("Indication", Me.Indication))
                .Add(New ParameterSQL("Report", Me.Report))
                .Add(New ParameterSQL("Conclusion", Me.Conclusion))
                .Add(New ParameterSQL("Cardiologist", Me.Cardiologist))
                .Add(New ParameterSQL("CardiologyTitleID", Me.CardiologyTitleID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                .Add(New ParameterSQL("RecordDateTime", Me.RecordDateTime))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDCardiologyReports")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RoundNo = '" + Me.RoundNo + "' and ItemCode = '" + Me.ItemCode + "' and ItemCategoryID = '" + Me.ItemCategoryID + "'"
            Dim errorPart As String = "Round No: " + Me.RoundNo + " and Item Code: " + Me.ItemCode + " and Item Category: " + Me.ItemCategoryID

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDCardiologyReports"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDCardiologyReports")

            Return Parameters

        End Function

        ''' <summary>
        ''' Gets the ipd Cardiology reports correponding to the supplied RoundNo, itemcode and itemcategory id.
        ''' </summary>
        ''' <param name="RoundNo"></param>
        ''' <param name="itemCode"></param>
        ''' <param name="itemCategoryID"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDCardiologyReports(roundNo As String, itemCode As String, itemCategoryID As String) As DataSet

            If (roundNo <> "" OrElse roundNo <> String.Empty) And
               (itemCode = "" OrElse itemCode = String.Empty) And
               (itemCategoryID = "" OrElse itemCategoryID = String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("ItemCode", Nothing))
                    .Add(New ParameterSQL("ItemCategoryID", Nothing))
                End With

            ElseIf (roundNo <> "" OrElse roundNo <> String.Empty) And
           (itemCode <> "" OrElse itemCode <> String.Empty) And
           (itemCategoryID <> "" OrElse itemCategoryID <> String.Empty) Then

                With Parameters
                    .Add(New ParameterSQL("RoundNo", roundNo))
                    .Add(New ParameterSQL("ItemCode", itemCode))
                    .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                End With

            End If

            Return Me.Load("uspGetIPDCardiologyReports", "IPDCardiologyReports", Parameters)

        End Function

        ''' <summary>
        ''' Returns ipd Cardiology reports corresponding to the supplied round number
        ''' </summary>
        ''' <param name="RoundNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetIPDCardiologyReports(roundNo As String) As DataSet
            Return GetIPDCardiologyReports(roundNo, String.Empty, String.Empty)
        End Function

#End Region

    End Class


#End Region

#Region "BETHANY"
    Public Class IPDNurseAssessment : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_Complaint As String
        Private m_Etiology As String
        Private m_SignsAndSymptoms As String
        Private m_ProposedSolution As String

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(ByVal Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property Complaint() As String
            Get
                Return m_Complaint
            End Get
            Set(ByVal Value As String)
                m_Complaint = Value
            End Set
        End Property

        Public Property Etiology() As String
            Get
                Return m_Etiology
            End Get
            Set(ByVal Value As String)
                m_Etiology = Value
            End Set
        End Property

        Public Property SignsAndSymptoms() As String
            Get
                Return m_SignsAndSymptoms
            End Get
            Set(ByVal Value As String)
                m_SignsAndSymptoms = Value
            End Set
        End Property

        Public Property ProposedSolution() As String
            Get
                Return m_ProposedSolution
            End Get
            Set(ByVal Value As String)
                m_ProposedSolution = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditIPDNurseAssessment")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("Complaint", Me.Complaint))
                .Add(New ParameterSQL("Etiology", Me.Etiology))
                .Add(New ParameterSQL("SignsAndSymptoms", Me.SignsAndSymptoms))
                .Add(New ParameterSQL("ProposedSolution", Me.ProposedSolution))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDNurseAssessment")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("Complaint", Me.Complaint))
                .Add(New ParameterSQL("Etiology", Me.Etiology))
                .Add(New ParameterSQL("SignsAndSymptoms", Me.SignsAndSymptoms))
                .Add(New ParameterSQL("ProposedSolution", Me.ProposedSolution))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("IPDNurseAssessment")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RoundNo = '" + Me.RoundNo + "'"
            Dim errorPart As String = "Round No: " + Me.RoundNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDNurseAssessment"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDNurseAssessment")

            Return Parameters

        End Function

        Public Function GetIPDNurseAssessment(ByVal roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
            End With

            Return Me.Load("uspGetIPDNurseAssessment", "IPDNurseAssessment", Parameters)

        End Function

        Public Function GetIPDNurseAssessmentByRoundNoNavigate(roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("roundNo", roundNo))
            End With

            Return Me.Load("uspGetIPDNurseAssessmentByRoundNo", "IPDNurseAssessment", Parameters)

        End Function
#End Region


    End Class

    Public Class IPDNursingPlan : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_ExpectedOutcome As String
        Private m_NursingActions As String
        Private m_Implementation As String

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(ByVal Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property ExpectedOutcome() As String
            Get
                Return m_ExpectedOutcome
            End Get
            Set(ByVal Value As String)
                m_ExpectedOutcome = Value
            End Set
        End Property

        Public Property NursingActions() As String
            Get
                Return m_NursingActions
            End Get
            Set(ByVal Value As String)
                m_NursingActions = Value
            End Set
        End Property

        Public Property Implementation() As String
            Get
                Return m_Implementation
            End Get
            Set(ByVal Value As String)
                m_Implementation = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditIPDNursingPlan")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ExpectedOutcome", Me.ExpectedOutcome))
                .Add(New ParameterSQL("NursingActions", Me.NursingActions))
                .Add(New ParameterSQL("Implementation", Me.Implementation))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDNursingPlan")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("ExpectedOutcome", Me.ExpectedOutcome))
                .Add(New ParameterSQL("NursingActions", Me.NursingActions))
                .Add(New ParameterSQL("Implementation", Me.Implementation))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDNursingPlan")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RoundNo = '" + Me.RoundNo + "'"
            Dim errorPart As String = "Round No: " + Me.RoundNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDNursingPlan"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDNursingPlan")

            Return Parameters

        End Function

        Public Function GetIPDNursingPlan(ByVal roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
            End With

            Return Me.Load("uspGetIPDNursingPlan", "IPDNursingPlan", Parameters)

        End Function

        Public Function GetIPDNursingPlanByRoundNoNavigate(roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("roundNo", roundNo))
            End With

            Return Me.Load("uspGetIPDNursingPlanByRoundNo", "IPDNursingPlan", Parameters)

        End Function

#End Region



    End Class

    Public Class IPDNurseEvaluation : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_NursingCareEffective As String
        Private m_ProposedModifications As String
        Private m_EvaluationNotes As String

#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(ByVal Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property NursingCareEffective() As String
            Get
                Return m_NursingCareEffective
            End Get
            Set(ByVal Value As String)
                m_NursingCareEffective = Value
            End Set
        End Property

        Public Property ProposedModifications() As String
            Get
                Return m_ProposedModifications
            End Get
            Set(ByVal Value As String)
                m_ProposedModifications = Value
            End Set
        End Property

        Public Property EvaluationNotes() As String
            Get
                Return m_EvaluationNotes
            End Get
            Set(ByVal Value As String)
                m_EvaluationNotes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertIPDNurseEvaluation")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("NursingCareEffective", Me.NursingCareEffective))
                .Add(New ParameterSQL("ProposedModifications", Me.ProposedModifications))
                .Add(New ParameterSQL("EvaluationNotes", Me.EvaluationNotes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDNurseEvaluation")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("NursingCareEffective", Me.NursingCareEffective))
                .Add(New ParameterSQL("ProposedModifications", Me.ProposedModifications))
                .Add(New ParameterSQL("EvaluationNotes", Me.EvaluationNotes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDNurseEvaluation")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RoundNo = '" + Me.RoundNo + "'"
            Dim errorPart As String = "Round No: " + Me.RoundNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDNurseEvaluation"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDNurseEvaluation")

            Return Parameters

        End Function

        Public Function GetIPDNurseEvaluation(ByVal roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
            End With

            Return Me.Load("uspGetIPDNurseEvaluation", "IPDNurseEvaluation", Parameters)

        End Function

        Public Function GetIPDNurseEvaluationByRoundNoNavigate(roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("roundNo", roundNo))
            End With

            Return Me.Load("uspGetIPDNurseEvaluationByRoundNo", "IPDNurseEvaluation", Parameters)

        End Function

#End Region



    End Class



#End Region

#Region "Finance Integration"

    Public Class AccountCategories : Inherits DBConnect

#Region " Fields "

        Private m_CategoryNo As String
        Private m_AccountTypeID As String
        Private m_CategoryName As String
        Private m_ParentCategoryNo As String
        Private m_IsReadOnly As Boolean
        Private m_Hidden As Boolean

#End Region

#Region " Properties "

        Public Property CategoryNo() As String
            Get
                Return m_CategoryNo
            End Get
            Set(ByVal Value As String)
                m_CategoryNo = Value
            End Set
        End Property

        Public Property AccountTypeID() As String
            Get
                Return m_AccountTypeID
            End Get
            Set(ByVal Value As String)
                m_AccountTypeID = Value
            End Set
        End Property

        Public Property CategoryName() As String
            Get
                Return m_CategoryName
            End Get
            Set(ByVal Value As String)
                m_CategoryName = Value
            End Set
        End Property

        Public Property ParentCategoryNo() As String
            Get
                Return m_ParentCategoryNo
            End Get
            Set(ByVal Value As String)
                m_ParentCategoryNo = Value
            End Set
        End Property

        Public Property IsReadOnly() As Boolean
            Get
                Return m_IsReadOnly
            End Get
            Set(ByVal Value As Boolean)
                m_IsReadOnly = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(ByVal Value As Boolean)
                m_Hidden = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertAccountCategories")

            With Parameters
                .Add(New ParameterSQL("CategoryNo", Me.CategoryNo))
                .Add(New ParameterSQL("AccountTypeID", Me.AccountTypeID))
                .Add(New ParameterSQL("CategoryName", Me.CategoryName))
                .Add(New ParameterSQL("ParentCategoryNo", Me.ParentCategoryNo))
                .Add(New ParameterSQL("IsReadOnly", Me.IsReadOnly))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("UserName", Me.UserName))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateAccountCategories")

            With Parameters
                .Add(New ParameterSQL("CategoryNo", Me.CategoryNo))
                .Add(New ParameterSQL("CategoryName", Me.CategoryName))
                .Add(New ParameterSQL("ParentCategoryNo", Me.ParentCategoryNo))
                .Add(New ParameterSQL("IsReadOnly", Me.IsReadOnly))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("UserName", Me.UserName))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))

            End With

            'For Audit Trail
            Me.SetLogObject("AccountCategories")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "CategoryNo = '" + Me.CategoryNo + "'"
            Dim errorPart As String = "Category No: " + Me.CategoryNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "AccountCategories"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("AccountCategories")

            Return Parameters

        End Function

        Public Function GetAccountCategories(ByVal categoryNo As String) As DataSet

            If Not String.IsNullOrEmpty(categoryNo) Then
                With Parameters
                    .Add(New ParameterSQL("CategoryNo", categoryNo))
                End With
            Else

                With Parameters
                    .Add(New ParameterSQL("CategoryNo", Nothing))

                End With
            End If


            Return Me.Load("uspGetAccountCategories", "AccountCategories", Parameters)

        End Function



        Public Function GetAccountCategoriesByType(AccountTypeID As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AccountTypeID", AccountTypeID))

            End With



            Return Me.Load("uspGetAccountCategoriesByType", "AccountCategories", Parameters)

        End Function





        Public Function GetAccountCategories() As DataSet

            Return Me.GetAccountCategories(String.Empty)

        End Function

        Public Function GetNextAccountCategoryID(accountTypeID As String) As Integer

            With Parameters
                .Add(New ParameterSQL("AccountTypeID", accountTypeID))
                .Add(New ParameterSQL("CategoryID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextAccountCategoryID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("AccountTypeID")) Then
                    Return CInt(Me.ReadData("CategoryID"))
                Else : Return 1
                End If
            Else
                Return Nothing
            End If

        End Function


#End Region



    End Class


    Public Class ChartAccounts : Inherits DBConnect

#Region " Fields "

        Private m_AccountNo As String
        Private m_CategoryNo As String
        Private m_AccountName As String
        Private m_AccountReportID As String
        Private m_AccountActionID As String
        Private m_IsReadOnly As Boolean
        Private m_IsContra As Boolean
        Private m_Hidden As Boolean


#End Region

#Region " Properties "

        Public Property AccountNo() As String
            Get
                Return m_AccountNo
            End Get
            Set(ByVal Value As String)
                m_AccountNo = Value
            End Set
        End Property

        Public Property CategoryNo() As String
            Get
                Return m_CategoryNo
            End Get
            Set(ByVal Value As String)
                m_CategoryNo = Value
            End Set
        End Property

        Public Property AccountName() As String
            Get
                Return m_AccountName
            End Get
            Set(ByVal Value As String)
                m_AccountName = Value
            End Set
        End Property

        Public Property AccountReportID() As String
            Get
                Return m_AccountReportID
            End Get
            Set(ByVal Value As String)
                m_AccountReportID = Value
            End Set
        End Property

        Public Property AccountActionID() As String
            Get
                Return m_AccountActionID
            End Get
            Set(ByVal Value As String)
                m_AccountActionID = Value
            End Set
        End Property


        Public Property IsContra() As Boolean
            Get
                Return m_IsContra
            End Get
            Set(ByVal Value As Boolean)
                m_IsContra = Value
            End Set
        End Property

        Public Property IsReadOnly() As Boolean
            Get
                Return m_IsReadOnly
            End Get
            Set(ByVal Value As Boolean)
                m_IsReadOnly = Value
            End Set
        End Property

        Public Property Hidden() As Boolean
            Get
                Return m_Hidden
            End Get
            Set(ByVal Value As Boolean)
                m_Hidden = Value
            End Set
        End Property



#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region "Methods"


        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertChartAccounts")

            With Parameters
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("CategoryNo", Me.CategoryNo))
                .Add(New ParameterSQL("AccountName", Me.AccountName))
                .Add(New ParameterSQL("AccountReportID", Me.AccountReportID))
                .Add(New ParameterSQL("AccountActionID", Me.AccountActionID))
                .Add(New ParameterSQL("IsContra", Me.IsContra))
                .Add(New ParameterSQL("IsReadOnly", Me.IsReadOnly))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("UserName", Me.UserName))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateChartAccounts")

            With Parameters
                .Add(New ParameterSQL("AccountNo", Me.AccountNo))
                .Add(New ParameterSQL("CategoryNo", Me.CategoryNo))
                .Add(New ParameterSQL("AccountName", Me.AccountName))
                .Add(New ParameterSQL("AccountReportID", Me.AccountReportID))
                .Add(New ParameterSQL("AccountActionID", Me.AccountActionID))
                .Add(New ParameterSQL("IsContra", Me.IsContra))
                .Add(New ParameterSQL("IsReadOnly", Me.IsReadOnly))
                .Add(New ParameterSQL("Hidden", Me.Hidden))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("UserName", Me.UserName))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))

            End With

            'For Audit Trail
            Me.SetLogObject("ChartAccounts")

            Return Parameters

        End Function

        Public Function GetChartAccounts(accountNo As String) As DataSet

            If Not String.IsNullOrEmpty(accountNo) Then
                With Parameters
                    .Add(New ParameterSQL("AccountNo", accountNo))
                End With

            Else
                With Parameters
                    .Add(New ParameterSQL("AccountNo", Nothing))
                End With

            End If

            Return Me.Load("uspGetChartAccounts", "ChartAccounts", Parameters)
        End Function


        Public Function GetNextChartAccountID(categoryNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("CategoryNo", categoryNo))
                .Add(New ParameterSQL("AccountID", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextChartAccountID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("CategoryNo")) Then
                    Return CInt(Me.ReadData("AccountID"))
                Else : Return 1
                End If
            Else
                Return Nothing
            End If

        End Function


        Public Function GetChartAccountsByCategory(categoryNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("CategoryNo", categoryNo))
            End With

            Return Me.Load("uspGetChartAccountsByCategoryNo", "ChartAccounts", Parameters)

        End Function


        Public Function GetChartAccountsByType(accountTypeID As String, AccountNo As String) As DataSet

            If String.IsNullOrEmpty(AccountNo) Then
                With Parameters
                    .Add(New ParameterSQL("AccountTypeID", accountTypeID))
                    .Add(New ParameterSQL("AccountNo", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("AccountTypeID", accountTypeID))
                    .Add(New ParameterSQL("AccountNo", AccountNo))
                End With
            End If


            Return Me.Load("uspGetChartAccountsByType", "ChartAccounts", Parameters)

        End Function

        Public Function GetChartAccountsByType(accountTypeID As String) As DataSet


            Return Me.GetChartAccountsByType(accountTypeID, String.Empty)

        End Function


        Public Function GetChartAccounts() As DataSet

            Return Me.GetChartAccounts(String.Empty)
        End Function




#End Region


    End Class

    Public Class CMFinAutoNumbers : Inherits DBConnect

        Public Function GetAutoNumbers(objectName As String, autoColumnName As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ObjectName", objectName))
                .Add(New ParameterSQL("AutoColumnName", autoColumnName))
            End With
            'End If

            Return Me.Load("uspGetCMFinAutoNumbers", "AutoNumbers", Parameters)
        End Function
    End Class


#End Region

#Region "SPECIAL cLINICS"
    Public Class OccupationalTherapy : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_WalkingID As String
        Private m_SitStandTransfersID As String
        Private m_BathingID As String
        Private m_ToiletingID As String
        Private m_DressingID As String
        Private m_HandFunctionID As String
        Private m_WashingID As String
        Private m_FeedingID As String
        Private m_GroomingID As String
        Private m_MealPreparationID As String
        Private m_WorkPlaySchoolID As String
        Private m_LeisureID As String
        Private m_CommunicationID As String
        Private m_CognitionID As String
        Private m_AttentionID As String
        Private m_ImpulseControlID As String
        Private m_SleepID As String
        Private m_MemoryID As String
        Private m_PerceptionID As String
        Private m_ThoughtID As String
        Private m_SightID As String
        Private m_TasteID As String
        Private m_HearingID As String
        Private m_TouchID As String
        Private m_SmellID As String
        Private m_PainID As String
        Private m_VestibularID As String
        Private m_TemperatureAndPressureID As String
        Private m_RecordDateTime As Date

#End Region

#Region " Properties "


        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property WalkingID() As String
            Get
                Return m_WalkingID
            End Get
            Set(ByVal Value As String)
                m_WalkingID = Value
            End Set
        End Property

        Public Property SitStandTransfersID() As String
            Get
                Return m_SitStandTransfersID
            End Get
            Set(ByVal Value As String)
                m_SitStandTransfersID = Value
            End Set
        End Property

        Public Property BathingID() As String
            Get
                Return m_BathingID
            End Get
            Set(ByVal Value As String)
                m_BathingID = Value
            End Set
        End Property

        Public Property ToiletingID() As String
            Get
                Return m_ToiletingID
            End Get
            Set(ByVal Value As String)
                m_ToiletingID = Value
            End Set
        End Property

        Public Property DressingID() As String
            Get
                Return m_DressingID
            End Get
            Set(ByVal Value As String)
                m_DressingID = Value
            End Set
        End Property

        Public Property HandFunctionID() As String
            Get
                Return m_HandFunctionID
            End Get
            Set(ByVal Value As String)
                m_HandFunctionID = Value
            End Set
        End Property

        Public Property WashingID() As String
            Get
                Return m_WashingID
            End Get
            Set(ByVal Value As String)
                m_WashingID = Value
            End Set
        End Property

        Public Property FeedingID() As String
            Get
                Return m_FeedingID
            End Get
            Set(ByVal Value As String)
                m_FeedingID = Value
            End Set
        End Property

        Public Property GroomingID() As String
            Get
                Return m_GroomingID
            End Get
            Set(ByVal Value As String)
                m_GroomingID = Value
            End Set
        End Property

        Public Property MealPreparationID() As String
            Get
                Return m_MealPreparationID
            End Get
            Set(ByVal Value As String)
                m_MealPreparationID = Value
            End Set
        End Property

        Public Property WorkPlaySchoolID() As String
            Get
                Return m_WorkPlaySchoolID
            End Get
            Set(ByVal Value As String)
                m_WorkPlaySchoolID = Value
            End Set
        End Property

        Public Property LeisureID() As String
            Get
                Return m_LeisureID
            End Get
            Set(ByVal Value As String)
                m_LeisureID = Value
            End Set
        End Property

        Public Property CommunicationID() As String
            Get
                Return m_CommunicationID
            End Get
            Set(ByVal Value As String)
                m_CommunicationID = Value
            End Set
        End Property

        Public Property CognitionID() As String
            Get
                Return m_CognitionID
            End Get
            Set(ByVal Value As String)
                m_CognitionID = Value
            End Set
        End Property

        Public Property AttentionID() As String
            Get
                Return m_AttentionID
            End Get
            Set(ByVal Value As String)
                m_AttentionID = Value
            End Set
        End Property

        Public Property ImpulseControlID() As String
            Get
                Return m_ImpulseControlID
            End Get
            Set(ByVal Value As String)
                m_ImpulseControlID = Value
            End Set
        End Property

        Public Property SleepID() As String
            Get
                Return m_SleepID
            End Get
            Set(ByVal Value As String)
                m_SleepID = Value
            End Set
        End Property

        Public Property MemoryID() As String
            Get
                Return m_MemoryID
            End Get
            Set(ByVal Value As String)
                m_MemoryID = Value
            End Set
        End Property

        Public Property PerceptionID() As String
            Get
                Return m_PerceptionID
            End Get
            Set(ByVal Value As String)
                m_PerceptionID = Value
            End Set
        End Property

        Public Property ThoughtID() As String
            Get
                Return m_ThoughtID
            End Get
            Set(ByVal Value As String)
                m_ThoughtID = Value
            End Set
        End Property

        Public Property SightID() As String
            Get
                Return m_SightID
            End Get
            Set(ByVal Value As String)
                m_SightID = Value
            End Set
        End Property

        Public Property TasteID() As String
            Get
                Return m_TasteID
            End Get
            Set(ByVal Value As String)
                m_TasteID = Value
            End Set
        End Property

        Public Property HearingID() As String
            Get
                Return m_HearingID
            End Get
            Set(ByVal Value As String)
                m_HearingID = Value
            End Set
        End Property

        Public Property TouchID() As String
            Get
                Return m_TouchID
            End Get
            Set(ByVal Value As String)
                m_TouchID = Value
            End Set
        End Property

        Public Property SmellID() As String
            Get
                Return m_SmellID
            End Get
            Set(ByVal Value As String)
                m_SmellID = Value
            End Set
        End Property

        Public Property PainID() As String
            Get
                Return m_PainID
            End Get
            Set(ByVal Value As String)
                m_PainID = Value
            End Set
        End Property

        Public Property VestibularID() As String
            Get
                Return m_VestibularID
            End Get
            Set(ByVal Value As String)
                m_VestibularID = Value
            End Set
        End Property

        Public Property TemperatureAndPressureID() As String
            Get
                Return m_TemperatureAndPressureID
            End Get
            Set(ByVal Value As String)
                m_TemperatureAndPressureID = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertOccupationalTherapy")

            With Parameters

                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("WalkingID", Me.WalkingID))
                .Add(New ParameterSQL("SitStandTransfersID", Me.SitStandTransfersID))
                .Add(New ParameterSQL("BathingID", Me.BathingID))
                .Add(New ParameterSQL("ToiletingID", Me.ToiletingID))
                .Add(New ParameterSQL("DressingID", Me.DressingID))
                .Add(New ParameterSQL("HandFunctionID", Me.HandFunctionID))
                .Add(New ParameterSQL("WashingID", Me.WashingID))
                .Add(New ParameterSQL("FeedingID", Me.FeedingID))
                .Add(New ParameterSQL("GroomingID", Me.GroomingID))
                .Add(New ParameterSQL("MealPreparationID", Me.MealPreparationID))
                .Add(New ParameterSQL("WorkPlaySchoolID", Me.WorkPlaySchoolID))
                .Add(New ParameterSQL("LeisureID", Me.LeisureID))
                .Add(New ParameterSQL("CommunicationID", Me.CommunicationID))
                .Add(New ParameterSQL("CognitionID", Me.CognitionID))
                .Add(New ParameterSQL("AttentionID", Me.AttentionID))
                .Add(New ParameterSQL("ImpulseControlID", Me.ImpulseControlID))
                .Add(New ParameterSQL("SleepID", Me.SleepID))
                .Add(New ParameterSQL("MemoryID", Me.MemoryID))
                .Add(New ParameterSQL("PerceptionID", Me.PerceptionID))
                .Add(New ParameterSQL("ThoughtID", Me.ThoughtID))
                .Add(New ParameterSQL("SightID", Me.SightID))
                .Add(New ParameterSQL("TasteID", Me.TasteID))
                .Add(New ParameterSQL("HearingID", Me.HearingID))
                .Add(New ParameterSQL("TouchID", Me.TouchID))
                .Add(New ParameterSQL("SmellID", Me.SmellID))
                .Add(New ParameterSQL("PainID", Me.PainID))
                .Add(New ParameterSQL("VestibularID", Me.VestibularID))
                .Add(New ParameterSQL("TemperatureAndPressureID", Me.TemperatureAndPressureID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateOccupationalTherapy")

            With Parameters

                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("WalkingID", Me.WalkingID))
                .Add(New ParameterSQL("SitStandTransfersID", Me.SitStandTransfersID))
                .Add(New ParameterSQL("BathingID", Me.BathingID))
                .Add(New ParameterSQL("ToiletingID", Me.ToiletingID))
                .Add(New ParameterSQL("DressingID", Me.DressingID))
                .Add(New ParameterSQL("HandFunctionID", Me.HandFunctionID))
                .Add(New ParameterSQL("WashingID", Me.WashingID))
                .Add(New ParameterSQL("FeedingID", Me.FeedingID))
                .Add(New ParameterSQL("GroomingID", Me.GroomingID))
                .Add(New ParameterSQL("MealPreparationID", Me.MealPreparationID))
                .Add(New ParameterSQL("WorkPlaySchoolID", Me.WorkPlaySchoolID))
                .Add(New ParameterSQL("LeisureID", Me.LeisureID))
                .Add(New ParameterSQL("CommunicationID", Me.CommunicationID))
                .Add(New ParameterSQL("CognitionID", Me.CognitionID))
                .Add(New ParameterSQL("AttentionID", Me.AttentionID))
                .Add(New ParameterSQL("ImpulseControlID", Me.ImpulseControlID))
                .Add(New ParameterSQL("SleepID", Me.SleepID))
                .Add(New ParameterSQL("MemoryID", Me.MemoryID))
                .Add(New ParameterSQL("PerceptionID", Me.PerceptionID))
                .Add(New ParameterSQL("ThoughtID", Me.ThoughtID))
                .Add(New ParameterSQL("SightID", Me.SightID))
                .Add(New ParameterSQL("TasteID", Me.TasteID))
                .Add(New ParameterSQL("HearingID", Me.HearingID))
                .Add(New ParameterSQL("TouchID", Me.TouchID))
                .Add(New ParameterSQL("SmellID", Me.SmellID))
                .Add(New ParameterSQL("PainID", Me.PainID))
                .Add(New ParameterSQL("VestibularID", Me.VestibularID))
                .Add(New ParameterSQL("TemperatureAndPressureID", Me.TemperatureAndPressureID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("OccupationalTherapy")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "OccupationalTherapy"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("OccupationalTherapy")

            Return Parameters

        End Function

        Public Function GetOccupationalTherapy(ByVal VisitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", VisitNo))
            End With

            Return Me.Load("uspGetOccupationalTherapy", "OccupationalTherapy", Parameters)

        End Function

        Public Function NavigateOccupationalTherapyByPatientNo(patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("NavigateOccupationalTherapyByPatientNo", "OccupationalTherapy", Parameters)

        End Function

        'Public Function GetNextOccupationalTherapyID() As Integer

        '    With Parameters
        '        .Add(New ParameterSQL("OccupationalTherapyID", SqlDbType.Int))
        '    End With

        '    Me.ReadData = Me.Read("uspGetNextOccupationalTherapyID", Parameters)

        '    If Me.ReadData IsNot Nothing Then

        '        If Not IsDBNull(Me.ReadData("OccupationalTherapyID")) Then
        '            Return CInt(Me.ReadData("OccupationalTherapyID"))
        '        Else : Return 1
        '        End If
        '    Else : Return 1
        '    End If

        'End Function

#End Region



    End Class


    Public Class OTIntervention : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_LeadTherapist As String
        Private m_InterventionTypeID As String
        Private m_CognitiveAssessment As Boolean
        Private m_HandTherapy As Boolean
        Private m_HealthEducation As Boolean
        Private m_TherapeuticGroupActivities As Boolean
        Private m_HomebasedRehabilitation As Boolean
        Private m_AssistiveDevices As Boolean
        Private m_MobilitySkillsTraining As Boolean
        Private m_NeurocognitiveRehabilitation As Boolean
        Private m_OrientationTechniques As Boolean
        Private m_VocationalRehabilitation As Boolean
        Private m_SelfCareTraining As Boolean
        Private m_PlayTherapy As Boolean
        Private m_StressManagement As Boolean
        Private m_OtherAssessment As String
        Private m_Notes As String


#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property LeadTherapist() As String
            Get
                Return m_LeadTherapist
            End Get
            Set(ByVal Value As String)
                m_LeadTherapist = Value
            End Set
        End Property


        Public Property InterventionTypeID() As String
            Get
                Return m_InterventionTypeID
            End Get
            Set(ByVal Value As String)
                m_InterventionTypeID = Value
            End Set
        End Property


        Public Property CognitiveAssessment() As Boolean
            Get
                Return m_CognitiveAssessment
            End Get
            Set(ByVal Value As Boolean)
                m_CognitiveAssessment = Value
            End Set
        End Property

        Public Property HandTherapy() As Boolean
            Get
                Return m_HandTherapy
            End Get
            Set(ByVal Value As Boolean)
                m_HandTherapy = Value
            End Set
        End Property

        Public Property HealthEducation() As Boolean
            Get
                Return m_HealthEducation
            End Get
            Set(ByVal Value As Boolean)
                m_HealthEducation = Value
            End Set
        End Property

        Public Property TherapeuticGroupActivities() As Boolean
            Get
                Return m_TherapeuticGroupActivities
            End Get
            Set(ByVal Value As Boolean)
                m_TherapeuticGroupActivities = Value
            End Set
        End Property

        Public Property HomebasedRehabilitation() As Boolean
            Get
                Return m_HomebasedRehabilitation
            End Get
            Set(ByVal Value As Boolean)
                m_HomebasedRehabilitation = Value
            End Set
        End Property

        Public Property AssistiveDevices() As Boolean
            Get
                Return m_AssistiveDevices
            End Get
            Set(ByVal Value As Boolean)
                m_AssistiveDevices = Value
            End Set
        End Property

        Public Property MobilitySkillsTraining() As Boolean
            Get
                Return m_MobilitySkillsTraining
            End Get
            Set(ByVal Value As Boolean)
                m_MobilitySkillsTraining = Value
            End Set
        End Property

        Public Property NeurocognitiveRehabilitation() As Boolean
            Get
                Return m_NeurocognitiveRehabilitation
            End Get
            Set(ByVal Value As Boolean)
                m_NeurocognitiveRehabilitation = Value
            End Set
        End Property

        Public Property OrientationTechniques() As Boolean
            Get
                Return m_OrientationTechniques
            End Get
            Set(ByVal Value As Boolean)
                m_OrientationTechniques = Value
            End Set
        End Property

        Public Property VocationalRehabilitation() As Boolean
            Get
                Return m_VocationalRehabilitation
            End Get
            Set(ByVal Value As Boolean)
                m_VocationalRehabilitation = Value
            End Set
        End Property

        Public Property SelfCareTraining() As Boolean
            Get
                Return m_SelfCareTraining
            End Get
            Set(ByVal Value As Boolean)
                m_SelfCareTraining = Value
            End Set
        End Property

        Public Property PlayTherapy() As Boolean
            Get
                Return m_PlayTherapy
            End Get
            Set(ByVal Value As Boolean)
                m_PlayTherapy = Value
            End Set
        End Property

        Public Property StressManagement() As Boolean
            Get
                Return m_StressManagement
            End Get
            Set(ByVal Value As Boolean)
                m_StressManagement = Value
            End Set
        End Property

        Public Property OtherAssessment() As String
            Get
                Return m_OtherAssessment
            End Get
            Set(ByVal Value As String)
                m_OtherAssessment = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertOTIntervention")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("LeadTherapist", Me.LeadTherapist))
                .Add(New ParameterSQL("InterventionTypeID", Me.InterventionTypeID))
                .Add(New ParameterSQL("CognitiveAssessment", Me.CognitiveAssessment))
                .Add(New ParameterSQL("HandTherapy", Me.HandTherapy))
                .Add(New ParameterSQL("HealthEducation", Me.HealthEducation))
                .Add(New ParameterSQL("TherapeuticGroupActivities", Me.TherapeuticGroupActivities))
                .Add(New ParameterSQL("HomebasedRehabilitation", Me.HomebasedRehabilitation))
                .Add(New ParameterSQL("AssistiveDevices", Me.AssistiveDevices))
                .Add(New ParameterSQL("MobilitySkillsTraining", Me.MobilitySkillsTraining))
                .Add(New ParameterSQL("NeurocognitiveRehabilitation", Me.NeurocognitiveRehabilitation))
                .Add(New ParameterSQL("OrientationTechniques", Me.OrientationTechniques))
                .Add(New ParameterSQL("VocationalRehabilitation", Me.VocationalRehabilitation))
                .Add(New ParameterSQL("SelfCareTraining", Me.SelfCareTraining))
                .Add(New ParameterSQL("PlayTherapy", Me.PlayTherapy))
                .Add(New ParameterSQL("StressManagement", Me.StressManagement))
                .Add(New ParameterSQL("OtherAssessment", Me.OtherAssessment))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateOTIntervention")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("LeadTherapist", Me.LeadTherapist))
                .Add(New ParameterSQL("InterventionTypeID", Me.InterventionTypeID))
                .Add(New ParameterSQL("CognitiveAssessment", Me.CognitiveAssessment))
                .Add(New ParameterSQL("HandTherapy", Me.HandTherapy))
                .Add(New ParameterSQL("HealthEducation", Me.HealthEducation))
                .Add(New ParameterSQL("TherapeuticGroupActivities", Me.TherapeuticGroupActivities))
                .Add(New ParameterSQL("HomebasedRehabilitation", Me.HomebasedRehabilitation))
                .Add(New ParameterSQL("AssistiveDevices", Me.AssistiveDevices))
                .Add(New ParameterSQL("MobilitySkillsTraining", Me.MobilitySkillsTraining))
                .Add(New ParameterSQL("NeurocognitiveRehabilitation", Me.NeurocognitiveRehabilitation))
                .Add(New ParameterSQL("OrientationTechniques", Me.OrientationTechniques))
                .Add(New ParameterSQL("VocationalRehabilitation", Me.VocationalRehabilitation))
                .Add(New ParameterSQL("SelfCareTraining", Me.SelfCareTraining))
                .Add(New ParameterSQL("PlayTherapy", Me.PlayTherapy))
                .Add(New ParameterSQL("StressManagement", Me.StressManagement))
                .Add(New ParameterSQL("OtherAssessment", Me.OtherAssessment))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("OTIntervention")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "OTIntervention"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("OTIntervention")

            Return Parameters

        End Function

        Public Function GetOTIntervention(ByVal VisitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", VisitNo))
            End With

            Return Me.Load("uspGetOTIntervention", "OTIntervention", Parameters)

        End Function

#End Region



    End Class

#Region "MATERNITY"

    Public Class MaternalEnrollment : Inherits DBConnect

#Region " Fields "

        Private m_ANCNo As String
        Private m_PatientNo As String
        Private m_HIVStatusID As String
        Private m_PartnersHIVStatusID As String
        Private m_Gravida As Integer
        Private m_Para As Integer
        Private m_LNMP As Date
        Private m_LNMPDateReliable As Boolean
        Private m_CycleRegularID As String
        Private m_EDD As Date
        Private m_ScanDate As Date
        Private m_ContraceptivesComplications As String
        Private m_MedicalHistory As String
        Private m_MedicalHistoryNotes As String
        Private m_BloodTransfusion As String
        Private m_BloodTransfusionDate As Date
        Private m_SurgicalHistory As String
        Private m_SurgicalHistoryNotes As String
        Private m_GynaecologicalHistory As String
        Private m_GynaecologicalHistoryNotes As String
        Private m_FamilyHistory As String
        Private m_FamilyHistoryNotes As String
        Private m_SocialHistory As String
        Private m_SocialHistoryNotes As String
        Private m_PatientStatusID As String

#End Region

#Region " Properties "


        Public Property ANCNo() As String
            Get
                Return m_ANCNo
            End Get
            Set(ByVal Value As String)
                m_ANCNo = Value
            End Set
        End Property

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(ByVal Value As String)
                m_PatientNo = Value
            End Set
        End Property


        Public Property HIVStatusID() As String
            Get
                Return m_HIVStatusID
            End Get
            Set(ByVal Value As String)
                m_HIVStatusID = Value
            End Set
        End Property

        Public Property PartnersHIVStatusID() As String
            Get
                Return m_PartnersHIVStatusID
            End Get
            Set(ByVal Value As String)
                m_PartnersHIVStatusID = Value
            End Set
        End Property

        Public Property Gravida() As Integer
            Get
                Return m_Gravida
            End Get
            Set(ByVal Value As Integer)
                m_Gravida = Value
            End Set
        End Property

        Public Property Para() As Integer
            Get
                Return m_Para
            End Get
            Set(ByVal Value As Integer)
                m_Para = Value
            End Set
        End Property

        Public Property LNMP() As Date
            Get
                Return m_LNMP
            End Get
            Set(ByVal Value As Date)
                m_LNMP = Value
            End Set
        End Property

        Public Property LNMPDateReliable() As Boolean
            Get
                Return m_LNMPDateReliable
            End Get
            Set(ByVal Value As Boolean)
                m_LNMPDateReliable = Value
            End Set
        End Property

        Public Property CycleRegularID() As String
            Get
                Return m_CycleRegularID
            End Get
            Set(ByVal Value As String)
                m_CycleRegularID = Value
            End Set
        End Property

        Public Property EDD() As Date
            Get
                Return m_EDD
            End Get
            Set(ByVal Value As Date)
                m_EDD = Value
            End Set
        End Property

        Public Property ScanDate() As Date
            Get
                Return m_ScanDate
            End Get
            Set(ByVal Value As Date)
                m_ScanDate = Value
            End Set
        End Property

        Public Property ContraceptivesComplications() As String
            Get
                Return m_ContraceptivesComplications
            End Get
            Set(ByVal Value As String)
                m_ContraceptivesComplications = Value
            End Set
        End Property

        Public Property MedicalHistory() As String
            Get
                Return m_MedicalHistory
            End Get
            Set(ByVal Value As String)
                m_MedicalHistory = Value
            End Set
        End Property

        Public Property MedicalHistoryNotes() As String
            Get
                Return m_MedicalHistoryNotes
            End Get
            Set(ByVal Value As String)
                m_MedicalHistoryNotes = Value
            End Set
        End Property

        Public Property BloodTransfusion() As String
            Get
                Return m_BloodTransfusion
            End Get
            Set(ByVal Value As String)
                m_BloodTransfusion = Value
            End Set
        End Property

        Public Property BloodTransfusionDate() As Date
            Get
                Return m_BloodTransfusionDate
            End Get
            Set(ByVal Value As Date)
                m_BloodTransfusionDate = Value
            End Set
        End Property

        Public Property SurgicalHistory() As String
            Get
                Return m_SurgicalHistory
            End Get
            Set(ByVal Value As String)
                m_SurgicalHistory = Value
            End Set
        End Property

        Public Property SurgicalHistoryNotes() As String
            Get
                Return m_SurgicalHistoryNotes
            End Get
            Set(ByVal Value As String)
                m_SurgicalHistoryNotes = Value
            End Set
        End Property

        Public Property GynaecologicalHistory() As String
            Get
                Return m_GynaecologicalHistory
            End Get
            Set(ByVal Value As String)
                m_GynaecologicalHistory = Value
            End Set
        End Property

        Public Property GynaecologicalHistoryNotes() As String
            Get
                Return m_GynaecologicalHistoryNotes
            End Get
            Set(ByVal Value As String)
                m_GynaecologicalHistoryNotes = Value
            End Set
        End Property

        Public Property FamilyHistory() As String
            Get
                Return m_FamilyHistory
            End Get
            Set(ByVal Value As String)
                m_FamilyHistory = Value
            End Set
        End Property

        Public Property FamilyHistoryNotes() As String
            Get
                Return m_FamilyHistoryNotes
            End Get
            Set(ByVal Value As String)
                m_FamilyHistoryNotes = Value
            End Set
        End Property

        Public Property SocialHistory() As String
            Get
                Return m_SocialHistory
            End Get
            Set(ByVal Value As String)
                m_SocialHistory = Value
            End Set
        End Property

        Public Property SocialHistoryNotes() As String
            Get
                Return m_SocialHistoryNotes
            End Get
            Set(ByVal Value As String)
                m_SocialHistoryNotes = Value
            End Set
        End Property

        Public Property PatientStatusID() As String
            Get
                Return m_PatientStatusID
            End Get
            Set(ByVal Value As String)
                m_PatientStatusID = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertMaternalEnrollment")

            With Parameters

                .Add(New ParameterSQL("ANCNo", Me.ANCNo))
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("HIVStatusID", Me.HIVStatusID))
                .Add(New ParameterSQL("PartnersHIVStatusID", Me.PartnersHIVStatusID))
                .Add(New ParameterSQL("Gravida", Me.Gravida))
                .Add(New ParameterSQL("Para", Me.Para))
                .Add(New ParameterSQL("LNMP", Me.LNMP))
                .Add(New ParameterSQL("LNMPDateReliable", Me.LNMPDateReliable))
                .Add(New ParameterSQL("CycleRegularID", Me.CycleRegularID))
                .Add(New ParameterSQL("EDD", Me.EDD))
                .Add(New ParameterSQL("ScanDate", Me.ScanDate))
                ' .Add(New ParameterSQL("ContraceptivesComplications", Me.ContraceptivesComplications))
                .Add(New ParameterSQL("MedicalHistory", Me.MedicalHistory))
                .Add(New ParameterSQL("MedicalHistoryNotes", Me.MedicalHistoryNotes))
                .Add(New ParameterSQL("BloodTransfusion", Me.BloodTransfusion))
                .Add(New ParameterSQL("BloodTransfusionDate", Me.BloodTransfusionDate))
                .Add(New ParameterSQL("SurgicalHistory", Me.SurgicalHistory))
                .Add(New ParameterSQL("SurgicalHistoryNotes", Me.SurgicalHistoryNotes))
                .Add(New ParameterSQL("GynaecologicalHistory", Me.GynaecologicalHistory))
                .Add(New ParameterSQL("GynaecologicalHistoryNotes", Me.GynaecologicalHistoryNotes))
                .Add(New ParameterSQL("FamilyHistory", Me.FamilyHistory))
                .Add(New ParameterSQL("FamilyHistoryNotes", Me.FamilyHistoryNotes))
                .Add(New ParameterSQL("SocialHistory", Me.SocialHistory))
                .Add(New ParameterSQL("SocialHistoryNotes", Me.SocialHistoryNotes))
                .Add(New ParameterSQL("PatientStatusID", Me.PatientStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateMaternalEnrollment")

            With Parameters
                .Add(New ParameterSQL("ANCNo", Me.ANCNo))
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("HIVStatusID", Me.HIVStatusID))
                .Add(New ParameterSQL("PartnersHIVStatusID", Me.PartnersHIVStatusID))
                .Add(New ParameterSQL("Gravida", Me.Gravida))
                .Add(New ParameterSQL("Para", Me.Para))
                .Add(New ParameterSQL("LNMP", Me.LNMP))
                .Add(New ParameterSQL("LNMPDateReliable", Me.LNMPDateReliable))
                .Add(New ParameterSQL("CycleRegularID", Me.CycleRegularID))
                .Add(New ParameterSQL("EDD", Me.EDD))
                .Add(New ParameterSQL("ScanDate", Me.ScanDate))
                .Add(New ParameterSQL("ContraceptivesComplications", Me.ContraceptivesComplications))
                .Add(New ParameterSQL("MedicalHistory", Me.MedicalHistory))
                .Add(New ParameterSQL("MedicalHistoryNotes", Me.MedicalHistoryNotes))
                .Add(New ParameterSQL("BloodTransfusion", Me.BloodTransfusion))
                .Add(New ParameterSQL("BloodTransfusionDate", Me.BloodTransfusionDate))
                .Add(New ParameterSQL("SurgicalHistory", Me.SurgicalHistory))
                .Add(New ParameterSQL("SurgicalHistoryNotes", Me.SurgicalHistoryNotes))
                .Add(New ParameterSQL("GynaecologicalHistory", Me.GynaecologicalHistory))
                .Add(New ParameterSQL("GynaecologicalHistoryNotes", Me.GynaecologicalHistoryNotes))
                .Add(New ParameterSQL("FamilyHistory", Me.FamilyHistory))
                .Add(New ParameterSQL("FamilyHistoryNotes", Me.FamilyHistoryNotes))
                .Add(New ParameterSQL("SocialHistory", Me.SocialHistory))
                .Add(New ParameterSQL("SocialHistoryNotes", Me.SocialHistoryNotes))
                .Add(New ParameterSQL("PatientStatusID", Me.PatientStatusID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("MaternalEnrollment")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PatientNo = '" + Me.PatientNo + "'"
            Dim errorPart As String = "Patient No: " + Me.PatientNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "MaternalEnrollment"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("MaternalEnrollment")

            Return Parameters

        End Function

        Public Function GetMaternalEnrollment(ByVal _ANCNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ANCNo", _ANCNo))
            End With

            Return Me.Load("uspGetMaternalEnrollment", "MaternalEnrollment", Parameters)

        End Function

        ''' <summary>
        ''' Returns all periodic visits as per specified visit period
        ''' </summary>
        ''' <param name="startDate"></param>
        ''' <param name="endDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPeriodicMaternalEnrollment(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetPeriodicMaternalEnrollment", "MaternalEnrollment", Parameters)

        End Function

        Public Function GetNextANCID(patientNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
                .Add(New ParameterSQL("ANCID", SqlDbType.Int))

            End With

            Me.ReadData = Me.Read("uspGetNextANCID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("ANCID")) Then
                    Return CInt(Me.ReadData("ANCID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function NavigateMaternalEnrollmentByPatientNo(patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("NavigateMaternalEnrollmentByPatientNo", "MaternalEnrollment", Parameters)

        End Function

        Public Function CheckMaternalEnrollmentStatus(patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspCheckMaternalEnrollmentStatus", "MaternalEnrollment", Parameters)

        End Function

#End Region



    End Class


    Public Class ContraceptivesHistory : Inherits DBConnect

#Region " Fields "

        Private m_PatientNo As String
        Private m_ComplicationsID As String
        Private m_ComplicationDetails As String
        Private m_ContraceptiveID As String
        Private m_DateStarted As Date
        Private m_DiscontinuedRemovedID As String
        Private m_RemovalReasonsID As String
        Private m_Notes As String



#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(ByVal Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property ComplicationsID() As String
            Get
                Return m_ComplicationsID
            End Get
            Set(ByVal Value As String)
                m_ComplicationsID = Value
            End Set
        End Property

        Public Property ComplicationDetails() As String
            Get
                Return m_ComplicationDetails
            End Get
            Set(ByVal Value As String)
                m_ComplicationDetails = Value
            End Set
        End Property

        Public Property ContraceptiveID() As String
            Get
                Return m_ContraceptiveID
            End Get
            Set(ByVal Value As String)
                m_ContraceptiveID = Value
            End Set
        End Property

        Public Property DateStarted() As Date
            Get
                Return m_DateStarted
            End Get
            Set(ByVal Value As Date)
                m_DateStarted = Value
            End Set
        End Property

        Public Property DiscontinuedRemovedID() As String
            Get
                Return m_DiscontinuedRemovedID
            End Get
            Set(ByVal Value As String)
                m_DiscontinuedRemovedID = Value
            End Set
        End Property

        Public Property RemovalReasonsID() As String
            Get
                Return m_RemovalReasonsID
            End Get
            Set(ByVal Value As String)
                m_RemovalReasonsID = Value
            End Set
        End Property

        Public Property Notes() As String
            Get
                Return m_Notes
            End Get
            Set(ByVal Value As String)
                m_Notes = Value
            End Set
        End Property

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditContraceptivesHistory")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("ComplicationsID", Me.ComplicationsID))
                .Add(New ParameterSQL("ComplicationDetails", Me.ComplicationDetails))
                .Add(New ParameterSQL("ContraceptiveID", Me.ContraceptiveID))
                .Add(New ParameterSQL("DateStarted", Me.DateStarted))
                .Add(New ParameterSQL("DiscontinuedRemovedID", Me.DiscontinuedRemovedID))
                .Add(New ParameterSQL("RemovalReasonsID", Me.RemovalReasonsID))
                .Add(New ParameterSQL("Notes", Me.Notes))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        'Protected Overrides Function UpdateData() As ArrayList

        '    Me.SetCommand("uspUpdateContraceptivesHistory")

        '    With Parameters
        '       .Add(New ParameterSQL("PatientNo", Me.PatientNo))
        '        .Add(New ParameterSQL("ComplicationsID", Me.ComplicationsID))
        '        .Add(New ParameterSQL("ComplicationDetails", Me.ComplicationDetails))
        '        .Add(New ParameterSQL("ContraceptiveID", Me.ContraceptiveID))
        '        .Add(New ParameterSQL("DateStarted", Me.DateStarted))
        '        .Add(New ParameterSQL("DiscontinuedRemovedID", Me.DiscontinuedRemovedID))
        '        .Add(New ParameterSQL("RemovalReasonsID", Me.RemovalReasonsID))
        '        .Add(New ParameterSQL("Notes", Me.Notes))
        '        .Add(New ParameterSQL("LoginID", Me.LoginID))

        '    End With

        '    'For Audit Trail
        '    Me.SetLogObject("ContraceptivesHistory")

        '    Return Parameters

        'End Function


        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PatientNo = '" + Me.PatientNo + "'"
            Dim errorPart As String = "Patient No: " + Me.PatientNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "ContraceptivesHistory"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("ContraceptivesHistory")

            Return Parameters

        End Function

        Public Function GetContraceptivesHistory(ByVal patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetContraceptivesHistory", "ContraceptivesHistory", Parameters)

        End Function

#End Region



    End Class
    Public Class Obstetric : Inherits DBConnect

#Region " Fields "

        Private m_PatientNo As String
        Private m_Pregnancy As Integer
        Private m_YearPregnant As Integer
        Private m_AbortionID As String
        Private m_AbortionPeriodID As String
        Private m_TypeOfDeliveryID As String
        Private m_ThirdStageID As String
        Private m_PuerPeriumID As String
        Private m_ChildStatusID As String
        Private m_GenderID As String
        Private m_BirthWeight As Single
        Private m_ChildImmunised As Boolean
        Private m_HealthCondition As String


#End Region

#Region " Properties "

        Public Property PatientNo() As String
            Get
                Return m_PatientNo
            End Get
            Set(ByVal Value As String)
                m_PatientNo = Value
            End Set
        End Property

        Public Property Pregnancy() As Integer
            Get
                Return m_Pregnancy
            End Get
            Set(ByVal Value As Integer)
                m_Pregnancy = Value
            End Set
        End Property

        Public Property YearPregnant() As Integer
            Get
                Return m_YearPregnant
            End Get
            Set(ByVal Value As Integer)
                m_YearPregnant = Value
            End Set
        End Property

        Public Property AbortionID() As String
            Get
                Return m_AbortionID
            End Get
            Set(ByVal Value As String)
                m_AbortionID = Value
            End Set
        End Property

        Public Property AbortionPeriodID() As String
            Get
                Return m_AbortionPeriodID
            End Get
            Set(ByVal Value As String)
                m_AbortionPeriodID = Value
            End Set
        End Property


        Public Property TypeOfDeliveryID() As String
            Get
                Return m_TypeOfDeliveryID
            End Get
            Set(ByVal Value As String)
                m_TypeOfDeliveryID = Value
            End Set
        End Property

        Public Property ThirdStageID() As String
            Get
                Return m_ThirdStageID
            End Get
            Set(ByVal Value As String)
                m_ThirdStageID = Value
            End Set
        End Property

        Public Property PuerPeriumID() As String
            Get
                Return m_PuerPeriumID
            End Get
            Set(ByVal Value As String)
                m_PuerPeriumID = Value
            End Set
        End Property

        Public Property ChildStatusID() As String
            Get
                Return m_ChildStatusID
            End Get
            Set(ByVal Value As String)
                m_ChildStatusID = Value
            End Set
        End Property

        Public Property GenderID() As String
            Get
                Return m_GenderID
            End Get
            Set(ByVal Value As String)
                m_GenderID = Value
            End Set
        End Property

        Public Property BirthWeight() As Single
            Get
                Return m_BirthWeight
            End Get
            Set(ByVal Value As Single)
                m_BirthWeight = Value
            End Set
        End Property

        Public Property ChildImmunised() As Boolean
            Get
                Return m_ChildImmunised
            End Get
            Set(ByVal Value As Boolean)
                m_ChildImmunised = Value
            End Set
        End Property

        Public Property HealthCondition() As String
            Get
                Return m_HealthCondition
            End Get
            Set(ByVal Value As String)
                m_HealthCondition = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditObstetric")

            With Parameters
                .Add(New ParameterSQL("PatientNo", Me.PatientNo))
                .Add(New ParameterSQL("Pregnancy", Me.Pregnancy))
                .Add(New ParameterSQL("YearPregnant", Me.YearPregnant))
                .Add(New ParameterSQL("AbortionID", Me.AbortionID))
                .Add(New ParameterSQL("AbortionPeriodID", Me.AbortionPeriodID))
                .Add(New ParameterSQL("TypeOfDeliveryID", Me.TypeOfDeliveryID))
                .Add(New ParameterSQL("ThirdStageID", Me.ThirdStageID))
                .Add(New ParameterSQL("PuerPeriumID", Me.PuerPeriumID))
                .Add(New ParameterSQL("ChildStatusID", Me.ChildStatusID))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("BirthWeight", Me.BirthWeight))
                .Add(New ParameterSQL("ChildImmunised", Me.ChildImmunised))
                .Add(New ParameterSQL("HealthCondition", Me.HealthCondition))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function


        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "PatientNo = '" + Me.PatientNo + "'"
            Dim errorPart As String = "Patient No: " + Me.PatientNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Obstetric"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Obstetric")

            Return Parameters

        End Function

        Public Function GetObstetric(ByVal patientNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("PatientNo", patientNo))
            End With

            Return Me.Load("uspGetObstetric", "Obstetric", Parameters)

        End Function

#End Region



    End Class


    Public Class AntenatalVisits : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ANCNo As String
        Private m_PallorID As String
        Private m_JaundiceID As String
        Private m_LynphadenopathyID As String
        Private m_VaricoseID As String
        Private m_OedemaID As String
        Private m_HeartSoundID As String
        Private m_AirEntryID As String
        Private m_BreastID As String
        Private m_LiverID As String
        Private m_SpleenID As String
        Private m_BowelSoundsID As String
        Private m_ScarID As String
        Private m_PupilReactionID As String
        Private m_ReflexesID As String
        Private m_OtherSTIID As String
        Private m_STIDetails As String
        Private m_SkeletalDeformityID As String
        Private m_AnenorrheaWeeks As Integer
        Private m_FundalHeight As String
        Private m_PresentationID As String
        Private m_LieID As String
        Private m_PositionID As String
        Private m_RelationPPOrBrim As String
        Private m_FoetalHeart As Integer
        Private m_TTGiven As Boolean
        Private m_IPTID As String
        Private m_NetUseID As String
        Private m_Remarks As String
        Private m_ReturnDate As Date
        Private m_DoctorSpecialityID As String
        Private m_DoctorID As String
        Private m_NurseInChargeID As String


#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ANCNo() As String
            Get
                Return m_ANCNo
            End Get
            Set(ByVal Value As String)
                m_ANCNo = Value
            End Set
        End Property

        Public Property PallorID() As String
            Get
                Return m_PallorID
            End Get
            Set(ByVal Value As String)
                m_PallorID = Value
            End Set
        End Property

        Public Property JaundiceID() As String
            Get
                Return m_JaundiceID
            End Get
            Set(ByVal Value As String)
                m_JaundiceID = Value
            End Set
        End Property

        Public Property LynphadenopathyID() As String
            Get
                Return m_LynphadenopathyID
            End Get
            Set(ByVal Value As String)
                m_LynphadenopathyID = Value
            End Set
        End Property

        Public Property VaricoseID() As String
            Get
                Return m_VaricoseID
            End Get
            Set(ByVal Value As String)
                m_VaricoseID = Value
            End Set
        End Property

        Public Property OedemaID() As String
            Get
                Return m_OedemaID
            End Get
            Set(ByVal Value As String)
                m_OedemaID = Value
            End Set
        End Property

        Public Property HeartSoundID() As String
            Get
                Return m_HeartSoundID
            End Get
            Set(ByVal Value As String)
                m_HeartSoundID = Value
            End Set
        End Property

        Public Property AirEntryID() As String
            Get
                Return m_AirEntryID
            End Get
            Set(ByVal Value As String)
                m_AirEntryID = Value
            End Set
        End Property

        Public Property BreastID() As String
            Get
                Return m_BreastID
            End Get
            Set(ByVal Value As String)
                m_BreastID = Value
            End Set
        End Property

        Public Property LiverID() As String
            Get
                Return m_LiverID
            End Get
            Set(ByVal Value As String)
                m_LiverID = Value
            End Set
        End Property

        Public Property SpleenID() As String
            Get
                Return m_SpleenID
            End Get
            Set(ByVal Value As String)
                m_SpleenID = Value
            End Set
        End Property

        Public Property BowelSoundsID() As String
            Get
                Return m_BowelSoundsID
            End Get
            Set(ByVal Value As String)
                m_BowelSoundsID = Value
            End Set
        End Property

        Public Property ScarID() As String
            Get
                Return m_ScarID
            End Get
            Set(ByVal Value As String)
                m_ScarID = Value
            End Set
        End Property

        Public Property PupilReactionID() As String
            Get
                Return m_PupilReactionID
            End Get
            Set(ByVal Value As String)
                m_PupilReactionID = Value
            End Set
        End Property

        Public Property ReflexesID() As String
            Get
                Return m_ReflexesID
            End Get
            Set(ByVal Value As String)
                m_ReflexesID = Value
            End Set
        End Property

        Public Property OtherSTIID() As String
            Get
                Return m_OtherSTIID
            End Get
            Set(ByVal Value As String)
                m_OtherSTIID = Value
            End Set
        End Property

        Public Property STIDetails() As String
            Get
                Return m_STIDetails
            End Get
            Set(ByVal Value As String)
                m_STIDetails = Value
            End Set
        End Property

        Public Property SkeletalDeformityID() As String
            Get
                Return m_SkeletalDeformityID
            End Get
            Set(ByVal Value As String)
                m_SkeletalDeformityID = Value
            End Set
        End Property

        Public Property AnenorrheaWeeks() As Integer
            Get
                Return m_AnenorrheaWeeks
            End Get
            Set(ByVal Value As Integer)
                m_AnenorrheaWeeks = Value
            End Set
        End Property

        Public Property FundalHeight() As String
            Get
                Return m_FundalHeight
            End Get
            Set(ByVal Value As String)
                m_FundalHeight = Value
            End Set
        End Property

        Public Property PresentationID() As String
            Get
                Return m_PresentationID
            End Get
            Set(ByVal Value As String)
                m_PresentationID = Value
            End Set
        End Property

        Public Property LieID() As String
            Get
                Return m_LieID
            End Get
            Set(ByVal Value As String)
                m_LieID = Value
            End Set
        End Property

        Public Property PositionID() As String
            Get
                Return m_PositionID
            End Get
            Set(ByVal Value As String)
                m_PositionID = Value
            End Set
        End Property

        Public Property RelationPPOrBrim() As String
            Get
                Return m_RelationPPOrBrim
            End Get
            Set(ByVal Value As String)
                m_RelationPPOrBrim = Value
            End Set
        End Property

        Public Property FoetalHeart() As Integer
            Get
                Return m_FoetalHeart
            End Get
            Set(ByVal Value As Integer)
                m_FoetalHeart = Value
            End Set
        End Property

        Public Property TTGiven() As Boolean
            Get
                Return m_TTGiven
            End Get
            Set(ByVal Value As Boolean)
                m_TTGiven = Value
            End Set
        End Property

        Public Property IPTID() As String
            Get
                Return m_IPTID
            End Get
            Set(ByVal Value As String)
                m_IPTID = Value
            End Set
        End Property

        Public Property NetUseID() As String
            Get
                Return m_NetUseID
            End Get
            Set(ByVal Value As String)
                m_NetUseID = Value
            End Set
        End Property

        Public Property Remarks() As String
            Get
                Return m_Remarks
            End Get
            Set(ByVal Value As String)
                m_Remarks = Value
            End Set
        End Property

        Public Property ReturnDate() As Date
            Get
                Return m_ReturnDate
            End Get
            Set(ByVal Value As Date)
                m_ReturnDate = Value
            End Set
        End Property

        Public Property DoctorSpecialityID() As String
            Get
                Return m_DoctorSpecialityID
            End Get
            Set(ByVal Value As String)
                m_DoctorSpecialityID = Value
            End Set
        End Property

        Public Property DoctorID() As String
            Get
                Return m_DoctorID
            End Get
            Set(ByVal Value As String)
                m_DoctorID = Value
            End Set
        End Property

        Public Property NurseInChargeID() As String
            Get
                Return m_NurseInChargeID
            End Get
            Set(ByVal Value As String)
                m_NurseInChargeID = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertAntenatalVisits")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ANCNo", Me.ANCNo))
                .Add(New ParameterSQL("PallorID", Me.PallorID))
                .Add(New ParameterSQL("JaundiceID", Me.JaundiceID))
                .Add(New ParameterSQL("LynphadenopathyID", Me.LynphadenopathyID))
                .Add(New ParameterSQL("VaricoseID", Me.VaricoseID))
                .Add(New ParameterSQL("OedemaID", Me.OedemaID))
                .Add(New ParameterSQL("HeartSoundID", Me.HeartSoundID))
                .Add(New ParameterSQL("AirEntryID", Me.AirEntryID))
                .Add(New ParameterSQL("BreastID", Me.BreastID))
                .Add(New ParameterSQL("LiverID", Me.LiverID))
                .Add(New ParameterSQL("SpleenID", Me.SpleenID))
                .Add(New ParameterSQL("BowelSoundsID", Me.BowelSoundsID))
                .Add(New ParameterSQL("ScarID", Me.ScarID))
                .Add(New ParameterSQL("PupilReactionID", Me.PupilReactionID))
                .Add(New ParameterSQL("ReflexesID", Me.ReflexesID))
                .Add(New ParameterSQL("OtherSTIID", Me.OtherSTIID))
                .Add(New ParameterSQL("STIDetails", Me.STIDetails))
                .Add(New ParameterSQL("SkeletalDeformityID", Me.SkeletalDeformityID))
                .Add(New ParameterSQL("AnenorrheaWeeks", Me.AnenorrheaWeeks))
                .Add(New ParameterSQL("FundalHeight", Me.FundalHeight))
                .Add(New ParameterSQL("PresentationID", Me.PresentationID))
                .Add(New ParameterSQL("LieID", Me.LieID))
                .Add(New ParameterSQL("PositionID", Me.PositionID))
                .Add(New ParameterSQL("RelationPPOrBrim", Me.RelationPPOrBrim))
                .Add(New ParameterSQL("FoetalHeart", Me.FoetalHeart))
                .Add(New ParameterSQL("TTGiven", Me.TTGiven))
                .Add(New ParameterSQL("IPTID", Me.IPTID))
                .Add(New ParameterSQL("NetUseID", Me.NetUseID))
                .Add(New ParameterSQL("Remarks", Me.Remarks))
                .Add(New ParameterSQL("ReturnDate", Me.ReturnDate))
                .Add(New ParameterSQL("DoctorSpecialityID", Me.DoctorSpecialityID))
                .Add(New ParameterSQL("DoctorID", Me.DoctorID))
                .Add(New ParameterSQL("NurseInChargeID", Me.NurseInChargeID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateAntenatalVisits")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ANCNo", Me.ANCNo))
                .Add(New ParameterSQL("PallorID", Me.PallorID))
                .Add(New ParameterSQL("JaundiceID", Me.JaundiceID))
                .Add(New ParameterSQL("LynphadenopathyID", Me.LynphadenopathyID))
                .Add(New ParameterSQL("VaricoseID", Me.VaricoseID))
                .Add(New ParameterSQL("OedemaID", Me.OedemaID))
                .Add(New ParameterSQL("HeartSoundID", Me.HeartSoundID))
                .Add(New ParameterSQL("AirEntryID", Me.AirEntryID))
                .Add(New ParameterSQL("BreastID", Me.BreastID))
                .Add(New ParameterSQL("LiverID", Me.LiverID))
                .Add(New ParameterSQL("SpleenID", Me.SpleenID))
                .Add(New ParameterSQL("BowelSoundsID", Me.BowelSoundsID))
                .Add(New ParameterSQL("ScarID", Me.ScarID))
                .Add(New ParameterSQL("PupilReactionID", Me.PupilReactionID))
                .Add(New ParameterSQL("ReflexesID", Me.ReflexesID))
                .Add(New ParameterSQL("OtherSTIID", Me.OtherSTIID))
                .Add(New ParameterSQL("STIDetails", Me.STIDetails))
                .Add(New ParameterSQL("SkeletalDeformityID", Me.SkeletalDeformityID))
                .Add(New ParameterSQL("AnenorrheaWeeks", Me.AnenorrheaWeeks))
                .Add(New ParameterSQL("FundalHeight", Me.FundalHeight))
                .Add(New ParameterSQL("PresentationID", Me.PresentationID))
                .Add(New ParameterSQL("LieID", Me.LieID))
                .Add(New ParameterSQL("PositionID", Me.PositionID))
                .Add(New ParameterSQL("RelationPPOrBrim", Me.RelationPPOrBrim))
                .Add(New ParameterSQL("FoetalHeart", Me.FoetalHeart))
                .Add(New ParameterSQL("TTGiven", Me.TTGiven))
                .Add(New ParameterSQL("IPTID", Me.IPTID))
                .Add(New ParameterSQL("NetUseID", Me.NetUseID))
                .Add(New ParameterSQL("Remarks", Me.Remarks))
                .Add(New ParameterSQL("ReturnDate", Me.ReturnDate))
                .Add(New ParameterSQL("DoctorSpecialityID", Me.DoctorSpecialityID))
                .Add(New ParameterSQL("DoctorID", Me.DoctorID))
                .Add(New ParameterSQL("NurseInChargeID", Me.NurseInChargeID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("AntenatalVisits")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "ANC Visit No: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "AntenatalVisits"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("AntenatalVisits")

            Return Parameters

        End Function

        Private Function GetAntenatalVisits(VisitNo As String, ANCNo As String) As DataSet

            If (VisitNo <> "" OrElse VisitNo <> String.Empty) And
                (ANCNo = "" OrElse ANCNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", VisitNo))
                    .Add(New ParameterSQL("ANCNo", Nothing))
                End With

            ElseIf (VisitNo = "" OrElse VisitNo = String.Empty) And
                    (ANCNo <> "" OrElse ANCNo <> String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", Nothing))
                    .Add(New ParameterSQL("ANCNo", ANCNo))
                End With

            ElseIf (VisitNo = "" OrElse VisitNo = String.Empty) And
                    (ANCNo = "" OrElse ANCNo = String.Empty) Then
                With Parameters
                    .Add(New ParameterSQL("VisitNo", Nothing))
                    .Add(New ParameterSQL("ANCNo", Nothing))
                End With
            End If

            Return Me.Load("uspGetAntenatalVisits", "AntenatalVisits", Parameters)

        End Function

        ''' <summary>
        ''' Returns AntenatalVisits for aspecified VisitNo
        ''' </summary>
        ''' <param name="VisitNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetAntenatalVisitsByANCVisitNo(VisitNo As String) As DataSet
            Return GetAntenatalVisitsByANCVisitNo(VisitNo)
        End Function

        ' ''' <summary>
        ' ''' Returns AntenatalVisits for aspecified ANC no
        ' ''' </summary>
        ' ''' <param name="ANCNo"></param>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        'Public Function GetAntenatalVisits(ANCNo As String) As DataSet
        '    Return GetAntenatalVisits(String.Empty, ANCNo)
        'End Function

        ''' <summary>
        ''' Returns all AntenatalVisits
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetAntenatalVisits() As DataSet
            Return GetAntenatalVisits(String.Empty, String.Empty)
        End Function

        ''' <summary>
        ''' Returns AntenatalVisits for aparticular ANC no
        ''' </summary>
        ''' <param name="ANCNo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetAntenatalVisitsByANCNoNavigate(ANCNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ANCNo", ANCNo))
            End With

            Return Me.Load("uspGetAntenatalVisitsByANCNo", "AntenatalVisits", Parameters)

        End Function


        Public Function IsAntenatalVisitsSaved() As Boolean

            Dim noAntenatalVisits As Short

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("NoAntenatalVisits", SqlDbType.TinyInt))
            End With

            Me.ReadData = Read("uspCountAntenatalVisits", Parameters)

            If Not Me.ReadData Is Nothing Then
                If IsDBNull(Me.ReadData("NoAntenatalVisits")) Then
                    noAntenatalVisits = 0
                Else : noAntenatalVisits = CShort(Me.ReadData("NoAntenatalVisits"))
                End If
            End If

            Return noAntenatalVisits > 0

        End Function

        Public Function GetNextANCVisitID(ANCNo As String) As Integer

            With Parameters
                .Add(New ParameterSQL("ANCNo", ANCNo))
                .Add(New ParameterSQL("VisitNo", SqlDbType.Int))
            End With

            Me.ReadData = Me.Read("uspGetNextANCVisitID", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("ANCVisitID")) Then
                    Return CInt(Me.ReadData("ANCVisitID"))
                Else : Return 1
                End If

            End If

        End Function

        Public Function GetANCVisitNo(ANCNo As String) As String

            Dim oAppData As New SyncSoft.Common.Classes.AppData()

            With Parameters
                .Add(New ParameterSQL("ANCNo", ANCNo))
                .Add(New ParameterSQL("VisitNo", SqlDbType.VarChar, 20))
            End With


            Me.ReadData = Me.Read("uspGetANCVisitNo", Parameters)

            If Not Me.ReadData Is Nothing Then

                If Not IsDBNull(Me.ReadData("VisitNo")) Then
                    Return CStr(Me.ReadData("VisitNo"))
                Else : Return String.Empty
                End If

            Else : Return Nothing
            End If

        End Function

        Public Function GetANCVisits(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspANCVisits", "AntenatalVisits", Parameters)

        End Function


        Public Function GetAntenatalVisits(ByVal VisitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", VisitNo))
            End With

            Return Me.Load("uspGetAntenatalVisits", "AntenatalVisits", Parameters)

        End Function

        'Public Function NavigateAntenatalVisitsByPatientNo(patientNo As String) As DataSet

        '    With Parameters
        '        .Add(New ParameterSQL("PatientNo", patientNo))
        '    End With

        '    Return Me.Load("NavigateAntenatalVisitsByPatientNo", "AntenatalVisits", Parameters)

        'End Function

        'Public Function GetNextANCVisitID(patientNo As String) As Integer

        '    With Parameters
        '        .Add(New ParameterSQL("PatientNo", patientNo))
        '        .Add(New ParameterSQL("ANCVisitID", SqlDbType.Int))
        '    End With

        '    Me.ReadData = Me.Read("uspGetNextANCVisitID", Parameters)

        '    If Not Me.ReadData Is Nothing Then

        '        If Not IsDBNull(Me.ReadData("ANCVisitID")) Then
        '            Return CInt(Me.ReadData("ANCVisitID"))
        '        Else : Return 1
        '        End If

        '    End If

        'End Function


#End Region



    End Class


    Public Class PelvicExamination : Inherits DBConnect

#Region " Fields "

        Private m_VisitNo As String
        Private m_ANCNo As String
        Private m_VulvaID As String
        Private m_CervixID As String
        Private m_AdnexaID As String
        Private m_VaginaID As String
        Private m_UterusID As String
        Private m_DiagonalConjugate As Integer
        Private m_SacralCurve As Integer
        Private m_IschialSpine As Integer
        Private m_SubPublicAngle As Integer
        Private m_IschialTuberosities As Integer
        Private m_ConclusionID As String
        Private m_RiskFactors As String
        Private m_Recommendations As String


#End Region

#Region " Properties "

        Public Property VisitNo() As String
            Get
                Return m_VisitNo
            End Get
            Set(ByVal Value As String)
                m_VisitNo = Value
            End Set
        End Property

        Public Property ANCNo() As String
            Get
                Return m_ANCNo
            End Get
            Set(ByVal Value As String)
                m_ANCNo = Value
            End Set
        End Property

        Public Property VulvaID() As String
            Get
                Return m_VulvaID
            End Get
            Set(ByVal Value As String)
                m_VulvaID = Value
            End Set
        End Property

        Public Property CervixID() As String
            Get
                Return m_CervixID
            End Get
            Set(ByVal Value As String)
                m_CervixID = Value
            End Set
        End Property

        Public Property AdnexaID() As String
            Get
                Return m_AdnexaID
            End Get
            Set(ByVal Value As String)
                m_AdnexaID = Value
            End Set
        End Property

        Public Property VaginaID() As String
            Get
                Return m_VaginaID
            End Get
            Set(ByVal Value As String)
                m_VaginaID = Value
            End Set
        End Property

        Public Property UterusID() As String
            Get
                Return m_UterusID
            End Get
            Set(ByVal Value As String)
                m_UterusID = Value
            End Set
        End Property

        Public Property DiagonalConjugate() As Integer
            Get
                Return m_DiagonalConjugate
            End Get
            Set(ByVal Value As Integer)
                m_DiagonalConjugate = Value
            End Set
        End Property

        Public Property SacralCurve() As Integer
            Get
                Return m_SacralCurve
            End Get
            Set(ByVal Value As Integer)
                m_SacralCurve = Value
            End Set
        End Property

        Public Property IschialSpine() As Integer
            Get
                Return m_IschialSpine
            End Get
            Set(ByVal Value As Integer)
                m_IschialSpine = Value
            End Set
        End Property

        Public Property SubPublicAngle() As Integer
            Get
                Return m_SubPublicAngle
            End Get
            Set(ByVal Value As Integer)
                m_SubPublicAngle = Value
            End Set
        End Property

        Public Property IschialTuberosities() As Integer
            Get
                Return m_IschialTuberosities
            End Get
            Set(ByVal Value As Integer)
                m_IschialTuberosities = Value
            End Set
        End Property

        Public Property ConclusionID() As String
            Get
                Return m_ConclusionID
            End Get
            Set(ByVal Value As String)
                m_ConclusionID = Value
            End Set
        End Property

        Public Property RiskFactors() As String
            Get
                Return m_RiskFactors
            End Get
            Set(ByVal Value As String)
                m_RiskFactors = Value
            End Set
        End Property

        Public Property Recommendations() As String
            Get
                Return m_Recommendations
            End Get
            Set(ByVal Value As String)
                m_Recommendations = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertPelvicExamination")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ANCNo", Me.ANCNo))
                .Add(New ParameterSQL("VulvaID", Me.VulvaID))
                .Add(New ParameterSQL("CervixID", Me.CervixID))
                .Add(New ParameterSQL("AdnexaID", Me.AdnexaID))
                .Add(New ParameterSQL("VaginaID", Me.VaginaID))
                .Add(New ParameterSQL("UterusID", Me.UterusID))
                .Add(New ParameterSQL("DiagonalConjugate", Me.DiagonalConjugate))
                .Add(New ParameterSQL("SacralCurve", Me.SacralCurve))
                .Add(New ParameterSQL("IschialSpine", Me.IschialSpine))
                .Add(New ParameterSQL("SubPublicAngle", Me.SubPublicAngle))
                .Add(New ParameterSQL("IschialTuberosities", Me.IschialTuberosities))
                .Add(New ParameterSQL("ConclusionID", Me.ConclusionID))
                .Add(New ParameterSQL("RiskFactors", Me.RiskFactors))
                .Add(New ParameterSQL("Recommendations", Me.Recommendations))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdatePelvicExamination")

            With Parameters
                .Add(New ParameterSQL("VisitNo", Me.VisitNo))
                .Add(New ParameterSQL("ANCNo", Me.ANCNo))
                .Add(New ParameterSQL("VulvaID", Me.VulvaID))
                .Add(New ParameterSQL("CervixID", Me.CervixID))
                .Add(New ParameterSQL("AdnexaID", Me.AdnexaID))
                .Add(New ParameterSQL("VaginaID", Me.VaginaID))
                .Add(New ParameterSQL("UterusID", Me.UterusID))
                .Add(New ParameterSQL("DiagonalConjugate", Me.DiagonalConjugate))
                .Add(New ParameterSQL("SacralCurve", Me.SacralCurve))
                .Add(New ParameterSQL("IschialSpine", Me.IschialSpine))
                .Add(New ParameterSQL("SubPublicAngle", Me.SubPublicAngle))
                .Add(New ParameterSQL("IschialTuberosities", Me.IschialTuberosities))
                .Add(New ParameterSQL("ConclusionID", Me.ConclusionID))
                .Add(New ParameterSQL("RiskFactors", Me.RiskFactors))
                .Add(New ParameterSQL("Recommendations", Me.Recommendations))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("PelvicExamination")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "VisitNo = '" + Me.VisitNo + "'"
            Dim errorPart As String = "Visit No: " + Me.VisitNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "PelvicExamination"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("PelvicExamination")

            Return Parameters

        End Function

        Public Function GetPelvicExamination(ByVal visitNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("VisitNo", visitNo))
            End With

            Return Me.Load("uspGetPelvicExamination", "PelvicExamination", Parameters)

        End Function

#End Region



    End Class


    Public Class IPDLabourAssessment : Inherits DBConnect

#Region " Fields "

        Private m_RoundNo As String
        Private m_AdmissionNo As String
        Private m_ANCNo As String
        Private m_RoundDateTime As Date
        Private m_DoctorSpecialtyID As String
        Private m_DoctorID As String
        Private m_MidwifeInChargeID As String
        Private m_AdmissionReasonsID As String
        Private m_ContractionsID As String
        Private m_ContractionDetails As String
        Private m_MembranesRapturedID As String
        Private m_MembraneDetails As String
        Private m_ShowID As String
        Private m_ReferredID As String
        Private m_ReferredFrom As String
        Private m_OtherID As String
        Private m_SpecifyOther As String
        Private m_ConsentSignedID As String


#End Region

#Region " Properties "

        Public Property RoundNo() As String
            Get
                Return m_RoundNo
            End Get
            Set(ByVal Value As String)
                m_RoundNo = Value
            End Set
        End Property

        Public Property AdmissionNo() As String
            Get
                Return m_AdmissionNo
            End Get
            Set(ByVal Value As String)
                m_AdmissionNo = Value
            End Set
        End Property

        Public Property ANCNo() As String
            Get
                Return m_ANCNo
            End Get
            Set(ByVal Value As String)
                m_ANCNo = Value
            End Set
        End Property

        Public Property RoundDateTime() As Date
            Get
                Return m_RoundDateTime
            End Get
            Set(ByVal Value As Date)
                m_RoundDateTime = Value
            End Set
        End Property

        Public Property DoctorSpecialtyID() As String
            Get
                Return m_DoctorSpecialtyID
            End Get
            Set(ByVal Value As String)
                m_DoctorSpecialtyID = Value
            End Set
        End Property

        Public Property DoctorID() As String
            Get
                Return m_DoctorID
            End Get
            Set(ByVal Value As String)
                m_DoctorID = Value
            End Set
        End Property

        Public Property MidwifeInChargeID() As String
            Get
                Return m_MidwifeInChargeID
            End Get
            Set(ByVal Value As String)
                m_MidwifeInChargeID = Value
            End Set
        End Property

        Public Property AdmissionReasonsID() As String
            Get
                Return m_AdmissionReasonsID
            End Get
            Set(ByVal Value As String)
                m_AdmissionReasonsID = Value
            End Set
        End Property

        Public Property ContractionsID() As String
            Get
                Return m_ContractionsID
            End Get
            Set(ByVal Value As String)
                m_ContractionsID = Value
            End Set
        End Property

        Public Property ContractionDetails() As String
            Get
                Return m_ContractionDetails
            End Get
            Set(ByVal Value As String)
                m_ContractionDetails = Value
            End Set
        End Property

        Public Property MembranesRapturedID() As String
            Get
                Return m_MembranesRapturedID
            End Get
            Set(ByVal Value As String)
                m_MembranesRapturedID = Value
            End Set
        End Property

        Public Property MembraneDetails() As String
            Get
                Return m_MembraneDetails
            End Get
            Set(ByVal Value As String)
                m_MembraneDetails = Value
            End Set
        End Property

        Public Property ShowID() As String
            Get
                Return m_ShowID
            End Get
            Set(ByVal Value As String)
                m_ShowID = Value
            End Set
        End Property

        Public Property ReferredID() As String
            Get
                Return m_ReferredID
            End Get
            Set(ByVal Value As String)
                m_ReferredID = Value
            End Set
        End Property

        Public Property ReferredFrom() As String
            Get
                Return m_ReferredFrom
            End Get
            Set(ByVal Value As String)
                m_ReferredFrom = Value
            End Set
        End Property

        Public Property OtherID() As String
            Get
                Return m_OtherID
            End Get
            Set(ByVal Value As String)
                m_OtherID = Value
            End Set
        End Property

        Public Property SpecifyOther() As String
            Get
                Return m_SpecifyOther
            End Get
            Set(ByVal Value As String)
                m_SpecifyOther = Value
            End Set
        End Property

        Public Property ConsentSignedID() As String
            Get
                Return m_ConsentSignedID
            End Get
            Set(ByVal Value As String)
                m_ConsentSignedID = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertIPDLabourAssessment")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("AdmissionNo", Me.AdmissionNo))
                .Add(New ParameterSQL("ANCNo", Me.ANCNo))
                .Add(New ParameterSQL("RoundDateTime", Me.RoundDateTime))
                .Add(New ParameterSQL("DoctorSpecialtyID", Me.DoctorSpecialtyID))
                .Add(New ParameterSQL("DoctorID", Me.DoctorID))
                .Add(New ParameterSQL("MidwifeInChargeID", Me.MidwifeInChargeID))
                .Add(New ParameterSQL("AdmissionReasonsID", Me.AdmissionReasonsID))
                .Add(New ParameterSQL("ContractionsID", Me.ContractionsID))
                .Add(New ParameterSQL("ContractionDetails", Me.ContractionDetails))
                .Add(New ParameterSQL("MembranesRapturedID", Me.MembranesRapturedID))
                .Add(New ParameterSQL("MembraneDetails", Me.MembraneDetails))
                .Add(New ParameterSQL("ShowID", Me.ShowID))
                .Add(New ParameterSQL("ReferredID", Me.ReferredID))
                .Add(New ParameterSQL("ReferredFrom", Me.ReferredFrom))
                .Add(New ParameterSQL("OtherID", Me.OtherID))
                .Add(New ParameterSQL("SpecifyOther", Me.SpecifyOther))
                .Add(New ParameterSQL("ConsentSignedID", Me.ConsentSignedID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateIPDLabourAssessment")

            With Parameters
                .Add(New ParameterSQL("RoundNo", Me.RoundNo))
                .Add(New ParameterSQL("AdmissionNo", Me.AdmissionNo))
                .Add(New ParameterSQL("ANCNo", Me.ANCNo))
                .Add(New ParameterSQL("RoundDateTime", Me.RoundDateTime))
                .Add(New ParameterSQL("DoctorSpecialtyID", Me.DoctorSpecialtyID))
                .Add(New ParameterSQL("DoctorID", Me.DoctorID))
                .Add(New ParameterSQL("MidwifeInChargeID", Me.MidwifeInChargeID))
                .Add(New ParameterSQL("AdmissionReasonsID", Me.AdmissionReasonsID))
                .Add(New ParameterSQL("ContractionsID", Me.ContractionsID))
                .Add(New ParameterSQL("ContractionDetails", Me.ContractionDetails))
                .Add(New ParameterSQL("MembranesRapturedID", Me.MembranesRapturedID))
                .Add(New ParameterSQL("MembraneDetails", Me.MembraneDetails))
                .Add(New ParameterSQL("ShowID", Me.ShowID))
                .Add(New ParameterSQL("ReferredID", Me.ReferredID))
                .Add(New ParameterSQL("ReferredFrom", Me.ReferredFrom))
                .Add(New ParameterSQL("OtherID", Me.OtherID))
                .Add(New ParameterSQL("SpecifyOther", Me.SpecifyOther))
                .Add(New ParameterSQL("ConsentSignedID", Me.ConsentSignedID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("IPDLabourAssessment")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "RoundNo = '" + Me.RoundNo + "'"
            Dim errorPart As String = "Round No: " + Me.RoundNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "IPDLabourAssessment"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("IPDLabourAssessment")

            Return Parameters

        End Function

        Public Function GetIPDLabourAssessment(ByVal roundNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("RoundNo", roundNo))
            End With

            Return Me.Load("uspGetIPDLabourAssessment", "IPDLabourAssessment", Parameters)

        End Function

        Public Function GetIPDLabourAssessmentByAdmissionNo(ByVal admissionNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AdmissionNo", admissionNo))
            End With

            Return Me.Load("uspGetIPDLabourAssessment", "IPDLabourAssessment", Parameters)

        End Function

        Public Function GetIPDLabourAssessmentRounds(startDate As Date, endDate As Date) As DataSet

            With Parameters
                .Add(New ParameterSQL("StartDate", startDate))
                .Add(New ParameterSQL("EndDate", endDate))
            End With

            Return Me.Load("uspGetIPDLabourAssessmentRounds", "IPDLabourAssessment", Parameters)

        End Function

#End Region



    End Class
#End Region
#End Region

#Region "INTEGRATION"

   
   
  
    Public Class INTAgents : Inherits DBConnect

#Region " Fields "

#End Region

#Region " Auto-Implemented Properties "

        Public Property AgentNo As String
        Public Property AgentName As String
        Public Property ConnectionModeID As String
        Public Property DatabaseTypeID As String
        Public Property DataSource As String
        Public Property DBName As String
        Public Property Port As Integer
        Public Property Password As String

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertINTAgents")

            With Parameters
                .Add(New ParameterSQL("AgentNo", Me.AgentNo))
                .Add(New ParameterSQL("AgentName", Me.AgentName))
                .Add(New ParameterSQL("ConnectionModeID", Me.ConnectionModeID))
                .Add(New ParameterSQL("DatabaseTypeID", Me.DatabaseTypeID))
                .Add(New ParameterSQL("DataSource", Me.DataSource))
                .Add(New ParameterSQL("DBName", Me.DBName))
                .Add(New ParameterSQL("Port", Me.Port))
                .Add(New ParameterSQL("Username", Me.Username))
                .Add(New ParameterSQL("Password", Me.Password))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateINTAgents")

            With Parameters
                .Add(New ParameterSQL("AgentNo", Me.AgentNo))
                .Add(New ParameterSQL("AgentName", Me.AgentName))
                .Add(New ParameterSQL("ConnectionModeID", Me.ConnectionModeID))
                .Add(New ParameterSQL("DatabaseTypeID", Me.DatabaseTypeID))
                .Add(New ParameterSQL("DataSource", Me.DataSource))
                .Add(New ParameterSQL("DBName", Me.DBName))
                .Add(New ParameterSQL("Port", Me.Port))
                .Add(New ParameterSQL("Username", Me.Username))
                .Add(New ParameterSQL("Password", Me.Password))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("INTAgents")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "AgentNo = '" + Me.AgentNo + "'"
            Dim errorPart As String = "Agent No: " + Me.AgentNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "INTAgents"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("INTAgents")

            Return Parameters

        End Function

        Public Function GetINTAgents(ByVal agentNo As String) As DataSet

            If Not String.IsNullOrEmpty(agentNo) Then
                With Parameters
                    .Add(New ParameterSQL("AgentNo", agentNo))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("AgentNo", Nothing))
                End With

            End If
            
            Return Me.Load("uspGetINTAgents", "INTAgents", Parameters)

        End Function

        Public Function GetINTAgents() As DataSet


            Return Me.GetINTAgents(String.Empty)

        End Function

#End Region



    End Class

    Public Class LookupDataMappings : Inherits DBConnect

#Region " Fields "

        Private m_DataID As String
        Private m_AgentDataID As String
        Private m_AgentNo As String
        Private m_ObjectName As String


#End Region

#Region " Properties "

        Public Property DataID() As String
            Get
                Return m_DataID
            End Get
            Set(ByVal Value As String)
                m_DataID = Value
            End Set
        End Property

        Public Property AgentNo() As String
            Get
                Return m_AgentNo
            End Get
            Set(ByVal Value As String)
                m_AgentNo = Value
            End Set
        End Property


        Public Property AgentDataID() As String
            Get
                Return m_AgentDataID
            End Get
            Set(ByVal Value As String)
                m_AgentDataID = Value
            End Set
        End Property


        Public Property ObjectName() As String
            Get
                Return m_ObjectName
            End Get
            Set(ByVal Value As String)
                m_ObjectName = Value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region


        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditLookupDataMappings")

            With Parameters
                .Add(New ParameterSQL("DataID", Me.DataID))
                .Add(New ParameterSQL("AgentNo", Me.AgentNo))
                .Add(New ParameterSQL("AgentDataID", Me.AgentDataID))
                .Add(New ParameterSQL("ObjectName", Me.ObjectName))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "DataID = '" + Me.DataID + "' and AgentNo = '" + Me.AgentNo + "'"
            Dim errorPart As String = "Data ID: " + Me.DataID + " and Agent No: " + Me.AgentNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "LookupDataMappings"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("LookupDataMappings")

            Return Parameters

        End Function

        Public Function GetLookupDataMappings(ByVal dataID As String, ByVal agentNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("DataID", dataID))
                .Add(New ParameterSQL("AgentNo", agentNo))
            End With

            Return Me.Load("uspGetLookupDataMappings", "LookupDataMappings", Parameters)

        End Function



    End Class


    Public Class INTPara : Inherits DBConnect

#Region " Fields "

#End Region

#Region " Auto-Implemented Properties "

        Public Property AgentNo As String
        Public Property AdmissionNo As String
        Public Property StudyID As String
        Public Property AssessmentSite As String
        Public Property AssessmentDate As Date
        Public Property GenderID As String
        Public Property BirthYear As Integer
        Public Property BirthMonth As String
        Public Property EstimatedYears As Integer
        Public Property LastHospitalized As String
        Public Property Weight As Single
        Public Property MUAC As Single
        Public Property CalculatedZScoreAgeWeight As Single
        Public Property TabletOxygenSaturation As String
        Public Property TabletHeartRate As Single
        Public Property SQI As Integer
        Public Property SpO2Time As Date
        Public Property SpO2TrendFile As String
        Public Property SP02RedFile As String
        Public Property Sp02InfraredFile As String
        Public Property AnotherDeviceSOP2 As String
        Public Property EyeMovement As String
        Public Property BestMotorResponse As String
        Public Property BestVerbalResponse As String
        Public Property HIVStatus As String
        Public Property PostDischargeMortalityRisk As Integer

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertINTPara")

            With Parameters
                .Add(New ParameterSQL("AgentNo", Me.AgentNo))
                .Add(New ParameterSQL("AdmissionNo", Me.AdmissionNo))
                .Add(New ParameterSQL("StudyID", Me.StudyID))
                .Add(New ParameterSQL("AssessmentSite", Me.AssessmentSite))
                .Add(New ParameterSQL("AssessmentDate", Me.AssessmentDate))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("BirthYear", Me.BirthYear))
                .Add(New ParameterSQL("BirthMonth", Me.BirthMonth))
                .Add(New ParameterSQL("EstimatedYears", Me.EstimatedYears))
                .Add(New ParameterSQL("LastHospitalized", Me.LastHospitalized))
                .Add(New ParameterSQL("Weight", Me.Weight))
                .Add(New ParameterSQL("MUAC", Me.MUAC))
                .Add(New ParameterSQL("CalculatedZScoreAgeWeight", Me.CalculatedZScoreAgeWeight))
                .Add(New ParameterSQL("TabletOxygenSaturation", Me.TabletOxygenSaturation))
                .Add(New ParameterSQL("TabletHeartRate", Me.TabletHeartRate))
                .Add(New ParameterSQL("SQI", Me.SQI))
                .Add(New ParameterSQL("SpO2Time", Me.SpO2Time))
                .Add(New ParameterSQL("SpO2TrendFile", Me.SpO2TrendFile))
                .Add(New ParameterSQL("SP02RedFile", Me.SP02RedFile))
                .Add(New ParameterSQL("Sp02InfraredFile", Me.Sp02InfraredFile))
                .Add(New ParameterSQL("AnotherDeviceSOP2", Me.AnotherDeviceSOP2))
                .Add(New ParameterSQL("EyeMovement", Me.EyeMovement))
                .Add(New ParameterSQL("BestMotorResponse", Me.BestMotorResponse))
                .Add(New ParameterSQL("BestVerbalResponse", Me.BestVerbalResponse))
                .Add(New ParameterSQL("HIVStatus", Me.HIVStatus))
                .Add(New ParameterSQL("PostDischargeMortalityRisk", Me.PostDischargeMortalityRisk))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateINTPara")

            With Parameters
                .Add(New ParameterSQL("AgentNo", Me.AgentNo))
                .Add(New ParameterSQL("AdmissionNo", Me.AdmissionNo))
                .Add(New ParameterSQL("StudyID", Me.StudyID))
                .Add(New ParameterSQL("AssessmentSite", Me.AssessmentSite))
                .Add(New ParameterSQL("AssessmentDate", Me.AssessmentDate))
                .Add(New ParameterSQL("GenderID", Me.GenderID))
                .Add(New ParameterSQL("BirthYear", Me.BirthYear))
                .Add(New ParameterSQL("BirthMonth", Me.BirthMonth))
                .Add(New ParameterSQL("EstimatedYears", Me.EstimatedYears))
                .Add(New ParameterSQL("LastHospitalized", Me.LastHospitalized))
                .Add(New ParameterSQL("Weight", Me.Weight))
                .Add(New ParameterSQL("MUAC", Me.MUAC))
                .Add(New ParameterSQL("CalculatedZScoreAgeWeight", Me.CalculatedZScoreAgeWeight))
                .Add(New ParameterSQL("TabletOxygenSaturation", Me.TabletOxygenSaturation))
                .Add(New ParameterSQL("TabletHeartRate", Me.TabletHeartRate))
                .Add(New ParameterSQL("SQI", Me.SQI))
                .Add(New ParameterSQL("SpO2Time", Me.SpO2Time))
                .Add(New ParameterSQL("SpO2TrendFile", Me.SpO2TrendFile))
                .Add(New ParameterSQL("SP02RedFile", Me.SP02RedFile))
                .Add(New ParameterSQL("Sp02InfraredFile", Me.Sp02InfraredFile))
                .Add(New ParameterSQL("AnotherDeviceSOP2", Me.AnotherDeviceSOP2))
                .Add(New ParameterSQL("EyeMovement", Me.EyeMovement))
                .Add(New ParameterSQL("BestMotorResponse", Me.BestMotorResponse))
                .Add(New ParameterSQL("BestVerbalResponse", Me.BestVerbalResponse))
                .Add(New ParameterSQL("HIVStatus", Me.HIVStatus))
                .Add(New ParameterSQL("PostDischargeMortalityRisk", Me.PostDischargeMortalityRisk))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("INTPara")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "AgentNo = '" + Me.AgentNo + "' and AdmissionNo = '" + Me.AdmissionNo + "'"
            Dim errorPart As String = "Agent No: " + Me.AgentNo + " and Admission No: " + Me.AdmissionNo

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "INTPara"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("INTPara")

            Return Parameters

        End Function

        Public Function GetINTPara(ByVal agentNo As String, ByVal admissionNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("AgentNo", agentNo))
                .Add(New ParameterSQL("AdmissionNo", admissionNo))
            End With

            Return Me.Load("uspGetINTPara", "INTPara", Parameters)

        End Function

#End Region



    End Class


    Public Class Dimensions : Inherits DBConnect

#Region " Fields "

#End Region

#Region " Auto-Implemented Properties "

        Public Property DimensionCode As String
        Public Property DimensionTypeID As String
        Public Property DimensionName As String
        Public Property Blocked As Boolean

#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspInsertDimensions")

            With Parameters
                .Add(New ParameterSQL("DimensionCode", Me.DimensionCode))
                .Add(New ParameterSQL("DimensionTypeID", Me.DimensionTypeID))
                .Add(New ParameterSQL("DimensionName", Me.DimensionName))
                .Add(New ParameterSQL("Blocked", Me.Blocked))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateDimensions")

            With Parameters
                .Add(New ParameterSQL("DimensionCode", Me.DimensionCode))
                .Add(New ParameterSQL("DimensionTypeID", Me.DimensionTypeID))
                .Add(New ParameterSQL("DimensionName", Me.DimensionName))
                .Add(New ParameterSQL("Blocked", Me.Blocked))
                .Add(New ParameterSQL("LoginID", Me.LoginID))
                .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
            End With

            'For Audit Trail
            Me.SetLogObject("Dimensions")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "DimensionCode = '" + Me.DimensionCode + "'"
            Dim errorPart As String = "Dimension Code: " + Me.DimensionCode

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "Dimensions"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("Dimensions")

            Return Parameters

        End Function

        Public Function GetDimensions(ByVal dimensionCode As String, blocked As Boolean) As DataSet
            If String.IsNullOrEmpty(dimensionCode) Then
                With Parameters
                    .Add(New ParameterSQL("DimensionCode", Nothing))
                End With
            Else
                With Parameters
                    .Add(New ParameterSQL("DimensionCode", dimensionCode))
                    .Add(New ParameterSQL("Blocked", blocked))
                End With
            End If
            

            Return Me.Load("uspGetDimensions", "Dimensions", Parameters)

        End Function

        Public Function GetDimensions(ByVal dimensionCode As String) As DataSet
            
            Return Me.GetDimensions(dimensionCode)

        End Function

        Public Function GetDimensionByDimensionTypeID(ByVal DimensionTypeID As String) As DataSet
             With Parameters
                    .Add(New ParameterSQL("DimensionTypeID", DimensionTypeID))
                End With
            Return Me.Load("uspGetDimensionByDimensionTypeID", "Dimensions", Parameters)

        End Function


#End Region



    End Class

    Public Class BillableMappings : Inherits DBConnect

#Region " Fields "

#End Region

#Region " Auto-Implemented Properties "

        Public Property ItemCategoryID As String
        Public Property ItemCode As String
        Public Property MappedCode As String
        Public Property AgentNo As String
        Public Property MappedTypeID As String



#End Region

#Region " Constructors "

        Public Sub New()
            MyBase.New()
        End Sub

        Public Sub New(ByVal serverName As String, ByVal databaseName As String)
            MyClass.New()
            Me.ServerName = serverName
            Me.DatabaseName = databaseName
        End Sub

#End Region

#Region " Methods "

        Protected Overrides Function SaveData() As ArrayList

            Me.SetCommand("uspEditBillableMappings")

            With Parameters
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("MappedCode", Me.MappedCode))
                .Add(New ParameterSQL("AgentNo", Me.AgentNo))
                .Add(New ParameterSQL("MappedTypeID", Me.MappedTypeID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            Return Parameters

        End Function

        Protected Overrides Function UpdateData() As ArrayList

            Me.SetCommand("uspUpdateBillableMappings")

            With Parameters
                .Add(New ParameterSQL("ItemCategoryID", Me.ItemCategoryID))
                .Add(New ParameterSQL("ItemCode", Me.ItemCode))
                .Add(New ParameterSQL("MappedCode", Me.MappedCode))
                .Add(New ParameterSQL("AgentNo", Me.AgentNo))
                .Add(New ParameterSQL("MappedTypeID", Me.MappedTypeID))
                .Add(New ParameterSQL("LoginID", Me.LoginID))

            End With

            'For Audit Trail
            Me.SetLogObject("BillableMappings")

            Return Parameters

        End Function

        Protected Overrides Function DeleteData() As ArrayList

            Dim where As String = "ItemCategoryID = '" + Me.ItemCategoryID + "' and ItemCode = '" + Me.ItemCode + "'" + "' and MappedCode = '" + Me.MappedCode + "'"
            Dim errorPart As String = "Item Category: " + Me.ItemCategoryID + " and ItemCode: " + Me.ItemCode + "'" + "' and MappedCode = '" + Me.MappedCode + "'"

            Me.SetCommand("uspDeleteObject")

            With Parameters
                .Add(New ParameterSQL("ObjectName", "BillableMappings"))
                .Add(New ParameterSQL("Where", where))
                .Add(New ParameterSQL("ErrorPart", errorPart))
            End With

            'For Audit Trail
            Me.SetLogObject("BillableMappings")

            Return Parameters

        End Function

        Public Function GetBillableMappingsByItemCategoryItemCode(itemCategoryID As String, ByVal itemCode As String, ByVal agentNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("AgentNo", agentNo))

            End With

            Return Me.Load("uspGetBillableMappingsByItemCategoryItemCode", "BillableMappings", Parameters)

        End Function

        Public Function GetBillableMappings(ByVal itemCategoryID As String, ByVal itemCode As String, ByVal mappedCode As String, ByVal agentNo As String) As DataSet

            With Parameters
                .Add(New ParameterSQL("ItemCategoryID", itemCategoryID))
                .Add(New ParameterSQL("ItemCode", itemCode))
                .Add(New ParameterSQL("MappedCode", mappedCode))
                .Add(New ParameterSQL("AgentNo", agentNo))
            End With

            Return Me.Load("uspGetBillableMappings", "BillableMappings", Parameters)

        End Function

#End Region



    End Class

#End Region

    Namespace Lookup

        Public Enum LookupObjects As Short

            Groups = 4
            Labs = 5
            PayModes = 6
            ItemCategory = 7
            UnitMeasure = 8
            VisitStatus = 9
            VisitCategory = 10
            ItemStatus = 11
            PayStatus = 12
            StockType = 13
            SpecimenType = 14
            Gender = 15
            ServicePoint = 16
            BillModes = 17
            BillCustomerType = 18
            AccountAction = 19
            StaffTitle = 20
            AppointmentStatus = 21
            DrugLines = 22
            WHOStage = 23
            ARTStatus = 24
            ARTCategory = 25
            AppointmentPrecision = 26
            WhyEligible = 27
            ARTSwitchReasons = 28
            ARTStopReasons = 29
            ServiceBillAt = 30
            DosageCalculation = 31
            Illnesses = 32
            Diagnosis = 33
            AdmissionStatus = 34
            DischargeStatus = 35
            DiagnosisStatus = 36
            RadiologyCategories = 37
            AlertType = 38
            DoctorSpecialty = 39
            Wards = 40
            TemplateType = 41
            MemberType = 42
            DiseaseCategories = 43
            CoPayType = 44
            ClaimStatus = 45
            EntryMode = 46
            PayType = 47
            IncomeSources = 48
            Currencies = 49
            MaritalStatus = 50
            Districts = 51
            CareEntryPoint = 52

            HIVStatus = 53
            YesNo = 54
            InfantFeeding = 55
            HIVTestType = 56
            InfantStatus = 57
            PriorART = 58
            ExamVisitType = 60
            TBStatus = 61
            PregnancyStatus = 62
            FPMethods = 63
            SideEffects = 64
            NewOI = 65
            ARVAdhereWhy = 66
            Investigations = 67
            TestResults = 68
            FunctionalStatus = 69
            Oedema = 75
            MUACStatus = 76
            AdhereStatus = 77
            NutritionalSup = 78
            CentreType = 82
            Accompaniedby = 83
            HCTEntryPoint = 84
            HIVCoupleResults = 85
            EducationAttained = 86
            CounseledAs = 91
            TestingPoint = 96
            FileStatus = 100
            AllergyCategory = 101
            DentalCategory = 102
            RadiologyTitle = 103
            ResultFlag = 104
            ExpenditureCategory = 106
            DrugType = 107
            AnaesthesiaType = 108
            OperationClass = 109
            VisitType = 110
            OpticalCategory = 111
            LenseType = 112
            BloodGroup = 113
            Tribe = 114
            Religion = 115
            ChronicDiseases = 116
            Location = 117
            FileTakenBy = 121
            FileReturnedBy = 122
            VisualAcuity = 123
            VisualAcuityExt = 124
            PasswordComplexity = 125
            PreferentialLooking = 127
            ClinicalComment = 128
            EyeTest = 129
            CoverTest = 130
            PathologyCategory = 131
            PathologyTitles = 132
            ReferralStudyCode = 133
            OncologyMorphologyCancers = 134
            TopologySites = 135
            BasisOfDiagnosis = 136
            StageOfCancer = 137
            AccountGroup = 138
            PresentingComplaints = 139
            NoOfTestsInTwelveMonths = 140
            YesNoUnknown = 141
            KnowAboutService = 142
            PartnerType = 143
            NoConsentReason = 144
            ExtraChargeCategory = 145
            AuthorisationReason = 146
            Countries = 147
            ReasonsToReturnGoods = 148
            SquintType = 149
            AssetCategory = 150
            Department = 151
            StaffPayments = 152
            PaymentDeductions = 153
            AccessCashReasons = 154
            Priority = 155
            BloodTransfusionStateReason = 156
            BloodTransfusionNotGivenStateReason = 157
            OtherFormsOfSupportiveCare = 158
            ReasonsForDiagnosisOfSevereComplicatedMalaria = 159
            ReasonsForAdmissionWithPositiveMalariaTest = 160
            ImmunizationDetails = 161
            Pallor = 162
            SkinPinchReturn = 163
            Airway = 164
            Pulse = 165
            CapRefill = 166
            IntegrationAgent = 167
            SearchAgeBy = 168
            PrinterPaperSize = 169
            LowVisionDevicesFar = 170
            LowVisionDevicesNear = 171
            NonOpticalAids = 172
            VisualAcuityNear = 173
            TubeType = 174
            DefaultPatientNo = 175
            InventoryImportType = 176
            BranchID = 177
            BankNamesID = 178
            Packs = 179
            FluidType = 180
            FluidCategoryID = 181
            FluidInTakeRouteID = 182
            FluidOutPutRouteID = 183
            TimelySMSIncomeSummariesNo = 184
            AssetSource = 185
            DepreciationMethod = 186

            RoomName = 187
            InventoryOrderType = 188
            ExternalLocation = 189
            ExpenditureSourceType = 190
            ReminderReason = 191
            RadiologySites = 192
            MyDefaultComputer = 194
            CollectionSourceID = 193
            ReturnReasonTypeID = 196
            NOKRelationship = 197
            CustomAdmissionNoWards = 198


            SpecimenDescription = 199
            RejectectionReason = 200
            DocumentType = 201

            PlaceOfDelivery = 204
            BirthAttendant = 205
            TypeOfDelivery = 206
            MothersCondition = 207
            IntraPostpartumDisorder = 208
            GestationalAge = 209
            ConditionDetails = 210
            IfDeceased = 211
            PregnancyOutcome = 212
            DeliveryComplications = 213

            PerineumState = 214
            DegreeOfTear = 215
            ConditionOfUmblicalCord = 216
            Bleeding = 217
            EIDResults = 218
            ConditionOnBirth = 219
            VaccineGivenAfter = 220
            Vaccines = 221
            TherapyCategory = 222
            ManipulativeTechnique = 223
            Electrotherapy = 225
            Exercisotherapy = 226
            LevelOfDependence = 227
            NutritionalReferral = 228
            OccupationalReferral = 229
            CounsellingReferral = 230

            PlaceReceived = 232
            WeightGain = 233
            BreastFeeding = 234
            WeightForAge = 235

            BMIStatus = 303
            ConsumableCategoryID = 324
            InterventionType = 378
            AccountTypeName = 236
            CardiologyCategories = 237
            CardiologySites = 238
            CardiologyTitle = 239
            ContraceptivesComplications = 246
            ReasonsForRemoval = 247
            MedicalHistory = 248
            SurgicalHistory = 249
            GynaecologicalHistory = 250
            FamilyHistory = 251
            SocialHistory = 252
            AbortionPeriod = 253
            ChildStatus = 254
            Varicose = 255
            Normality = 256
            Lie = 257
            Position = 258
            PelvicConclusion = 259
            AdmissionReasons = 260
            Presentation = 261
            TransferReasonID = 262
            AdjustmentType = 264
            ProcedureType = 265
            ReversalAction = 266
            OccupationID = 497
            Community = 507
            Physiotherapy = 533
            PhysiotherapyDiseaseCategory = 534
            MappedType = 535
            voucherTypeID = 240
            ItemCategoryEXT = 245
            'Finance
            AccountType = 1003
            AccountReport = 1004

        End Enum

    End Namespace

    Namespace Lookup.LookupDataID

        Public NotInheritable Class AdjustmentTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Up() As String
                Get
                    Return CShort(LookupObjects.AdjustmentType).ToString() + "U"
                End Get
            End Property

            Public ReadOnly Property Down() As String
                Get
                    Return CShort(LookupObjects.AdjustmentType).ToString() + "D"
                End Get
            End Property


#End Region

        End Class

        Public NotInheritable Class ReversalActionID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Adjustment() As String
                Get
                    Return CShort(LookupObjects.ReversalAction).ToString() + "A"
                End Get
            End Property

            Public ReadOnly Property Cancellation() As String
                Get
                    Return CShort(LookupObjects.ReversalAction).ToString() + "C"
                End Get
            End Property


#End Region

        End Class


        Public NotInheritable Class AccountTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Asset() As String
                Get
                    Return CShort(LookupObjects.AccountType).ToString() + "1"
                End Get
            End Property

            Public ReadOnly Property Liability() As String
                Get
                    Return CShort(LookupObjects.AccountType).ToString() + "2"
                End Get
            End Property

            Public ReadOnly Property Equity() As String
                Get
                    Return CShort(LookupObjects.AccountType).ToString() + "3"
                End Get
            End Property

            Public ReadOnly Property Income() As String
                Get
                    Return CShort(LookupObjects.AccountType).ToString() + "4"
                End Get
            End Property

            Public ReadOnly Property Expense() As String
                Get
                    Return CShort(LookupObjects.AccountType).ToString() + "5"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class AccountReportID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property BalanceSheet() As String
                Get
                    Return CShort(LookupObjects.AccountReport).ToString() + "BS"
                End Get
            End Property

            Public ReadOnly Property FinancialStatement() As String
                Get
                    Return CShort(LookupObjects.AccountReport).ToString() + "FS"
                End Get
            End Property

#End Region

        End Class


        Public NotInheritable Class DischargeStatus

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Deceased() As String
                Get
                    Return CShort(LookupObjects.DischargeStatus).ToString() + "D"
                End Get
            End Property

            Public ReadOnly Property GotBetter() As String
                Get
                    Return CShort(LookupObjects.DischargeStatus).ToString() + "G"
                End Get
            End Property

            Public ReadOnly Property Transformed() As String
                Get
                    Return CShort(LookupObjects.DischargeStatus).ToString() + "T"
                End Get
            End Property

#End Region

        End Class



        Public NotInheritable Class ReturnReasonTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property PriceModification() As String
                Get
                    Return CShort(LookupObjects.ReturnReasonTypeID).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property QuantityReduction() As String
                Get
                    Return CShort(LookupObjects.ReturnReasonTypeID).ToString() + "02"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class CollectionSourceTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property PatientPayments() As String
                Get
                    Return CShort(LookupObjects.CollectionSourceID).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property OtherIncome() As String
                Get
                    Return CShort(LookupObjects.CollectionSourceID).ToString() + "02"
                End Get
            End Property

            Public ReadOnly Property Account() As String
                Get
                    Return CShort(LookupObjects.CollectionSourceID).ToString() + "03"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ExpenditureSourceTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Cash() As String
                Get
                    Return CShort(LookupObjects.ExpenditureSourceType).ToString() + "CAS"
                End Get
            End Property

            Public ReadOnly Property Bank() As String
                Get
                    Return CShort(LookupObjects.ExpenditureSourceType).ToString() + "BAN"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class InventoryOrderTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Internal() As String
                Get
                    Return CShort(LookupObjects.InventoryOrderType).ToString() + "IN"
                End Get
            End Property

            Public ReadOnly Property External() As String
                Get
                    Return CShort(LookupObjects.InventoryOrderType).ToString() + "EX"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class InfantFeedingID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property ExclusiveBreastFeeding() As String
                Get
                    Return CShort(LookupObjects.InfantFeeding).ToString() + "EBF"
                End Get
            End Property

            Public ReadOnly Property ReplacementFeeding() As String
                Get
                    Return CShort(LookupObjects.InfantFeeding).ToString() + "REF"
                End Get
            End Property

            Public ReadOnly Property MixedFeeding() As String
                Get
                    Return CShort(LookupObjects.InfantFeeding).ToString() + "MIF"
                End Get
            End Property



#End Region

        End Class

        Public NotInheritable Class DocumentTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Prescription() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "PRESC"
                End Get
            End Property

            Public ReadOnly Property LabReport() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "LAB"
                End Get
            End Property

            Public ReadOnly Property LabTests() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "TST"
                End Get
            End Property

            Public ReadOnly Property Procedure() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "PROC"
                End Get
            End Property

            Public ReadOnly Property Dental() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "DEN"
                End Get
            End Property

            Public ReadOnly Property MedicalReport() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "MED"
                End Get
            End Property

            Public ReadOnly Property CopyReceipt() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "RP"
                End Get
            End Property

            Public ReadOnly Property Cardiology() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "CAR"
                End Get
            End Property

            Public ReadOnly Property Radiology() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "RAD"
                End Get
            End Property

            Public ReadOnly Property Theatre() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "THT"
                End Get
            End Property

            Public ReadOnly Property Pathology() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "PATH"
                End Get
            End Property

            Public ReadOnly Property DeathCertificate() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "DEA"
                End Get
            End Property

            Public ReadOnly Property Refund() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "REF"
                End Get
            End Property

            Public ReadOnly Property CreditNote() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "CRDNT"
                End Get
            End Property

            Public ReadOnly Property OPDReturns() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "OPDR"
                End Get
            End Property

            Public ReadOnly Property BillFormReturns() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "BFR"
                End Get
            End Property

            Public ReadOnly Property Admission() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "ADM"
                End Get
            End Property


#End Region

        End Class

        Public NotInheritable Class VoucherTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property SupplierPayments() As String
                Get
                    Return CShort(LookupObjects.voucherTypeID).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property StaffPayments() As String
                Get
                    Return CShort(LookupObjects.voucherTypeID).ToString() + "02"
                End Get
            End Property

            Public ReadOnly Property ServicePayments() As String
                Get
                    Return CShort(LookupObjects.DocumentType).ToString() + "03"
                End Get
            End Property


#End Region

        End Class

        Public NotInheritable Class PackID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.Packs).ToString() + "004"
                End Get
            End Property



#End Region

        End Class

        Public NotInheritable Class UnitMeasureID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.UnitMeasure).ToString() + "NA"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class PayModesID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Cash() As String
                Get
                    Return CShort(LookupObjects.PayModes).ToString() + "CA"
                End Get
            End Property


            Public ReadOnly Property Cheque() As String
                Get
                    Return CShort(LookupObjects.PayModes).ToString() + "CH"
                End Get

            End Property


            Public ReadOnly Property MobileMoney() As String
                Get
                    Return CShort(LookupObjects.PayModes).ToString() + "MM"
                End Get

            End Property


            Public ReadOnly Property Visa() As String
                Get
                    Return CShort(LookupObjects.PayModes).ToString() + "VC"
                End Get

            End Property


            Public ReadOnly Property ElectronicFundTransfer() As String
                Get
                    Return CShort(LookupObjects.PayModes).ToString() + "EFT"
                End Get

            End Property


#End Region

        End Class

        Public NotInheritable Class ItemCategoryID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Service() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "S"
                End Get
            End Property

            Public ReadOnly Property Drug() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "D"
                End Get
            End Property

            Public ReadOnly Property Consumable() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "C"
                End Get
            End Property

            Public ReadOnly Property Procedure() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "P"
                End Get
            End Property

            Public ReadOnly Property Test() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "T"
                End Get
            End Property

            Public ReadOnly Property Cardiology() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "CA"
                End Get
            End Property

            Public ReadOnly Property Radiology() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "R"
                End Get
            End Property

            Public ReadOnly Property Pathology() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "L"
                End Get
            End Property

            Public ReadOnly Property Dental() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "N"
                End Get
            End Property

            Public ReadOnly Property Theatre() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "H"
                End Get
            End Property

            Public ReadOnly Property Optical() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "O"
                End Get
            End Property

            Public ReadOnly Property Maternity() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "M"
                End Get
            End Property

            Public ReadOnly Property ICU() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "I"
                End Get
            End Property

            Public ReadOnly Property Eye() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "Y"
                End Get
            End Property

            Public ReadOnly Property Admission() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "A"
                End Get
            End Property

            Public ReadOnly Property Extras() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "E"
                End Get
            End Property

            Public ReadOnly Property NonMedical() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "NM"
                End Get
            End Property

            Public ReadOnly Property Packages() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "G"
                End Get
            End Property
#End Region

        End Class

        Public NotInheritable Class ItemCategoryEXTID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Service() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "S"
                End Get
            End Property

            Public ReadOnly Property Drug() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "D"
                End Get
            End Property

            Public ReadOnly Property Consumable() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "C"
                End Get
            End Property

            Public ReadOnly Property Procedure() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "P"
                End Get
            End Property

            Public ReadOnly Property Test() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "T"
                End Get
            End Property

            Public ReadOnly Property Cardiology() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "CA"
                End Get
            End Property

            Public ReadOnly Property Radiology() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "R"
                End Get
            End Property

            Public ReadOnly Property Pathology() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "L"
                End Get
            End Property

            Public ReadOnly Property Dental() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "N"
                End Get
            End Property

            Public ReadOnly Property Theatre() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "H"
                End Get
            End Property

            Public ReadOnly Property Optical() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "O"
                End Get
            End Property

            Public ReadOnly Property Maternity() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "M"
                End Get
            End Property

            Public ReadOnly Property ICU() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "I"
                End Get
            End Property

            Public ReadOnly Property Eye() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "Y"
                End Get
            End Property

            Public ReadOnly Property Admission() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "A"
                End Get
            End Property

            Public ReadOnly Property Extras() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "E"
                End Get
            End Property

            Public ReadOnly Property NonMedical() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "NM"
                End Get
            End Property

            Public ReadOnly Property Bank() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "BK"
                End Get
            End Property

            Public ReadOnly Property Packages() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "G"
                End Get
            End Property

            Public ReadOnly Property Supplier() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "SP"
                End Get
            End Property

            Public ReadOnly Property BillCustomer() As String
                Get
                    Return CShort(LookupObjects.ItemCategoryEXT).ToString() + "BC"
                End Get
            End Property
#End Region

        End Class



        Public NotInheritable Class BenefitCodes

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Service() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "S"
                End Get
            End Property

            Public ReadOnly Property Drug() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "D"
                End Get
            End Property

            Public ReadOnly Property Consumable() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "C"
                End Get
            End Property

            Public ReadOnly Property Procedure() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "P"
                End Get
            End Property

            Public ReadOnly Property Test() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "T"
                End Get
            End Property

            Public ReadOnly Property Cardiology() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "CA"
                End Get
            End Property

            Public ReadOnly Property Radiology() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "R"
                End Get
            End Property

            Public ReadOnly Property Pathology() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "L"
                End Get
            End Property

            Public ReadOnly Property Dental() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "N"
                End Get
            End Property

            Public ReadOnly Property Theatre() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "H"
                End Get
            End Property

            Public ReadOnly Property Optical() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "O"
                End Get
            End Property

            Public ReadOnly Property Maternity() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "M"
                End Get
            End Property

            Public ReadOnly Property ICU() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "I"
                End Get
            End Property

            Public ReadOnly Property Eye() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "Y"
                End Get
            End Property

            Public ReadOnly Property Admission() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "A"
                End Get
            End Property

            Public ReadOnly Property Extras() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "E"
                End Get
            End Property


            Public ReadOnly Property OutPatient() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "OP"
                End Get
            End Property


            Public ReadOnly Property InPatient() As String
                Get
                    Return CShort(LookupObjects.ItemCategory).ToString() + "IP"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class VisitStatusID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Doctor() As String
                Get
                    Return CShort(LookupObjects.VisitStatus).ToString() + "DR"
                End Get
            End Property

            Public ReadOnly Property Completed() As String
                Get
                    Return CShort(LookupObjects.VisitStatus).ToString() + "CO"
                End Get
            End Property

            Public ReadOnly Property Cancelled() As String
                Get
                    Return CShort(LookupObjects.VisitStatus).ToString() + "CA"
                End Get
            End Property

            Public ReadOnly Property InPatient() As String
                Get
                    Return CShort(LookupObjects.VisitStatus).ToString() + "IP"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class VisitCategoryID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            'Public ReadOnly Property Consultation() As String
            '    Get
            '        Return CShort(LookupObjects.VisitCategory).ToString() + "C"
            '    End Get
            'End Property

            Public ReadOnly Property Refferal() As String
                Get
                    Return CShort(LookupObjects.VisitCategory).ToString() + "R"
                End Get
            End Property

            Public ReadOnly Property Refill() As String
                Get
                    Return CShort(LookupObjects.VisitCategory).ToString() + "F"
                End Get
            End Property

            Public ReadOnly Property SelfRequest() As String
                Get
                    Return CShort(LookupObjects.VisitCategory).ToString() + "S"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class BranchID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "


            Public ReadOnly Property DefaultBranch() As String
                Get
                    Return CShort(LookupObjects.BranchID).ToString() + "NA"
                End Get
            End Property


#End Region

        End Class

        Public NotInheritable Class ServicePointID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Visit() As String
                Get
                    Return CShort(LookupObjects.ServicePoint).ToString() + "VIS"
                End Get
            End Property

            Public ReadOnly Property Doctor() As String
                Get
                    Return CShort(LookupObjects.ServicePoint).ToString() + "DOC"
                End Get
            End Property

            Public ReadOnly Property Discharge() As String
                Get
                    Return CShort(LookupObjects.ServicePoint).ToString() + "DIS"
                End Get
            End Property

            Public ReadOnly Property Admission() As String
                Get
                    Return CShort(LookupObjects.ServicePoint).ToString() + "ADM"
                End Get
            End Property

            Public ReadOnly Property ExtraBills() As String
                Get
                    Return CShort(LookupObjects.ServicePoint).ToString() + "BIL"
                End Get
            End Property

            Public ReadOnly Property Triage() As String
                Get
                    Return CShort(LookupObjects.ServicePoint).ToString() + "TRI"
                End Get
            End Property

            Public ReadOnly Property Cardiology() As String
                Get
                    Return CShort(LookupObjects.ServicePoint).ToString() + "CAR"
                End Get
            End Property

            Public ReadOnly Property Radiology() As String
                Get
                    Return CShort(LookupObjects.ServicePoint).ToString() + "RAD"
                End Get
            End Property

            Public ReadOnly Property Pathology() As String
                Get
                    Return CShort(LookupObjects.ServicePoint).ToString() + "PAT"
                End Get
            End Property

            Public ReadOnly Property Cashier() As String
                Get
                    Return CShort(LookupObjects.ServicePoint).ToString() + "CAS"
                End Get
            End Property

            Public ReadOnly Property Procedure() As String
                Get
                    Return CShort(LookupObjects.ServicePoint).ToString() + "PRO"
                End Get
            End Property

            Public ReadOnly Property Laboratory() As String
                Get
                    Return CShort(LookupObjects.ServicePoint).ToString() + "LAB"
                End Get
            End Property

            Public ReadOnly Property Pharmacy() As String
                Get
                    Return CShort(LookupObjects.ServicePoint).ToString() + "PHA"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ServiceBillAtID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Visit() As String
                Get
                    Return CShort(LookupObjects.ServiceBillAt).ToString() + "VIS"
                End Get
            End Property

            Public ReadOnly Property Doctor() As String
                Get
                    Return CShort(LookupObjects.ServiceBillAt).ToString() + "DOC"
                End Get
            End Property

            Public ReadOnly Property Discharge() As String
                Get
                    Return CShort(LookupObjects.ServiceBillAt).ToString() + "DIS"
                End Get
            End Property

            Public ReadOnly Property ExtraBills() As String
                Get
                    Return CShort(LookupObjects.ServiceBillAt).ToString() + "BIL"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ItemStatusID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Offered() As String
                Get
                    Return CShort(LookupObjects.ItemStatus).ToString() + "O"
                End Get
            End Property

            Public ReadOnly Property Pending() As String
                Get
                    Return CShort(LookupObjects.ItemStatus).ToString() + "P"
                End Get
            End Property

            Public ReadOnly Property Canceled() As String
                Get
                    Return CShort(LookupObjects.ItemStatus).ToString() + "C"
                End Get
            End Property

            Public ReadOnly Property Done() As String
                Get
                    Return CShort(LookupObjects.ItemStatus).ToString() + "D"
                End Get
            End Property

            Public ReadOnly Property Processing() As String
                Get
                    Return CShort(LookupObjects.ItemStatus).ToString() + "R"
                End Get
            End Property

            Public ReadOnly Property Approved() As String
                Get
                    Return CShort(LookupObjects.ItemStatus).ToString() + "A"
                End Get
            End Property

            Public ReadOnly Property Denied() As String
                Get
                    Return CShort(LookupObjects.ItemStatus).ToString() + "N"
                End Get
            End Property

            Public ReadOnly Property Closed() As String
                Get
                    Return CShort(LookupObjects.ItemStatus).ToString() + "L"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class PayStatusID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property PaidFor() As String
                Get
                    Return CShort(LookupObjects.PayStatus).ToString() + "PF"
                End Get
            End Property

            Public ReadOnly Property NotPaid() As String
                Get
                    Return CShort(LookupObjects.PayStatus).ToString() + "NP"
                End Get
            End Property

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.PayStatus).ToString() + "NA"
                End Get
            End Property
#End Region

        End Class

        Public NotInheritable Class StockTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Issued() As String
                Get
                    Return CShort(LookupObjects.StockType).ToString() + "I"
                End Get
            End Property

            Public ReadOnly Property Received() As String
                Get
                    Return CShort(LookupObjects.StockType).ToString() + "R"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class GenderID

#Region " Constructor "
            Public Sub New()
                MyBase.New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Male() As String
                Get
                    Return CShort(LookupObjects.Gender).ToString() + "M"
                End Get
            End Property

            Public ReadOnly Property Female() As String
                Get
                    Return CShort(LookupObjects.Gender).ToString() + "F"
                End Get
            End Property

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.Gender).ToString() + "N"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class BillModesID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Cash() As String
                Get
                    Return CShort(LookupObjects.BillModes).ToString() + "C"
                End Get
            End Property

            Public ReadOnly Property Account() As String
                Get
                    Return CShort(LookupObjects.BillModes).ToString() + "A"
                End Get
            End Property

            Public ReadOnly Property Insurance() As String
                Get
                    Return CShort(LookupObjects.BillModes).ToString() + "I"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class BillCustomerTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Individual() As String
                Get
                    Return CShort(LookupObjects.BillCustomerType).ToString() + "IND"
                End Get
            End Property

            Public ReadOnly Property Insurance() As String
                Get
                    Return CShort(LookupObjects.BillCustomerType).ToString() + "INS"
                End Get
            End Property

            Public ReadOnly Property Company() As String
                Get
                    Return CShort(LookupObjects.BillCustomerType).ToString() + "COM"
                End Get
            End Property

            Public ReadOnly Property Family() As String
                Get
                    Return CShort(LookupObjects.BillCustomerType).ToString() + "FAM"
                End Get
            End Property

            Public ReadOnly Property Project() As String
                Get
                    Return CShort(LookupObjects.BillCustomerType).ToString() + "PJT"
                End Get
            End Property

#End Region

        End Class
        Public NotInheritable Class VaccinesID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "


            Public ReadOnly Property Tuberculosis() As String
                Get
                    Return CShort(LookupObjects.Vaccines).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Polio0() As String
                Get
                    Return CShort(LookupObjects.Vaccines).ToString() + "02"
                End Get
            End Property
            Public ReadOnly Property Polio1() As String
                Get
                    Return CShort(LookupObjects.Vaccines).ToString() + "03"
                End Get
            End Property
            Public ReadOnly Property DPTHepBHib1() As String
                Get
                    Return CShort(LookupObjects.Vaccines).ToString() + "04"
                End Get
            End Property
            Public ReadOnly Property PCV1() As String
                Get
                    Return CShort(LookupObjects.Vaccines).ToString() + "05"
                End Get
            End Property
            Public ReadOnly Property Rota1() As String
                Get
                    Return CShort(LookupObjects.Vaccines).ToString() + "06"
                End Get
            End Property
            Public ReadOnly Property Polio2() As String
                Get
                    Return CShort(LookupObjects.Vaccines).ToString() + "07"
                End Get
            End Property
            Public ReadOnly Property DPTHepBHib2() As String
                Get
                    Return CShort(LookupObjects.Vaccines).ToString() + "08"
                End Get
            End Property
            Public ReadOnly Property PCV2() As String
                Get
                    Return CShort(LookupObjects.Vaccines).ToString() + "09"
                End Get
            End Property
            Public ReadOnly Property Rota2() As String
                Get
                    Return CShort(LookupObjects.Vaccines).ToString() + "10"
                End Get
            End Property
            Public ReadOnly Property Polio3() As String
                Get
                    Return CShort(LookupObjects.Vaccines).ToString() + "11"
                End Get
            End Property
            Public ReadOnly Property DPTHepBHib3() As String
                Get
                    Return CShort(LookupObjects.Vaccines).ToString() + "12"
                End Get
            End Property
            Public ReadOnly Property PCV3() As String
                Get
                    Return CShort(LookupObjects.Vaccines).ToString() + "13"
                End Get
            End Property
            Public ReadOnly Property IPV() As String
                Get
                    Return CShort(LookupObjects.Vaccines).ToString() + "14"
                End Get
            End Property
            Public ReadOnly Property Measles() As String
                Get
                    Return CShort(LookupObjects.Vaccines).ToString() + "15"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class AccountActionID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Debit() As String
                Get
                    Return CShort(LookupObjects.AccountAction).ToString() + "DR"
                End Get
            End Property

            Public ReadOnly Property Credit() As String
                Get
                    Return CShort(LookupObjects.AccountAction).ToString() + "CR"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class StaffTitleID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Doctor() As String
                Get
                    Return CShort(LookupObjects.StaffTitle).ToString() + "DR"
                End Get
            End Property

            Public ReadOnly Property Phlebotomist() As String
                Get
                    Return CShort(LookupObjects.StaffTitle).ToString() + "PHL"
                End Get
            End Property

            Public ReadOnly Property Cashier() As String
                Get
                    Return CShort(LookupObjects.StaffTitle).ToString() + "CA"
                End Get
            End Property

            Public ReadOnly Property LabTechnologist() As String
                Get
                    Return CShort(LookupObjects.StaffTitle).ToString() + "TEC"
                End Get
            End Property

            Public ReadOnly Property Cardiologist() As String
                Get
                    Return CShort(LookupObjects.StaffTitle).ToString() + "CAR"
                End Get
            End Property


            Public ReadOnly Property Radiologist() As String
                Get
                    Return CShort(LookupObjects.StaffTitle).ToString() + "RAD"
                End Get
            End Property

            Public ReadOnly Property Pharmacist() As String
                Get
                    Return CShort(LookupObjects.StaffTitle).ToString() + "PHA"
                End Get
            End Property

            Public ReadOnly Property Anaesthetist() As String
                Get
                    Return CShort(LookupObjects.StaffTitle).ToString() + "ANA"
                End Get
            End Property

            Public ReadOnly Property Nurse() As String
                Get
                    Return CShort(LookupObjects.StaffTitle).ToString() + "NUR"
                End Get
            End Property

            Public ReadOnly Property Pathologist() As String
                Get
                    Return CShort(LookupObjects.StaffTitle).ToString() + "PAT"
                End Get
            End Property


            Public ReadOnly Property Therapist() As String
                Get
                    Return CShort(LookupObjects.StaffTitle).ToString() + "THE"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ARTStatusID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property [On]() As String
                Get
                    Return CShort(LookupObjects.ARTStatus).ToString() + "O"
                End Get
            End Property

            Public ReadOnly Property Stopped() As String
                Get
                    Return CShort(LookupObjects.ARTStatus).ToString() + "S"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ARTCategoryID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Starting() As String
                Get
                    Return CShort(LookupObjects.ARTCategory).ToString() + "STA"
                End Get
            End Property

            Public ReadOnly Property Switching() As String
                Get
                    Return CShort(LookupObjects.ARTCategory).ToString() + "SWI"
                End Get
            End Property

            Public ReadOnly Property Resuming() As String
                Get
                    Return CShort(LookupObjects.ARTCategory).ToString() + "RES"
                End Get
            End Property

            Public ReadOnly Property Referred() As String
                Get
                    Return CShort(LookupObjects.ARTCategory).ToString() + "REF"
                End Get
            End Property

            Public ReadOnly Property Substitution() As String
                Get
                    Return CShort(LookupObjects.ARTCategory).ToString() + "SUB"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class AppointmentPrecisionID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Range() As String
                Get
                    Return CShort(LookupObjects.AppointmentPrecision).ToString() + "R"
                End Get
            End Property

            Public ReadOnly Property Exact() As String
                Get
                    Return CShort(LookupObjects.AppointmentPrecision).ToString() + "E"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class DosageCalculationID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Add() As String
                Get
                    Return CShort(LookupObjects.DosageCalculation).ToString() + "A"
                End Get
            End Property

            Public ReadOnly Property Multiply() As String
                Get
                    Return CShort(LookupObjects.DosageCalculation).ToString() + "M"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ServiceCodes

            Public ReadOnly Property NA() As String
                Get
                    Return "NA"
                End Get
            End Property

            Public ReadOnly Property Consultation() As String
                Get
                    Return "10C"
                End Get
            End Property

            Public ReadOnly Property Review() As String
                Get
                    Return "REV"
                End Get
            End Property

            Public ReadOnly Property Dental() As String
                Get
                    Return "DEN"
                End Get
            End Property

            Public ReadOnly Property Physiotherapy() As String
                Get
                    Return "PHY"
                End Get
            End Property

            Public ReadOnly Property MedicalExamination() As String
                Get
                    Return "MEX"
                End Get
            End Property



            Public ReadOnly Property ServiceFee() As String
                Get
                    Return "SF"
                End Get
            End Property

        End Class

        Public NotInheritable Class ExtraItemCodes

            Public ReadOnly Property COPAYVALUE() As String
                Get
                    Return "CPV"
                End Get
            End Property

        End Class

        Public NotInheritable Class AccessObjectNames

            Public ReadOnly Property Items() As String
                Get
                    Return "Items"
                End Get
            End Property

            Public ReadOnly Property ItemsCASH() As String
                Get
                    Return "ItemsCASH"
                End Get
            End Property


            Public ReadOnly Property ExtraBillItems() As String
                Get
                    Return "ExtraBillItems"
                End Get
            End Property

            Public ReadOnly Property ExtraBillItemsCASH() As String
                Get
                    Return "ExtraBillItemsCASH"
                End Get
            End Property

        End Class

        Public NotInheritable Class IntegrationAgents

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property FinMonitor() As String
                Get
                    Return "FIN"
                End Get
            End Property

            Public ReadOnly Property NAV() As String
                Get
                    Return "NAV"
                End Get
            End Property

            Public ReadOnly Property HAMWE() As String
                Get
                    Return "HAMWE"
                End Get
            End Property

            Public ReadOnly Property JOLIS() As String
                Get
                    Return "JOLIS"
                End Get
            End Property

            Public ReadOnly Property AFROSMS() As String
                Get
                    Return "AFRO"
                End Get
            End Property

            Public ReadOnly Property TMCG() As String
                Get
                    Return "TMCG"
                End Get
            End Property

            Public ReadOnly Property SMART As String
                Get
                    Return "SMART"
                End Get
            End Property

            Public ReadOnly Property PARA As String
                Get
                    Return "PARA"
                End Get
            End Property
#End Region

        End Class


        Public NotInheritable Class AdmissionStatusID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property InWard() As String
                Get
                    Return CShort(LookupObjects.AdmissionStatus).ToString() + "I"
                End Get
            End Property

            Public ReadOnly Property Discharged() As String
                Get
                    Return CShort(LookupObjects.AdmissionStatus).ToString() + "D"
                End Get
            End Property

#End Region

        End Class


        Public Class INTAdmissions : Inherits DBConnect

#Region " Fields "

#End Region

#Region " Auto-Implemented Properties "

            Public Property AgentNo As String
            Public Property AdmissionNo As String
            Public Property MemberLimit As Decimal
            Public Property SyncStatus As Boolean


#End Region

#Region " Constructors "

            Public Sub New()
                MyBase.New()
            End Sub

            Public Sub New(ByVal serverName As String, ByVal databaseName As String)
                MyClass.New()
                Me.ServerName = serverName
                Me.DatabaseName = databaseName
            End Sub

#End Region

#Region " Methods "

            Protected Overrides Function SaveData() As ArrayList

                Me.SetCommand("uspEditINTAdmissions")

                With Parameters
                    .Add(New ParameterSQL("AgentNo", Me.AgentNo))
                    .Add(New ParameterSQL("AdmissionNo", Me.AdmissionNo))
                    .Add(New ParameterSQL("MemberLimit", Me.MemberLimit))
                    .Add(New ParameterSQL("UserID", Me.LoginID))
                    .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                End With

                Return Parameters

            End Function

            Protected Overrides Function UpdateData() As ArrayList

                Me.SetCommand("uspUpdateINTAdmissions")

                With Parameters
                    .Add(New ParameterSQL("AgentNo", Me.AgentNo))
                    .Add(New ParameterSQL("AdmissionNo", Me.AdmissionNo))
                    .Add(New ParameterSQL("MemberLimit", Me.MemberLimit))
                    .Add(New ParameterSQL("SyncStatus", Me.SyncStatus))
                    .Add(New ParameterSQL("UserID", Me.LoginID))
                    .Add(New ParameterSQL("ClientMachine", My.Computer.Name))
                End With

                'For Audit Trail
                Me.SetLogObject("INTAdmissions")

                Return Parameters

            End Function

            Protected Overrides Function DeleteData() As ArrayList

                Dim where As String = "AgentNo = '" + Me.AgentNo + "' and AdmissionNo = '" + Me.AdmissionNo + "'"
                Dim errorPart As String = "Agent No: " + Me.AgentNo + " and Admission No: " + Me.AdmissionNo

                Me.SetCommand("uspDeleteObject")

                With Parameters
                    .Add(New ParameterSQL("ObjectName", "INTAdmissions"))
                    .Add(New ParameterSQL("Where", where))
                    .Add(New ParameterSQL("ErrorPart", errorPart))
                End With

                'For Audit Trail
                Me.SetLogObject("INTAdmissions")

                Return Parameters

            End Function

            Public Function GetINTAdmissions(ByVal agentNo As String, ByVal admissionNo As String) As DataSet

                With Parameters
                    .Add(New ParameterSQL("AgentNo", agentNo))
                    .Add(New ParameterSQL("AdmissionNo", admissionNo))
                End With

                Return Me.Load("uspGetINTAdmissions", "INTAdmissions", Parameters)

            End Function

#End Region



        End Class


        Public NotInheritable Class InterventionTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property OneonOne() As String
                Get
                    Return CShort(LookupObjects.InterventionType).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Group() As String
                Get
                    Return CShort(LookupObjects.InterventionType).ToString() + "02"
                End Get
            End Property
            Public ReadOnly Property EducationOfTeamMembers() As String
                Get
                    Return CShort(LookupObjects.InterventionType).ToString() + "03"
                End Get
            End Property

            Public ReadOnly Property ConsultationOfTeamMembers() As String
                Get
                    Return CShort(LookupObjects.InterventionType).ToString() + "04"
                End Get
            End Property

            Public ReadOnly Property EnvironmentalAdaptation() As String
                Get
                    Return CShort(LookupObjects.InterventionType).ToString() + "05"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ManagerPhoneNumber

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property CEO() As String
                Get
                    Return CShort(LookupObjects.TimelySMSIncomeSummariesNo).ToString() + "CEO"
                End Get
            End Property


#End Region

        End Class

        Public NotInheritable Class MyDefaultPC

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property DefaultPC() As String
                Get
                    Return CShort(LookupObjects.MyDefaultComputer).ToString() + "DEF"
                End Get
            End Property


#End Region

        End Class

        Public NotInheritable Class AlertTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property LabResults() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Prescription() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "02"
                End Get
            End Property

            Public ReadOnly Property LabRequests() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "03"
                End Get
            End Property


            Public ReadOnly Property Cardiology() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "15"
                End Get
            End Property

            Public ReadOnly Property CardiologyReports() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "16"
                End Get
            End Property

            Public ReadOnly Property Radiology() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "04"
                End Get
            End Property

            Public ReadOnly Property RadiologyReports() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "05"
                End Get
            End Property

            Public ReadOnly Property Procedure() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "06"
                End Get
            End Property

            Public ReadOnly Property ProcedureReports() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "07"
                End Get
            End Property

            Public ReadOnly Property Dental() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "08"
                End Get
            End Property

            Public ReadOnly Property DentalReports() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "09"
                End Get
            End Property

            Public ReadOnly Property Theatre() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "10"
                End Get
            End Property

            Public ReadOnly Property Optical() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "11"
                End Get
            End Property

            Public ReadOnly Property Consumable() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "12"
                End Get
            End Property

            Public ReadOnly Property Pathology() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "13"
                End Get
            End Property

            Public ReadOnly Property PathologyReports() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "14"
                End Get
            End Property


            Public ReadOnly Property OccupationalTherapy() As String
                Get
                    Return CShort(LookupObjects.AlertType).ToString() + "17"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class DoctorSpecialtyID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property General() As String
                Get
                    Return CShort(LookupObjects.DoctorSpecialty).ToString() + "GEN"
                End Get
            End Property

            Public ReadOnly Property Pediatrician() As String
                Get
                    Return CShort(LookupObjects.DoctorSpecialty).ToString() + "PED"
                End Get
            End Property

            Public ReadOnly Property Physician() As String
                Get
                    Return CShort(LookupObjects.DoctorSpecialty).ToString() + "PHY"
                End Get
            End Property

            Public ReadOnly Property Surgeon() As String
                Get
                    Return CShort(LookupObjects.DoctorSpecialty).ToString() + "SUR"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class TemplateTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property LabResults() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property cardiologyReports() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "24"
                End Get
            End Property

            Public ReadOnly Property RadiologyReports() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "02"
                End Get
            End Property

            Public ReadOnly Property PathologyReports() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "03"
                End Get
            End Property

            Public ReadOnly Property PresentingComplaint() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "04"
                End Get
            End Property

            Public ReadOnly Property ClinicalNotes() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "05"
                End Get
            End Property

            Public ReadOnly Property ROS() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "06"
                End Get
            End Property

            Public ReadOnly Property PMH() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "07"
                End Get
            End Property

            Public ReadOnly Property POH() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "08"
                End Get
            End Property

            Public ReadOnly Property PGH() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "09"
                End Get
            End Property

            Public ReadOnly Property FSH() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "10"
                End Get
            End Property

            Public ReadOnly Property GeneralAppearance() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "11"
                End Get
            End Property

            Public ReadOnly Property Respiratory() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "12"
                End Get
            End Property

            Public ReadOnly Property CVS() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "13"
                End Get
            End Property

            Public ReadOnly Property ENT() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "14"
                End Get
            End Property

            Public ReadOnly Property Abdomen() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "15"
                End Get
            End Property

            Public ReadOnly Property CNS() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "16"
                End Get
            End Property

            Public ReadOnly Property EYE() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "17"
                End Get
            End Property

            Public ReadOnly Property MuscularSkeletal() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "18"
                End Get
            End Property

            Public ReadOnly Property Skin() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "19"
                End Get
            End Property

            Public ReadOnly Property PV() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "20"
                End Get
            End Property

            Public ReadOnly Property PsychologicalStatus() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "21"
                End Get
            End Property

            Public ReadOnly Property ProvisionalDiagnosis() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "22"
                End Get
            End Property

            Public ReadOnly Property TreatmentPlan() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "23"
                End Get
            End Property

            Public ReadOnly Property StatusOfJoints() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "25"
                End Get
            End Property
            Public ReadOnly Property Sensitivity() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "26"
                End Get
            End Property
            Public ReadOnly Property WalkingAnalysis() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "27"
                End Get
            End Property
            Public ReadOnly Property ShortTermTreatmentTargets() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "28"
                End Get
            End Property
            Public ReadOnly Property LongTermTreatmentTargets() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "29"
                End Get
            End Property

            Public ReadOnly Property MuscleStatus() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "30"
                End Get
            End Property


            Public ReadOnly Property ExpectedOutcome() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "31"
                End Get
            End Property

            Public ReadOnly Property NursingActions() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "32"
                End Get
            End Property

            Public ReadOnly Property Implementation() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "33"
                End Get
            End Property

            Public ReadOnly Property Complaint() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "34"
                End Get
            End Property

            Public ReadOnly Property Etiology() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "35"
                End Get
            End Property

            Public ReadOnly Property SignsAndSymptoms() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "36"
                End Get
            End Property

            Public ReadOnly Property MedicalConditions() As String
                Get
                    Return CShort(LookupObjects.TemplateType).ToString() + "37"
                End Get
            End Property
#End Region

        End Class

        Public NotInheritable Class MemberTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Staff() As String
                Get
                    Return CShort(LookupObjects.MemberType).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Dependant() As String
                Get
                    Return CShort(LookupObjects.MemberType).ToString() + "02"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class CoPayTypeID

#Region " Constructor "
            Public Sub New()
                MyBase.New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.CoPayType).ToString() + "NA"
                End Get
            End Property

            Public ReadOnly Property Percent() As String
                Get
                    Return CShort(LookupObjects.CoPayType).ToString() + "PCT"
                End Get
            End Property

            Public ReadOnly Property Value() As String
                Get
                    Return CShort(LookupObjects.CoPayType).ToString() + "VAL"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ClaimStatusID

#Region " Constructor "
            Public Sub New()
                MyBase.New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Approved() As String
                Get
                    Return CShort(LookupObjects.ClaimStatus).ToString() + "AP"
                End Get
            End Property

            Public ReadOnly Property NotApproved() As String
                Get
                    Return CShort(LookupObjects.ClaimStatus).ToString() + "NA"
                End Get
            End Property

            Public ReadOnly Property ReturntoDoctor() As String
                Get
                    Return CShort(LookupObjects.ClaimStatus).ToString() + "RD"
                End Get
            End Property

            Public ReadOnly Property Pending() As String
                Get
                    Return CShort(LookupObjects.ClaimStatus).ToString() + "PD"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class EntryModeID

#Region " Constructor "
            Public Sub New()
                MyBase.New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Manual() As String
                Get
                    Return CShort(LookupObjects.EntryMode).ToString() + "MAN"
                End Get
            End Property

            Public ReadOnly Property System() As String
                Get
                    Return CShort(LookupObjects.EntryMode).ToString() + "SYS"
                End Get
            End Property

            Public ReadOnly Property Imported() As String
                Get
                    Return CShort(LookupObjects.EntryMode).ToString() + "IMP"
                End Get
            End Property

            Public ReadOnly Property Returned() As String
                Get
                    Return CShort(LookupObjects.EntryMode).ToString() + "RTD"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class PayTypeID

#Region " Constructor "
            Public Sub New()
                MyBase.New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property VisitBill() As String
                Get
                    Return CShort(LookupObjects.PayType).ToString() + "CAS"
                End Get
            End Property

            Public ReadOnly Property VisitBillCASH() As String
                Get
                    Return CShort(LookupObjects.PayType).ToString() + "VCS"
                End Get
            End Property

            Public ReadOnly Property AccountBill() As String
                Get
                    Return CShort(LookupObjects.PayType).ToString() + "ACC"
                End Get
            End Property

            Public ReadOnly Property InsuranceBill() As String
                Get
                    Return CShort(LookupObjects.PayType).ToString() + "INS"
                End Get
            End Property

            Public ReadOnly Property IPDRoundBill() As String
                Get
                    Return CShort(LookupObjects.PayType).ToString() + "IPR"
                End Get
            End Property

            Public ReadOnly Property ExtraBill() As String
                Get
                    Return CShort(LookupObjects.PayType).ToString() + "EXT"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class CurrenciesID

#Region " Constructor "
            Public Sub New()
                MyBase.New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property UgandaShillings() As String
                Get
                    Return CShort(LookupObjects.Currencies).ToString() + "UGX"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class FileStatusID

#Region " Constructor "
            Public Sub New()
                MyBase.New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Seen() As String
                Get
                    Return CShort(LookupObjects.FileStatus).ToString() + "SN"
                End Get
            End Property

            Public ReadOnly Property NotSeen() As String
                Get
                    Return CShort(LookupObjects.FileStatus).ToString() + "NS"
                End Get
            End Property

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.FileStatus).ToString() + "NA"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class DentalCategoryID

#Region " Constructor "
            Public Sub New()
                MyBase.New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Service() As String
                Get
                    Return CShort(LookupObjects.DentalCategory).ToString() + "S"
                End Get
            End Property

            Public ReadOnly Property Laboratory() As String
                Get
                    Return CShort(LookupObjects.DentalCategory).ToString() + "L"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ResultFlagID

#Region " Constructor "
            Public Sub New()
                MyBase.New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Low() As String
                Get
                    Return CShort(LookupObjects.ResultFlag).ToString() + "L"
                End Get
            End Property

            Public ReadOnly Property Normal() As String
                Get
                    Return CShort(LookupObjects.ResultFlag).ToString() + "N"
                End Get
            End Property

            Public ReadOnly Property High() As String
                Get
                    Return CShort(LookupObjects.ResultFlag).ToString() + "H"
                End Get
            End Property

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.ResultFlag).ToString() + "NA"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class DrugTypeID

#Region " Constructor "
            Public Sub New()
                MyBase.New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Medication() As String
                Get
                    Return CShort(LookupObjects.DrugType).ToString() + "M"
                End Get
            End Property

            Public ReadOnly Property Consumable() As String
                Get
                    Return CShort(LookupObjects.DrugType).ToString() + "C"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class VisitTypeID

#Region " Constructor "
            Public Sub New()
                MyBase.New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property OutPatient() As String
                Get
                    Return CShort(LookupObjects.VisitType).ToString() + "OPD"
                End Get
            End Property

            Public ReadOnly Property InPatient() As String
                Get
                    Return CShort(LookupObjects.VisitType).ToString() + "IPD"
                End Get
            End Property

            Public ReadOnly Property Combined() As String
                Get
                    Return CShort(LookupObjects.VisitType).ToString() + "COM"
                End Get
            End Property


#End Region

        End Class

        Public NotInheritable Class BloodGroupID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.BloodGroup).ToString() + "NA"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class OperationClassID

#Region " Constructor "
            Public Sub New()
                MyBase.New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.OperationClass).ToString() + "NA"
                End Get
            End Property

            Public ReadOnly Property Major() As String
                Get
                    Return CShort(LookupObjects.OperationClass).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Minor() As String
                Get
                    Return CShort(LookupObjects.OperationClass).ToString() + "02"
                End Get
            End Property

            Public ReadOnly Property Intermediate() As String
                Get
                    Return CShort(LookupObjects.OperationClass).ToString() + "03"
                End Get
            End Property

            Public ReadOnly Property Complex() As String
                Get
                    Return CShort(LookupObjects.OperationClass).ToString() + "04"
                End Get
            End Property

            Public ReadOnly Property SuperComplex() As String
                Get
                    Return CShort(LookupObjects.OperationClass).ToString() + "05"
                End Get
            End Property


#End Region

        End Class

        Public NotInheritable Class TribeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.Tribe).ToString() + "NA"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ReligionID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.Religion).ToString() + "NA"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class MaritalStatusID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.MaritalStatus).ToString() + "N"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class CareEntryPointID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.CareEntryPoint).ToString() + "01"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class LocationID

#Region " Constructor "

            Public Sub New()
                MyBase.New()
            End Sub

#End Region

#Region " Properties "

            Public ReadOnly Property Store() As String
                Get
                    Return CShort(LookupObjects.Location).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Pharmacy() As String
                Get
                    Return CShort(LookupObjects.Location).ToString() + "02"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class PreferentialLookingID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.PreferentialLooking).ToString() + "NA"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ClinicalCommentID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.ClinicalComment).ToString() + "NA"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class EyeTestID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Glasses() As String
                Get
                    Return CShort(LookupObjects.EyeTest).ToString() + "GL"
                End Get
            End Property

            Public ReadOnly Property Pinhole() As String
                Get
                    Return CShort(LookupObjects.EyeTest).ToString() + "PH"
                End Get
            End Property

            Public ReadOnly Property NoGlasses() As String
                Get
                    Return CShort(LookupObjects.EyeTest).ToString() + "NG"
                End Get
            End Property

            Public ReadOnly Property Refraction() As String
                Get
                    Return CShort(LookupObjects.EyeTest).ToString() + "RF"
                End Get
            End Property

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.EyeTest).ToString() + "NA"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class YesNoID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Yes() As String
                Get
                    Return CShort(LookupObjects.YesNo).ToString() + "Y"
                End Get
            End Property

            Public ReadOnly Property No() As String
                Get
                    Return CShort(LookupObjects.YesNo).ToString() + "N"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class AccountGroupID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.AccountGroup).ToString() + "NA"
                End Get
            End Property

            Public ReadOnly Property BillClearance() As String
                Get
                    Return CShort(LookupObjects.AccountGroup).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property LackofChange() As String
                Get
                    Return CShort(LookupObjects.AccountGroup).ToString() + "02"
                End Get
            End Property

            Public ReadOnly Property SupplierPayment() As String
                Get
                    Return CShort(LookupObjects.AccountGroup).ToString() + "SPY"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class PriorityID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Normal() As String
                Get
                    Return CShort(LookupObjects.Priority).ToString() + "NO"
                End Get
            End Property

            Public ReadOnly Property Emergency() As String
                Get
                    Return CShort(LookupObjects.Priority).ToString() + "EM"
                End Get
            End Property



#End Region

        End Class

        Public NotInheritable Class ExamVisitTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Scheduled() As String
                Get
                    Return CShort(LookupObjects.ExamVisitType).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Unscheduled() As String
                Get
                    Return CShort(LookupObjects.ExamVisitType).ToString() + "02"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class PrinterPaperSize

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property A4() As String
                Get
                    Return CShort(LookupObjects.PrinterPaperSize).ToString() + "A4"
                End Get
            End Property

            Public ReadOnly Property EightyMillimeters() As String
                Get
                    Return CShort(LookupObjects.PrinterPaperSize).ToString() + "80"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class InventoryImportType

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property NormalStockTaking() As String
                Get
                    Return CShort(LookupObjects.InventoryImportType).ToString() + "NST"
                End Get
            End Property

            Public ReadOnly Property PhysicalStockCount() As String
                Get
                    Return CShort(LookupObjects.InventoryImportType).ToString() + "PSC"
                End Get
            End Property

            Public ReadOnly Property OneByOne() As String
                Get
                    Return CShort(LookupObjects.InventoryImportType).ToString() + "OBO"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class FluidCategoryID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property InTake() As String
                Get
                    Return CShort(LookupObjects.FluidCategoryID).ToString() + "IN"
                End Get
            End Property

            Public ReadOnly Property OutPut() As String
                Get
                    Return CShort(LookupObjects.FluidCategoryID).ToString() + "OUT"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class MUACStatusID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Green() As String
                Get
                    Return CShort(LookupObjects.MUACStatus).ToString() + "G"
                End Get
            End Property

            Public ReadOnly Property Yellow() As String
                Get
                    Return CShort(LookupObjects.MUACStatus).ToString() + "Y"
                End Get
            End Property

            Public ReadOnly Property Red() As String
                Get
                    Return CShort(LookupObjects.MUACStatus).ToString() + "R"
                End Get
            End Property


            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.MUACStatus).ToString() + "N"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class CustomAdmissionNoWards

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Nursery() As String
                Get
                    Return CShort(LookupObjects.CustomAdmissionNoWards).ToString() + "N01"
                End Get
            End Property

            Public ReadOnly Property Neonatal() As String
                Get
                    Return CShort(LookupObjects.CustomAdmissionNoWards).ToString() + "N02"
                End Get
            End Property

            Public ReadOnly Property Medical() As String
                Get
                    Return CShort(LookupObjects.CustomAdmissionNoWards).ToString() + "H01"
                End Get
            End Property

            Public ReadOnly Property Surgical() As String
                Get
                    Return CShort(LookupObjects.CustomAdmissionNoWards).ToString() + "H02"
                End Get
            End Property

            Public ReadOnly Property Children() As String
                Get
                    Return CShort(LookupObjects.CustomAdmissionNoWards).ToString() + "H03"
                End Get
            End Property

            Public ReadOnly Property Child() As String
                Get
                    Return CShort(LookupObjects.CustomAdmissionNoWards).ToString() + "H04"
                End Get
            End Property

            Public ReadOnly Property Paediatric() As String
                Get
                    Return CShort(LookupObjects.CustomAdmissionNoWards).ToString() + "H05"
                End Get
            End Property

            Public ReadOnly Property Maternity() As String
                Get
                    Return CShort(LookupObjects.CustomAdmissionNoWards).ToString() + "M01"
                End Get
            End Property

            Public ReadOnly Property Labour() As String
                Get
                    Return CShort(LookupObjects.CustomAdmissionNoWards).ToString() + "M02"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class BMIStatusID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property UnderWeight() As String
                Get
                    Return CShort(LookupObjects.BMIStatus).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property NormalWeight() As String
                Get
                    Return CShort(LookupObjects.BMIStatus).ToString() + "02"
                End Get
            End Property

            Public ReadOnly Property OverWeight() As String
                Get
                    Return CShort(LookupObjects.BMIStatus).ToString() + "03"
                End Get
            End Property

            Public ReadOnly Property Obesity() As String
                Get
                    Return CShort(LookupObjects.BMIStatus).ToString() + "04"
                End Get
            End Property

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.BMIStatus).ToString() + "00"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class WeightForAgeID

#Region " Constructor "
            Public Sub New()
                MyBase.New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property Appropriate() As String
                Get
                    Return CShort(LookupObjects.WeightForAge).ToString() + "A"
                End Get
            End Property

            Public ReadOnly Property Inappropriate() As String
                Get
                    Return CShort(LookupObjects.WeightForAge).ToString() + "I"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class BreastFeedingID

#Region " Constructor "
            Public Sub New()
                MyBase.New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Inclusive() As String
                Get
                    Return CShort(LookupObjects.BreastFeeding).ToString() + "I"
                End Get
            End Property

            Public ReadOnly Property Exclusive() As String
                Get
                    Return CShort(LookupObjects.BreastFeeding).ToString() + "EX"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ConditionOfUmblicalCordID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Clean() As String
                Get
                    Return CShort(LookupObjects.ConditionOfUmblicalCord).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Infected() As String
                Get
                    Return CShort(LookupObjects.ConditionOfUmblicalCord).ToString() + "02"
                End Get
            End Property

            Public ReadOnly Property Referred() As String
                Get
                    Return CShort(LookupObjects.ConditionOfUmblicalCord).ToString() + "03"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ConditionOnBirthID

#Region " Constructor "
            Public Sub New()
                MyBase.New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Good() As String
                Get
                    Return CShort(LookupObjects.ConditionOnBirth).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Poor() As String
                Get
                    Return CShort(LookupObjects.ConditionOnBirth).ToString() + "02"
                End Get
            End Property

            Public ReadOnly Property Critical() As String
                Get
                    Return CShort(LookupObjects.ConditionOnBirth).ToString() + "03"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class PhysiotherapyDiseaseCategoryID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.PhysiotherapyDiseaseCategory).ToString() + "0001"
                End Get
            End Property


#End Region

        End Class

        Public NotInheritable Class TherapyCategoryID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "


            Public ReadOnly Property ManipulativeTechnique() As String
                Get
                    Return CShort(LookupObjects.TherapyCategory).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Electrotherapy() As String
                Get
                    Return CShort(LookupObjects.TherapyCategory).ToString() + "02"
                End Get
            End Property
            Public ReadOnly Property Exercisotherapy() As String
                Get
                    Return CShort(LookupObjects.TherapyCategory).ToString() + "03"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ManipulativeTechniqueID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region



#Region " Properties "

            Public ReadOnly Property Manipulations() As String
                Get
                    Return CShort(LookupObjects.ManipulativeTechnique).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property TractionBed() As String
                Get
                    Return CShort(LookupObjects.ManipulativeTechnique).ToString() + "02"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ElectrotherapyID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region



#Region " Properties "


            Public ReadOnly Property Infrared() As String
                Get
                    Return CShort(LookupObjects.Electrotherapy).ToString() + "IRR"
                End Get
            End Property

            Public ReadOnly Property IceTherapy() As String
                Get
                    Return CShort(LookupObjects.Electrotherapy).ToString() + "IT"
                End Get
            End Property
            Public ReadOnly Property Spirometry() As String
                Get
                    Return CShort(LookupObjects.Electrotherapy).ToString() + "SP"
                End Get
            End Property
            Public ReadOnly Property Stimulation() As String
                Get
                    Return CShort(LookupObjects.Electrotherapy).ToString() + "STM"
                End Get
            End Property
            Public ReadOnly Property ShortWave() As String
                Get
                    Return CShort(LookupObjects.Electrotherapy).ToString() + "SW"
                End Get
            End Property
            Public ReadOnly Property TENS() As String
                Get
                    Return CShort(LookupObjects.Electrotherapy).ToString() + "TENS"
                End Get
            End Property
            Public ReadOnly Property UltraSound() As String
                Get
                    Return CShort(LookupObjects.Electrotherapy).ToString() + "US"
                End Get
            End Property


#End Region

        End Class

        Public NotInheritable Class ExercisotherapyID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "



            Public ReadOnly Property ActiveExercises() As String
                Get
                    Return CShort(LookupObjects.Exercisotherapy).ToString() + "AE"
                End Get
            End Property

            Public ReadOnly Property AssistedActiveExercises() As String
                Get
                    Return CShort(LookupObjects.Exercisotherapy).ToString() + "AMB"
                End Get
            End Property
            Public ReadOnly Property BreathingExercises() As String
                Get
                    Return CShort(LookupObjects.Exercisotherapy).ToString() + "BE"
                End Get
            End Property
            Public ReadOnly Property Crutches() As String
                Get
                    Return CShort(LookupObjects.Exercisotherapy).ToString() + "CR"
                End Get
            End Property
            Public ReadOnly Property FitnessExercises() As String
                Get
                    Return CShort(LookupObjects.Exercisotherapy).ToString() + "FE"
                End Get
            End Property
            Public ReadOnly Property GymStation() As String
                Get
                    Return CShort(LookupObjects.Exercisotherapy).ToString() + "GS"
                End Get
            End Property
            Public ReadOnly Property MobilisationOnCrutches() As String
                Get
                    Return CShort(LookupObjects.Exercisotherapy).ToString() + "MOC"
                End Get
            End Property

            Public ReadOnly Property Orthotics() As String
                Get
                    Return CShort(LookupObjects.Exercisotherapy).ToString() + "ORT"
                End Get
            End Property
            Public ReadOnly Property Other() As String
                Get
                    Return CShort(LookupObjects.Exercisotherapy).ToString() + "OT"
                End Get
            End Property
            Public ReadOnly Property PassiveMobilization() As String
                Get
                    Return CShort(LookupObjects.Exercisotherapy).ToString() + "PM"
                End Get
            End Property
            Public ReadOnly Property ParentTraining() As String
                Get
                    Return CShort(LookupObjects.Exercisotherapy).ToString() + "PT"
                End Get
            End Property
            Public ReadOnly Property StaticBike() As String
                Get
                    Return CShort(LookupObjects.Exercisotherapy).ToString() + "SB"
                End Get
            End Property
            Public ReadOnly Property StrengtheningExercise() As String
                Get
                    Return CShort(LookupObjects.Exercisotherapy).ToString() + "STR"
                End Get
            End Property
            Public ReadOnly Property Treadmill() As String
                Get
                    Return CShort(LookupObjects.Exercisotherapy).ToString() + "TM"
                End Get
            End Property



#End Region

        End Class

        Public NotInheritable Class LevelOfDependenceID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property Independent() As String
                Get
                    Return CShort(LookupObjects.LevelOfDependence).ToString() + "I"
                End Get
            End Property

            Public ReadOnly Property StandByAssisstance() As String
                Get
                    Return CShort(LookupObjects.LevelOfDependence).ToString() + "SBA"
                End Get
            End Property
            Public ReadOnly Property ContactGuarding() As String
                Get
                    Return CShort(LookupObjects.LevelOfDependence).ToString() + "CG"
                End Get
            End Property

            Public ReadOnly Property MinimalAssistance() As String
                Get
                    Return CShort(LookupObjects.LevelOfDependence).ToString() + "MINA"
                End Get
            End Property
            Public ReadOnly Property ModerateAssistance() As String
                Get
                    Return CShort(LookupObjects.LevelOfDependence).ToString() + "MODA"
                End Get
            End Property

            Public ReadOnly Property MaximumAssistance() As String
                Get
                    Return CShort(LookupObjects.LevelOfDependence).ToString() + "MAXA"
                End Get
            End Property

            Public ReadOnly Property Dependent() As String
                Get
                    Return CShort(LookupObjects.LevelOfDependence).ToString() + "DEP"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ContraceptivesComplicationsID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property AbnormalBleeding() As String
                Get
                    Return CShort(LookupObjects.ContraceptivesComplications).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property GenitalTractInfection() As String
                Get
                    Return CShort(LookupObjects.ContraceptivesComplications).ToString() + "02"
                End Get
            End Property
            Public ReadOnly Property Pruritus() As String
                Get
                    Return CShort(LookupObjects.ContraceptivesComplications).ToString() + "03"
                End Get
            End Property


            Public ReadOnly Property NauseaOrVomiting() As String
                Get
                    Return CShort(LookupObjects.ContraceptivesComplications).ToString() + "04"
                End Get
            End Property

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.ContraceptivesComplications).ToString() + "05"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class ReasonsForRemovalID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property WeightGainOrLoss() As String
                Get
                    Return CShort(LookupObjects.ReasonsForRemoval).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Headaches() As String
                Get
                    Return CShort(LookupObjects.ReasonsForRemoval).ToString() + "02"
                End Get
            End Property
            Public ReadOnly Property HeavyPeriods() As String
                Get
                    Return CShort(LookupObjects.ReasonsForRemoval).ToString() + "03"
                End Get
            End Property


            Public ReadOnly Property Backache() As String
                Get
                    Return CShort(LookupObjects.ReasonsForRemoval).ToString() + "04"
                End Get
            End Property

            Public ReadOnly Property Others() As String
                Get
                    Return CShort(LookupObjects.ReasonsForRemoval).ToString() + "05"
                End Get
            End Property

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.ReasonsForRemoval).ToString() + "06"
                End Get
            End Property


#End Region

        End Class

        Public NotInheritable Class MedicalHistoryID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property Hypertension() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "001"
                End Get
            End Property

            Public ReadOnly Property Diabetes() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "002"
                End Get
            End Property
            Public ReadOnly Property SickleCellDisease() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "003"
                End Get
            End Property


            Public ReadOnly Property VaricoseVeins() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "004"
                End Get
            End Property

            Public ReadOnly Property AllergicRhinitis() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "005"
                End Get
            End Property


            Public ReadOnly Property HeartDisease() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "006"
                End Get
            End Property


            Public ReadOnly Property LiverDisease() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "007"
                End Get
            End Property
            Public ReadOnly Property Asthma() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "008"
                End Get
            End Property


            Public ReadOnly Property PUD() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "009"
                End Get
            End Property

            Public ReadOnly Property DVT() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "010"
                End Get
            End Property


            Public ReadOnly Property GenitalHerpes() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "011"
                End Get
            End Property

            Public ReadOnly Property HIV() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "012"
                End Get
            End Property


            Public ReadOnly Property OtherSTI() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "013"
                End Get
            End Property


            Public ReadOnly Property Epilepsy() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "014"
                End Get
            End Property
            Public ReadOnly Property LungDisease() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "015"
                End Get
            End Property


            Public ReadOnly Property Anaemia() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "016"
                End Get
            End Property

            Public ReadOnly Property Tuberculosis() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "017"
                End Get
            End Property


            Public ReadOnly Property FrequentHeadaches() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "018"
                End Get
            End Property


            Public ReadOnly Property PsychaitricDisease() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "019"
                End Get
            End Property


            Public ReadOnly Property KidneyDisease() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "020"
                End Get
            End Property
            Public ReadOnly Property NervousMentalDisorder() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "021"
                End Get
            End Property



#End Region

        End Class

        Public NotInheritable Class SurgicalHistoryID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property Operations() As String
                Get
                    Return CShort(LookupObjects.SurgicalHistory).ToString() + "001"
                End Get
            End Property

            Public ReadOnly Property BloodTransfusions() As String
                Get
                    Return CShort(LookupObjects.SurgicalHistory).ToString() + "002"
                End Get
            End Property
            Public ReadOnly Property Haemorrhoids() As String
                Get
                    Return CShort(LookupObjects.SurgicalHistory).ToString() + "003"
                End Get
            End Property


            Public ReadOnly Property PelvicLimbFracture() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "04"
                End Get
            End Property

            Public ReadOnly Property SkeletalDeformity() As String
                Get
                    Return CShort(LookupObjects.MedicalHistory).ToString() + "005"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class GynaecologicalHistoryID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property DandC() As String
                Get
                    Return CShort(LookupObjects.GynaecologicalHistory).ToString() + "001"
                End Get
            End Property

            Public ReadOnly Property EctopicPregnancy() As String
                Get
                    Return CShort(LookupObjects.GynaecologicalHistory).ToString() + "002"
                End Get
            End Property
            Public ReadOnly Property CaesarianSection() As String
                Get
                    Return CShort(LookupObjects.GynaecologicalHistory).ToString() + "003"
                End Get
            End Property


            Public ReadOnly Property RetainedPlacenta() As String
                Get
                    Return CShort(LookupObjects.GynaecologicalHistory).ToString() + "004"
                End Get
            End Property

            Public ReadOnly Property PPH() As String
                Get
                    Return CShort(LookupObjects.GynaecologicalHistory).ToString() + "005"
                End Get
            End Property


            Public ReadOnly Property Others() As String
                Get
                    Return CShort(LookupObjects.GynaecologicalHistory).ToString() + "006"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class FamilyHistoryID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property Diabetes() As String
                Get
                    Return CShort(LookupObjects.FamilyHistory).ToString() + "001"
                End Get
            End Property

            Public ReadOnly Property Hypertension() As String
                Get
                    Return CShort(LookupObjects.FamilyHistory).ToString() + "002"
                End Get
            End Property
            Public ReadOnly Property SickleCellDisease() As String
                Get
                    Return CShort(LookupObjects.FamilyHistory).ToString() + "003"
                End Get
            End Property


            Public ReadOnly Property Epilepsy() As String
                Get
                    Return CShort(LookupObjects.FamilyHistory).ToString() + "004"
                End Get
            End Property

            Public ReadOnly Property Twins() As String
                Get
                    Return CShort(LookupObjects.FamilyHistory).ToString() + "005"
                End Get
            End Property


            Public ReadOnly Property Others() As String
                Get
                    Return CShort(LookupObjects.FamilyHistory).ToString() + "006"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class SocialHistoryID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property Smoking() As String
                Get
                    Return CShort(LookupObjects.SocialHistory).ToString() + "001"
                End Get
            End Property

            Public ReadOnly Property Alcohol() As String
                Get
                    Return CShort(LookupObjects.SocialHistory).ToString() + "002"
                End Get
            End Property


            Public ReadOnly Property Others() As String
                Get
                    Return CShort(LookupObjects.SocialHistory).ToString() + "003"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class AbortionPeriodID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property Below12Weeks() As String
                Get
                    Return CShort(LookupObjects.AbortionPeriod).ToString() + "001"
                End Get
            End Property

            Public ReadOnly Property Above12Weeks() As String
                Get
                    Return CShort(LookupObjects.AbortionPeriod).ToString() + "002"
                End Get
            End Property

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.AbortionPeriod).ToString() + "003"
                End Get
            End Property


#End Region

        End Class

        Public NotInheritable Class ChildStatusID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property Alive() As String
                Get
                    Return CShort(LookupObjects.ChildStatus).ToString() + "001"
                End Get
            End Property

            Public ReadOnly Property SB() As String
                Get
                    Return CShort(LookupObjects.ChildStatus).ToString() + "002"
                End Get
            End Property

            Public ReadOnly Property NND() As String
                Get
                    Return CShort(LookupObjects.ChildStatus).ToString() + "003"
                End Get
            End Property

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.ChildStatus).ToString() + "004"
                End Get
            End Property

#End Region

        End Class

        Public NotInheritable Class VaricoseID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property Present() As String
                Get
                    Return CShort(LookupObjects.Varicose).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Absent() As String
                Get
                    Return CShort(LookupObjects.Varicose).ToString() + "02"
                End Get
            End Property




#End Region

        End Class

        Public NotInheritable Class NormalityID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property Normal() As String
                Get
                    Return CShort(LookupObjects.Normality).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Abnormal() As String
                Get
                    Return CShort(LookupObjects.Normality).ToString() + "02"
                End Get
            End Property




#End Region

        End Class

        Public NotInheritable Class LieID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property Longitudinal() As String
                Get
                    Return CShort(LookupObjects.Lie).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Traversal() As String
                Get
                    Return CShort(LookupObjects.Lie).ToString() + "02"
                End Get
            End Property

            Public ReadOnly Property Oblique() As String
                Get
                    Return CShort(LookupObjects.Lie).ToString() + "03"
                End Get
            End Property



#End Region

        End Class

        Public NotInheritable Class PositionID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.Position).ToString() + "01"
                End Get
            End Property



#End Region

        End Class

        Public NotInheritable Class PelvicConclusionID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property Pelvic() As String
                Get
                    Return CShort(LookupObjects.PelvicConclusion).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Adequate() As String
                Get
                    Return CShort(LookupObjects.PelvicConclusion).ToString() + "02"
                End Get
            End Property

            Public ReadOnly Property Borderline() As String
                Get
                    Return CShort(LookupObjects.PelvicConclusion).ToString() + "03"
                End Get
            End Property

            Public ReadOnly Property Contracted() As String
                Get
                    Return CShort(LookupObjects.PelvicConclusion).ToString() + "04"
                End Get
            End Property



#End Region

        End Class

        Public NotInheritable Class TypeOfDeliveryID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property NVD() As String
                Get
                    Return CShort(LookupObjects.TypeOfDelivery).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Breech() As String
                Get
                    Return CShort(LookupObjects.TypeOfDelivery).ToString() + "02"
                End Get
            End Property

            Public ReadOnly Property Assisted() As String
                Get
                    Return CShort(LookupObjects.TypeOfDelivery).ToString() + "03"
                End Get
            End Property

            Public ReadOnly Property Caesarian() As String
                Get
                    Return CShort(LookupObjects.TypeOfDelivery).ToString() + "04"
                End Get
            End Property

            Public ReadOnly Property LabourIncludedROM() As String
                Get
                    Return CShort(LookupObjects.TypeOfDelivery).ToString() + "05"
                End Get
            End Property

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.TypeOfDelivery).ToString() + "06"
                End Get
            End Property



#End Region

        End Class

        Public NotInheritable Class PregnancyOutcomeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region


#Region " Properties "

            Public ReadOnly Property Normal() As String
                Get
                    Return CShort(LookupObjects.PregnancyOutcome).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property Complications() As String
                Get
                    Return CShort(LookupObjects.PregnancyOutcome).ToString() + "02"
                End Get
            End Property

            Public ReadOnly Property NA() As String
                Get
                    Return CShort(LookupObjects.PregnancyOutcome).ToString() + "03"
                End Get
            End Property

#End Region

        End Class



        Public NotInheritable Class TransferReasonID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property Expensing() As String
                Get
                    Return CShort(LookupObjects.TransferReasonID).ToString() + "EXP"
                End Get
            End Property

            Public ReadOnly Property Dispensing() As String
                Get
                    Return CShort(LookupObjects.TransferReasonID).ToString() + "DIS"
                End Get
            End Property



#End Region

        End Class

        Public NotInheritable Class MappedTypeID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "


            Public ReadOnly Property Department() As String
                Get
                    Return CShort(LookupObjects.MappedType).ToString() + "01"
                End Get
            End Property

            Public ReadOnly Property FundSource() As String
                Get
                    Return CShort(LookupObjects.MappedType).ToString() + "02"
                End Get
            End Property


            Public ReadOnly Property Account() As String
                Get
                    Return CShort(LookupObjects.MappedType).ToString() + "03"
                End Get
            End Property

            Public ReadOnly Property Family() As String
                Get
                    Return CShort(LookupObjects.MappedType).ToString() + "04"
                End Get
            End Property

            Public ReadOnly Property GenProdPostingGroup() As String
                Get
                    Return CShort(LookupObjects.MappedType).ToString() + "05"
                End Get
            End Property



#End Region

        End Class

        Public NotInheritable Class IntegrationAgentID

#Region " Constructor "
            Public Sub New()
            End Sub
#End Region

#Region " Properties "

            Public ReadOnly Property FinMonitor() As String
                Get
                    Return CShort(LookupObjects.IntegrationAgent).ToString() + "FIN"
                End Get
            End Property

            Public ReadOnly Property NAV() As String
                Get
                    Return CShort(LookupObjects.IntegrationAgent).ToString() + "NAV"
                End Get
            End Property

            Public ReadOnly Property HAMWE() As String
                Get
                    Return CShort(LookupObjects.IntegrationAgent).ToString() + "HAMWE"
                End Get
            End Property

            Public ReadOnly Property JOLIS() As String
                Get
                    Return CShort(LookupObjects.IntegrationAgent).ToString() + "JOLIS"
                End Get
            End Property

            Public ReadOnly Property AFROSMS() As String
                Get
                    Return CShort(LookupObjects.IntegrationAgent).ToString() + "AFRO"
                End Get
            End Property

            Public ReadOnly Property TMCG() As String
                Get
                    Return CShort(LookupObjects.IntegrationAgent).ToString() + "TMCG"
                End Get
            End Property

            Public ReadOnly Property SMART As String
                Get
                    Return CShort(LookupObjects.IntegrationAgent).ToString() + "SMART"
                End Get
            End Property
#End Region

        End Class

    End Namespace

End Namespace

Namespace SetupData

#Region " Options "

#Region " Options "

    Public Class InitOptions : Inherits FileData
        Implements IFileData, IDisposable

#Region " Fields "

        Private oAppData As New AppData()
        Private m_Path As String = oAppData.UserDirectory + "\Options.bin"

        Private Shared m_StartUpWindow As String = String.Empty
        Private Shared m_BackupFolder As String = String.Empty
        Private Shared m_RestoreFolder As String = String.Empty
        Private Shared m_UserIdleDuration As Integer = GetUserIdleDuration()
        Private Shared m_AlertCheckPeriod As Integer = 2
        Private Shared m_AlertSoundOn As Boolean = True
        Private Shared m_SmartCardFolder As String = String.Empty

        Private Shared m_SearchCustomInsertCharacter As Char = " "c
        Private Shared m_SearchCustomInsertLength As Integer = 350
        Private Shared m_SearchCustomInsertPosition As Integer = 75

        Private Shared m_LoadBillCustomersAtStart As Boolean
        Private Shared m_LoadLabTestsAtStart As Boolean
        Private Shared m_LoadCardiologyExaminationsAtStart As Boolean

        Private Shared m_LoadRadiologyExaminationsAtStart As Boolean
        Private Shared m_LoadDrugsAtStart As Boolean
        Private Shared m_LoadConsumableItemsAtStart As Boolean
        Private Shared m_LoadProceduresAtStart As Boolean
        Private Shared m_LoadDentalServicesAtStart As Boolean
        Private Shared m_LoadDiseasesAtStart As Boolean
        Private Shared m_LoadTheatreServicesAtStart As Boolean
        Private Shared m_LoadPatientFingerprintsAtStart As Boolean

        Private Shared m_ForceVisitBillConfirmation As Boolean = True
        Private Shared m_PromptForExtraChargeRegistration As Boolean

        Private Shared m_EnableOnlyPrescExtrasConsAtSelfRequest As Boolean

        Private Shared m_OpenCashierAfterSelfRequest As Boolean
        Private Shared m_OpenPharmacyAfterCashier As Boolean
        Private Shared m_EnableChatNotification As Boolean
        Private Shared m_EnableViewCashCollections As Boolean
        '


        Private Shared m_ForceFingerprintCapture As Boolean
        Private Shared m_VisitCategory As String = String.Empty
        Private Shared m_Location As String = String.Empty
        Private Shared m_AssociatedBillCustomer As String = String.Empty
        Private Shared m_PharmacyPrinterPaperSize As String = String.Empty
        Private Shared m_CashierPrinterPaperSize As String = String.Empty
        Private Shared m_DefaultSelfRequestNo As String = String.Empty
        Private Shared m_BranchName As String = String.Empty
        Private Shared m_SMSNotificationPoint As String = String.Empty
        Private Shared m_IssueLocations As String = String.Empty
        Private Shared m_ReceiptNoLocked As Boolean = True
        Private Shared m_RefundNoLocked As Boolean = True
        Private Shared m_QuotationNoLocked As Boolean = True
        Private Shared m_InvoiceNoLocked As Boolean = True
        Private Shared m_TranNoLocked As Boolean = True
        Private Shared m_PatientNoLocked As Boolean
        Private Shared m_AccountNoLocked As Boolean
        Private Shared m_VisitNoLocked As Boolean = True
        Private Shared m_SpecimenNoLocked As Boolean = True
        Private Shared m_AdmissionNoLocked As Boolean
        Private Shared m_RoundNoLocked As Boolean = True
        Private Shared m_ExpenditureNoLocked As Boolean = True
        Private Shared m_IncomeNoLocked As Boolean = True
        Private Shared m_InsuranceNoLocked As Boolean
        Private Shared m_PolicyNoLocked As Boolean
        Private Shared m_CompanyNoLocked As Boolean
        Private Shared m_SupplierNoLocked As Boolean
        Private Shared m_ClaimNoLocked As Boolean = True
        Private Shared m_ExtraBillNoLocked As Boolean = True
        Private Shared m_OutwardNoLocked As Boolean = True
        Private Shared m_MedicalCardNoLocked As Boolean = True
        Private Shared m_MainMemberNoLocked As Boolean = True
        Private Shared m_PurchaseOrderNoLocked As Boolean = True
        Private Shared m_ServiceInvoiceNoLocked As Boolean = True

        Private Shared m_GRNNoLocked As Boolean = True
        Private Shared m_OrderNoLocked As Boolean = True
        Private Shared m_TransferNoLocked As Boolean = True
        Private Shared m_StaffNoLocked As Boolean = True
        Private Shared m_DrugNoLocked As Boolean = True
        Private Shared m_ConsumableNoLocked As Boolean = True

        Private Shared m_BedNoLocked As Boolean = True
        Private Shared m_ExtraChargeItemCodeLocked As Boolean = True
        Private Shared m_PackageNoLocked As Boolean = True
        Private Shared m_ICUCodeLocked As Boolean = True
        Private Shared m_PathologyExamCodeLocked As Boolean = True
        Private Shared m_MaternityCodeLocked As Boolean = True
        Private Shared m_DentalCodeLocked As Boolean = True
        Private Shared m_NonMedicalItemCodeLocked As Boolean = True
        Private Shared m_OpticalCodeLocked As Boolean = True
        Private Shared m_ProcedureCodeLocked As Boolean = True
        Private Shared m_RadiologyExamNoLocked As Boolean = True
        Private Shared m_ServiceCodeLocked As Boolean = True
        Private Shared m_TestCodeLocked As Boolean = True
        Private Shared m_EyeCodeLocked As Boolean = True
        Private Shared m_CardiologyExamCodeLocked As Boolean = True
        Private Shared m_TheatreCodeLocked As Boolean = True
        
        Private Shared m_ToBillServiceFeeLocked As Boolean = True

        Private Shared m_Voice As Integer = 0
        Private Shared m_RoomName As String = String.Empty
        Private Shared m_Community As String = String.Empty
        Private Shared m_ServicePointQueue As String = String.Empty

#End Region

#Region " Properties "

        Public Property Path() As String
            Get
                Return m_Path
            End Get
            Set(Value As String)
                m_Path = Value
            End Set
        End Property

        Public Property StartUpWindow() As String
            Get
                Return m_StartUpWindow
            End Get
            Set(Value As String)
                m_StartUpWindow = Value
            End Set
        End Property

        Public Property BackupFolder() As String
            Get
                Return m_BackupFolder
            End Get
            Set(Value As String)
                m_BackupFolder = Value
            End Set
        End Property

        Public Property RestoreFolder() As String
            Get
                Return m_RestoreFolder
            End Get
            Set(Value As String)
                m_RestoreFolder = Value
            End Set
        End Property

        Public Property UserIdleDuration() As Integer
            Get
                Return m_UserIdleDuration
            End Get
            Set(value As Integer)
                m_UserIdleDuration = value
            End Set
        End Property

        Public Property AlertCheckPeriod() As Integer
            Get
                Return m_AlertCheckPeriod
            End Get
            Set(value As Integer)
                m_AlertCheckPeriod = value
            End Set
        End Property

        Public Property AlertSoundOn() As Boolean
            Get
                Return m_AlertSoundOn
            End Get
            Set(value As Boolean)
                m_AlertSoundOn = value
            End Set
        End Property

        Public Property SmartCardFolder() As String
            Get
                Return m_SmartCardFolder
            End Get
            Set(Value As String)
                m_SmartCardFolder = Value
            End Set
        End Property

        Public Property SearchCustomInsertCharacter As Char
            Get
                Return m_SearchCustomInsertCharacter
            End Get
            Set(value As Char)
                m_SearchCustomInsertCharacter = value
            End Set
        End Property

        Public Property SearchCustomInsertLength() As Integer
            Get
                Return m_SearchCustomInsertLength
            End Get
            Set(value As Integer)
                m_SearchCustomInsertLength = value
            End Set
        End Property

        Public Property SearchCustomInsertPosition() As Integer
            Get
                Return m_SearchCustomInsertPosition
            End Get
            Set(value As Integer)
                m_SearchCustomInsertPosition = value
            End Set
        End Property

        Public Property LoadBillCustomersAtStart() As Boolean
            Get
                Return m_LoadBillCustomersAtStart
            End Get
            Set(value As Boolean)
                m_LoadBillCustomersAtStart = value
            End Set
        End Property

        Public Property LoadLabTestsAtStart() As Boolean
            Get
                Return m_LoadLabTestsAtStart
            End Get
            Set(value As Boolean)
                m_LoadLabTestsAtStart = value
            End Set
        End Property


        Public Property LoadCardiologyExaminationsAtStart() As Boolean
            Get
                Return m_LoadCardiologyExaminationsAtStart
            End Get
            Set(value As Boolean)
                m_LoadCardiologyExaminationsAtStart = value
            End Set
        End Property

        Public Property LoadRadiologyExaminationsAtStart() As Boolean
            Get
                Return m_LoadRadiologyExaminationsAtStart
            End Get
            Set(value As Boolean)
                m_LoadRadiologyExaminationsAtStart = value
            End Set
        End Property

        Public Property LoadDrugsAtStart() As Boolean
            Get
                Return m_LoadDrugsAtStart
            End Get
            Set(value As Boolean)
                m_LoadDrugsAtStart = value
            End Set
        End Property

        Public Property LoadConsumableItemsAtStart() As Boolean
            Get
                Return m_LoadConsumableItemsAtStart
            End Get
            Set(value As Boolean)
                m_LoadConsumableItemsAtStart = value
            End Set
        End Property

        Public Property LoadProceduresAtStart() As Boolean
            Get
                Return m_LoadProceduresAtStart
            End Get
            Set(value As Boolean)
                m_LoadProceduresAtStart = value
            End Set
        End Property

        Public Property LoadDentalServicesAtStart() As Boolean
            Get
                Return m_LoadDentalServicesAtStart
            End Get
            Set(value As Boolean)
                m_LoadDentalServicesAtStart = value
            End Set
        End Property

        Public Property LoadDiseasesAtStart() As Boolean
            Get
                Return m_LoadDiseasesAtStart
            End Get
            Set(value As Boolean)
                m_LoadDiseasesAtStart = value
            End Set
        End Property

        Public Property LoadTheatreServicesAtStart() As Boolean
            Get
                Return m_LoadTheatreServicesAtStart
            End Get
            Set(value As Boolean)
                m_LoadTheatreServicesAtStart = value
            End Set
        End Property

        Public Property LoadPatientFingerprintsAtStart() As Boolean
            Get
                Return m_LoadPatientFingerprintsAtStart
            End Get
            Set(value As Boolean)
                m_LoadPatientFingerprintsAtStart = value
            End Set
        End Property

        Public Property ForceVisitBillConfirmation() As Boolean
            Get
                Return m_ForceVisitBillConfirmation
            End Get
            Set(value As Boolean)
                m_ForceVisitBillConfirmation = value
            End Set
        End Property

        Public Property PromptForExtraChargeRegistration() As Boolean
            Get
                Return m_PromptForExtraChargeRegistration
            End Get
            Set(value As Boolean)
                m_PromptForExtraChargeRegistration = value
            End Set
        End Property


        Public Property OpenCashierAfterSelfRequest() As Boolean
            Get
                Return m_OpenCashierAfterSelfRequest
            End Get
            Set(value As Boolean)
                m_OpenCashierAfterSelfRequest = value
            End Set
        End Property

    
        Public Property OpenPharmacyAfterCashier() As Boolean
            Get
                Return m_OpenPharmacyAfterCashier
            End Get
            Set(value As Boolean)
                m_OpenPharmacyAfterCashier = value
            End Set
        End Property


        Public Property EnableChatNotification() As Boolean
            Get
                Return m_EnableChatNotification
            End Get
            Set(value As Boolean)
                m_EnableChatNotification = value
            End Set
        End Property

        Public Property EnableViewCashCollections() As Boolean
            Get
                Return m_EnableViewCashCollections
            End Get
            Set(value As Boolean)
                m_EnableViewCashCollections = value
            End Set
        End Property

        Public Property EnableOnlyPrescExtrasConsAtSelfRequest() As Boolean
            Get
                Return m_EnableOnlyPrescExtrasConsAtSelfRequest
            End Get
            Set(value As Boolean)
                m_EnableOnlyPrescExtrasConsAtSelfRequest = value
            End Set
        End Property

        Public Property ForceFingerprintCapture() As Boolean
            Get
                Return m_ForceFingerprintCapture
            End Get
            Set(value As Boolean)
                m_ForceFingerprintCapture = value
            End Set
        End Property


        Public Property VisitCategory() As String
            Get
                Return m_VisitCategory
            End Get
            Set(Value As String)
                m_VisitCategory = Value
            End Set
        End Property

        Public Property Location() As String
            Get
                Return m_Location
            End Get
            Set(Value As String)
                m_Location = Value
            End Set
        End Property

        Public Property AssociatedBillCustomer() As String
            Get
                Return m_AssociatedBillCustomer
            End Get
            Set(Value As String)
                m_AssociatedBillCustomer = Value
            End Set
        End Property

        Public Property PharmacyPrinterPaperSize() As String
            Get
                Return m_PharmacyPrinterPaperSize
            End Get
            Set(Value As String)
                m_PharmacyPrinterPaperSize = Value
            End Set
        End Property

        Public Property CashierPrinterPaperSize() As String
            Get
                Return m_CashierPrinterPaperSize
            End Get
            Set(Value As String)
                m_CashierPrinterPaperSize = Value
            End Set
        End Property

        Public Property BranchName() As String
            Get
                Return m_BranchName
            End Get
            Set(value As String)
                m_BranchName = value
            End Set
        End Property

        Public Property SMSNotificationPoint() As String
            Get
                Return m_SMSNotificationPoint
            End Get
            Set(ByVal value As String)
                m_SMSNotificationPoint = value
            End Set
        End Property

        Public Property DefaultSelfRequestNo() As String
            Get
                Return m_DefaultSelfRequestNo
            End Get
            Set(value As String)
                m_DefaultSelfRequestNo = value
            End Set
        End Property

        Public Property DoctorIssueLocations() As String
            Get
                Return m_IssueLocations
            End Get
            Set(value As String)
                m_IssueLocations = value
            End Set
        End Property

        Public Property ReceiptNoLocked() As Boolean
            Get
                Return m_ReceiptNoLocked
            End Get
            Set(value As Boolean)
                m_ReceiptNoLocked = value
            End Set
        End Property

        Public Property RefundNoLocked() As Boolean
            Get
                Return m_RefundNoLocked
            End Get
            Set(value As Boolean)
                m_RefundNoLocked = value
            End Set
        End Property

        Public Property QuotationNoLocked() As Boolean
            Get
                Return m_QuotationNoLocked
            End Get
            Set(value As Boolean)
                m_QuotationNoLocked = value
            End Set
        End Property

        Public Property InvoiceNoLocked() As Boolean
            Get
                Return m_InvoiceNoLocked
            End Get
            Set(value As Boolean)
                m_InvoiceNoLocked = value
            End Set
        End Property

        Public Property TranNoLocked() As Boolean
            Get
                Return m_TranNoLocked
            End Get
            Set(value As Boolean)
                m_TranNoLocked = value
            End Set
        End Property

        Public Property PatientNoLocked() As Boolean
            Get
                Return m_PatientNoLocked
            End Get
            Set(value As Boolean)
                m_PatientNoLocked = value
            End Set
        End Property

        Public Property AccountNoLocked() As Boolean
            Get
                Return m_AccountNoLocked
            End Get
            Set(value As Boolean)
                m_AccountNoLocked = value
            End Set
        End Property

        Public Property VisitNoLocked() As Boolean
            Get
                Return m_VisitNoLocked
            End Get
            Set(value As Boolean)
                m_VisitNoLocked = value
            End Set
        End Property

        Public Property SpecimenNoLocked() As Boolean
            Get
                Return m_SpecimenNoLocked
            End Get
            Set(value As Boolean)
                m_SpecimenNoLocked = value
            End Set
        End Property

        Public Property AdmissionNoLocked() As Boolean
            Get
                Return m_AdmissionNoLocked
            End Get
            Set(value As Boolean)
                m_AdmissionNoLocked = value
            End Set
        End Property

        Public Property RoundNoLocked() As Boolean
            Get
                Return m_RoundNoLocked
            End Get
            Set(value As Boolean)
                m_RoundNoLocked = value
            End Set
        End Property

        Public Property ExpenditureNoLocked() As Boolean
            Get
                Return m_ExpenditureNoLocked
            End Get
            Set(value As Boolean)
                m_ExpenditureNoLocked = value
            End Set
        End Property

        Public Property IncomeNoLocked() As Boolean
            Get
                Return m_IncomeNoLocked
            End Get
            Set(value As Boolean)
                m_IncomeNoLocked = value
            End Set
        End Property

        Public Property InsuranceNoLocked() As Boolean
            Get
                Return m_InsuranceNoLocked
            End Get
            Set(value As Boolean)
                m_InsuranceNoLocked = value
            End Set
        End Property

        Public Property PolicyNoLocked() As Boolean
            Get
                Return m_PolicyNoLocked
            End Get
            Set(value As Boolean)
                m_PolicyNoLocked = value
            End Set
        End Property

        Public Property CompanyNoLocked() As Boolean
            Get
                Return m_CompanyNoLocked
            End Get
            Set(value As Boolean)
                m_CompanyNoLocked = value
            End Set
        End Property

        Public Property SupplierNoLocked() As Boolean
            Get
                Return m_SupplierNoLocked
            End Get
            Set(value As Boolean)
                m_SupplierNoLocked = value
            End Set
        End Property

        Public Property ClaimNoLocked() As Boolean
            Get
                Return m_ClaimNoLocked
            End Get
            Set(value As Boolean)
                m_ClaimNoLocked = value
            End Set
        End Property

        Public Property ExtraBillNoLocked() As Boolean
            Get
                Return m_ExtraBillNoLocked
            End Get
            Set(value As Boolean)
                m_ExtraBillNoLocked = value
            End Set
        End Property

        Public Property OutwardNoLocked() As Boolean
            Get
                Return m_OutwardNoLocked
            End Get
            Set(value As Boolean)
                m_OutwardNoLocked = value
            End Set
        End Property

        Public Property MedicalCardNoLocked() As Boolean
            Get
                Return m_MedicalCardNoLocked
            End Get
            Set(value As Boolean)
                m_MedicalCardNoLocked = value
            End Set
        End Property

        Public Property MainMemberNoLocked() As Boolean
            Get
                Return m_MainMemberNoLocked
            End Get
            Set(value As Boolean)
                m_MainMemberNoLocked = value
            End Set
        End Property

        Public Property PurchaseOrderNoLocked() As Boolean
            Get
                Return m_PurchaseOrderNoLocked
            End Get
            Set(value As Boolean)
                m_PurchaseOrderNoLocked = value
            End Set
        End Property

        Public Property ServiceInvoiceNoLocked() As Boolean
            Get
                Return m_ServiceInvoiceNoLocked
            End Get
            Set(value As Boolean)
                m_ServiceInvoiceNoLocked = value
            End Set
        End Property

        Public Property GRNNoLocked() As Boolean
            Get
                Return m_GRNNoLocked
            End Get
            Set(value As Boolean)
                m_GRNNoLocked = value
            End Set
        End Property

        Public Property OrderNoLocked() As Boolean
            Get
                Return m_OrderNoLocked
            End Get
            Set(value As Boolean)
                m_OrderNoLocked = value
            End Set
        End Property

        Public Property TransferNoLocked() As Boolean
            Get
                Return m_TransferNoLocked
            End Get
            Set(value As Boolean)
                m_TransferNoLocked = value
            End Set
        End Property

        Public Property StaffNoLocked() As Boolean
            Get
                Return m_StaffNoLocked
            End Get
            Set(value As Boolean)
                m_StaffNoLocked = value
            End Set
        End Property

        Public Property DrugNoLocked() As Boolean
            Get
                Return m_DrugNoLocked
            End Get
            Set(value As Boolean)
                m_DrugNoLocked = value
            End Set
        End Property

        Public Property ConsumableNoLocked() As Boolean
            Get
                Return m_ConsumableNoLocked
            End Get
            Set(value As Boolean)
                m_ConsumableNoLocked = value
            End Set
        End Property

        Public Property BedNoLocked() As Boolean
            Get
                Return m_BedNoLocked
            End Get
            Set(value As Boolean)
                m_BedNoLocked = value
            End Set
        End Property

        Public Property ExtraChargeItemCodeLocked() As Boolean
            Get
                Return m_ExtraChargeItemCodeLocked
            End Get
            Set(value As Boolean)
                m_ExtraChargeItemCodeLocked = value
            End Set
        End Property

        Public Property PackageNoLocked() As Boolean
            Get
                Return m_PackageNoLocked
            End Get
            Set(value As Boolean)
                m_PackageNoLocked = value
            End Set
        End Property

        Public Property ICUCodeLocked() As Boolean
            Get
                Return m_ICUCodeLocked
            End Get
            Set(value As Boolean)
                m_ICUCodeLocked = value
            End Set
        End Property


        Public Property PathologyExamCodeLocked() As Boolean
            Get
                Return m_PathologyExamCodeLocked
            End Get
            Set(value As Boolean)
                m_PathologyExamCodeLocked = value
            End Set
        End Property

        Public Property MaternityCodeLocked() As Boolean
            Get
                Return m_MaternityCodeLocked
            End Get
            Set(value As Boolean)
                m_MaternityCodeLocked = value
            End Set
        End Property

        Public Property DentalCodeLocked() As Boolean
            Get
                Return m_DentalCodeLocked
            End Get
            Set(value As Boolean)
                m_DentalCodeLocked = value
            End Set
        End Property

        Public Property NonMedicalItemCodeLocked() As Boolean
            Get
                Return m_NonMedicalItemCodeLocked
            End Get
            Set(value As Boolean)
                m_NonMedicalItemCodeLocked = value
            End Set
        End Property

        Public Property OpticalCodeLocked() As Boolean
            Get
                Return m_OpticalCodeLocked
            End Get
            Set(value As Boolean)
                m_OpticalCodeLocked = value
            End Set
        End Property

        Public Property ProcedureCodeLocked() As Boolean
            Get
                Return m_ProcedureCodeLocked
            End Get
            Set(value As Boolean)
                m_ProcedureCodeLocked = value
            End Set
        End Property

        Public Property RadiologyExamNoLocked() As Boolean
            Get
                Return m_RadiologyExamNoLocked
            End Get
            Set(value As Boolean)
                m_RadiologyExamNoLocked = value
            End Set
        End Property

        Public Property ServiceCodeLocked() As Boolean
            Get
                Return m_ServiceCodeLocked
            End Get
            Set(value As Boolean)
                m_ServiceCodeLocked = value
            End Set
        End Property

        Public Property TestCodeLocked() As Boolean
            Get
                Return m_TestCodeLocked
            End Get
            Set(value As Boolean)
                m_TestCodeLocked = value
            End Set
        End Property

        Public Property EyeCodeLocked() As Boolean
            Get
                Return m_EyeCodeLocked
            End Get
            Set(value As Boolean)
                m_EyeCodeLocked = value
            End Set
        End Property

        Public Property CardiologyExamCodeLocked() As Boolean
            Get
                Return m_CardiologyExamCodeLocked
            End Get
            Set(value As Boolean)
                m_CardiologyExamCodeLocked = value
            End Set
        End Property

        Public Property TheatreCodeLocked() As Boolean
            Get
                Return m_TestCodeLocked
            End Get
            Set(value As Boolean)
                m_TestCodeLocked = value
            End Set
        End Property

        Public Property ToBillServiceFeeLocked() As Boolean
            Get
                Return m_ToBillServiceFeeLocked
            End Get
            Set(value As Boolean)
                m_ToBillServiceFeeLocked = value
            End Set
        End Property

        Public Property Voice() As Integer
            Get
                Return m_Voice
            End Get
            Set(value As Integer)
                m_Voice = value
            End Set
        End Property

        Public Property RoomName() As String
            Get
                Return m_RoomName
            End Get
            Set(value As String)
                m_RoomName = value
            End Set
        End Property

        Public Property Community() As String
            Get
                Return m_Community
            End Get
            Set(value As String)
                m_Community = value
            End Set
        End Property

        Public Property ServicePointQueue() As String
            Get
                Return m_ServicePointQueue
            End Get
            Set(value As String)
                m_ServicePointQueue = value
            End Set
        End Property


#End Region

#Region " Constructors "

        Public Sub New()
            Me.Read(Me.Path)
        End Sub

#End Region

#Region " Structures "

        <Serializable()> Private Structure LoginData

            Friend _StartUpWindow As String
            Friend _BackupFolder As String
            Friend _RestoreFolder As String
            Friend _UserIdleDuration As Integer
            Friend _AlertCheckPeriod As Integer
            Friend _AlertSoundOn As Boolean
            Friend _SmartCardFolder As String

            Friend _SearchCustomInsertCharacter As Char
            Friend _SearchCustomInsertLength As Integer
            Friend _SearchCustomInsertPosition As Integer

            Friend _LoadBillCustomersAtStart As Boolean
            Friend _LoadLabTestsAtStart As Boolean
            Friend _LoadCardiologyExaminationsAtStart As Boolean

            Friend _LoadRadiologyExaminationsAtStart As Boolean
            Friend _LoadDrugsAtStart As Boolean
            Friend _LoadConsumableItemsAtStart As Boolean
            Friend _LoadProceduresAtStart As Boolean
            Friend _LoadDentalServicesAtStart As Boolean
            Friend _LoadDiseasesAtStart As Boolean
            Friend _LoadTheatreServicesAtStart As Boolean
            Friend _LoadPatientFingerprintsAtStart As Boolean

            Friend _ForceVisitBillConfirmation As Boolean
            Friend _PromptForExtraChargeRegistration As Boolean
            
            Friend _OpenCashierAfterSelfRequest As Boolean
            Friend _OpenPharmacyAfterCashier As Boolean
            Friend _EnableChatNotification As Boolean
            Friend _EnableViewCashCollections As Boolean
            Friend _EnableOnlyPrescExtrasConsAtSelfRequest As Boolean


            Friend _ForceFingerprintCapture As Boolean
            Friend _VisitCategory As String
            Friend _Location As String
            Friend _AssociatedBillCustomer As String
            Friend _PharmacyPrinterPaperSize As String
            Friend _CashierPrinterPaperSize As String
            Friend _DefaultSelfRequestNo As String
            Friend _BranchName As String
            Friend _SMSNotificationPoint As String
            Friend _DoctorIssueLocations As String


            Friend _ReceiptNoLocked As Boolean
            Friend _RefundNoLocked As Boolean
            Friend _QuotationNoLocked As Boolean
            Friend _InvoiceNoLocked As Boolean
            Friend _TranNoLocked As Boolean
            Friend _PatientNoLocked As Boolean
            Friend _AccountNoLocked As Boolean
            Friend _VisitNoLocked As Boolean
            Friend _SpecimenNoLocked As Boolean
            Friend _AdmissionNoLocked As Boolean
            Friend _RoundNoLocked As Boolean
            Friend _ExpenditureNoLocked As Boolean
            Friend _IncomeNoLocked As Boolean
            Friend _InsuranceNoLocked As Boolean
            Friend _PolicyNoLocked As Boolean
            Friend _CompanyNoLocked As Boolean
            Friend _SupplierNoLocked As Boolean
            Friend _ClaimNoLocked As Boolean
            Friend _ExtraBillNoLocked As Boolean
            Friend _OutwardNoLocked As Boolean
            Friend _MedicalCardNoLocked As Boolean
            Friend _MainMemberNoLocked As Boolean
            Friend _PurchaseOrderNoLocked As Boolean
            Friend _ServiceInvoiceNoLocked As Boolean


            Friend _GRNNoLocked As Boolean
            Friend _OrderNoLocked As Boolean
            Friend _TransferNoLocked As Boolean
            Friend _StaffNoLocked As Boolean
            Friend _DrugNoLocked As Boolean
            Friend _ConsumableNoLocked As Boolean


            Friend _BedNoLocked As Boolean
            Friend _ExtraChargeItemCodeLocked As Boolean
            Friend _PackageNoLocked As Boolean
            Friend _ICUCodeLocked As Boolean
            Friend _PathologyExamCodeLocked As Boolean
            Friend _MaternityCodeLocked As Boolean
            Friend _DentalCodeLocked As Boolean
            Friend _NonMedicalItemCodeLocked As Boolean
            Friend _OpticalCodeLocked As Boolean
            Friend _ProcedureCodeLocked As Boolean
            Friend _RadiologyExamNoLocked As Boolean
            Friend _ServiceCodeLocked As Boolean
            Friend _TestCodeLocked As Boolean
            Friend _EyeCodeLocked As Boolean
            Friend _CardiologyExamCodeLocked As Boolean
            Friend _TheatreCodeLocked As Boolean

            Friend _ToBillServiceFeeLocked As Boolean

            Friend _Voice As Integer
            Friend _RoomName As String
            Friend _Community As String
            Friend _ServicePointQueue As String

        End Structure

#End Region

#Region " Methods "

        Protected Overrides Sub WriteData() Implements IFileData.WriteData

            Dim oLoginData As New LoginData()

            With oLoginData

                ._StartUpWindow = Me.StartUpWindow
                ._BackupFolder = Me.BackupFolder
                ._RestoreFolder = Me.RestoreFolder
                ._UserIdleDuration = Me.UserIdleDuration
                ._AlertCheckPeriod = Me.AlertCheckPeriod
                ._AlertSoundOn = Me.AlertSoundOn
                ._SmartCardFolder = Me.SmartCardFolder

                ._SearchCustomInsertCharacter = Me.SearchCustomInsertCharacter
                ._SearchCustomInsertLength = Me.SearchCustomInsertLength
                ._SearchCustomInsertPosition = Me.SearchCustomInsertPosition

                ._LoadBillCustomersAtStart = Me.LoadBillCustomersAtStart
                ._LoadLabTestsAtStart = Me.LoadLabTestsAtStart
                ._LoadCardiologyExaminationsAtStart = Me.LoadCardiologyExaminationsAtStart

                ._LoadRadiologyExaminationsAtStart = Me.LoadRadiologyExaminationsAtStart
                ._LoadDrugsAtStart = Me.LoadDrugsAtStart
                ._LoadConsumableItemsAtStart = Me.LoadConsumableItemsAtStart
                ._LoadProceduresAtStart = Me.LoadProceduresAtStart
                ._LoadDentalServicesAtStart = Me.LoadDentalServicesAtStart
                ._LoadDiseasesAtStart = Me.LoadDiseasesAtStart
                ._LoadTheatreServicesAtStart = Me.LoadTheatreServicesAtStart
                ._LoadPatientFingerprintsAtStart = Me.LoadPatientFingerprintsAtStart

                ._ForceVisitBillConfirmation = Me.ForceVisitBillConfirmation
                ._PromptForExtraChargeRegistration = Me.PromptForExtraChargeRegistration
                ._OpenCashierAfterSelfRequest = Me.OpenCashierAfterSelfRequest
                ._OpenPharmacyAfterCashier = Me.OpenPharmacyAfterCashier
                ._EnableChatNotification = Me.EnableChatNotification
                ._EnableViewCashCollections = Me.EnableViewCashCollections
                ._EnableOnlyPrescExtrasConsAtSelfRequest = Me.EnableOnlyPrescExtrasConsAtSelfRequest

                ._ForceFingerprintCapture = Me.ForceFingerprintCapture
                ._VisitCategory = Me.VisitCategory
                ._Location = Me.Location
                ._AssociatedBillCustomer = Me.AssociatedBillCustomer
                ._PharmacyPrinterPaperSize = Me.PharmacyPrinterPaperSize
                ._CashierPrinterPaperSize = Me.CashierPrinterPaperSize
                ._DoctorIssueLocations = Me.DoctorIssueLocations
                ._BranchName = Me.BranchName
                ._SMSNotificationPoint = Me.SMSNotificationPoint
                ._DefaultSelfRequestNo = Me.DefaultSelfRequestNo
                ._ReceiptNoLocked = Me.ReceiptNoLocked
                ._RefundNoLocked = Me.RefundNoLocked
                ._QuotationNoLocked = Me.QuotationNoLocked
                ._InvoiceNoLocked = Me.InvoiceNoLocked
                ._TranNoLocked = Me.TranNoLocked
                ._PatientNoLocked = Me.PatientNoLocked
                ._AccountNoLocked = Me.AccountNoLocked
                ._VisitNoLocked = Me.VisitNoLocked
                ._SpecimenNoLocked = Me.SpecimenNoLocked
                ._AdmissionNoLocked = Me.AdmissionNoLocked
                ._RoundNoLocked = Me.RoundNoLocked
                ._ExpenditureNoLocked = Me.ExpenditureNoLocked
                ._IncomeNoLocked = Me.IncomeNoLocked
                ._InsuranceNoLocked = Me.InsuranceNoLocked
                ._PolicyNoLocked = Me.PolicyNoLocked
                ._CompanyNoLocked = Me.CompanyNoLocked
                ._SupplierNoLocked = Me.SupplierNoLocked
                ._ClaimNoLocked = Me.ClaimNoLocked
                ._ExtraBillNoLocked = Me.ExtraBillNoLocked
                ._OutwardNoLocked = Me.OutwardNoLocked
                ._MedicalCardNoLocked = Me.MedicalCardNoLocked
                ._MainMemberNoLocked = Me.MainMemberNoLocked
                ._PurchaseOrderNoLocked = Me.PurchaseOrderNoLocked
                ._ServiceInvoiceNoLocked = Me.ServiceInvoiceNoLocked
                ._GRNNoLocked = Me.GRNNoLocked
                ._OrderNoLocked = Me.OrderNoLocked
                ._TransferNoLocked = Me.TransferNoLocked
                ._StaffNoLocked = Me.StaffNoLocked
                ._DrugNoLocked = Me.DrugNoLocked
                ._ConsumableNoLocked = Me.ConsumableNoLocked
                ._BedNoLocked = Me.BedNoLocked
                ._ExtraChargeItemCodeLocked = Me.ExtraChargeItemCodeLocked
                ._PackageNoLocked = Me.PackageNoLocked
                ._ICUCodeLocked = Me.ICUCodeLocked
                ._PathologyExamCodeLocked = Me.PackageNoLocked
                ._MaternityCodeLocked = Me.MaternityCodeLocked
                ._DentalCodeLocked = Me.DentalCodeLocked
                ._NonMedicalItemCodeLocked = Me.NonMedicalItemCodeLocked
                ._OpticalCodeLocked = Me.OpticalCodeLocked
                ._ProcedureCodeLocked = Me.ProcedureCodeLocked
                ._RadiologyExamNoLocked = Me.RadiologyExamNoLocked
                ._ServiceCodeLocked = Me.ServiceCodeLocked
                ._TestCodeLocked = Me.TestCodeLocked
                ._EyeCodeLocked = Me.EyeCodeLocked
                ._ServiceCodeLocked = Me.ServiceCodeLocked
                ._TheatreCodeLocked = Me.TheatreCodeLocked
                ._ToBillServiceFeeLocked = Me.ToBillServiceFeeLocked

                ._Voice = Me.Voice
                ._RoomName = Me.RoomName
                ._Community = Me.Community
                ._ServicePointQueue = Me.ServicePointQueue

            End With

            BinSerialize.Serialize(stmData, oLoginData)

        End Sub

        Protected Overrides Sub ReadData() Implements IFileData.ReadData

            Dim oLoginData As New LoginData()

            oLoginData = CType(BinSerialize.Deserialize(stmData), LoginData)

            With oLoginData

                Me.StartUpWindow = ._StartUpWindow
                Me.BackupFolder = ._BackupFolder
                Me.RestoreFolder = ._RestoreFolder
                Me.UserIdleDuration = ._UserIdleDuration
                Me.AlertCheckPeriod = ._AlertCheckPeriod
                Me.AlertSoundOn = ._AlertSoundOn
                Me.SmartCardFolder = ._SmartCardFolder

                Me.SearchCustomInsertCharacter = ._SearchCustomInsertCharacter
                Me.SearchCustomInsertLength = ._SearchCustomInsertLength
                Me.SearchCustomInsertPosition = ._SearchCustomInsertPosition

                Me.LoadBillCustomersAtStart = ._LoadBillCustomersAtStart
                Me.LoadLabTestsAtStart = ._LoadLabTestsAtStart
                Me.LoadCardiologyExaminationsAtStart = ._LoadCardiologyExaminationsAtStart

                Me.LoadRadiologyExaminationsAtStart = ._LoadRadiologyExaminationsAtStart
                Me.LoadDrugsAtStart = ._LoadDrugsAtStart
                Me.LoadConsumableItemsAtStart = ._LoadConsumableItemsAtStart
                Me.LoadProceduresAtStart = ._LoadProceduresAtStart
                Me.LoadDentalServicesAtStart = ._LoadDentalServicesAtStart
                Me.LoadDiseasesAtStart = ._LoadDiseasesAtStart
                Me.LoadTheatreServicesAtStart = ._LoadTheatreServicesAtStart
                Me.LoadPatientFingerprintsAtStart = ._LoadPatientFingerprintsAtStart

                Me.ForceVisitBillConfirmation = ._ForceVisitBillConfirmation
                Me.PromptForExtraChargeRegistration = ._PromptForExtraChargeRegistration

                Me.OpenCashierAfterSelfRequest = ._OpenCashierAfterSelfRequest
                Me.OpenPharmacyAfterCashier = ._OpenPharmacyAfterCashier

                Me.EnableChatNotification = ._EnableChatNotification
                Me.EnableViewCashCollections = ._EnableViewCashCollections
                Me.EnableOnlyPrescExtrasConsAtSelfRequest = ._EnableOnlyPrescExtrasConsAtSelfRequest
                Me.ForceFingerprintCapture = ._ForceFingerprintCapture
                Me.VisitCategory = ._VisitCategory
                Me.Location = ._Location
                Me.AssociatedBillCustomer = ._AssociatedBillCustomer
                Me.PharmacyPrinterPaperSize = ._PharmacyPrinterPaperSize
                Me.CashierPrinterPaperSize = ._CashierPrinterPaperSize
                Me.BranchName = ._BranchName
                Me.SMSNotificationPoint = ._SMSNotificationPoint
                Me.DefaultSelfRequestNo = ._DefaultSelfRequestNo
                Me.DoctorIssueLocations = ._DoctorIssueLocations
                Me.ReceiptNoLocked = ._ReceiptNoLocked
                Me.RefundNoLocked = ._RefundNoLocked
                Me.QuotationNoLocked = ._QuotationNoLocked
                Me.InvoiceNoLocked = ._InvoiceNoLocked
                Me.TranNoLocked = ._TranNoLocked
                Me.PatientNoLocked = ._PatientNoLocked
                Me.AccountNoLocked = ._AccountNoLocked
                Me.VisitNoLocked = ._VisitNoLocked
                Me.SpecimenNoLocked = ._SpecimenNoLocked
                Me.AdmissionNoLocked = ._AdmissionNoLocked
                Me.RoundNoLocked = ._RoundNoLocked
                Me.ExpenditureNoLocked = ._ExpenditureNoLocked
                Me.IncomeNoLocked = ._IncomeNoLocked
                Me.InsuranceNoLocked = ._InsuranceNoLocked
                Me.PolicyNoLocked = ._PolicyNoLocked
                Me.CompanyNoLocked = ._CompanyNoLocked
                Me.SupplierNoLocked = ._SupplierNoLocked
                Me.ClaimNoLocked = ._ClaimNoLocked
                Me.ExtraBillNoLocked = ._ExtraBillNoLocked
                Me.OutwardNoLocked = ._OutwardNoLocked
                Me.MedicalCardNoLocked = ._MedicalCardNoLocked
                Me.MainMemberNoLocked = ._MainMemberNoLocked
                Me.PurchaseOrderNoLocked = ._PurchaseOrderNoLocked
                Me.ServiceInvoiceNoLocked = ._ServiceInvoiceNoLocked

                Me.GRNNoLocked = ._GRNNoLocked
                Me.OrderNoLocked = ._OrderNoLocked
                Me.TransferNoLocked = ._TransferNoLocked
                Me.StaffNoLocked = ._StaffNoLocked
                Me.DrugNoLocked = ._DrugNoLocked
                Me.ConsumableNoLocked = ._ConsumableNoLocked

                Me.BedNoLocked = ._BedNoLocked
                Me.ExtraChargeItemCodeLocked = ._ExtraChargeItemCodeLocked
                Me.PackageNoLocked = ._PackageNoLocked
                Me.ICUCodeLocked = ._ICUCodeLocked
                Me.PackageNoLocked = ._PathologyExamCodeLocked
                Me.MaternityCodeLocked = ._MaternityCodeLocked
                Me.DentalCodeLocked = ._DentalCodeLocked
                Me.NonMedicalItemCodeLocked = ._NonMedicalItemCodeLocked
                Me.OpticalCodeLocked = ._OpticalCodeLocked
                Me.ProcedureCodeLocked = ._ProcedureCodeLocked
                Me.RadiologyExamNoLocked = ._RadiologyExamNoLocked
                Me.ServiceCodeLocked = ._ServiceCodeLocked
                Me.TestCodeLocked = ._TestCodeLocked
                Me.EyeCodeLocked = ._EyeCodeLocked
                Me.ServiceCodeLocked = ._ServiceCodeLocked
                Me.TheatreCodeLocked = ._TheatreCodeLocked

                Me.ToBillServiceFeeLocked = ._ToBillServiceFeeLocked

                Me.Voice = ._Voice
                Me.RoomName = ._RoomName
                Me.Community = ._Community
                Me.ServicePointQueue = ._ServicePointQueue

            End With

        End Sub

#End Region

#Region " Destructors "

        Public Sub Dispose() Implements IDisposable.Dispose
            Me.Write(Me.Path)
            GC.Collect()
        End Sub

#End Region

    End Class

#End Region

#End Region

End Namespace
